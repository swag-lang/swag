****************************************
LANGUAGE ?
****************************************

-------------------------------------
var lazy evaluation
-------------------------------------
callable
https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md
impl AA
{
	func opCall(...)
	{
	}
}
var x: AA
x(10) => x.opCall(10)
-------------------------------------
loop increment
loop reverse
-------------------------------------
is
if a is < 2 and > 3
if a is s32
if a is "toto"
if a is in 2..6
-------------------------------------
not au lieu de !
-------------------------------------
`return au lieu de swag.noreturn
-------------------------------------
code en tant que vrai type
x := #code a := 6
#mixin x
var v: Array'code
v.add(#code a := 5)
v.add(#code @print(a))
#mixin v[0]
#mixin v[1]
-------------------------------------
closure/lambda, pouvoir zaper un paramètre avec ? => closure|&total|(?, depth) ()
-------------------------------------



****************************************
STRANGE
****************************************

-------------------------------------
Syntax étrange macro & alias : Utf8.visitRunes(|r| str)
-------------------------------------
tuple, {x, y: s32} pas possible, car 'x' peut être un type seul {s32, x: s32}
-------------------------------------



****************************************
PENIBLE
****************************************

-------------------------------------
PB du cross compile avec le full compile time exec. BIG BIG BIG !!!
-------------------------------------
Erreur affichées dans les fichiers d'export plutot que dans le code source d'origine
-------------------------------------



****************************************
TODO
****************************************

-------------------------------------
fast math ? (faire les tests de float en u32/U64 comme avant la prise en charge de nan)
-------------------------------------
DebugAllocator
safety, regle de free avec delai
safety, sanitize access to stack/memory
safety, exit stackframe (return local value)
-------------------------------------
on doit exporter les implementation d'interface pour un truc public ?
-------------------------------------
lambda short form in declaration var x: func(s32) = @(x) {}
-------------------------------------
closure & ufcs (exemple 3477)
-------------------------------------
context & tempallocator, y'a vraiment aucun usage dans std, c'est pas normal, faut se pencher sur l'utilisation de ce truc
-------------------------------------
cast interface vers struct (avec safety)
-------------------------------------
llvm debug, pas à jour
- debug lambda capture parameters not visible
- variables local en #[Swag.global]
- mettre les constants
- mettre les enums (void CodeViewDebug::emitStaticConstMemberList())
-------------------------------------



****************************************
CLEAN
****************************************



****************************************
OPTIMS
****************************************

-------------------------------------
InternalGetTlsPtr (Swag.Tls var), le faire une fois pour toute au début de la fonction comme le r0 = @getcontext()
-------------------------------------
setStack/clearstack etc... sans lecture avant return
-------------------------------------
pass orEq/andEq/xOrEq/Div/shift etc en mode Stack StackStack
-------------------------------------
x64 binaryop div, transformer en shift si log2
-------------------------------------
BinOpModuloS32/div/mul immediate mode
-------------------------------------
x64 emit_BinOpInt32/64 etc.. faire un mode immediat pour le côté droit 'and cl, 5'
-------------------------------------
Mul64byVB64 a deux registres ! (binOpPlus/Minus inc pointer)
-------------------------------------
passer/retourner des structs par value si <= 64 bits
-------------------------------------
x64: et si les premiers registres étaient des vrais registres x64 volatiles plutot que des accès indirects à la mémoire ?
rc[0] = r12 etc... chiant
-------------------------------------
