<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<?php include('common/start-head.php'); ?><title>Swag Std.Core</title>
<link rel="icon" type="image/x-icon" href="favicon.ico">
<link rel="stylesheet" type="text/css" href="css/style.css">
<style>

        .container {
            display:        flex;
            flex-wrap:      nowrap;
            flex-direction: row;
            margin:         0px auto;
            padding:        0px;
        }
        .left {
            display:    block;
            overflow-y: scroll;
            width:      500px;
        }
        .leftpage {
            margin:     10px;
        }
        .right {
            display:    block;
            width:      100%;
        }
        .rightpage {
            max-width:  1024px;
            margin:     10px auto;
        }
        @media(min-width: 640px) {
            .container {
                max-width: 640px;
            }
        }
        @media(min-width: 768px) {
            .container {
                max-width: 768px;
            }
        }
        @media(min-width: 1024px) {
            .container {
                max-width: 1024px;
            }
        }
        @media(min-width: 1280px) {
            .container {
                max-width: 1280px;
            }
        }
        @media(min-width: 1536px) {
            .container {
                max-width: 1536px;
            }
        }
        @media screen and (max-width: 600px) {
            .left {
                display: none;
            }
            .rightpage {
                margin:  10px;
            }
        }
            .container {
                height:     100vh;
            }
            .right {
                overflow-y: scroll;
            }
        body {
            margin:         0px;
            line-height:    1.3em;
            font-family:    Segoe UI;
        }
        .container blockquote {
            background-color:   LightYellow;
            border-left:        6px solid Orange;
            margin:             20px;
            margin-left:        50px;
            margin-right:       50px;
            padding:            10px;
        }
        .container a {
            text-decoration: none;
            color:           DoggerBlue;
        }
        .precode a {
            text-decoration: revert;
            color:           inherit;
        }
        .container a:hover {
            text-decoration: underline;
        }
        .container a.src {
            font-size:          90%;
            color:              LightGrey;
        }
        table.item {
            border-collapse:    separate;
            background-color:   Black;
            color:              White;
            width:              100%;
            margin-top:         70px;
            margin-right:       0px;
            font-size:          110%;
        }
        .item td:first-child {
            width:              33%;
            white-space:        nowrap;
        }
        table.enumeration {
            border:             1px solid LightGrey;
            border-collapse:    collapse;
            width:              100%;
            font-size:          90%;
        }
        .enumeration td {
            padding:            6px;
            border:             1px solid LightGrey;
            border-collapse:    collapse;
            min-width:          100px;
        }
        .enumeration td:first-child {
            background-color:   #f8f8f8;
            white-space:        nowrap;
        }
        .container td:last-child {
            width:              100%;
        }
        .left ul {
            list-style-type:    none;
            margin-left:        -20px;
        }
        .titletype {
            font-weight:        normal;
            font-size:          80%;
        }
        .titlelight {
            font-weight:        normal;
        }
        .titlestrong {
            font-weight:        bold;
            font-size:          100%;
        }
        .left h3 {
            background-color:   Black;
            color:              White;
            padding:            6px;
        }
        .right h1 {
            margin-top:         50px;
            margin-bottom:      50px;
        }
        .right h2 {
            margin-top:         35px;
        }
        .srcref {
            text-align:         right;
        }
        .incode {
            background-color:   #eeeeee;
            padding:            2px;
            border: 1px dotted  #cccccc;
        }
        .tdname .incode {
            background-color:   revert;
            padding:            2px;
            border:             revert;
        }
        .addinfos {
            font-size:          90%;
            white-space:        break-spaces;
            overflow-wrap:      break-word;
        }
        .precode {
            background-color:   #eeeeee;
            border:             1px solid LightGrey;
            padding:            10px;
            margin:             20px;
            white-space:        pre;
            overflow-x:         auto;
        }    .SyntaxCode      { color: #7f7f7f; }
    .SyntaxComment   { color: #71a35b; }
    .SyntaxCompiler  { color: #7f7f7f; }
    .SyntaxFunction  { color: #ff6a00; }
    .SyntaxConstant  { color: #3173cd; }
    .SyntaxIntrinsic { color: #b4b44a; }
    .SyntaxType      { color: #3bc3a7; }
    .SyntaxKeyword   { color: #3186cd; }
    .SyntaxLogic     { color: #b040be; }
    .SyntaxNumber    { color: #74a35b; }
    .SyntaxString    { color: #bb6643; }
    .SyntaxAttribute { color: #7f7f7f; }
</style>
<?php include('common/end-head.php'); ?></head>
<body>
<?php include('common/start-body.php'); ?><div class="container">
<div class="left">
<div class="leftpage">
<h2>Table of Contents</h2>
<h3>Namespaces</h3>
<h4></h4>
<ul>
<li><a href="#Core_CommandLine">CommandLine</a></li>
<li><a href="#Core_Slice">Slice</a></li>
</ul>
<h3>Structs</h3>
<h4>collections</h4>
<ul>
<li><a href="#Core_Array">Array</a></li>
<li><a href="#Core_ArrayPtr">ArrayPtr</a></li>
<li><a href="#Core_BitArray">BitArray</a></li>
<li><a href="#Core_ConcatBuffer">ConcatBuffer</a></li>
<li><a href="#Core_ConcatBufferBucket">ConcatBufferBucket</a></li>
<li><a href="#Core_ConcatBufferSeek">ConcatBufferSeek</a></li>
<li><a href="#Core_HashSet">HashSet</a></li>
<li><a href="#Core_HashSetEntry">HashSetEntry</a></li>
<li><a href="#Core_HashTable">HashTable</a></li>
<li><a href="#Core_HashTableEntry">HashTableEntry</a></li>
<li><a href="#Core_List">List</a></li>
<li><a href="#Core_ListNode">ListNode</a></li>
<li><a href="#Core_StaticArray">StaticArray</a></li>
</ul>
<h4>compress</h4>
<ul>
<li><a href="#Core_Compress_BitStream">BitStream</a></li>
<li><a href="#Core_Compress_Deflate">Deflate</a></li>
<li><a href="#Core_Compress_Inflate">Inflate</a></li>
<li><a href="#Core_Compress_ZLib">ZLib</a></li>
</ul>
<h4>crypto</h4>
<ul>
<li><a href="#Core_Hash_Adler32">Adler32</a></li>
<li><a href="#Core_Hash_Crc32">Crc32</a></li>
<li><a href="#Core_Hash_Md5">Md5</a></li>
<li><a href="#Core_Hash_Sha256">Sha256</a></li>
</ul>
<h4>diagnostics</h4>
<ul>
<li><a href="#Core_Log">Log</a></li>
</ul>
<h4>globalization</h4>
<ul>
<li><a href="#Core_Globalization_CultureInfo">CultureInfo</a></li>
<li><a href="#Core_Globalization_NumberFormatInfo">NumberFormatInfo</a></li>
</ul>
<h4>input</h4>
<ul>
<li><a href="#Core_Input_GamePad">GamePad</a></li>
<li><a href="#Core_Input_GamePadState">GamePadState</a></li>
<li><a href="#Core_Input_Keyboard">Keyboard</a></li>
<li><a href="#Core_Input_KeyboardState">KeyboardState</a></li>
<li><a href="#Core_Input_KeyboardStateNative">KeyboardStateNative</a></li>
<li><a href="#Core_Input_Mouse">Mouse</a></li>
<li><a href="#Core_Input_MouseState">MouseState</a></li>
</ul>
<h4>io</h4>
<ul>
<li><a href="#Core_ByteStream">ByteStream</a></li>
<li><a href="#Core_Directory_EnumerationOptions">EnumerationOptions</a></li>
<li><a href="#Core_File_FileInfo">FileInfo</a></li>
<li><a href="#Core_File_FileStream">FileStream</a></li>
<li><a href="#Core_File_Folder">Folder</a></li>
<li><a href="#Core_File_TextReader">TextReader</a></li>
<li><a href="#Core_File_TweakFile">TweakFile</a></li>
</ul>
<h4>math</h4>
<ul>
<li><a href="#Core_Math_Angle">Angle</a></li>
<li><a href="#Core_Math_Const">Const</a></li>
<li><a href="#Core_Math_Int128">Int128</a></li>
<li><a href="#Core_Math_Matrix3x3">Matrix3x3</a></li>
<li><a href="#Core_Math_Matrix4x4">Matrix4x4</a></li>
<li><a href="#Core_Math_NumericArray">NumericArray</a></li>
<li><a href="#Core_Math_Point">Point</a></li>
<li><a href="#Core_Math_Rectangle">Rectangle</a></li>
<li><a href="#Core_Math_Transform2">Transform2</a></li>
<li><a href="#Core_Math_Variant">Variant</a></li>
<li><a href="#Core_Math_Vector2">Vector2</a></li>
<li><a href="#Core_Math_Vector3">Vector3</a></li>
<li><a href="#Core_Math_Vector4">Vector4</a></li>
</ul>
<h4>rand</h4>
<ul>
<li><a href="#Core_Random_CMWC4096">CMWC4096</a></li>
<li><a href="#Core_Random_MWC">MWC</a></li>
<li><a href="#Core_Random_Mt64">Mt64</a></li>
<li><a href="#Core_Random_Rng">Rng</a></li>
</ul>
<h4>serialization</h4>
<ul>
<li><a href="#Core_Serialization_Serializer">Serializer</a></li>
</ul>
<h4>serialization/read</h4>
<ul>
<li><a href="#Core_Serialization_Decoder">Decoder</a></li>
<li><a href="#Core_Serialization_Read_JSon">JSon</a></li>
<li><a href="#Core_Serialization_Read_TagBin">TagBin</a></li>
<li><a href="#Core_Serialization_Read_TagBinOptions">TagBinOptions</a></li>
<li><a href="#Core_Serialization_Read_TagBinSection">TagBinSection</a></li>
</ul>
<h4>serialization/write</h4>
<ul>
<li><a href="#Core_Serialization_Encoder">Encoder</a></li>
<li><a href="#Core_Serialization_Write_JSon">JSon</a></li>
<li><a href="#Core_Serialization_Write_JSonOptions">JSonOptions</a></li>
<li><a href="#Core_Serialization_Write_TagBin">TagBin</a></li>
<li><a href="#Core_Serialization_Write_TagBinSection">TagBinSection</a></li>
</ul>
<h4>system</h4>
<ul>
<li><a href="#Core_CommandLine_IsSet">IsSet</a></li>
<li><a href="#Core_Env_Monitor">Monitor</a></li>
<li><a href="#Core_CommandLine_ParseOptions">ParseOptions</a></li>
<li><a href="#Core_Env_Process">Process</a></li>
<li><a href="#Core_CommandLine_Result">Result</a></li>
<li><a href="#Core_Env_StartInfo">StartInfo</a></li>
<li><a href="#Core_UUID">UUID</a></li>
</ul>
<h4>text</h4>
<ul>
<li><a href="#Core_StrConv_ConvertFormat">ConvertFormat</a></li>
<li><a href="#Core_StrConv_ConvertFormatFloat">ConvertFormatFloat</a></li>
<li><a href="#Core_StrConv_ConvertFormatInt">ConvertFormatInt</a></li>
<li><a href="#Core_Parser_RegExp">RegExp</a></li>
<li><a href="#Core_String">String</a></li>
<li><a href="#Core_StrConv_StringBuilder">StringBuilder</a></li>
</ul>
<h4>thread</h4>
<ul>
<li><a href="#Core_Sync_Event">Event</a></li>
<li><a href="#Core_Jobs_ForJob">ForJob</a></li>
<li><a href="#Core_Jobs_Job">Job</a></li>
<li><a href="#Core_Sync_Mutex">Mutex</a></li>
<li><a href="#Core_Sync_RWLock">RWLock</a></li>
<li><a href="#Core_Jobs_SliceJob">SliceJob</a></li>
<li><a href="#Core_Threading_Thread">Thread</a></li>
</ul>
<h4>time</h4>
<ul>
<li><a href="#Core_Time_DateTime">DateTime</a></li>
<li><a href="#Core_Time_Duration">Duration</a></li>
<li><a href="#Core_Time_FrameTiming">FrameTiming</a></li>
<li><a href="#Core_Time_Stopwatch">Stopwatch</a></li>
<li><a href="#Core_Time_TimeSpan">TimeSpan</a></li>
<li><a href="#Core_Time_Timer">Timer</a></li>
</ul>
<h3>Interfaces</h3>
<h4>crypto</h4>
<ul>
<li><a href="#Core_Hash_IHash32">IHash32</a></li>
</ul>
<h4>diagnostics</h4>
<ul>
<li><a href="#Core_ILogWriter">ILogWriter</a></li>
</ul>
<h4>serialization</h4>
<ul>
<li><a href="#Core_Serialization_ISerialize">ISerialize</a></li>
</ul>
<h4>serialization/read</h4>
<ul>
<li><a href="#Core_Serialization_IDecoder">IDecoder</a></li>
</ul>
<h4>serialization/write</h4>
<ul>
<li><a href="#Core_Serialization_IEncoder">IEncoder</a></li>
</ul>
<h4>text</h4>
<ul>
<li><a href="#Core_StrConv_IConvert">IConvert</a></li>
<li><a href="#Core_StrConv_IPokeValue">IPokeValue</a></li>
</ul>
<h3>Enums</h3>
<h4>compress</h4>
<ul>
<li><a href="#Core_Compress_Deflate_CompressionFlags">CompressionFlags</a></li>
<li><a href="#Core_Compress_Deflate_CompressionLevel">CompressionLevel</a></li>
<li><a href="#Core_Compress_Deflate_CompressionStrategy">CompressionStrategy</a></li>
</ul>
<h4>diagnostics</h4>
<ul>
<li><a href="#Core_Console_Color">Color</a></li>
<li><a href="#Core_LogFlags">LogFlags</a></li>
</ul>
<h4>input</h4>
<ul>
<li><a href="#Core_Input_GamePadButton">GamePadButton</a></li>
<li><a href="#Core_Input_GamePadError">GamePadError</a></li>
<li><a href="#Core_Input_Key">Key</a></li>
<li><a href="#Core_Input_KeyModifiers">KeyModifiers</a></li>
<li><a href="#Core_Input_MouseButton">MouseButton</a></li>
</ul>
<h4>io</h4>
<ul>
<li><a href="#Core_File_FileAccess">FileAccess</a></li>
<li><a href="#Core_File_FileAttributes">FileAttributes</a></li>
<li><a href="#Core_File_FileMode">FileMode</a></li>
<li><a href="#Core_File_FileShare">FileShare</a></li>
<li><a href="#Core_File_SeekOrigin">SeekOrigin</a></li>
<li><a href="#Core_File_TextEncoding">TextEncoding</a></li>
</ul>
<h4>serialization/read</h4>
<ul>
<li><a href="#Core_Serialization_DecoderFlags">DecoderFlags</a></li>
</ul>
<h4>serialization/write</h4>
<ul>
<li><a href="#Core_Serialization_SectionKind">SectionKind</a></li>
<li><a href="#Core_Serialization_Write_TagBinSignatures">TagBinSignatures</a></li>
</ul>
<h4>system</h4>
<ul>
<li><a href="#Core_Env_SpecialDirectory">SpecialDirectory</a></li>
</ul>
<h4>text</h4>
<ul>
<li><a href="#Core_Latin1_CharAttribute">CharAttribute</a></li>
<li><a href="#Core_CharacterSet">CharacterSet</a></li>
<li><a href="#Core_Utf8_ComparisonType">ComparisonType</a></li>
</ul>
<h4>thread</h4>
<ul>
<li><a href="#Core_Jobs_JobState">JobState</a></li>
<li><a href="#Core_Threading_ThreadPriority">ThreadPriority</a></li>
</ul>
<h4>time</h4>
<ul>
<li><a href="#Core_Time_DateTimeFormat">DateTimeFormat</a></li>
<li><a href="#Core_Time_DayOfWeek">DayOfWeek</a></li>
</ul>
<h3>Constants</h3>
<h4></h4>
<ul>
<li><a href="#Core_ASSERT">ASSERT</a></li>
<li><a href="#Core_BIG_ENDIAN">BIG_ENDIAN</a></li>
<li><a href="#Core_WINDOWS">WINDOWS</a></li>
</ul>
<h4>io</h4>
<ul>
<li><a href="#Core_Path_AltDirectorySeparatorChar">AltDirectorySeparatorChar</a></li>
<li><a href="#Core_Path_DirectorySeparatorChar">DirectorySeparatorChar</a></li>
<li><a href="#Core_Path_VolumeSeparatorChar">VolumeSeparatorChar</a></li>
</ul>
<h4>rand</h4>
<ul>
<li><a href="#Core_Random_NN">NN</a></li>
</ul>
<h4>system</h4>
<ul>
<li><a href="#Core_Env_EndLine">EndLine</a></li>
</ul>
<h4>text</h4>
<ul>
<li><a href="#Core_Latin1_CharProperties">CharProperties</a></li>
<li><a href="#Core_Utf8_MaxRunes">MaxRunes</a></li>
<li><a href="#Core_StrConv_ParseErrorIncomplete">ParseErrorIncomplete</a></li>
<li><a href="#Core_StrConv_ParseErrorInvalid">ParseErrorInvalid</a></li>
<li><a href="#Core_StrConv_ParseErrorOverflow">ParseErrorOverflow</a></li>
<li><a href="#Core_StringSmallSize">StringSmallSize</a></li>
<li><a href="#Core_Utf16_Surr1">Surr1</a></li>
<li><a href="#Core_Utf16_Surr2">Surr2</a></li>
<li><a href="#Core_Utf16_Surr3">Surr3</a></li>
<li><a href="#Core_Utf16_SurrSelf">SurrSelf</a></li>
<li><a href="#Core_Utf8_SurrogateMax">SurrogateMax</a></li>
<li><a href="#Core_Utf8_SurrogateMin">SurrogateMin</a></li>
<li><a href="#Core_Utf16_RuneError">Utf16.RuneError</a></li>
<li><a href="#Core_Utf8_RuneError">Utf8.RuneError</a></li>
</ul>
<h4>time</h4>
<ul>
<li><a href="#Core_Time_DayOfWeekNames">DayOfWeekNames</a></li>
<li><a href="#Core_Time_DaysPer100Years">DaysPer100Years</a></li>
<li><a href="#Core_Time_DaysPer400Years">DaysPer400Years</a></li>
<li><a href="#Core_Time_DaysPer4Years">DaysPer4Years</a></li>
<li><a href="#Core_Time_DaysPerYear">DaysPerYear</a></li>
<li><a href="#Core_Time_DaysTo10000">DaysTo10000</a></li>
<li><a href="#Core_Time_DaysTo1601">DaysTo1601</a></li>
<li><a href="#Core_Time_DaysTo1899">DaysTo1899</a></li>
<li><a href="#Core_Time_DaysTo1970">DaysTo1970</a></li>
<li><a href="#Core_Time_DaysToMonth365">DaysToMonth365</a></li>
<li><a href="#Core_Time_DaysToMonth366">DaysToMonth366</a></li>
<li><a href="#Core_Time_MaxMilliSeconds">MaxMilliSeconds</a></li>
<li><a href="#Core_Time_MaxMillis">MaxMillis</a></li>
<li><a href="#Core_Time_MaxTicks">MaxTicks</a></li>
<li><a href="#Core_Time_MillisPerDay">MillisPerDay</a></li>
<li><a href="#Core_Time_MillisPerHour">MillisPerHour</a></li>
<li><a href="#Core_Time_MillisPerMinute">MillisPerMinute</a></li>
<li><a href="#Core_Time_MillisPerSecond">MillisPerSecond</a></li>
<li><a href="#Core_Time_MonthNames">MonthNames</a></li>
<li><a href="#Core_Time_TicksPerDay">TicksPerDay</a></li>
<li><a href="#Core_Time_TicksPerHour">TicksPerHour</a></li>
<li><a href="#Core_Time_TicksPerMilliSecond">TicksPerMilliSecond</a></li>
<li><a href="#Core_Time_TicksPerMinute">TicksPerMinute</a></li>
<li><a href="#Core_Time_TicksPerSecond">TicksPerSecond</a></li>
</ul>
<h3>Type Aliases</h3>
<h4>input</h4>
<ul>
<li><a href="#Core_Input_VirtualKey">VirtualKey</a></li>
</ul>
<h4>io</h4>
<ul>
<li><a href="#Core_File_FileHandle">FileHandle</a></li>
</ul>
<h4>math</h4>
<ul>
<li><a href="#Core_Math_ConstF32">ConstF32</a></li>
<li><a href="#Core_Math_ConstF64">ConstF64</a></li>
</ul>
<h4>system</h4>
<ul>
<li><a href="#Core_Env_ProcessHandle">ProcessHandle</a></li>
</ul>
<h4>thread</h4>
<ul>
<li><a href="#Core_Threading_ThreadHandle">ThreadHandle</a></li>
</ul>
<h4>time</h4>
<ul>
<li><a href="#Core_Time_Ticks">Ticks</a></li>
<li><a href="#Core_Time_TimerHandle">TimerHandle</a></li>
</ul>
<h3>Attributes</h3>
<h4>serialization</h4>
<ul>
<li><a href="#Core_Serialization_Alias">Alias</a></li>
<li><a href="#Core_Serialization_Final">Final</a></li>
<li><a href="#Core_Serialization_NoSerialize">NoSerialize</a></li>
<li><a href="#Core_Serialization_PodFinal">PodFinal</a></li>
<li><a href="#Core_Serialization_Version">Version</a></li>
</ul>
<h4>system</h4>
<ul>
<li><a href="#Core_CommandLine_ArgParams">ArgParams</a></li>
</ul>
<h3>Functions</h3>
<h4>algorithms</h4>
<ul>
<li><a href="#Core_swap">Core.swap</a></li>
</ul>
<h4>collections</h4>
<ul>
<li><a href="#Core_Array_add">Array.add</a></li>
<li><a href="#Core_Array_addOnce">Array.addOnce</a></li>
<li><a href="#Core_Array_back">Array.back</a></li>
<li><a href="#Core_Array_backPtr">Array.backPtr</a></li>
<li><a href="#Core_Array_clear">Array.clear</a></li>
<li><a href="#Core_Array_contains">Array.contains</a></li>
<li><a href="#Core_Array_createBuffer">Array.createBuffer</a></li>
<li><a href="#Core_Array_createTemp">Array.createTemp</a></li>
<li><a href="#Core_Array_emplaceAddress">Array.emplaceAddress</a></li>
<li><a href="#Core_Array_emplaceAt">Array.emplaceAt</a></li>
<li><a href="#Core_Array_emplaceInitAddress">Array.emplaceInitAddress</a></li>
<li><a href="#Core_Array_free">Array.free</a></li>
<li><a href="#Core_Array_front">Array.front</a></li>
<li><a href="#Core_Array_frontPtr">Array.frontPtr</a></li>
<li><a href="#Core_Array_grow">Array.grow</a></li>
<li><a href="#Core_Array_insertAt">Array.insertAt</a></li>
<li><a href="#Core_Array_isEmpty">Array.isEmpty</a></li>
<li><a href="#Core_Array_opAffect">Array.opAffect</a></li>
<li><a href="#Core_Array_opCast">Array.opCast</a></li>
<li><a href="#Core_Array_opCount">Array.opCount</a></li>
<li><a href="#Core_Array_opData">Array.opData</a></li>
<li><a href="#Core_Array_opDrop">Array.opDrop</a></li>
<li><a href="#Core_Array_opIndex">Array.opIndex</a></li>
<li><a href="#Core_Array_opIndexAffect">Array.opIndexAffect</a></li>
<li><a href="#Core_Array_opIndexAssign">Array.opIndexAssign</a></li>
<li><a href="#Core_Array_opPostCopy">Array.opPostCopy</a></li>
<li><a href="#Core_Array_opSlice">Array.opSlice</a></li>
<li><a href="#Core_Array_opVisit">Array.opVisit</a></li>
<li><a href="#Core_Array_opVisitBack">Array.opVisitBack</a></li>
<li><a href="#Core_Array_popBack">Array.popBack</a></li>
<li><a href="#Core_Array_realloc">Array.realloc</a></li>
<li><a href="#Core_Array_remove">Array.remove</a></li>
<li><a href="#Core_Array_removeAt">Array.removeAt</a></li>
<li><a href="#Core_Array_removeAtOrdered">Array.removeAtOrdered</a></li>
<li><a href="#Core_Array_removeBack">Array.removeBack</a></li>
<li><a href="#Core_Array_removeOrdered">Array.removeOrdered</a></li>
<li><a href="#Core_Array_reserve">Array.reserve</a></li>
<li><a href="#Core_Array_resize">Array.resize</a></li>
<li><a href="#Core_Array_sort">Array.sort</a></li>
<li><a href="#Core_Array_sortReverse">Array.sortReverse</a></li>
<li><a href="#Core_Array_swap">Array.swap</a></li>
<li><a href="#Core_Array_toSlice">Array.toSlice</a></li>
<li><a href="#Core_ArrayPtr_addNewPtr">ArrayPtr.addNewPtr</a></li>
<li><a href="#Core_ArrayPtr_clear">ArrayPtr.clear</a></li>
<li><a href="#Core_ArrayPtr_deletePtr">ArrayPtr.deletePtr</a></li>
<li><a href="#Core_ArrayPtr_newPtr">ArrayPtr.newPtr</a></li>
<li><a href="#Core_ArrayPtr_opDrop">ArrayPtr.opDrop</a></li>
<li><a href="#Core_BitArray_and">BitArray.and</a></li>
<li><a href="#Core_BitArray_get">BitArray.get</a></li>
<li><a href="#Core_BitArray_invert">BitArray.invert</a></li>
<li><a href="#Core_BitArray_not">BitArray.not</a></li>
<li><a href="#Core_BitArray_opAffect">BitArray.opAffect</a></li>
<li><a href="#Core_BitArray_opCount">BitArray.opCount</a></li>
<li><a href="#Core_BitArray_opEquals">BitArray.opEquals</a></li>
<li><a href="#Core_BitArray_opIndex">BitArray.opIndex</a></li>
<li><a href="#Core_BitArray_opIndexAffect">BitArray.opIndexAffect</a></li>
<li><a href="#Core_BitArray_opVisit">BitArray.opVisit</a></li>
<li><a href="#Core_BitArray_or">BitArray.or</a></li>
<li><a href="#Core_BitArray_reserve">BitArray.reserve</a></li>
<li><a href="#Core_BitArray_set">BitArray.set</a></li>
<li><a href="#Core_BitArray_setAll">BitArray.setAll</a></li>
<li><a href="#Core_BitArray_xor">BitArray.xor</a></li>
<li><a href="#Core_ConcatBuffer_addBytes">ConcatBuffer.addBytes</a></li>
<li><a href="#Core_ConcatBuffer_addNative">ConcatBuffer.addNative</a></li>
<li><a href="#Core_ConcatBuffer_addStruct">ConcatBuffer.addStruct</a></li>
<li><a href="#Core_ConcatBuffer_clear">ConcatBuffer.clear</a></li>
<li><a href="#Core_ConcatBuffer_count">ConcatBuffer.count</a></li>
<li><a href="#Core_ConcatBuffer_eatBuffer">ConcatBuffer.eatBuffer</a></li>
<li><a href="#Core_ConcatBuffer_getOffset">ConcatBuffer.getOffset</a></li>
<li><a href="#Core_ConcatBuffer_getSeek">ConcatBuffer.getSeek</a></li>
<li><a href="#Core_ConcatBuffer_grow">ConcatBuffer.grow</a></li>
<li><a href="#Core_ConcatBuffer_makeLinear">ConcatBuffer.makeLinear</a></li>
<li><a href="#Core_ConcatBuffer_moveSeek">ConcatBuffer.moveSeek</a></li>
<li><a href="#Core_ConcatBuffer_moveToString">ConcatBuffer.moveToString</a></li>
<li><a href="#Core_ConcatBuffer_opCount">ConcatBuffer.opCount</a></li>
<li><a href="#Core_ConcatBuffer_opVisit">ConcatBuffer.opVisit</a></li>
<li><a href="#Core_ConcatBuffer_release">ConcatBuffer.release</a></li>
<li><a href="#Core_ConcatBuffer_setAllocator">ConcatBuffer.setAllocator</a></li>
<li><a href="#Core_ConcatBuffer_setBucketSize">ConcatBuffer.setBucketSize</a></li>
<li><a href="#Core_ConcatBuffer_setEndSeek">ConcatBuffer.setEndSeek</a></li>
<li><a href="#Core_ConcatBuffer_setFirstBucket">ConcatBuffer.setFirstBucket</a></li>
<li><a href="#Core_ConcatBuffer_setSeek">ConcatBuffer.setSeek</a></li>
<li><a href="#Core_ConcatBuffer_toSlice">ConcatBuffer.toSlice</a></li>
<li><a href="#Core_ConcatBuffer_toString">ConcatBuffer.toString</a></li>
<li><a href="#Core_HashSet_add">HashSet.add</a></li>
<li><a href="#Core_HashSet_clear">HashSet.clear</a></li>
<li><a href="#Core_HashSet_contains">HashSet.contains</a></li>
<li><a href="#Core_HashSet_emplaceInternal">HashSet.emplaceInternal</a></li>
<li><a href="#Core_HashSet_free">HashSet.free</a></li>
<li><a href="#Core_HashSet_grow">HashSet.grow</a></li>
<li><a href="#Core_HashSet_hashKey">HashSet.hashKey</a></li>
<li><a href="#Core_HashSet_opCount">HashSet.opCount</a></li>
<li><a href="#Core_HashSet_opDrop">HashSet.opDrop</a></li>
<li><a href="#Core_HashSet_opPostCopy">HashSet.opPostCopy</a></li>
<li><a href="#Core_HashSet_opVisit">HashSet.opVisit</a></li>
<li><a href="#Core_HashSet_remove">HashSet.remove</a></li>
<li><a href="#Core_HashSet_reserve">HashSet.reserve</a></li>
<li><a href="#Core_HashTable_add">HashTable.add</a></li>
<li><a href="#Core_HashTable_clear">HashTable.clear</a></li>
<li><a href="#Core_HashTable_contains">HashTable.contains</a></li>
<li><a href="#Core_HashTable_emplaceInternal">HashTable.emplaceInternal</a></li>
<li><a href="#Core_HashTable_find">HashTable.find</a></li>
<li><a href="#Core_HashTable_free">HashTable.free</a></li>
<li><a href="#Core_HashTable_grow">HashTable.grow</a></li>
<li><a href="#Core_HashTable_hashKey">HashTable.hashKey</a></li>
<li><a href="#Core_HashTable_opCount">HashTable.opCount</a></li>
<li><a href="#Core_HashTable_opDrop">HashTable.opDrop</a></li>
<li><a href="#Core_HashTable_opPostCopy">HashTable.opPostCopy</a></li>
<li><a href="#Core_HashTable_opVisit">HashTable.opVisit</a></li>
<li><a href="#Core_HashTable_remove">HashTable.remove</a></li>
<li><a href="#Core_HashTable_reserve">HashTable.reserve</a></li>
<li><a href="#Core_List_addBack">List.addBack</a></li>
<li><a href="#Core_List_addFront">List.addFront</a></li>
<li><a href="#Core_List_clear">List.clear</a></li>
<li><a href="#Core_List_insertAfter">List.insertAfter</a></li>
<li><a href="#Core_List_insertBefore">List.insertBefore</a></li>
<li><a href="#Core_List_opDrop">List.opDrop</a></li>
<li><a href="#Core_List_opVisit">List.opVisit</a></li>
<li><a href="#Core_List_opVisitBack">List.opVisitBack</a></li>
<li><a href="#Core_StaticArray_add">StaticArray.add</a></li>
<li><a href="#Core_StaticArray_addOnce">StaticArray.addOnce</a></li>
<li><a href="#Core_StaticArray_back">StaticArray.back</a></li>
<li><a href="#Core_StaticArray_backPtr">StaticArray.backPtr</a></li>
<li><a href="#Core_StaticArray_clear">StaticArray.clear</a></li>
<li><a href="#Core_StaticArray_contains">StaticArray.contains</a></li>
<li><a href="#Core_StaticArray_emplaceAddress">StaticArray.emplaceAddress</a></li>
<li><a href="#Core_StaticArray_emplaceAt">StaticArray.emplaceAt</a></li>
<li><a href="#Core_StaticArray_emplaceInitAddress">StaticArray.emplaceInitAddress</a></li>
<li><a href="#Core_StaticArray_free">StaticArray.free</a></li>
<li><a href="#Core_StaticArray_front">StaticArray.front</a></li>
<li><a href="#Core_StaticArray_frontPtr">StaticArray.frontPtr</a></li>
<li><a href="#Core_StaticArray_insertAt">StaticArray.insertAt</a></li>
<li><a href="#Core_StaticArray_isEmpty">StaticArray.isEmpty</a></li>
<li><a href="#Core_StaticArray_opAffect">StaticArray.opAffect</a></li>
<li><a href="#Core_StaticArray_opCast">StaticArray.opCast</a></li>
<li><a href="#Core_StaticArray_opCount">StaticArray.opCount</a></li>
<li><a href="#Core_StaticArray_opData">StaticArray.opData</a></li>
<li><a href="#Core_StaticArray_opDrop">StaticArray.opDrop</a></li>
<li><a href="#Core_StaticArray_opIndex">StaticArray.opIndex</a></li>
<li><a href="#Core_StaticArray_opIndexAffect">StaticArray.opIndexAffect</a></li>
<li><a href="#Core_StaticArray_opIndexAssign">StaticArray.opIndexAssign</a></li>
<li><a href="#Core_StaticArray_opSlice">StaticArray.opSlice</a></li>
<li><a href="#Core_StaticArray_opVisit">StaticArray.opVisit</a></li>
<li><a href="#Core_StaticArray_opVisitBack">StaticArray.opVisitBack</a></li>
<li><a href="#Core_StaticArray_popBack">StaticArray.popBack</a></li>
<li><a href="#Core_StaticArray_remove">StaticArray.remove</a></li>
<li><a href="#Core_StaticArray_removeAt">StaticArray.removeAt</a></li>
<li><a href="#Core_StaticArray_removeAtOrdered">StaticArray.removeAtOrdered</a></li>
<li><a href="#Core_StaticArray_removeBack">StaticArray.removeBack</a></li>
<li><a href="#Core_StaticArray_removeOrdered">StaticArray.removeOrdered</a></li>
<li><a href="#Core_StaticArray_resize">StaticArray.resize</a></li>
<li><a href="#Core_StaticArray_sort">StaticArray.sort</a></li>
<li><a href="#Core_StaticArray_sortReverse">StaticArray.sortReverse</a></li>
<li><a href="#Core_StaticArray_toSlice">StaticArray.toSlice</a></li>
</ul>
<h4>compress</h4>
<ul>
<li><a href="#Core_Compress_BitStream_consumeBits">BitStream.consumeBits</a></li>
<li><a href="#Core_Compress_BitStream_curPtr">BitStream.curPtr</a></li>
<li><a href="#Core_Compress_BitStream_discardToNextByte">BitStream.discardToNextByte</a></li>
<li><a href="#Core_Compress_BitStream_init">BitStream.init</a></li>
<li><a href="#Core_Compress_BitStream_peek32">BitStream.peek32</a></li>
<li><a href="#Core_Compress_BitStream_peek32Be">BitStream.peek32Be</a></li>
<li><a href="#Core_Compress_BitStream_peekBits">BitStream.peekBits</a></li>
<li><a href="#Core_Compress_BitStream_peekBitsNoRefill">BitStream.peekBitsNoRefill</a></li>
<li><a href="#Core_Compress_BitStream_peekBytes">BitStream.peekBytes</a></li>
<li><a href="#Core_Compress_BitStream_readBits">BitStream.readBits</a></li>
<li><a href="#Core_Compress_BitStream_readBitsNoRefill">BitStream.readBitsNoRefill</a></li>
<li><a href="#Core_Compress_BitStream_refill">BitStream.refill</a></li>
<li><a href="#Core_Compress_BitStream_revert">BitStream.revert</a></li>
<li><a href="#Core_Compress_BitStream_size">BitStream.size</a></li>
<li><a href="#Core_Compress_BitStream_startPtr">BitStream.startPtr</a></li>
<li><a href="#Core_Compress_Deflate_compress">Deflate.compress</a></li>
<li><a href="#Core_Compress_Deflate_init">Deflate.init</a></li>
<li><a href="#Core_Compress_Inflate_decompress">Inflate.decompress</a></li>
<li><a href="#Core_Compress_ZLib_compress">ZLib.compress</a></li>
<li><a href="#Core_Compress_ZLib_decompress">ZLib.decompress</a></li>
</ul>
<h4>crypto</h4>
<ul>
<li><a href="#Core_Hash_Adler32_compute">Adler32.compute</a></li>
<li><a href="#Core_Hash_Adler32_init">Adler32.init</a></li>
<li><a href="#Core_Hash_Adler32_update">Adler32.update</a></li>
<li><a href="#Core_Hash_Crc32_compute">Crc32.compute</a></li>
<li><a href="#Core_Hash_Crc32_init">Crc32.init</a></li>
<li><a href="#Core_Hash_Crc32_update">Crc32.update</a></li>
<li><a href="#Core_Hash_hash32">Hash.hash32</a></li>
<li><a href="#Core_Hash_Md5_compute">Md5.compute</a></li>
<li><a href="#Core_Hash_Md5_final">Md5.final</a></li>
<li><a href="#Core_Hash_Md5_init">Md5.init</a></li>
<li><a href="#Core_Hash_Md5_update">Md5.update</a></li>
<li><a href="#Core_Hash_Sha256_compute">Sha256.compute</a></li>
<li><a href="#Core_Hash_Sha256_final">Sha256.final</a></li>
<li><a href="#Core_Hash_Sha256_init">Sha256.init</a></li>
<li><a href="#Core_Hash_Sha256_update">Sha256.update</a></li>
</ul>
<h4>diagnostics</h4>
<ul>
<li><a href="#Core_Console_fatal">Console.fatal</a></li>
<li><a href="#Core_Console_lock">Console.lock</a></li>
<li><a href="#Core_Console_print">Console.print</a></li>
<li><a href="#Core_Console_printf">Console.printf</a></li>
<li><a href="#Core_Console_println">Console.println</a></li>
<li><a href="#Core_Console_prompt">Console.prompt</a></li>
<li><a href="#Core_Console_resetColor">Console.resetColor</a></li>
<li><a href="#Core_Console_setBackColor">Console.setBackColor</a></li>
<li><a href="#Core_Console_setTextColor">Console.setTextColor</a></li>
<li><a href="#Core_Console_silent">Console.silent</a></li>
<li><a href="#Core_Console_unlock">Console.unlock</a></li>
<li><a href="#Core_Debug_assert">Debug.assert</a></li>
<li><a href="#Core_Debug_breakPanic">Debug.breakPanic</a></li>
<li><a href="#Core_Debug_safety">Debug.safety</a></li>
<li><a href="#Core_Debug_safetyBoundCheck">Debug.safetyBoundCheck</a></li>
<li><a href="#Core_Debugger_attach">Debugger.attach</a></li>
<li><a href="#Core_Debugger_debugBreak">Debugger.debugBreak</a></li>
<li><a href="#Core_Debugger_isAttached">Debugger.isAttached</a></li>
<li><a href="#Core_Debugger_log">Debugger.log</a></li>
<li><a href="#Core_Log_addWriter">Log.addWriter</a></li>
<li><a href="#Core_Log_clearWriters">Log.clearWriters</a></li>
<li><a href="#Core_Log_create">Log.create</a></li>
<li><a href="#Core_Log_getFlags">Log.getFlags</a></li>
<li><a href="#Core_Log_getPrefix">Log.getPrefix</a></li>
<li><a href="#Core_Log_print">Log.print</a></li>
<li><a href="#Core_Log_setFlags">Log.setFlags</a></li>
<li><a href="#Core_Log_setPrefix">Log.setPrefix</a></li>
</ul>
<h4>globalization</h4>
<ul>
<li><a href="#Core_Globalization_getCultureInfo">Globalization.getCultureInfo</a></li>
</ul>
<h4>input</h4>
<ul>
<li><a href="#Core_Input_GamePad_clear">GamePad.clear</a></li>
<li><a href="#Core_Input_GamePad_getPosition">GamePad.getPosition</a></li>
<li><a href="#Core_Input_GamePad_isButtonJustPressed">GamePad.isButtonJustPressed</a></li>
<li><a href="#Core_Input_GamePad_isButtonJustReleased">GamePad.isButtonJustReleased</a></li>
<li><a href="#Core_Input_GamePad_isButtonPressed">GamePad.isButtonPressed</a></li>
<li><a href="#Core_Input_GamePad_isButtonReleased">GamePad.isButtonReleased</a></li>
<li><a href="#Core_Input_GamePad_isConnected">GamePad.isConnected</a></li>
<li><a href="#Core_Input_GamePad_setVibration">GamePad.setVibration</a></li>
<li><a href="#Core_Input_GamePad_update">GamePad.update</a></li>
<li><a href="#Core_Input_GamePadState_clear">GamePadState.clear</a></li>
<li><a href="#Core_Input_GamePadState_update">GamePadState.update</a></li>
<li><a href="#Core_Input_getKeyName">Input.getKeyName</a></li>
<li><a href="#Core_Input_getMousePos">Input.getMousePos</a></li>
<li><a href="#Core_Input_setMousePos">Input.setMousePos</a></li>
<li><a href="#Core_Input_showMouseCursor">Input.showMouseCursor</a></li>
<li><a href="#Core_Input_Keyboard_clear">Keyboard.clear</a></li>
<li><a href="#Core_Input_Keyboard_getPressedModifiers">Keyboard.getPressedModifiers</a></li>
<li><a href="#Core_Input_Keyboard_isKeyJustPressed">Keyboard.isKeyJustPressed</a></li>
<li><a href="#Core_Input_Keyboard_isKeyJustReleased">Keyboard.isKeyJustReleased</a></li>
<li><a href="#Core_Input_Keyboard_isKeyPressed">Keyboard.isKeyPressed</a></li>
<li><a href="#Core_Input_Keyboard_isKeyReleased">Keyboard.isKeyReleased</a></li>
<li><a href="#Core_Input_Keyboard_keyToRune">Keyboard.keyToRune</a></li>
<li><a href="#Core_Input_Keyboard_keyToVirtualKey">Keyboard.keyToVirtualKey</a></li>
<li><a href="#Core_Input_Keyboard_update">Keyboard.update</a></li>
<li><a href="#Core_Input_Keyboard_virtualKeyToKey">Keyboard.virtualKeyToKey</a></li>
<li><a href="#Core_Input_KeyboardState_clear">KeyboardState.clear</a></li>
<li><a href="#Core_Input_KeyboardState_update">KeyboardState.update</a></li>
<li><a href="#Core_Input_Mouse_clear">Mouse.clear</a></li>
<li><a href="#Core_Input_Mouse_getMove">Mouse.getMove</a></li>
<li><a href="#Core_Input_Mouse_getPosition">Mouse.getPosition</a></li>
<li><a href="#Core_Input_Mouse_getPreviousPos">Mouse.getPreviousPos</a></li>
<li><a href="#Core_Input_Mouse_isButtonDoubleClick">Mouse.isButtonDoubleClick</a></li>
<li><a href="#Core_Input_Mouse_isButtonJustPressed">Mouse.isButtonJustPressed</a></li>
<li><a href="#Core_Input_Mouse_isButtonJustReleased">Mouse.isButtonJustReleased</a></li>
<li><a href="#Core_Input_Mouse_isButtonPressed">Mouse.isButtonPressed</a></li>
<li><a href="#Core_Input_Mouse_isButtonReleased">Mouse.isButtonReleased</a></li>
<li><a href="#Core_Input_Mouse_update">Mouse.update</a></li>
<li><a href="#Core_Input_MouseState_clear">MouseState.clear</a></li>
<li><a href="#Core_Input_MouseState_update">MouseState.update</a></li>
</ul>
<h4>io</h4>
<ul>
<li><a href="#Core_ByteStream_getSeek">ByteStream.getSeek</a></li>
<li><a href="#Core_ByteStream_isEof">ByteStream.isEof</a></li>
<li><a href="#Core_ByteStream_length">ByteStream.length</a></li>
<li><a href="#Core_ByteStream_moveSeek">ByteStream.moveSeek</a></li>
<li><a href="#Core_ByteStream_openRead">ByteStream.openRead</a></li>
<li><a href="#Core_ByteStream_openWrite">ByteStream.openWrite</a></li>
<li><a href="#Core_ByteStream_peekU8">ByteStream.peekU8</a></li>
<li><a href="#Core_ByteStream_readBytes">ByteStream.readBytes</a></li>
<li><a href="#Core_ByteStream_readData">ByteStream.readData</a></li>
<li><a href="#Core_ByteStream_readNative">ByteStream.readNative</a></li>
<li><a href="#Core_ByteStream_readU8">ByteStream.readU8</a></li>
<li><a href="#Core_ByteStream_remainReadToSlice">ByteStream.remainReadToSlice</a></li>
<li><a href="#Core_ByteStream_remainReadToString">ByteStream.remainReadToString</a></li>
<li><a href="#Core_ByteStream_setSeek">ByteStream.setSeek</a></li>
<li><a href="#Core_ByteStream_writeBytes">ByteStream.writeBytes</a></li>
<li><a href="#Core_ByteStream_writeNative">ByteStream.writeNative</a></li>
<li><a href="#Core_Directory_create">Directory.create</a></li>
<li><a href="#Core_Directory_enumerate">Directory.enumerate</a></li>
<li><a href="#Core_Directory_enumerateDirectories">Directory.enumerateDirectories</a></li>
<li><a href="#Core_Directory_enumerateFiles">Directory.enumerateFiles</a></li>
<li><a href="#Core_Directory_exists">Directory.exists</a></li>
<li><a href="#Core_Directory_getCurrent">Directory.getCurrent</a></li>
<li><a href="#Core_Directory_getDrives">Directory.getDrives</a></li>
<li><a href="#Core_Directory_setCurrent">Directory.setCurrent</a></li>
<li><a href="#Core_File_delete">File.delete</a></li>
<li><a href="#Core_File_duplicate">File.duplicate</a></li>
<li><a href="#Core_File_exists">File.exists</a></li>
<li><a href="#Core_File_getAttributes">File.getAttributes</a></li>
<li><a href="#Core_File_getFileInfo">File.getFileInfo</a></li>
<li><a href="#Core_File_getInfo">File.getInfo</a></li>
<li><a href="#Core_File_locateInExplorer">File.locateInExplorer</a></li>
<li><a href="#Core_File_open">File.open</a></li>
<li><a href="#Core_File_openRead">File.openRead</a></li>
<li><a href="#Core_File_openWrite">File.openWrite</a></li>
<li><a href="#Core_File_readAllBytes">File.readAllBytes</a></li>
<li><a href="#Core_File_readAllLines">File.readAllLines</a></li>
<li><a href="#Core_File_readAllText">File.readAllText</a></li>
<li><a href="#Core_File_readEachLines">File.readEachLines</a></li>
<li><a href="#Core_File_touch">File.touch</a></li>
<li><a href="#Core_File_writeAllBytes">File.writeAllBytes</a></li>
<li><a href="#Core_File_writeAllLines">File.writeAllLines</a></li>
<li><a href="#Core_File_FileInfo_isDirectory">FileInfo.isDirectory</a></li>
<li><a href="#Core_File_FileStream_close">FileStream.close</a></li>
<li><a href="#Core_File_FileStream_getPosition">FileStream.getPosition</a></li>
<li><a href="#Core_File_FileStream_getSize">FileStream.getSize</a></li>
<li><a href="#Core_File_FileStream_isOpen">FileStream.isOpen</a></li>
<li><a href="#Core_File_FileStream_read">FileStream.read</a></li>
<li><a href="#Core_File_FileStream_readValue">FileStream.readValue</a></li>
<li><a href="#Core_File_FileStream_setPosition">FileStream.setPosition</a></li>
<li><a href="#Core_File_FileStream_skipPosition">FileStream.skipPosition</a></li>
<li><a href="#Core_File_FileStream_write">FileStream.write</a></li>
<li><a href="#Core_Path_combine">Path.combine</a></li>
<li><a href="#Core_Path_equals">Path.equals</a></li>
<li><a href="#Core_Path_getAbsolute">Path.getAbsolute</a></li>
<li><a href="#Core_Path_getDirectoryName">Path.getDirectoryName</a></li>
<li><a href="#Core_Path_getExtension">Path.getExtension</a></li>
<li><a href="#Core_Path_getExtensionLowerCase">Path.getExtensionLowerCase</a></li>
<li><a href="#Core_Path_getFileName">Path.getFileName</a></li>
<li><a href="#Core_Path_getFileNameWithoutExtension">Path.getFileNameWithoutExtension</a></li>
<li><a href="#Core_Path_getRootLength">Path.getRootLength</a></li>
<li><a href="#Core_Path_getRootName">Path.getRootName</a></li>
<li><a href="#Core_Path_hasExtension">Path.hasExtension</a></li>
<li><a href="#Core_Path_isDirectorySeparator">Path.isDirectorySeparator</a></li>
<li><a href="#Core_Path_isExtension">Path.isExtension</a></li>
<li><a href="#Core_Path_isRooted">Path.isRooted</a></li>
<li><a href="#Core_Path_isValidFileName">Path.isValidFileName</a></li>
<li><a href="#Core_Path_isValidPathName">Path.isValidPathName</a></li>
<li><a href="#Core_Path_normalize">Path.normalize</a></li>
<li><a href="#Core_File_TextReader_close">TextReader.close</a></li>
<li><a href="#Core_File_TextReader_open">TextReader.open</a></li>
<li><a href="#Core_File_TextReader_readLine">TextReader.readLine</a></li>
<li><a href="#Core_File_TextReader_readToEnd">TextReader.readToEnd</a></li>
<li><a href="#Core_File_TweakFile_parse">TweakFile.parse</a></li>
<li><a href="#Core_File_TweakFile_parseFile">TweakFile.parseFile</a></li>
<li><a href="#Core_File_TweakFile_registerFolder">TweakFile.registerFolder</a></li>
</ul>
<h4>math</h4>
<ul>
<li><a href="#Core_Math_Angle_opAffect">Angle.opAffect</a></li>
<li><a href="#Core_Math_Angle_opAffectSuffix">Angle.opAffectSuffix</a></li>
<li><a href="#Core_Math_Angle_toDegrees">Angle.toDegrees</a></li>
<li><a href="#Core_Math_Int128_mul">Int128.mul</a></li>
<li><a href="#Core_Math_Int128_opCast">Int128.opCast</a></li>
<li><a href="#Core_Math_Int128_opCmp">Int128.opCmp</a></li>
<li><a href="#Core_Math_Int128_opEquals">Int128.opEquals</a></li>
<li><a href="#Core_Math_abs">Math.abs</a></li>
<li><a href="#Core_Math_acos">Math.acos</a></li>
<li><a href="#Core_Math_asin">Math.asin</a></li>
<li><a href="#Core_Math_atan">Math.atan</a></li>
<li><a href="#Core_Math_atan2">Math.atan2</a></li>
<li><a href="#Core_Math_bigEndianToNative">Math.bigEndianToNative</a></li>
<li><a href="#Core_Math_ceil">Math.ceil</a></li>
<li><a href="#Core_Math_clamp">Math.clamp</a></li>
<li><a href="#Core_Math_cos">Math.cos</a></li>
<li><a href="#Core_Math_cosh">Math.cosh</a></li>
<li><a href="#Core_Math_countOnes">Math.countOnes</a></li>
<li><a href="#Core_Math_exp">Math.exp</a></li>
<li><a href="#Core_Math_exp2">Math.exp2</a></li>
<li><a href="#Core_Math_floor">Math.floor</a></li>
<li><a href="#Core_Math_hasByte">Math.hasByte</a></li>
<li><a href="#Core_Math_hasZeroByte">Math.hasZeroByte</a></li>
<li><a href="#Core_Math_isEqualEpsilon">Math.isEqualEpsilon</a></li>
<li><a href="#Core_Math_isNan">Math.isNan</a></li>
<li><a href="#Core_Math_isPowerOf2">Math.isPowerOf2</a></li>
<li><a href="#Core_Math_isZeroEpsilon">Math.isZeroEpsilon</a></li>
<li><a href="#Core_Math_leadingZeros">Math.leadingZeros</a></li>
<li><a href="#Core_Math_lerp">Math.lerp</a></li>
<li><a href="#Core_Math_littleEndianToNative">Math.littleEndianToNative</a></li>
<li><a href="#Core_Math_log">Math.log</a></li>
<li><a href="#Core_Math_log10">Math.log10</a></li>
<li><a href="#Core_Math_log2">Math.log2</a></li>
<li><a href="#Core_Math_makeRepeat16">Math.makeRepeat16</a></li>
<li><a href="#Core_Math_makeRepeat32">Math.makeRepeat32</a></li>
<li><a href="#Core_Math_makeRepeat64">Math.makeRepeat64</a></li>
<li><a href="#Core_Math_map">Math.map</a></li>
<li><a href="#Core_Math_max">Math.max</a></li>
<li><a href="#Core_Math_min">Math.min</a></li>
<li><a href="#Core_Math_mulAdd">Math.mulAdd</a></li>
<li><a href="#Core_Math_mulU64">Math.mulU64</a></li>
<li><a href="#Core_Math_nativeToBigEndian">Math.nativeToBigEndian</a></li>
<li><a href="#Core_Math_pow">Math.pow</a></li>
<li><a href="#Core_Math_reverse">Math.reverse</a></li>
<li><a href="#Core_Math_round">Math.round</a></li>
<li><a href="#Core_Math_roundDownToPowerOf2">Math.roundDownToPowerOf2</a></li>
<li><a href="#Core_Math_roundUpToPowerOf2">Math.roundUpToPowerOf2</a></li>
<li><a href="#Core_Math_saturate">Math.saturate</a></li>
<li><a href="#Core_Math_sign">Math.sign</a></li>
<li><a href="#Core_Math_sin">Math.sin</a></li>
<li><a href="#Core_Math_sinh">Math.sinh</a></li>
<li><a href="#Core_Math_smoothstep">Math.smoothstep</a></li>
<li><a href="#Core_Math_sqrt">Math.sqrt</a></li>
<li><a href="#Core_Math_tan">Math.tan</a></li>
<li><a href="#Core_Math_tanh">Math.tanh</a></li>
<li><a href="#Core_Math_toDegrees">Math.toDegrees</a></li>
<li><a href="#Core_Math_toRadians">Math.toRadians</a></li>
<li><a href="#Core_Math_trailingZeros">Math.trailingZeros</a></li>
<li><a href="#Core_Math_trunc">Math.trunc</a></li>
<li><a href="#Core_Math_Matrix3x3_setIdentity">Matrix3x3.setIdentity</a></li>
<li><a href="#Core_Math_Matrix4x4_setIdentity">Matrix4x4.setIdentity</a></li>
<li><a href="#Core_Math_NumericArray_from">NumericArray.from</a></li>
<li><a href="#Core_Math_NumericArray_mulAdd">NumericArray.mulAdd</a></li>
<li><a href="#Core_Math_NumericArray_opAffect">NumericArray.opAffect</a></li>
<li><a href="#Core_Math_NumericArray_opAssign">NumericArray.opAssign</a></li>
<li><a href="#Core_Math_NumericArray_opBinary">NumericArray.opBinary</a></li>
<li><a href="#Core_Math_NumericArray_opEquals">NumericArray.opEquals</a></li>
<li><a href="#Core_Math_NumericArray_opIndex">NumericArray.opIndex</a></li>
<li><a href="#Core_Math_NumericArray_set">NumericArray.set</a></li>
<li><a href="#Core_Math_Point_ceil">Point.ceil</a></li>
<li><a href="#Core_Math_Point_clear">Point.clear</a></li>
<li><a href="#Core_Math_Point_isEqualEpsilon">Point.isEqualEpsilon</a></li>
<li><a href="#Core_Math_Point_isZero">Point.isZero</a></li>
<li><a href="#Core_Math_Point_isZeroEpsilon">Point.isZeroEpsilon</a></li>
<li><a href="#Core_Math_Point_offset">Point.offset</a></li>
<li><a href="#Core_Math_Point_opAffect">Point.opAffect</a></li>
<li><a href="#Core_Math_Point_opAssign">Point.opAssign</a></li>
<li><a href="#Core_Math_Point_opBinary">Point.opBinary</a></li>
<li><a href="#Core_Math_Point_opEquals">Point.opEquals</a></li>
<li><a href="#Core_Math_Point_opUnary">Point.opUnary</a></li>
<li><a href="#Core_Math_Point_round">Point.round</a></li>
<li><a href="#Core_Math_Point_trunc">Point.trunc</a></li>
<li><a href="#Core_Math_Rectangle_applyPadding">Rectangle.applyPadding</a></li>
<li><a href="#Core_Math_Rectangle_bottom">Rectangle.bottom</a></li>
<li><a href="#Core_Math_Rectangle_ceil">Rectangle.ceil</a></li>
<li><a href="#Core_Math_Rectangle_center">Rectangle.center</a></li>
<li><a href="#Core_Math_Rectangle_clear">Rectangle.clear</a></li>
<li><a href="#Core_Math_Rectangle_constrainIn">Rectangle.constrainIn</a></li>
<li><a href="#Core_Math_Rectangle_contains">Rectangle.contains</a></li>
<li><a href="#Core_Math_Rectangle_getUnion">Rectangle.getUnion</a></li>
<li><a href="#Core_Math_Rectangle_horzCenter">Rectangle.horzCenter</a></li>
<li><a href="#Core_Math_Rectangle_inflate">Rectangle.inflate</a></li>
<li><a href="#Core_Math_Rectangle_intersect">Rectangle.intersect</a></li>
<li><a href="#Core_Math_Rectangle_intersectWith">Rectangle.intersectWith</a></li>
<li><a href="#Core_Math_Rectangle_isEmpty">Rectangle.isEmpty</a></li>
<li><a href="#Core_Math_Rectangle_isEmptyEpsilon">Rectangle.isEmptyEpsilon</a></li>
<li><a href="#Core_Math_Rectangle_isNormalized">Rectangle.isNormalized</a></li>
<li><a href="#Core_Math_Rectangle_isZero">Rectangle.isZero</a></li>
<li><a href="#Core_Math_Rectangle_isZeroEpsilon">Rectangle.isZeroEpsilon</a></li>
<li><a href="#Core_Math_Rectangle_moveBottom">Rectangle.moveBottom</a></li>
<li><a href="#Core_Math_Rectangle_moveLeft">Rectangle.moveLeft</a></li>
<li><a href="#Core_Math_Rectangle_moveRight">Rectangle.moveRight</a></li>
<li><a href="#Core_Math_Rectangle_moveTop">Rectangle.moveTop</a></li>
<li><a href="#Core_Math_Rectangle_offset">Rectangle.offset</a></li>
<li><a href="#Core_Math_Rectangle_opEquals">Rectangle.opEquals</a></li>
<li><a href="#Core_Math_Rectangle_right">Rectangle.right</a></li>
<li><a href="#Core_Math_Rectangle_round">Rectangle.round</a></li>
<li><a href="#Core_Math_Rectangle_scale">Rectangle.scale</a></li>
<li><a href="#Core_Math_Rectangle_set">Rectangle.set</a></li>
<li><a href="#Core_Math_Rectangle_setBottom">Rectangle.setBottom</a></li>
<li><a href="#Core_Math_Rectangle_setRight">Rectangle.setRight</a></li>
<li><a href="#Core_Math_Rectangle_setUnion">Rectangle.setUnion</a></li>
<li><a href="#Core_Math_Rectangle_trunc">Rectangle.trunc</a></li>
<li><a href="#Core_Math_Rectangle_vertCenter">Rectangle.vertCenter</a></li>
<li><a href="#Core_Math_Transform2_createRotation">Transform2.createRotation</a></li>
<li><a href="#Core_Math_Transform2_createScale">Transform2.createScale</a></li>
<li><a href="#Core_Math_Transform2_createTranslation">Transform2.createTranslation</a></li>
<li><a href="#Core_Math_Transform2_multiply">Transform2.multiply</a></li>
<li><a href="#Core_Math_Transform2_setIdentity">Transform2.setIdentity</a></li>
<li><a href="#Core_Math_Variant_checkValidType">Variant.checkValidType</a></li>
<li><a href="#Core_Math_Variant_drop">Variant.drop</a></li>
<li><a href="#Core_Math_Variant_get">Variant.get</a></li>
<li><a href="#Core_Math_Variant_opAffect">Variant.opAffect</a></li>
<li><a href="#Core_Math_Variant_opCmp">Variant.opCmp</a></li>
<li><a href="#Core_Math_Variant_opDrop">Variant.opDrop</a></li>
<li><a href="#Core_Math_Variant_opEquals">Variant.opEquals</a></li>
<li><a href="#Core_Math_Variant_opPostCopy">Variant.opPostCopy</a></li>
<li><a href="#Core_Math_Variant_opPostMove">Variant.opPostMove</a></li>
<li><a href="#Core_Math_Variant_set">Variant.set</a></li>
<li><a href="#Core_Math_Vector2_angle">Vector2.angle</a></li>
<li><a href="#Core_Math_Vector2_ceil">Vector2.ceil</a></li>
<li><a href="#Core_Math_Vector2_clear">Vector2.clear</a></li>
<li><a href="#Core_Math_Vector2_cosAngle">Vector2.cosAngle</a></li>
<li><a href="#Core_Math_Vector2_cross">Vector2.cross</a></li>
<li><a href="#Core_Math_Vector2_distance">Vector2.distance</a></li>
<li><a href="#Core_Math_Vector2_distanceSquared">Vector2.distanceSquared</a></li>
<li><a href="#Core_Math_Vector2_distanceToLine">Vector2.distanceToLine</a></li>
<li><a href="#Core_Math_Vector2_distanceToSegment">Vector2.distanceToSegment</a></li>
<li><a href="#Core_Math_Vector2_dot">Vector2.dot</a></li>
<li><a href="#Core_Math_Vector2_floor">Vector2.floor</a></li>
<li><a href="#Core_Math_Vector2_isEqualEpsilon">Vector2.isEqualEpsilon</a></li>
<li><a href="#Core_Math_Vector2_isInEllipse">Vector2.isInEllipse</a></li>
<li><a href="#Core_Math_Vector2_isInTriangle">Vector2.isInTriangle</a></li>
<li><a href="#Core_Math_Vector2_isZero">Vector2.isZero</a></li>
<li><a href="#Core_Math_Vector2_isZeroEpsilon">Vector2.isZeroEpsilon</a></li>
<li><a href="#Core_Math_Vector2_length">Vector2.length</a></li>
<li><a href="#Core_Math_Vector2_lengthSquared">Vector2.lengthSquared</a></li>
<li><a href="#Core_Math_Vector2_lerp">Vector2.lerp</a></li>
<li><a href="#Core_Math_Vector2_lineLineIntersect">Vector2.lineLineIntersect</a></li>
<li><a href="#Core_Math_Vector2_max">Vector2.max</a></li>
<li><a href="#Core_Math_Vector2_min">Vector2.min</a></li>
<li><a href="#Core_Math_Vector2_nearestPointsSegSeg">Vector2.nearestPointsSegSeg</a></li>
<li><a href="#Core_Math_Vector2_negate">Vector2.negate</a></li>
<li><a href="#Core_Math_Vector2_normalize">Vector2.normalize</a></li>
<li><a href="#Core_Math_Vector2_normalizeSafe">Vector2.normalizeSafe</a></li>
<li><a href="#Core_Math_Vector2_opAffect">Vector2.opAffect</a></li>
<li><a href="#Core_Math_Vector2_opAssign">Vector2.opAssign</a></li>
<li><a href="#Core_Math_Vector2_opBinary">Vector2.opBinary</a></li>
<li><a href="#Core_Math_Vector2_opEquals">Vector2.opEquals</a></li>
<li><a href="#Core_Math_Vector2_opUnary">Vector2.opUnary</a></li>
<li><a href="#Core_Math_Vector2_polyContains">Vector2.polyContains</a></li>
<li><a href="#Core_Math_Vector2_rotate">Vector2.rotate</a></li>
<li><a href="#Core_Math_Vector2_round">Vector2.round</a></li>
<li><a href="#Core_Math_Vector2_segSegIntersect">Vector2.segSegIntersect</a></li>
<li><a href="#Core_Math_Vector2_set">Vector2.set</a></li>
<li><a href="#Core_Math_Vector2_setLength">Vector2.setLength</a></li>
<li><a href="#Core_Math_Vector2_setLengthSafe">Vector2.setLengthSafe</a></li>
<li><a href="#Core_Math_Vector2_toNormalize">Vector2.toNormalize</a></li>
<li><a href="#Core_Math_Vector2_toNormalizeSafe">Vector2.toNormalizeSafe</a></li>
<li><a href="#Core_Math_Vector3_clear">Vector3.clear</a></li>
<li><a href="#Core_Math_Vector3_distance">Vector3.distance</a></li>
<li><a href="#Core_Math_Vector3_distanceSquared">Vector3.distanceSquared</a></li>
<li><a href="#Core_Math_Vector3_dot">Vector3.dot</a></li>
<li><a href="#Core_Math_Vector3_isEqualEpsilon">Vector3.isEqualEpsilon</a></li>
<li><a href="#Core_Math_Vector3_isZero">Vector3.isZero</a></li>
<li><a href="#Core_Math_Vector3_isZeroEpsilon">Vector3.isZeroEpsilon</a></li>
<li><a href="#Core_Math_Vector3_length">Vector3.length</a></li>
<li><a href="#Core_Math_Vector3_lengthSquared">Vector3.lengthSquared</a></li>
<li><a href="#Core_Math_Vector3_lerp">Vector3.lerp</a></li>
<li><a href="#Core_Math_Vector3_max">Vector3.max</a></li>
<li><a href="#Core_Math_Vector3_min">Vector3.min</a></li>
<li><a href="#Core_Math_Vector3_negate">Vector3.negate</a></li>
<li><a href="#Core_Math_Vector3_normalize">Vector3.normalize</a></li>
<li><a href="#Core_Math_Vector3_normalizeSafe">Vector3.normalizeSafe</a></li>
<li><a href="#Core_Math_Vector3_opAffect">Vector3.opAffect</a></li>
<li><a href="#Core_Math_Vector3_opAssign">Vector3.opAssign</a></li>
<li><a href="#Core_Math_Vector3_opBinary">Vector3.opBinary</a></li>
<li><a href="#Core_Math_Vector3_opEquals">Vector3.opEquals</a></li>
<li><a href="#Core_Math_Vector3_opUnary">Vector3.opUnary</a></li>
<li><a href="#Core_Math_Vector3_set">Vector3.set</a></li>
<li><a href="#Core_Math_Vector3_setLength">Vector3.setLength</a></li>
<li><a href="#Core_Math_Vector3_setLengthSafe">Vector3.setLengthSafe</a></li>
<li><a href="#Core_Math_Vector3_toNormalize">Vector3.toNormalize</a></li>
<li><a href="#Core_Math_Vector3_toNormalizeSafe">Vector3.toNormalizeSafe</a></li>
<li><a href="#Core_Math_Vector4_clear">Vector4.clear</a></li>
<li><a href="#Core_Math_Vector4_lerp">Vector4.lerp</a></li>
<li><a href="#Core_Math_Vector4_opAffect">Vector4.opAffect</a></li>
<li><a href="#Core_Math_Vector4_opEquals">Vector4.opEquals</a></li>
<li><a href="#Core_Math_Vector4_opUnary">Vector4.opUnary</a></li>
</ul>
<h4>memory</h4>
<ul>
<li><a href="#Core_Memory_align">Memory.align</a></li>
<li><a href="#Core_Memory_alloc">Memory.alloc</a></li>
<li><a href="#Core_Memory_assertIsAllocated">Memory.assertIsAllocated</a></li>
<li><a href="#Core_Memory_clear">Memory.clear</a></li>
<li><a href="#Core_Memory_compare">Memory.compare</a></li>
<li><a href="#Core_Memory_copy">Memory.copy</a></li>
<li><a href="#Core_Memory_copyOver">Memory.copyOver</a></li>
<li><a href="#Core_Memory_delete">Memory.delete</a></li>
<li><a href="#Core_Memory_equals">Memory.equals</a></li>
<li><a href="#Core_Memory_free">Memory.free</a></li>
<li><a href="#Core_Memory_freeAll">Memory.freeAll</a></li>
<li><a href="#Core_Memory_freeTemp">Memory.freeTemp</a></li>
<li><a href="#Core_Memory_new">Memory.new</a></li>
<li><a href="#Core_Memory_pushAllocator">Memory.pushAllocator</a></li>
<li><a href="#Core_Memory_pushTempAllocator">Memory.pushTempAllocator</a></li>
<li><a href="#Core_Memory_realloc">Memory.realloc</a></li>
<li><a href="#Core_Memory_set">Memory.set</a></li>
<li><a href="#Core_Memory_tempAlloc">Memory.tempAlloc</a></li>
</ul>
<h4>rand</h4>
<ul>
<li><a href="#Core_Random_CMWC4096_nextU32">CMWC4096.nextU32</a></li>
<li><a href="#Core_Random_CMWC4096_seedU32">CMWC4096.seedU32</a></li>
<li><a href="#Core_Random_MWC_nextU32">MWC.nextU32</a></li>
<li><a href="#Core_Random_MWC_seedU32">MWC.seedU32</a></li>
<li><a href="#Core_Random_Mt64_nextU64">Mt64.nextU64</a></li>
<li><a href="#Core_Random_Mt64_seedU64">Mt64.seedU64</a></li>
<li><a href="#Core_Noise_perlin">Noise.perlin</a></li>
<li><a href="#Core_Random_shared">Random.shared</a></li>
<li><a href="#Core_Random_Rng_nextBool">Rng.nextBool</a></li>
<li><a href="#Core_Random_Rng_nextF32">Rng.nextF32</a></li>
<li><a href="#Core_Random_Rng_nextF64">Rng.nextF64</a></li>
<li><a href="#Core_Random_Rng_nextS32">Rng.nextS32</a></li>
<li><a href="#Core_Random_Rng_nextS64">Rng.nextS64</a></li>
<li><a href="#Core_Random_Rng_nextU32">Rng.nextU32</a></li>
<li><a href="#Core_Random_Rng_nextU64">Rng.nextU64</a></li>
<li><a href="#Core_Random_Rng_seedNow">Rng.seedNow</a></li>
<li><a href="#Core_Random_Rng_seedU32">Rng.seedU32</a></li>
<li><a href="#Core_Random_Rng_seedU64">Rng.seedU64</a></li>
<li><a href="#Core_Random_Rng_shuffle">Rng.shuffle</a></li>
</ul>
<h4>serialization</h4>
<ul>
<li><a href="#Core_Serialization_ISerialize_postSerialize">ISerialize.postSerialize</a></li>
<li><a href="#Core_Serialization_ISerialize_read">ISerialize.read</a></li>
<li><a href="#Core_Serialization_ISerialize_readElement">ISerialize.readElement</a></li>
<li><a href="#Core_Serialization_ISerialize_write">ISerialize.write</a></li>
<li><a href="#Core_Serialization_ISerialize_writeElement">ISerialize.writeElement</a></li>
<li><a href="#Core_Serialization_isPodFinal">Serialization.isPodFinal</a></li>
<li><a href="#Core_Serialization_Serializer_beginSection">Serializer.beginSection</a></li>
<li><a href="#Core_Serialization_Serializer_end">Serializer.end</a></li>
<li><a href="#Core_Serialization_Serializer_endSection">Serializer.endSection</a></li>
<li><a href="#Core_Serialization_Serializer_isReading">Serializer.isReading</a></li>
<li><a href="#Core_Serialization_Serializer_isWriting">Serializer.isWriting</a></li>
<li><a href="#Core_Serialization_Serializer_serialize">Serializer.serialize</a></li>
<li><a href="#Core_Serialization_Serializer_startRead">Serializer.startRead</a></li>
<li><a href="#Core_Serialization_Serializer_startWrite">Serializer.startWrite</a></li>
</ul>
<h4>serialization/read</h4>
<ul>
<li><a href="#Core_Serialization_Decoder_IDecoder_beginField">Decoder.IDecoder.beginField</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_beginSection">Decoder.IDecoder.beginSection</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_end">Decoder.IDecoder.end</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_endField">Decoder.IDecoder.endField</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_endSection">Decoder.IDecoder.endSection</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_getVersion">Decoder.IDecoder.getVersion</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_read">Decoder.IDecoder.read</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readBool">Decoder.IDecoder.readBool</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readBufferU8">Decoder.IDecoder.readBufferU8</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readF32">Decoder.IDecoder.readF32</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readF64">Decoder.IDecoder.readF64</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readS16">Decoder.IDecoder.readS16</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readS32">Decoder.IDecoder.readS32</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readS64">Decoder.IDecoder.readS64</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readS8">Decoder.IDecoder.readS8</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readU16">Decoder.IDecoder.readU16</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readU32">Decoder.IDecoder.readU32</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readU64">Decoder.IDecoder.readU64</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readU8">Decoder.IDecoder.readU8</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_start">Decoder.IDecoder.start</a></li>
<li><a href="#Core_Serialization_Decoder_end">Decoder.end</a></li>
<li><a href="#Core_Serialization_Decoder_readAll">Decoder.readAll</a></li>
<li><a href="#Core_Serialization_Decoder_readTypeValue">Decoder.readTypeValue</a></li>
<li><a href="#Core_Serialization_Decoder_readValue">Decoder.readValue</a></li>
<li><a href="#Core_Serialization_Decoder_start">Decoder.start</a></li>
<li><a href="#Core_Serialization_Read_JSon_beginElement">JSon.beginElement</a></li>
<li><a href="#Core_Serialization_Read_JSon_beginRoot">JSon.beginRoot</a></li>
<li><a href="#Core_Serialization_Read_JSon_beginSection">JSon.beginSection</a></li>
<li><a href="#Core_Serialization_Read_JSon_beginSequence">JSon.beginSequence</a></li>
<li><a href="#Core_Serialization_Read_JSon_beginStruct">JSon.beginStruct</a></li>
<li><a href="#Core_Serialization_Read_JSon_beginValue">JSon.beginValue</a></li>
<li><a href="#Core_Serialization_Read_JSon_endElement">JSon.endElement</a></li>
<li><a href="#Core_Serialization_Read_JSon_endRoot">JSon.endRoot</a></li>
<li><a href="#Core_Serialization_Read_JSon_endSection">JSon.endSection</a></li>
<li><a href="#Core_Serialization_Read_JSon_endSequence">JSon.endSequence</a></li>
<li><a href="#Core_Serialization_Read_JSon_endStruct">JSon.endStruct</a></li>
<li><a href="#Core_Serialization_Read_JSon_endValue">JSon.endValue</a></li>
<li><a href="#Core_Serialization_Read_JSon_getVersion">JSon.getVersion</a></li>
<li><a href="#Core_Serialization_Read_JSon_readNative">JSon.readNative</a></li>
<li><a href="#Core_Serialization_Read_JSon_startRead">JSon.startRead</a></li>
<li><a href="#Core_Serialization_Read_JSon_toNextSequenceElement">JSon.toNextSequenceElement</a></li>
<li><a href="#Core_Serialization_Read_JSon_zapBlanks">JSon.zapBlanks</a></li>
<li><a href="#Core_Serialization_IDecoder_beginField">Serialization.IDecoder.beginField</a></li>
<li><a href="#Core_Serialization_IDecoder_beginSection">Serialization.IDecoder.beginSection</a></li>
<li><a href="#Core_Serialization_IDecoder_end">Serialization.IDecoder.end</a></li>
<li><a href="#Core_Serialization_IDecoder_endField">Serialization.IDecoder.endField</a></li>
<li><a href="#Core_Serialization_IDecoder_endSection">Serialization.IDecoder.endSection</a></li>
<li><a href="#Core_Serialization_IDecoder_getVersion">Serialization.IDecoder.getVersion</a></li>
<li><a href="#Core_Serialization_IDecoder_read">Serialization.IDecoder.read</a></li>
<li><a href="#Core_Serialization_IDecoder_readBool">Serialization.IDecoder.readBool</a></li>
<li><a href="#Core_Serialization_IDecoder_readBufferU8">Serialization.IDecoder.readBufferU8</a></li>
<li><a href="#Core_Serialization_IDecoder_readF32">Serialization.IDecoder.readF32</a></li>
<li><a href="#Core_Serialization_IDecoder_readF64">Serialization.IDecoder.readF64</a></li>
<li><a href="#Core_Serialization_IDecoder_readS16">Serialization.IDecoder.readS16</a></li>
<li><a href="#Core_Serialization_IDecoder_readS32">Serialization.IDecoder.readS32</a></li>
<li><a href="#Core_Serialization_IDecoder_readS64">Serialization.IDecoder.readS64</a></li>
<li><a href="#Core_Serialization_IDecoder_readS8">Serialization.IDecoder.readS8</a></li>
<li><a href="#Core_Serialization_IDecoder_readU16">Serialization.IDecoder.readU16</a></li>
<li><a href="#Core_Serialization_IDecoder_readU32">Serialization.IDecoder.readU32</a></li>
<li><a href="#Core_Serialization_IDecoder_readU64">Serialization.IDecoder.readU64</a></li>
<li><a href="#Core_Serialization_IDecoder_readU8">Serialization.IDecoder.readU8</a></li>
<li><a href="#Core_Serialization_IDecoder_start">Serialization.IDecoder.start</a></li>
<li><a href="#Core_Serialization_Read_TagBin_beginElement">TagBin.beginElement</a></li>
<li><a href="#Core_Serialization_Read_TagBin_beginRoot">TagBin.beginRoot</a></li>
<li><a href="#Core_Serialization_Read_TagBin_beginSection">TagBin.beginSection</a></li>
<li><a href="#Core_Serialization_Read_TagBin_beginSequence">TagBin.beginSequence</a></li>
<li><a href="#Core_Serialization_Read_TagBin_beginStruct">TagBin.beginStruct</a></li>
<li><a href="#Core_Serialization_Read_TagBin_beginValue">TagBin.beginValue</a></li>
<li><a href="#Core_Serialization_Read_TagBin_endElement">TagBin.endElement</a></li>
<li><a href="#Core_Serialization_Read_TagBin_endRoot">TagBin.endRoot</a></li>
<li><a href="#Core_Serialization_Read_TagBin_endSection">TagBin.endSection</a></li>
<li><a href="#Core_Serialization_Read_TagBin_endSequence">TagBin.endSequence</a></li>
<li><a href="#Core_Serialization_Read_TagBin_endStruct">TagBin.endStruct</a></li>
<li><a href="#Core_Serialization_Read_TagBin_endValue">TagBin.endValue</a></li>
<li><a href="#Core_Serialization_Read_TagBin_getVersion">TagBin.getVersion</a></li>
<li><a href="#Core_Serialization_Read_TagBin_readNative">TagBin.readNative</a></li>
<li><a href="#Core_Serialization_Read_TagBin_startRead">TagBin.startRead</a></li>
<li><a href="#Core_Serialization_Read_TagBin_toNextSequenceElement">TagBin.toNextSequenceElement</a></li>
</ul>
<h4>serialization/write</h4>
<ul>
<li><a href="#Core_Serialization_Encoder_IEncoder_beginField">Encoder.IEncoder.beginField</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_beginSection">Encoder.IEncoder.beginSection</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_end">Encoder.IEncoder.end</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_endField">Encoder.IEncoder.endField</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_endSection">Encoder.IEncoder.endSection</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_start">Encoder.IEncoder.start</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_write">Encoder.IEncoder.write</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeBool">Encoder.IEncoder.writeBool</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeBufferU8">Encoder.IEncoder.writeBufferU8</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeF32">Encoder.IEncoder.writeF32</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeF64">Encoder.IEncoder.writeF64</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeS16">Encoder.IEncoder.writeS16</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeS32">Encoder.IEncoder.writeS32</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeS64">Encoder.IEncoder.writeS64</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeS8">Encoder.IEncoder.writeS8</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeU16">Encoder.IEncoder.writeU16</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeU32">Encoder.IEncoder.writeU32</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeU64">Encoder.IEncoder.writeU64</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeU8">Encoder.IEncoder.writeU8</a></li>
<li><a href="#Core_Serialization_Encoder_end">Encoder.end</a></li>
<li><a href="#Core_Serialization_Encoder_start">Encoder.start</a></li>
<li><a href="#Core_Serialization_Encoder_writeAll">Encoder.writeAll</a></li>
<li><a href="#Core_Serialization_Encoder_writeTypeValue">Encoder.writeTypeValue</a></li>
<li><a href="#Core_Serialization_Encoder_writeValue">Encoder.writeValue</a></li>
<li><a href="#Core_Serialization_Write_JSon_beginElement">JSon.beginElement</a></li>
<li><a href="#Core_Serialization_Write_JSon_beginRoot">JSon.beginRoot</a></li>
<li><a href="#Core_Serialization_Write_JSon_beginSection">JSon.beginSection</a></li>
<li><a href="#Core_Serialization_Write_JSon_beginSequence">JSon.beginSequence</a></li>
<li><a href="#Core_Serialization_Write_JSon_beginStruct">JSon.beginStruct</a></li>
<li><a href="#Core_Serialization_Write_JSon_beginValue">JSon.beginValue</a></li>
<li><a href="#Core_Serialization_Write_JSon_endElement">JSon.endElement</a></li>
<li><a href="#Core_Serialization_Write_JSon_endRoot">JSon.endRoot</a></li>
<li><a href="#Core_Serialization_Write_JSon_endSection">JSon.endSection</a></li>
<li><a href="#Core_Serialization_Write_JSon_endSequence">JSon.endSequence</a></li>
<li><a href="#Core_Serialization_Write_JSon_endStruct">JSon.endStruct</a></li>
<li><a href="#Core_Serialization_Write_JSon_endValue">JSon.endValue</a></li>
<li><a href="#Core_Serialization_Write_JSon_startWrite">JSon.startWrite</a></li>
<li><a href="#Core_Serialization_Write_JSon_writeIndent">JSon.writeIndent</a></li>
<li><a href="#Core_Serialization_Write_JSon_writeNative">JSon.writeNative</a></li>
<li><a href="#Core_Serialization_IEncoder_beginField">Serialization.IEncoder.beginField</a></li>
<li><a href="#Core_Serialization_IEncoder_beginSection">Serialization.IEncoder.beginSection</a></li>
<li><a href="#Core_Serialization_IEncoder_end">Serialization.IEncoder.end</a></li>
<li><a href="#Core_Serialization_IEncoder_endField">Serialization.IEncoder.endField</a></li>
<li><a href="#Core_Serialization_IEncoder_endSection">Serialization.IEncoder.endSection</a></li>
<li><a href="#Core_Serialization_IEncoder_start">Serialization.IEncoder.start</a></li>
<li><a href="#Core_Serialization_IEncoder_write">Serialization.IEncoder.write</a></li>
<li><a href="#Core_Serialization_IEncoder_writeBool">Serialization.IEncoder.writeBool</a></li>
<li><a href="#Core_Serialization_IEncoder_writeBufferU8">Serialization.IEncoder.writeBufferU8</a></li>
<li><a href="#Core_Serialization_IEncoder_writeF32">Serialization.IEncoder.writeF32</a></li>
<li><a href="#Core_Serialization_IEncoder_writeF64">Serialization.IEncoder.writeF64</a></li>
<li><a href="#Core_Serialization_IEncoder_writeS16">Serialization.IEncoder.writeS16</a></li>
<li><a href="#Core_Serialization_IEncoder_writeS32">Serialization.IEncoder.writeS32</a></li>
<li><a href="#Core_Serialization_IEncoder_writeS64">Serialization.IEncoder.writeS64</a></li>
<li><a href="#Core_Serialization_IEncoder_writeS8">Serialization.IEncoder.writeS8</a></li>
<li><a href="#Core_Serialization_IEncoder_writeU16">Serialization.IEncoder.writeU16</a></li>
<li><a href="#Core_Serialization_IEncoder_writeU32">Serialization.IEncoder.writeU32</a></li>
<li><a href="#Core_Serialization_IEncoder_writeU64">Serialization.IEncoder.writeU64</a></li>
<li><a href="#Core_Serialization_IEncoder_writeU8">Serialization.IEncoder.writeU8</a></li>
<li><a href="#Core_Serialization_Write_TagBin_beginElement">TagBin.beginElement</a></li>
<li><a href="#Core_Serialization_Write_TagBin_beginRoot">TagBin.beginRoot</a></li>
<li><a href="#Core_Serialization_Write_TagBin_beginSection">TagBin.beginSection</a></li>
<li><a href="#Core_Serialization_Write_TagBin_beginSequence">TagBin.beginSequence</a></li>
<li><a href="#Core_Serialization_Write_TagBin_beginStruct">TagBin.beginStruct</a></li>
<li><a href="#Core_Serialization_Write_TagBin_beginValue">TagBin.beginValue</a></li>
<li><a href="#Core_Serialization_Write_TagBin_endElement">TagBin.endElement</a></li>
<li><a href="#Core_Serialization_Write_TagBin_endRoot">TagBin.endRoot</a></li>
<li><a href="#Core_Serialization_Write_TagBin_endSection">TagBin.endSection</a></li>
<li><a href="#Core_Serialization_Write_TagBin_endSequence">TagBin.endSequence</a></li>
<li><a href="#Core_Serialization_Write_TagBin_endStruct">TagBin.endStruct</a></li>
<li><a href="#Core_Serialization_Write_TagBin_endValue">TagBin.endValue</a></li>
<li><a href="#Core_Serialization_Write_TagBin_startWrite">TagBin.startWrite</a></li>
<li><a href="#Core_Serialization_Write_TagBin_writeNative">TagBin.writeNative</a></li>
</ul>
<h4>slice</h4>
<ul>
<li><a href="#Core_Slice_contains">Slice.contains</a></li>
<li><a href="#Core_Slice_equals">Slice.equals</a></li>
<li><a href="#Core_Slice_findLinear">Slice.findLinear</a></li>
<li><a href="#Core_Slice_findSorted">Slice.findSorted</a></li>
<li><a href="#Core_Slice_insertionSort">Slice.insertionSort</a></li>
<li><a href="#Core_Slice_isSorted">Slice.isSorted</a></li>
<li><a href="#Core_Slice_modifyInPlace">Slice.modifyInPlace</a></li>
<li><a href="#Core_Slice_quickSort">Slice.quickSort</a></li>
<li><a href="#Core_Slice_reverse">Slice.reverse</a></li>
<li><a href="#Core_Slice_sort">Slice.sort</a></li>
</ul>
<h4>system</h4>
<ul>
<li><a href="#Core_CommandLine_getField">CommandLine.getField</a></li>
<li><a href="#Core_CommandLine_isOption">CommandLine.isOption</a></li>
<li><a href="#Core_CommandLine_parse">CommandLine.parse</a></li>
<li><a href="#Core_CommandLine_splitArguments">CommandLine.splitArguments</a></li>
<li><a href="#Core_add">Core.add</a></li>
<li><a href="#Core_has">Core.has</a></li>
<li><a href="#Core_is">Core.is</a></li>
<li><a href="#Core_remove">Core.remove</a></li>
<li><a href="#Core_set">Core.set</a></li>
<li><a href="#Core_Env_doSyncProcess">Env.doSyncProcess</a></li>
<li><a href="#Core_Env_exit">Env.exit</a></li>
<li><a href="#Core_Env_getArg">Env.getArg</a></li>
<li><a href="#Core_Env_getArgs">Env.getArgs</a></li>
<li><a href="#Core_Env_getMonitors">Env.getMonitors</a></li>
<li><a href="#Core_Env_getSpecialDirectory">Env.getSpecialDirectory</a></li>
<li><a href="#Core_Env_hasArg">Env.hasArg</a></li>
<li><a href="#Core_Env_startProcess">Env.startProcess</a></li>
<li><a href="#Core_Hardware_getMacAddress">Hardware.getMacAddress</a></li>
<li><a href="#Core_Hardware_getProcessorCount">Hardware.getProcessorCount</a></li>
<li><a href="#Core_UUID_IConvert_convert">IConvert.convert</a></li>
<li><a href="#Core_UUID_IHash32_compute">IHash32.compute</a></li>
<li><a href="#Core_Env_Process_waitForExit">Process.waitForExit</a></li>
<li><a href="#Core_Reflection_canCopy">Reflection.canCopy</a></li>
<li><a href="#Core_Reflection_copy">Reflection.copy</a></li>
<li><a href="#Core_Reflection_crcToType">Reflection.crcToType</a></li>
<li><a href="#Core_Reflection_getAttribute">Reflection.getAttribute</a></li>
<li><a href="#Core_Reflection_getAttributeValue">Reflection.getAttributeValue</a></li>
<li><a href="#Core_Reflection_getAttributes">Reflection.getAttributes</a></li>
<li><a href="#Core_Reflection_getEnumName">Reflection.getEnumName</a></li>
<li><a href="#Core_Reflection_getEnumValue">Reflection.getEnumValue</a></li>
<li><a href="#Core_Reflection_getField">Reflection.getField</a></li>
<li><a href="#Core_Reflection_getFieldValue">Reflection.getFieldValue</a></li>
<li><a href="#Core_Reflection_getMethod">Reflection.getMethod</a></li>
<li><a href="#Core_Reflection_hasAttribute">Reflection.hasAttribute</a></li>
<li><a href="#Core_Reflection_hasDrop">Reflection.hasDrop</a></li>
<li><a href="#Core_Reflection_hasInterface">Reflection.hasInterface</a></li>
<li><a href="#Core_Reflection_hasMethod">Reflection.hasMethod</a></li>
<li><a href="#Core_Reflection_hasPostCopy">Reflection.hasPostCopy</a></li>
<li><a href="#Core_Reflection_hasPostMove">Reflection.hasPostMove</a></li>
<li><a href="#Core_Reflection_isAny">Reflection.isAny</a></li>
<li><a href="#Core_Reflection_isArray">Reflection.isArray</a></li>
<li><a href="#Core_Reflection_isBool">Reflection.isBool</a></li>
<li><a href="#Core_Reflection_isEnum">Reflection.isEnum</a></li>
<li><a href="#Core_Reflection_isEnumFlags">Reflection.isEnumFlags</a></li>
<li><a href="#Core_Reflection_isFloat">Reflection.isFloat</a></li>
<li><a href="#Core_Reflection_isGeneric">Reflection.isGeneric</a></li>
<li><a href="#Core_Reflection_isInteger">Reflection.isInteger</a></li>
<li><a href="#Core_Reflection_isInterface">Reflection.isInterface</a></li>
<li><a href="#Core_Reflection_isNative">Reflection.isNative</a></li>
<li><a href="#Core_Reflection_isPointer">Reflection.isPointer</a></li>
<li><a href="#Core_Reflection_isPointerArithmetic">Reflection.isPointerArithmetic</a></li>
<li><a href="#Core_Reflection_isPointerRef">Reflection.isPointerRef</a></li>
<li><a href="#Core_Reflection_isRune">Reflection.isRune</a></li>
<li><a href="#Core_Reflection_isSimpleNative">Reflection.isSimpleNative</a></li>
<li><a href="#Core_Reflection_isSlice">Reflection.isSlice</a></li>
<li><a href="#Core_Reflection_isString">Reflection.isString</a></li>
<li><a href="#Core_Reflection_isStruct">Reflection.isStruct</a></li>
<li><a href="#Core_Reflection_isStructOfName">Reflection.isStructOfName</a></li>
<li><a href="#Core_Reflection_isTuple">Reflection.isTuple</a></li>
<li><a href="#Core_Reflection_isType">Reflection.isType</a></li>
<li><a href="#Core_Reflection_isTypeAlias">Reflection.isTypeAlias</a></li>
<li><a href="#Core_Reflection_makeConcreteAlias">Reflection.makeConcreteAlias</a></li>
<li><a href="#Core_Reflection_makeConcreteEnum">Reflection.makeConcreteEnum</a></li>
<li><a href="#Core_Reflection_maxSizeOf">Reflection.maxSizeOf</a></li>
<li><a href="#Core_Reflection_nameToType">Reflection.nameToType</a></li>
<li><a href="#Core_Reflection_orFlags">Reflection.orFlags</a></li>
<li><a href="#Core_Reflection_roomInArray">Reflection.roomInArray</a></li>
<li><a href="#Core_Reflection_setFieldValue">Reflection.setFieldValue</a></li>
<li><a href="#Core_System_pushContext">System.pushContext</a></li>
<li><a href="#Core_UUID_clear">UUID.clear</a></li>
<li><a href="#Core_UUID_getRandom">UUID.getRandom</a></li>
<li><a href="#Core_UUID_opEquals">UUID.opEquals</a></li>
<li><a href="#Core_UUID_toString">UUID.toString</a></li>
<li><a href="#Core_CommandLine_parse_parse_checkNext">parse.checkNext</a></li>
</ul>
<h4>text</h4>
<ul>
<li><a href="#Core_StrConv_Atod_parse">Atod.parse</a></li>
<li><a href="#Core_StrConv_ConvertFormatFloat_setFormat">ConvertFormatFloat.setFormat</a></li>
<li><a href="#Core_StrConv_ConvertFormatInt_setFormat">ConvertFormatInt.setFormat</a></li>
<li><a href="#Core_StrConv_Dtoa_parse">Dtoa.parse</a></li>
<li><a href="#Core_Format_append">Format.append</a></li>
<li><a href="#Core_Format_checkFormat">Format.checkFormat</a></li>
<li><a href="#Core_Format_countPercent">Format.countPercent</a></li>
<li><a href="#Core_Format_replaceString">Format.replaceString</a></li>
<li><a href="#Core_Format_toInterp">Format.toInterp</a></li>
<li><a href="#Core_Format_toString">Format.toString</a></li>
<li><a href="#Core_String_IHash32_compute">IHash32.compute</a></li>
<li><a href="#Core_Latin1_compare">Latin1.compare</a></li>
<li><a href="#Core_Latin1_compareNatural">Latin1.compareNatural</a></li>
<li><a href="#Core_Latin1_isAscii">Latin1.isAscii</a></li>
<li><a href="#Core_Latin1_isBinDigit">Latin1.isBinDigit</a></li>
<li><a href="#Core_Latin1_isControl">Latin1.isControl</a></li>
<li><a href="#Core_Latin1_isDigit">Latin1.isDigit</a></li>
<li><a href="#Core_Latin1_isHexDigit">Latin1.isHexDigit</a></li>
<li><a href="#Core_Latin1_isLetter">Latin1.isLetter</a></li>
<li><a href="#Core_Latin1_isLetterOrDigit">Latin1.isLetterOrDigit</a></li>
<li><a href="#Core_Latin1_isLower">Latin1.isLower</a></li>
<li><a href="#Core_Latin1_isNumber">Latin1.isNumber</a></li>
<li><a href="#Core_Latin1_isPunctuation">Latin1.isPunctuation</a></li>
<li><a href="#Core_Latin1_isSpace">Latin1.isSpace</a></li>
<li><a href="#Core_Latin1_isSymbol">Latin1.isSymbol</a></li>
<li><a href="#Core_Latin1_isUpper">Latin1.isUpper</a></li>
<li><a href="#Core_Latin1_makeLower">Latin1.makeLower</a></li>
<li><a href="#Core_Latin1_makeUpper">Latin1.makeUpper</a></li>
<li><a href="#Core_Latin1_toLower">Latin1.toLower</a></li>
<li><a href="#Core_Latin1_toUpper">Latin1.toUpper</a></li>
<li><a href="#Core_Parser_RegExp_clear">RegExp.clear</a></li>
<li><a href="#Core_Parser_RegExp_compile">RegExp.compile</a></li>
<li><a href="#Core_Parser_RegExp_grep">RegExp.grep</a></li>
<li><a href="#Core_Parser_RegExp_grepAll">RegExp.grepAll</a></li>
<li><a href="#Core_Parser_RegExp_match">RegExp.match</a></li>
<li><a href="#Core_StrConv_convert">StrConv.convert</a></li>
<li><a href="#Core_StrConv_convertAny">StrConv.convertAny</a></li>
<li><a href="#Core_StrConv_convertBool">StrConv.convertBool</a></li>
<li><a href="#Core_StrConv_convertFloat">StrConv.convertFloat</a></li>
<li><a href="#Core_StrConv_convertInt">StrConv.convertInt</a></li>
<li><a href="#Core_StrConv_convertRune">StrConv.convertRune</a></li>
<li><a href="#Core_StrConv_convertStruct">StrConv.convertStruct</a></li>
<li><a href="#Core_StrConv_parseB64">StrConv.parseB64</a></li>
<li><a href="#Core_StrConv_parseBool">StrConv.parseBool</a></li>
<li><a href="#Core_StrConv_parseF32">StrConv.parseF32</a></li>
<li><a href="#Core_StrConv_parseF64">StrConv.parseF64</a></li>
<li><a href="#Core_StrConv_parseIdentifier">StrConv.parseIdentifier</a></li>
<li><a href="#Core_StrConv_parseRune">StrConv.parseRune</a></li>
<li><a href="#Core_StrConv_parseS16">StrConv.parseS16</a></li>
<li><a href="#Core_StrConv_parseS32">StrConv.parseS32</a></li>
<li><a href="#Core_StrConv_parseS64">StrConv.parseS64</a></li>
<li><a href="#Core_StrConv_parseS8">StrConv.parseS8</a></li>
<li><a href="#Core_StrConv_parseString">StrConv.parseString</a></li>
<li><a href="#Core_StrConv_parseU16">StrConv.parseU16</a></li>
<li><a href="#Core_StrConv_parseU32">StrConv.parseU32</a></li>
<li><a href="#Core_StrConv_parseU64">StrConv.parseU64</a></li>
<li><a href="#Core_StrConv_parseU8">StrConv.parseU8</a></li>
<li><a href="#Core_StrConv_parseX64">StrConv.parseX64</a></li>
<li><a href="#Core_StrConv_pokeValue">StrConv.pokeValue</a></li>
<li><a href="#Core_StrConv_toDisplaySize">StrConv.toDisplaySize</a></li>
<li><a href="#Core_StrConv_toF32">StrConv.toF32</a></li>
<li><a href="#Core_StrConv_toF64">StrConv.toF64</a></li>
<li><a href="#Core_StrConv_toNum">StrConv.toNum</a></li>
<li><a href="#Core_StrConv_toS16">StrConv.toS16</a></li>
<li><a href="#Core_StrConv_toS32">StrConv.toS32</a></li>
<li><a href="#Core_StrConv_toS64">StrConv.toS64</a></li>
<li><a href="#Core_StrConv_toS8">StrConv.toS8</a></li>
<li><a href="#Core_StrConv_toU16">StrConv.toU16</a></li>
<li><a href="#Core_StrConv_toU32">StrConv.toU32</a></li>
<li><a href="#Core_StrConv_toU64">StrConv.toU64</a></li>
<li><a href="#Core_StrConv_toU8">StrConv.toU8</a></li>
<li><a href="#Core_String_append">String.append</a></li>
<li><a href="#Core_String_appendFormat">String.appendFormat</a></li>
<li><a href="#Core_String_back">String.back</a></li>
<li><a href="#Core_String_clear">String.clear</a></li>
<li><a href="#Core_String_ensureNotNull">String.ensureNotNull</a></li>
<li><a href="#Core_String_from">String.from</a></li>
<li><a href="#Core_String_grow">String.grow</a></li>
<li><a href="#Core_String_insert">String.insert</a></li>
<li><a href="#Core_String_isEmpty">String.isEmpty</a></li>
<li><a href="#Core_String_isNull">String.isNull</a></li>
<li><a href="#Core_String_isNullOrEmpty">String.isNullOrEmpty</a></li>
<li><a href="#Core_String_join">String.join</a></li>
<li><a href="#Core_String_joinWith">String.joinWith</a></li>
<li><a href="#Core_String_makeLower">String.makeLower</a></li>
<li><a href="#Core_String_makeUpper">String.makeUpper</a></li>
<li><a href="#Core_String_opAffect">String.opAffect</a></li>
<li><a href="#Core_String_opAssign">String.opAssign</a></li>
<li><a href="#Core_String_opCast">String.opCast</a></li>
<li><a href="#Core_String_opCmp">String.opCmp</a></li>
<li><a href="#Core_String_opCount">String.opCount</a></li>
<li><a href="#Core_String_opData">String.opData</a></li>
<li><a href="#Core_String_opEquals">String.opEquals</a></li>
<li><a href="#Core_String_opIndex">String.opIndex</a></li>
<li><a href="#Core_String_opIndexAffect">String.opIndexAffect</a></li>
<li><a href="#Core_String_opIndexAssign">String.opIndexAssign</a></li>
<li><a href="#Core_String_opSlice">String.opSlice</a></li>
<li><a href="#Core_String_opVisitBytes">String.opVisitBytes</a></li>
<li><a href="#Core_String_opVisitRunes">String.opVisitRunes</a></li>
<li><a href="#Core_String_remove">String.remove</a></li>
<li><a href="#Core_String_removeBack">String.removeBack</a></li>
<li><a href="#Core_String_replace">String.replace</a></li>
<li><a href="#Core_String_reserve">String.reserve</a></li>
<li><a href="#Core_String_toCharArray">String.toCharArray</a></li>
<li><a href="#Core_String_toLower">String.toLower</a></li>
<li><a href="#Core_String_toSlice">String.toSlice</a></li>
<li><a href="#Core_String_toString">String.toString</a></li>
<li><a href="#Core_String_toUpper">String.toUpper</a></li>
<li><a href="#Core_String_trim">String.trim</a></li>
<li><a href="#Core_String_trimEnd">String.trimEnd</a></li>
<li><a href="#Core_String_trimStart">String.trimStart</a></li>
<li><a href="#Core_StrConv_StringBuilder_appendAny">StringBuilder.appendAny</a></li>
<li><a href="#Core_StrConv_StringBuilder_appendEOL">StringBuilder.appendEOL</a></li>
<li><a href="#Core_StrConv_StringBuilder_appendFormat">StringBuilder.appendFormat</a></li>
<li><a href="#Core_StrConv_StringBuilder_appendRune">StringBuilder.appendRune</a></li>
<li><a href="#Core_StrConv_StringBuilder_appendString">StringBuilder.appendString</a></li>
<li><a href="#Core_StrConv_StringBuilder_clear">StringBuilder.clear</a></li>
<li><a href="#Core_StrConv_StringBuilder_count">StringBuilder.count</a></li>
<li><a href="#Core_StrConv_StringBuilder_moveToString">StringBuilder.moveToString</a></li>
<li><a href="#Core_StrConv_StringBuilder_setBucketSize">StringBuilder.setBucketSize</a></li>
<li><a href="#Core_StrConv_StringBuilder_toString">StringBuilder.toString</a></li>
<li><a href="#Core_StrConv_StringBuilder_zeroTerminated">StringBuilder.zeroTerminated</a></li>
<li><a href="#Core_Tokenize_eatCount">Tokenize.eatCount</a></li>
<li><a href="#Core_Tokenize_eatQuotes">Tokenize.eatQuotes</a></li>
<li><a href="#Core_Tokenize_eatSpaces">Tokenize.eatSpaces</a></li>
<li><a href="#Core_Tokenize_getTo">Tokenize.getTo</a></li>
<li><a href="#Core_Tokenize_getToSpace">Tokenize.getToSpace</a></li>
<li><a href="#Core_Tokenize_getWhileAlnum">Tokenize.getWhileAlnum</a></li>
<li><a href="#Core_Tokenize_split">Tokenize.split</a></li>
<li><a href="#Core_Tokenize_splitLines">Tokenize.splitLines</a></li>
<li><a href="#Core_Unicode_fromUtf8">Unicode.fromUtf8</a></li>
<li><a href="#Core_Unicode_isAscii">Unicode.isAscii</a></li>
<li><a href="#Core_Unicode_isControl">Unicode.isControl</a></li>
<li><a href="#Core_Unicode_isDigit">Unicode.isDigit</a></li>
<li><a href="#Core_Unicode_isLatin1">Unicode.isLatin1</a></li>
<li><a href="#Core_Unicode_isLetter">Unicode.isLetter</a></li>
<li><a href="#Core_Unicode_isLetterOrDigit">Unicode.isLetterOrDigit</a></li>
<li><a href="#Core_Unicode_isLower">Unicode.isLower</a></li>
<li><a href="#Core_Unicode_isNumber">Unicode.isNumber</a></li>
<li><a href="#Core_Unicode_isSpace">Unicode.isSpace</a></li>
<li><a href="#Core_Unicode_isSymbol">Unicode.isSymbol</a></li>
<li><a href="#Core_Unicode_isSymbolMath">Unicode.isSymbolMath</a></li>
<li><a href="#Core_Unicode_isTitle">Unicode.isTitle</a></li>
<li><a href="#Core_Unicode_isUpper">Unicode.isUpper</a></li>
<li><a href="#Core_Unicode_makeLower">Unicode.makeLower</a></li>
<li><a href="#Core_Unicode_makeUpper">Unicode.makeUpper</a></li>
<li><a href="#Core_Unicode_toLower">Unicode.toLower</a></li>
<li><a href="#Core_Unicode_toTitle">Unicode.toTitle</a></li>
<li><a href="#Core_Unicode_toUpper">Unicode.toUpper</a></li>
<li><a href="#Core_Utf16_decodeRune">Utf16.decodeRune</a></li>
<li><a href="#Core_Utf16_encodeRune">Utf16.encodeRune</a></li>
<li><a href="#Core_Utf16_fromUnicode">Utf16.fromUnicode</a></li>
<li><a href="#Core_Utf16_fromUtf8">Utf16.fromUtf8</a></li>
<li><a href="#Core_Utf16_lengthZeroTerminated">Utf16.lengthZeroTerminated</a></li>
<li><a href="#Core_Utf16_toZeroTerminated">Utf16.toZeroTerminated</a></li>
<li><a href="#Core_Utf8_byteIndex">Utf8.byteIndex</a></li>
<li><a href="#Core_Utf8_compare">Utf8.compare</a></li>
<li><a href="#Core_Utf8_contains">Utf8.contains</a></li>
<li><a href="#Core_Utf8_countBytesAt">Utf8.countBytesAt</a></li>
<li><a href="#Core_Utf8_countRunes">Utf8.countRunes</a></li>
<li><a href="#Core_Utf8_decodeLastRune">Utf8.decodeLastRune</a></li>
<li><a href="#Core_Utf8_decodeRune">Utf8.decodeRune</a></li>
<li><a href="#Core_Utf8_encodeRune">Utf8.encodeRune</a></li>
<li><a href="#Core_Utf8_endsWith">Utf8.endsWith</a></li>
<li><a href="#Core_Utf8_firstRune">Utf8.firstRune</a></li>
<li><a href="#Core_Utf8_fromUnicode">Utf8.fromUnicode</a></li>
<li><a href="#Core_Utf8_fromUtf16">Utf8.fromUtf16</a></li>
<li><a href="#Core_Utf8_indexOf">Utf8.indexOf</a></li>
<li><a href="#Core_Utf8_isValid">Utf8.isValid</a></li>
<li><a href="#Core_Utf8_isValidRune">Utf8.isValidRune</a></li>
<li><a href="#Core_Utf8_lastIndexOf">Utf8.lastIndexOf</a></li>
<li><a href="#Core_Utf8_lastRune">Utf8.lastRune</a></li>
<li><a href="#Core_Utf8_startsWith">Utf8.startsWith</a></li>
<li><a href="#Core_Utf8_visitRunes">Utf8.visitRunes</a></li>
</ul>
<h4>thread</h4>
<ul>
<li><a href="#Core_Atomic_add">Atomic.add</a></li>
<li><a href="#Core_Atomic_and">Atomic.and</a></li>
<li><a href="#Core_Atomic_compareExchange">Atomic.compareExchange</a></li>
<li><a href="#Core_Atomic_exchange">Atomic.exchange</a></li>
<li><a href="#Core_Atomic_get">Atomic.get</a></li>
<li><a href="#Core_Atomic_or">Atomic.or</a></li>
<li><a href="#Core_Atomic_xor">Atomic.xor</a></li>
<li><a href="#Core_Sync_Event_create">Event.create</a></li>
<li><a href="#Core_Sync_Event_init">Event.init</a></li>
<li><a href="#Core_Sync_Event_isValid">Event.isValid</a></li>
<li><a href="#Core_Sync_Event_release">Event.release</a></li>
<li><a href="#Core_Sync_Event_reset">Event.reset</a></li>
<li><a href="#Core_Sync_Event_signal">Event.signal</a></li>
<li><a href="#Core_Sync_Event_wait">Event.wait</a></li>
<li><a href="#Core_Jobs_getNumWorkers">Jobs.getNumWorkers</a></li>
<li><a href="#Core_Jobs_isSynchrone">Jobs.isSynchrone</a></li>
<li><a href="#Core_Jobs_parallelFor">Jobs.parallelFor</a></li>
<li><a href="#Core_Jobs_parallelVisit">Jobs.parallelVisit</a></li>
<li><a href="#Core_Jobs_scheduleJob">Jobs.scheduleJob</a></li>
<li><a href="#Core_Jobs_setNumWorkers">Jobs.setNumWorkers</a></li>
<li><a href="#Core_Jobs_waitDone">Jobs.waitDone</a></li>
<li><a href="#Core_Jobs_waitJob">Jobs.waitJob</a></li>
<li><a href="#Core_Sync_Mutex_lock">Mutex.lock</a></li>
<li><a href="#Core_Sync_Mutex_tryLock">Mutex.tryLock</a></li>
<li><a href="#Core_Sync_Mutex_unlock">Mutex.unlock</a></li>
<li><a href="#Core_Sync_RWLock_lock">RWLock.lock</a></li>
<li><a href="#Core_Sync_RWLock_lockExclusive">RWLock.lockExclusive</a></li>
<li><a href="#Core_Sync_RWLock_lockShared">RWLock.lockShared</a></li>
<li><a href="#Core_Sync_RWLock_tryLockExclusive">RWLock.tryLockExclusive</a></li>
<li><a href="#Core_Sync_RWLock_tryLockShared">RWLock.tryLockShared</a></li>
<li><a href="#Core_Sync_RWLock_unlock">RWLock.unlock</a></li>
<li><a href="#Core_Sync_RWLock_unlockExclusive">RWLock.unlockExclusive</a></li>
<li><a href="#Core_Sync_RWLock_unlockShared">RWLock.unlockShared</a></li>
<li><a href="#Core_Sync_scopedLock">Sync.scopedLock</a></li>
<li><a href="#Core_Sync_sharedLock">Sync.sharedLock</a></li>
<li><a href="#Core_Threading_Thread_init">Thread.init</a></li>
<li><a href="#Core_Threading_Thread_isDone">Thread.isDone</a></li>
<li><a href="#Core_Threading_Thread_isValid">Thread.isValid</a></li>
<li><a href="#Core_Threading_Thread_safeForceEnd">Thread.safeForceEnd</a></li>
<li><a href="#Core_Threading_Thread_setPriority">Thread.setPriority</a></li>
<li><a href="#Core_Threading_Thread_sleep">Thread.sleep</a></li>
<li><a href="#Core_Threading_Thread_start">Thread.start</a></li>
<li><a href="#Core_Threading_Thread_wait">Thread.wait</a></li>
<li><a href="#Core_Threading_Thread_yield">Thread.yield</a></li>
<li><a href="#Core_Threading_wait">Threading.wait</a></li>
</ul>
<h4>time</h4>
<ul>
<li><a href="#Core_Time_DateTime_dayOfWeek">DateTime.dayOfWeek</a></li>
<li><a href="#Core_Time_DateTime_dayOfWeekName">DateTime.dayOfWeekName</a></li>
<li><a href="#Core_Time_DateTime_isValid">DateTime.isValid</a></li>
<li><a href="#Core_Time_DateTime_monthName">DateTime.monthName</a></li>
<li><a href="#Core_Time_DateTime_now">DateTime.now</a></li>
<li><a href="#Core_Time_DateTime_opCmp">DateTime.opCmp</a></li>
<li><a href="#Core_Time_DateTime_opEquals">DateTime.opEquals</a></li>
<li><a href="#Core_Time_DateTime_parse">DateTime.parse</a></li>
<li><a href="#Core_Time_DateTime_setNow">DateTime.setNow</a></li>
<li><a href="#Core_Time_DateTime_toString">DateTime.toString</a></li>
<li><a href="#Core_Time_Duration_fromMs">Duration.fromMs</a></li>
<li><a href="#Core_Time_Duration_opAffect">Duration.opAffect</a></li>
<li><a href="#Core_Time_Duration_opAffectSuffix">Duration.opAffectSuffix</a></li>
<li><a href="#Core_Time_Duration_toMs">Duration.toMs</a></li>
<li><a href="#Core_Time_FrameTiming_pause">FrameTiming.pause</a></li>
<li><a href="#Core_Time_FrameTiming_unpause">FrameTiming.unpause</a></li>
<li><a href="#Core_Time_FrameTiming_update">FrameTiming.update</a></li>
<li><a href="#Core_Time_DateTime_IConvert_convert">IConvert.convert</a></li>
<li><a href="#Core_Time_Stopwatch_elapsedMicroseconds">Stopwatch.elapsedMicroseconds</a></li>
<li><a href="#Core_Time_Stopwatch_elapsedMicrosecondsNow">Stopwatch.elapsedMicrosecondsNow</a></li>
<li><a href="#Core_Time_Stopwatch_elapsedMilliseconds">Stopwatch.elapsedMilliseconds</a></li>
<li><a href="#Core_Time_Stopwatch_elapsedMillisecondsNow">Stopwatch.elapsedMillisecondsNow</a></li>
<li><a href="#Core_Time_Stopwatch_reset">Stopwatch.reset</a></li>
<li><a href="#Core_Time_Stopwatch_restart">Stopwatch.restart</a></li>
<li><a href="#Core_Time_Stopwatch_scopeMeasure">Stopwatch.scopeMeasure</a></li>
<li><a href="#Core_Time_Stopwatch_start">Stopwatch.start</a></li>
<li><a href="#Core_Time_Stopwatch_stop">Stopwatch.stop</a></li>
<li><a href="#Core_Time_dateToTicks">Time.dateToTicks</a></li>
<li><a href="#Core_Time_daysInMonth">Time.daysInMonth</a></li>
<li><a href="#Core_Time_isLeapYear">Time.isLeapYear</a></li>
<li><a href="#Core_Time_nowMicroseconds">Time.nowMicroseconds</a></li>
<li><a href="#Core_Time_nowMilliseconds">Time.nowMilliseconds</a></li>
<li><a href="#Core_Time_nowPrecise">Time.nowPrecise</a></li>
<li><a href="#Core_Time_preciseFrequency">Time.preciseFrequency</a></li>
<li><a href="#Core_Time_ticksToDate">Time.ticksToDate</a></li>
<li><a href="#Core_Time_ticksToTime">Time.ticksToTime</a></li>
<li><a href="#Core_Time_timeToTicks">Time.timeToTicks</a></li>
<li><a href="#Core_Time_TimeSpan_addDays">TimeSpan.addDays</a></li>
<li><a href="#Core_Time_TimeSpan_addHours">TimeSpan.addHours</a></li>
<li><a href="#Core_Time_TimeSpan_addMilliSeconds">TimeSpan.addMilliSeconds</a></li>
<li><a href="#Core_Time_TimeSpan_addMinutes">TimeSpan.addMinutes</a></li>
<li><a href="#Core_Time_TimeSpan_addMonths">TimeSpan.addMonths</a></li>
<li><a href="#Core_Time_TimeSpan_addSeconds">TimeSpan.addSeconds</a></li>
<li><a href="#Core_Time_TimeSpan_addYears">TimeSpan.addYears</a></li>
<li><a href="#Core_Time_TimeSpan_from">TimeSpan.from</a></li>
<li><a href="#Core_Time_TimeSpan_now">TimeSpan.now</a></li>
<li><a href="#Core_Time_TimeSpan_opCmp">TimeSpan.opCmp</a></li>
<li><a href="#Core_Time_TimeSpan_setNow">TimeSpan.setNow</a></li>
<li><a href="#Core_Time_TimeSpan_toDateTime">TimeSpan.toDateTime</a></li>
<li><a href="#Core_Time_TimeSpan_totalDays">TimeSpan.totalDays</a></li>
<li><a href="#Core_Time_TimeSpan_totalHours">TimeSpan.totalHours</a></li>
<li><a href="#Core_Time_TimeSpan_totalMilliSeconds">TimeSpan.totalMilliSeconds</a></li>
<li><a href="#Core_Time_TimeSpan_totalMinutes">TimeSpan.totalMinutes</a></li>
<li><a href="#Core_Time_TimeSpan_totalSeconds">TimeSpan.totalSeconds</a></li>
<li><a href="#Core_Time_Timer_create">Timer.create</a></li>
<li><a href="#Core_Time_Timer_init">Timer.init</a></li>
<li><a href="#Core_Time_Timer_release">Timer.release</a></li>
</ul>
</div>
</div>
<div class="right">
<div class="rightpage">
<blockquote>
<b>Work in progress</b>. Generated documentation (swag doc 0.23.0)</blockquote>
<h1>Swag Std.Core</h1>
<p>The <code class="incode">Std.core</code> module contains basic types and algorithms. </p>
<p> It is the base of all other modules of the standard <code class="incode">Std</code> workspace. </p>
<p> You will find collections like <a href="#Core_Array">Array</a> or <a href="#Core_HashTable">HashTable</a>, a dynamic <a href="#Core_String">String</a> and so on. </p>
<h1>Content</h1>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ASSERT"><span class="titletype">const</span> <span class="titlelight">Core.</span><span class="titlestrong">Constants</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\config.swg#L3" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td id="Core_ASSERT">ASSERT</td>
<td>bool</td>
<td></td>
</tr>
<tr>
<td id="Core_BIG_ENDIAN">BIG_ENDIAN</td>
<td>bool</td>
<td></td>
</tr>
<tr>
<td id="Core_Env_EndLine">EndLine</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td id="Core_Latin1_CharProperties">CharProperties</td>
<td>const [256] Core.Latin1.CharAttribute</td>
<td></td>
</tr>
<tr>
<td id="Core_Path_AltDirectorySeparatorChar">AltDirectorySeparatorChar</td>
<td>u8</td>
<td></td>
</tr>
<tr>
<td id="Core_Path_DirectorySeparatorChar">DirectorySeparatorChar</td>
<td>u8</td>
<td></td>
</tr>
<tr>
<td id="Core_Path_VolumeSeparatorChar">VolumeSeparatorChar</td>
<td>u8</td>
<td></td>
</tr>
<tr>
<td id="Core_Random_NN">NN</td>
<td>s32</td>
<td></td>
</tr>
<tr>
<td id="Core_StrConv_ParseErrorIncomplete">ParseErrorIncomplete</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td id="Core_StrConv_ParseErrorInvalid">ParseErrorInvalid</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td id="Core_StrConv_ParseErrorOverflow">ParseErrorOverflow</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td id="Core_StringSmallSize">StringSmallSize</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_DayOfWeekNames">DayOfWeekNames</td>
<td>const [7] string</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_DaysPer100Years">DaysPer100Years</td>
<td>s32</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_DaysPer400Years">DaysPer400Years</td>
<td>s32</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_DaysPer4Years">DaysPer4Years</td>
<td>s32</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_DaysPerYear">DaysPerYear</td>
<td>s32</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_DaysTo10000">DaysTo10000</td>
<td>u64</td>
<td>Number of days from 1/1/0001 to 12/31/9999. </td>
</tr>
<tr>
<td id="Core_Time_DaysTo1601">DaysTo1601</td>
<td>u64</td>
<td>Number of days from 1/1/0001 to 12/31/1600. </td>
</tr>
<tr>
<td id="Core_Time_DaysTo1899">DaysTo1899</td>
<td>u64</td>
<td>Number of days from 1/1/0001 to 12/30/1899. </td>
</tr>
<tr>
<td id="Core_Time_DaysTo1970">DaysTo1970</td>
<td>u64</td>
<td>Number of days from 1/1/0001 to 12/31/1969. </td>
</tr>
<tr>
<td id="Core_Time_DaysToMonth365">DaysToMonth365</td>
<td>const [13] u16</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_DaysToMonth366">DaysToMonth366</td>
<td>const [13] u16</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_MaxMilliSeconds">MaxMilliSeconds</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_MaxMillis">MaxMillis</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_MaxTicks">MaxTicks</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_MillisPerDay">MillisPerDay</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_MillisPerHour">MillisPerHour</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_MillisPerMinute">MillisPerMinute</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_MillisPerSecond">MillisPerSecond</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_MonthNames">MonthNames</td>
<td>const [12] string</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_TicksPerDay">TicksPerDay</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_TicksPerHour">TicksPerHour</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_TicksPerMilliSecond">TicksPerMilliSecond</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_TicksPerMinute">TicksPerMinute</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_TicksPerSecond">TicksPerSecond</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td id="Core_Utf16_RuneError">RuneError</td>
<td>rune</td>
<td></td>
</tr>
<tr>
<td id="Core_Utf16_Surr1">Surr1</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td id="Core_Utf16_Surr2">Surr2</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td id="Core_Utf16_Surr3">Surr3</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td id="Core_Utf16_SurrSelf">SurrSelf</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td id="Core_Utf8_MaxRunes">MaxRunes</td>
<td>rune</td>
<td></td>
</tr>
<tr>
<td id="Core_Utf8_RuneError">RuneError</td>
<td>rune</td>
<td></td>
</tr>
<tr>
<td id="Core_Utf8_SurrogateMax">SurrogateMax</td>
<td>rune</td>
<td></td>
</tr>
<tr>
<td id="Core_Utf8_SurrogateMin">SurrogateMin</td>
<td>rune</td>
<td></td>
</tr>
<tr>
<td id="Core_WINDOWS">WINDOWS</td>
<td>bool</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Env_ProcessHandle"><span class="titletype">type alias</span> <span class="titlelight">Env.</span><span class="titlestrong">Type Aliases</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\process.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td id="Core_Env_ProcessHandle">ProcessHandle</td>
<td>const *void</td>
<td></td>
</tr>
<tr>
<td id="Core_File_FileHandle">FileHandle</td>
<td>const *void</td>
<td></td>
</tr>
<tr>
<td id="Core_Input_VirtualKey">VirtualKey</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td id="Core_Math_ConstF32">ConstF32</td>
<td>Core.Math.Const'(f32)</td>
<td></td>
</tr>
<tr>
<td id="Core_Math_ConstF64">ConstF64</td>
<td>Core.Math.Const'(f64)</td>
<td></td>
</tr>
<tr>
<td id="Core_Threading_ThreadHandle">ThreadHandle</td>
<td>const *void</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_Ticks">Ticks</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td id="Core_Time_TimerHandle">TimerHandle</td>
<td>const *void</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array"><span class="titletype">struct</span> <span class="titlelight">Core.</span><span class="titlestrong">Array</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>This is a generic dynamic array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<table class="enumeration">
<tr>
<td>allocator</td>
<td><a href="swag.runtime.html#Swag_IAllocator">Swag.IAllocator</a></td>
<td>Associated allocator. </td>
</tr>
<tr>
<td>buffer</td>
<td>^T</td>
<td>Memory block of all datas. </td>
</tr>
<tr>
<td>count</td>
<td>u64</td>
<td>Number of valid datas. </td>
</tr>
<tr>
<td>capacity</td>
<td>u64</td>
<td>Number of elements that can be stored in the buffer. </td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Array_add">add(self, T)</a></td>
<td>Add a copy of one element at the end of the array. </td>
</tr>
<tr>
<td><a href="#Core_Array_add">add(self, const [..] T)</a></td>
<td>Append a slice to the end of this instance. </td>
</tr>
<tr>
<td><a href="#Core_Array_add">add(self, moveref T)</a></td>
<td>Move one element at the end of the array. </td>
</tr>
<tr>
<td><a href="#Core_Array_addOnce">addOnce</a></td>
<td>Add a copy of one element at the end of the array. </td>
</tr>
<tr>
<td><a href="#Core_Array_back">back</a></td>
<td>Returns a copy of the last element. </td>
</tr>
<tr>
<td><a href="#Core_Array_backPtr">backPtr</a></td>
<td>Returns the address of the last element. </td>
</tr>
<tr>
<td><a href="#Core_Array_clear">clear</a></td>
<td>Set the number of elements to 0. </td>
</tr>
<tr>
<td><a href="#Core_Array_contains">contains</a></td>
<td>Returns true if the given <code class="incode">value</code> is in the array. </td>
</tr>
<tr>
<td><a href="#Core_Array_createBuffer">createBuffer</a></td>
<td>Create a working buffer. </td>
</tr>
<tr>
<td><a href="#Core_Array_createTemp">createTemp</a></td>
<td>Create a temporary array. </td>
</tr>
<tr>
<td><a href="#Core_Array_emplaceAddress">emplaceAddress</a></td>
<td>Reserve room at the end of the array for <code class="incode">num</code> elements, but does not  initialize them. Returns the address of the first element. </td>
</tr>
<tr>
<td><a href="#Core_Array_emplaceAt">emplaceAt</a></td>
<td>Move some values at the given index. If <code class="incode">index</code> is equal to <code class="incode">count</code>, then  the values are moved at the end of the array.  Order is preserved. </td>
</tr>
<tr>
<td><a href="#Core_Array_emplaceInitAddress">emplaceInitAddress</a></td>
<td>Reserve room at the end of the array for <code class="incode">num</code> elements. </td>
</tr>
<tr>
<td><a href="#Core_Array_free">free</a></td>
<td>Free the array content. </td>
</tr>
<tr>
<td><a href="#Core_Array_front">front</a></td>
<td>Returns a copy of the first element. </td>
</tr>
<tr>
<td><a href="#Core_Array_frontPtr">frontPtr</a></td>
<td>Returns the address of the first element. </td>
</tr>
<tr>
<td><a href="#Core_Array_grow">grow</a></td>
<td>Ensure the Array is big enough to store at least <code class="incode">newCount</code> elements  Number of valid elements does not change. </td>
</tr>
<tr>
<td><a href="#Core_Array_insertAt">insertAt(self, u64, T)</a></td>
<td>Insert a value at the given index. If <code class="incode">index</code> is equal to <code class="incode">count</code>, then  the value is added at the end of the array.  Order is preserved. </td>
</tr>
<tr>
<td><a href="#Core_Array_insertAt">insertAt(self, u64, const [..] T)</a></td>
<td>Insert some values at the given index. If <code class="incode">index</code> is equal to <code class="incode">count</code>, then  the values are added at the end of the array.  Order is preserved. </td>
</tr>
<tr>
<td><a href="#Core_Array_insertAt">insertAt(self, u64, moveref T)</a></td>
<td>Move a value at the given index. If <code class="incode">index</code> is equal to <code class="incode">count</code>, then  the value is added at the end of the array.  Order is preserved. </td>
</tr>
<tr>
<td><a href="#Core_Array_isEmpty">isEmpty</a></td>
<td>Returns true if the array is empty. </td>
</tr>
<tr>
<td><a href="#Core_Array_popBack">popBack</a></td>
<td>Returns a copy of the last element, and remove it from the array. </td>
</tr>
<tr>
<td><a href="#Core_Array_realloc">realloc</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_remove">remove(self, V)</a></td>
<td>Remove the given <code class="incode">value</code>  If not found, does nothing. </td>
</tr>
<tr>
<td><a href="#Core_Array_remove">remove(self, u64, u64)</a></td>
<td>Remove <code class="incode">num</code> elements starting at <code class="incode">index</code>. </td>
</tr>
<tr>
<td><a href="#Core_Array_removeAt">removeAt</a></td>
<td>Remove an element at <code class="incode">index</code> by replacing it with the last element. </td>
</tr>
<tr>
<td><a href="#Core_Array_removeAtOrdered">removeAtOrdered</a></td>
<td>Remove <code class="incode">numValues</code> elements at <code class="incode">index</code> by shifting all others. </td>
</tr>
<tr>
<td><a href="#Core_Array_removeBack">removeBack</a></td>
<td>Remove the last element. </td>
</tr>
<tr>
<td><a href="#Core_Array_removeOrdered">removeOrdered</a></td>
<td>Remove the given <code class="incode">value</code>  If not found, does nothing. </td>
</tr>
<tr>
<td><a href="#Core_Array_reserve">reserve</a></td>
<td>Reserve room for <code class="incode">newCapacity</code> elements without changing the array count  Number of valid elements does not change. </td>
</tr>
<tr>
<td><a href="#Core_Array_resize">resize</a></td>
<td>Change the number of valid elements in the array. </td>
</tr>
<tr>
<td><a href="#Core_Array_sort">sort(self)</a></td>
<td>Sort array. </td>
</tr>
<tr>
<td><a href="#Core_Array_sort">sort(self, func(*void, T, T)->s32)</a></td>
<td>Sort array. </td>
</tr>
<tr>
<td><a href="#Core_Array_sortReverse">sortReverse</a></td>
<td>Sort array in reverse order (from biggest to lowest value). </td>
</tr>
<tr>
<td><a href="#Core_Array_swap">swap</a></td>
<td>Swap two elements. </td>
</tr>
<tr>
<td><a href="#Core_Array_toSlice">toSlice</a></td>
<td>Returns a slice. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Array_opAffect">opAffect</a></td>
<td>Initializes an Array that contains values copied from the specified array. </td>
</tr>
<tr>
<td><a href="#Core_Array_opCast">opCast(self)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opCast">opCast(self)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opCount">opCount</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opData">opData</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opDrop">opDrop</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opIndex">opIndex(self, u64)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opIndex">opIndex(self, u64)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opIndexAffect">opIndexAffect</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opIndexAssign">opIndexAssign</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opPostCopy">opPostCopy</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opSlice">opSlice</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opVisit">opVisit</a></td>
<td>Visit every elements of the array. </td>
</tr>
<tr>
<td><a href="#Core_Array_opVisitBack">opVisitBack</a></td>
<td>Visit every elements of the array from end to start. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_add"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">add</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L327" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a copy of one element at the end of the array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>Append a slice to the end of this instance. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, values: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>Move one element at the end of the array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxKeyword">moveref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_addOnce"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">addOnce</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L316" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a copy of one element at the end of the array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">addOnce</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_back"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">back</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L653" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a copy of the last element. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">back</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_backPtr"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">backPtr</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L661" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the address of the last element. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">backPtr</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;*</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_clear"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L304" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the number of elements to 0. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_contains"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">contains</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L612" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given <code class="incode">value</code> is in the array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">V</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">contains</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_createBuffer"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">createBuffer</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L239" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Create a working buffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">createBuffer</span><span class="SyntaxCode">(size: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_createTemp"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">createTemp</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L230" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Create a temporary array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">TA</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">createTemp</span><span class="SyntaxCode">()-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">TA</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_emplaceAddress"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">emplaceAddress</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L345" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve room at the end of the array for <code class="incode">num</code> elements, but does not  initialize them. Returns the address of the first element. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">emplaceAddress</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, num: </span><span class="SyntaxType">u32</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">1</span><span class="SyntaxCode">)-&gt;^</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_emplaceAt"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">emplaceAt</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L452" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Move some values at the given index. If <code class="incode">index</code> is equal to <code class="incode">count</code>, then  the values are moved at the end of the array.  Order is preserved. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">emplaceAt</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, values: [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_emplaceInitAddress"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">emplaceInitAddress</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L354" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve room at the end of the array for <code class="incode">num</code> elements. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">emplaceInitAddress</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, num: </span><span class="SyntaxType">u32</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">1</span><span class="SyntaxCode">)-&gt;^</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p> Returns the address of the first element </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_free"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">free</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L212" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Free the array content. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">free</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_front"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">front</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L638" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a copy of the first element. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">front</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_frontPtr"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">frontPtr</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L646" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the address of the first element. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">frontPtr</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;*</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_grow"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">grow</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L259" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Ensure the Array is big enough to store at least <code class="incode">newCount</code> elements  Number of valid elements does not change. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">grow</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, newCount: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_insertAt"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">insertAt</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L366" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Insert a value at the given index. If <code class="incode">index</code> is equal to <code class="incode">count</code>, then  the value is added at the end of the array.  Order is preserved. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">insertAt</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>Insert some values at the given index. If <code class="incode">index</code> is equal to <code class="incode">count</code>, then  the values are added at the end of the array.  Order is preserved. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">insertAt</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, values: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>Move a value at the given index. If <code class="incode">index</code> is equal to <code class="incode">count</code>, then  the value is added at the end of the array.  Order is preserved. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">insertAt</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, value: </span><span class="SyntaxKeyword">moveref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_isEmpty"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">isEmpty</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L248" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the array is empty. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isEmpty</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_opAffect"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">opAffect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L105" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initializes an Array that contains values copied from the specified array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opAffect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, arr: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_opCast"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">opCast</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L53" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCast</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;[..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCast</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_opCount"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">opCount</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCount</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_opData"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">opData</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opData</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_opDrop"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">opDrop</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opDrop</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_opIndex"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">opIndex</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L82" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opIndex</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opIndex</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxKeyword">ref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_opIndexAffect"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">opIndexAffect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L90" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opIndexAffect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_opIndexAssign"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">opIndexAssign</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L98" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opIndexAssign</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_opPostCopy"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">opPostCopy</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L32" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opPostCopy</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_opSlice"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">opSlice</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L65" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opSlice</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, lower: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, upper: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;[..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_opVisit"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">opVisit</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L129" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Visit every elements of the array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(ptr: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opVisit</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_opVisitBack"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">opVisitBack</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L157" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Visit every elements of the array from end to start. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(ptr: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opVisitBack</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_popBack"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">popBack</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L668" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a copy of the last element, and remove it from the array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">popBack</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_realloc"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">realloc</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L182" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">realloc</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, newCapacity: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_remove"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">remove</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L595" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove the given <code class="incode">value</code>  If not found, does nothing. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">V</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">remove</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)</code>
</div>
<p>Remove <code class="incode">num</code> elements starting at <code class="incode">index</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">remove</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, num: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_removeAt"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">removeAt</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L550" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove an element at <code class="incode">index</code> by replacing it with the last element. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">removeAt</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p> Order is <b>not preserved</b> </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_removeAtOrdered"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">removeAtOrdered</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L562" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove <code class="incode">numValues</code> elements at <code class="incode">index</code> by shifting all others. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">removeAtOrdered</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, numValues: </span><span class="SyntaxType">u64</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">1</span><span class="SyntaxCode">)</code>
</div>
<p> Order is preserved </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_removeBack"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">removeBack</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L678" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove the last element. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">removeBack</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_removeOrdered"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">removeOrdered</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L604" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove the given <code class="incode">value</code>  If not found, does nothing. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">V</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">removeOrdered</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_reserve"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">reserve</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L269" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve room for <code class="incode">newCapacity</code> elements without changing the array count  Number of valid elements does not change. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">reserve</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, newCapacity: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_resize"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">resize</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L286" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Change the number of valid elements in the array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">resize</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, newCount: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_sort"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">sort</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L619" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sort array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sort</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>Sort array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sort</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, cb: </span><span class="SyntaxKeyword">closure</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_sortReverse"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">sortReverse</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L625" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sort array in reverse order (from biggest to lowest value). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sortReverse</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_swap"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">swap</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L518" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Swap two elements. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">swap</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, idx0: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, idx1: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Array_toSlice"><span class="titletype">func</span> <span class="titlelight">Array.</span><span class="titlestrong">toSlice</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L252" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a slice. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toSlice</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;[..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ArrayPtr"><span class="titletype">struct</span> <span class="titlelight">Core.</span><span class="titlestrong">ArrayPtr</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\arrayptr.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_ArrayPtr">ArrayPtr</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<table class="enumeration">
<tr>
<td><b>using</b> base</td>
<td>Core.Array'(*T)</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_ArrayPtr_addNewPtr">addNewPtr</a></td>
<td>Allocate a new pointer, and add it to the array. </td>
</tr>
<tr>
<td><a href="#Core_ArrayPtr_clear">clear</a></td>
<td>Release content. </td>
</tr>
<tr>
<td><a href="#Core_ArrayPtr_deletePtr">deletePtr</a></td>
<td>Delete one pointer allocated here. </td>
</tr>
<tr>
<td><a href="#Core_ArrayPtr_newPtr">newPtr</a></td>
<td>Allocate a new pointer by using the contextual allocator. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_ArrayPtr_opDrop">opDrop</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ArrayPtr_addNewPtr"><span class="titletype">func</span> <span class="titlelight">ArrayPtr.</span><span class="titlestrong">addNewPtr</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\arrayptr.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Allocate a new pointer, and add it to the array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">addNewPtr</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;*</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ArrayPtr_clear"><span class="titletype">func</span> <span class="titlelight">ArrayPtr.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\arrayptr.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Release content. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ArrayPtr_deletePtr"><span class="titletype">func</span> <span class="titlelight">ArrayPtr.</span><span class="titlestrong">deletePtr</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\arrayptr.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Delete one pointer allocated here. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">deletePtr</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, item: *</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ArrayPtr_newPtr"><span class="titletype">func</span> <span class="titlelight">ArrayPtr.</span><span class="titlestrong">newPtr</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\arrayptr.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Allocate a new pointer by using the contextual allocator. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">newPtr</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;*</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ArrayPtr_opDrop"><span class="titletype">func</span> <span class="titlelight">ArrayPtr.</span><span class="titlestrong">opDrop</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\arrayptr.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opDrop</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Atomic_add"><span class="titletype">func</span> <span class="titlelight">Atomic.</span><span class="titlestrong">add</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\atomic.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s16</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">s16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s32</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s64</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s8</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">s8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s8</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u16</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u32</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u64</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u8</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Atomic_and"><span class="titletype">func</span> <span class="titlelight">Atomic.</span><span class="titlestrong">and</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\atomic.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">and</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s16</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">s16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">and</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s32</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">and</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s64</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">and</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s8</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">s8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s8</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">and</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u16</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">and</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u32</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">and</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u64</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">and</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u8</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Atomic_compareExchange"><span class="titletype">func</span> <span class="titlelight">Atomic.</span><span class="titlestrong">compareExchange</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\atomic.swg#L52" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compareExchange</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s16</span><span class="SyntaxCode">, compareTo: </span><span class="SyntaxType">s16</span><span class="SyntaxCode">, exchangeWith: </span><span class="SyntaxType">s16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compareExchange</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s32</span><span class="SyntaxCode">, compareTo: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">, exchangeWith: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compareExchange</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s64</span><span class="SyntaxCode">, compareTo: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">, exchangeWith: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compareExchange</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s8</span><span class="SyntaxCode">, compareTo: </span><span class="SyntaxType">s8</span><span class="SyntaxCode">, exchangeWith: </span><span class="SyntaxType">s8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s8</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compareExchange</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u16</span><span class="SyntaxCode">, compareTo: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, exchangeWith: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compareExchange</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u32</span><span class="SyntaxCode">, compareTo: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, exchangeWith: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compareExchange</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u64</span><span class="SyntaxCode">, compareTo: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, exchangeWith: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compareExchange</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u8</span><span class="SyntaxCode">, compareTo: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, exchangeWith: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Atomic_exchange"><span class="titletype">func</span> <span class="titlelight">Atomic.</span><span class="titlestrong">exchange</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\atomic.swg#L43" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">exchange</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s16</span><span class="SyntaxCode">, exchangeWith: </span><span class="SyntaxType">s16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">exchange</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s32</span><span class="SyntaxCode">, exchangeWith: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">exchange</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s64</span><span class="SyntaxCode">, exchangeWith: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">exchange</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s8</span><span class="SyntaxCode">, exchangeWith: </span><span class="SyntaxType">s8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s8</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">exchange</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u16</span><span class="SyntaxCode">, exchangeWith: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">exchange</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u32</span><span class="SyntaxCode">, exchangeWith: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">exchange</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u64</span><span class="SyntaxCode">, exchangeWith: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">exchange</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u8</span><span class="SyntaxCode">, exchangeWith: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Atomic_get"><span class="titletype">func</span> <span class="titlelight">Atomic.</span><span class="titlestrong">get</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\atomic.swg#L61" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">get</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">get</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">get</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">get</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s8</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">get</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">get</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">get</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">get</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Atomic_or"><span class="titletype">func</span> <span class="titlelight">Atomic.</span><span class="titlestrong">or</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\atomic.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">or</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s16</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">s16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">or</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s32</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">or</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s64</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">or</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s8</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">s8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s8</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">or</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u16</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">or</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u32</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">or</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u64</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">or</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u8</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Atomic_xor"><span class="titletype">func</span> <span class="titlelight">Atomic.</span><span class="titlestrong">xor</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\atomic.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">xor</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s16</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">s16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">xor</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s32</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">xor</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s64</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">xor</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">s8</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">s8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s8</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">xor</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u16</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">xor</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u32</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">xor</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u64</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">xor</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">u8</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_BitArray"><span class="titletype">struct</span> <span class="titlelight">Core.</span><span class="titlestrong">BitArray</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Manages a compact array of bit values, which are represented as booleans, where <code class="incode">true</code> indicates that  the bit is on (1) and <code class="incode">false</code> indicates the bit is off (0). </p>
<table class="enumeration">
<tr>
<td>buffer</td>
<td>^u32</td>
<td></td>
</tr>
<tr>
<td>allocator</td>
<td><a href="swag.runtime.html#Swag_IAllocator">Swag.IAllocator</a></td>
<td></td>
</tr>
<tr>
<td>count</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td>capacity</td>
<td>u64</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_BitArray_and">and</a></td>
<td>Performs the bitwise AND operation between the elements of the current <code class="incode">BitArray</code> and the corresponding elements in the specified array. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_get">get</a></td>
<td>Gets the value of the bit at a specific position. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_invert">invert</a></td>
<td>Inverts the value of the bit at a specific position. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_not">not</a></td>
<td>Inverts all the bit values, so that elements set to <code class="incode">true</code> are changed to <code class="incode">false</code>, and elements set to <code class="incode">false</code> are changed to <code class="incode">true</code>. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_or">or</a></td>
<td>Performs the bitwise OR operation between the elements of the current <code class="incode">BitArray</code> and the corresponding elements in the specified array. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_reserve">reserve(self, u64)</a></td>
<td>Reserve the given amount of bits. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_reserve">reserve(self, u64, bool)</a></td>
<td>Reserve the given amount of bits and set an initial value to all bits. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_set">set</a></td>
<td>Sets the bit at a specific position to the specified value. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_setAll">setAll</a></td>
<td>Sets all bits to the specified value. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_xor">xor</a></td>
<td>Performs the bitwise XOR operation between the elements of the current <code class="incode">BitArray</code> and the corresponding elements in the specified array. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_BitArray_opAffect">opAffect</a></td>
<td>Initializes a <code class="incode">BitArray</code> that contains bit values copied from the specified array of booleans. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_opCount">opCount</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_BitArray_opEquals">opEquals</a></td>
<td>Compares two arrays, and returns <code class="incode">true</code> if they are equal. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_opIndex">opIndex</a></td>
<td>Gets the value of the bit at a specific position. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_opIndexAffect">opIndexAffect</a></td>
<td>Sets the value of the bit at a specific position. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_opVisit">opVisit</a></td>
<td>Visit all the booleans. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_BitArray_and"><span class="titletype">func</span> <span class="titlelight">BitArray.</span><span class="titlestrong">and</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L192" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Performs the bitwise AND operation between the elements of the current <code class="incode">BitArray</code> and the corresponding elements in the specified array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">and</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_BitArray">BitArray</a></span><span class="SyntaxCode">)</code>
</div>
<p> The current <code class="incode">BitArray</code> will be modified to store the result of the bitwise AND operation. </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_BitArray_get"><span class="titletype">func</span> <span class="titlelight">BitArray.</span><span class="titlestrong">get</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L167" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Gets the value of the bit at a specific position. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">get</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_BitArray_invert"><span class="titletype">func</span> <span class="titlelight">BitArray.</span><span class="titlestrong">invert</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L177" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Inverts the value of the bit at a specific position. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">invert</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_BitArray_not"><span class="titletype">func</span> <span class="titlelight">BitArray.</span><span class="titlestrong">not</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L223" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Inverts all the bit values, so that elements set to <code class="incode">true</code> are changed to <code class="incode">false</code>, and elements set to <code class="incode">false</code> are changed to <code class="incode">true</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">not</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_BitArray_opAffect"><span class="titletype">func</span> <span class="titlelight">BitArray.</span><span class="titlestrong">opAffect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L66" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initializes a <code class="incode">BitArray</code> that contains bit values copied from the specified array of booleans. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opAffect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, what: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">bool</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_BitArray_opCount"><span class="titletype">func</span> <span class="titlelight">BitArray.</span><span class="titlestrong">opCount</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L32" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCount</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_BitArray_opEquals"><span class="titletype">func</span> <span class="titlelight">BitArray.</span><span class="titlestrong">opEquals</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L76" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compares two arrays, and returns <code class="incode">true</code> if they are equal. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opEquals</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_BitArray">BitArray</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_BitArray_opIndex"><span class="titletype">func</span> <span class="titlelight">BitArray.</span><span class="titlestrong">opIndex</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L54" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Gets the value of the bit at a specific position. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opIndex</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_BitArray_opIndexAffect"><span class="titletype">func</span> <span class="titlelight">BitArray.</span><span class="titlestrong">opIndexAffect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L60" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sets the value of the bit at a specific position. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opIndexAffect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_BitArray_opVisit"><span class="titletype">func</span> <span class="titlelight">BitArray.</span><span class="titlestrong">opVisit</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L92" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Visit all the booleans. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(ptr: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opVisit</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_BitArray_or"><span class="titletype">func</span> <span class="titlelight">BitArray.</span><span class="titlestrong">or</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L203" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Performs the bitwise OR operation between the elements of the current <code class="incode">BitArray</code> and the corresponding elements in the specified array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxLogic">or</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_BitArray">BitArray</a></span><span class="SyntaxCode">)</code>
</div>
<p> The current BitArray will be modified to store the result of the bitwise OR operation. </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_BitArray_reserve"><span class="titletype">func</span> <span class="titlelight">BitArray.</span><span class="titlestrong">reserve</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L121" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve the given amount of bits. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">reserve</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, maxBits: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>Reserve the given amount of bits and set an initial value to all bits. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">reserve</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, maxBits: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, initialValue: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_BitArray_set"><span class="titletype">func</span> <span class="titlelight">BitArray.</span><span class="titlestrong">set</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L154" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sets the bit at a specific position to the specified value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">set</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_BitArray_setAll"><span class="titletype">func</span> <span class="titlelight">BitArray.</span><span class="titlestrong">setAll</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L148" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sets all bits to the specified value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setAll</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_BitArray_xor"><span class="titletype">func</span> <span class="titlelight">BitArray.</span><span class="titlestrong">xor</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L214" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Performs the bitwise XOR operation between the elements of the current <code class="incode">BitArray</code> and the corresponding elements in the specified array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">xor</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_BitArray">BitArray</a></span><span class="SyntaxCode">)</code>
</div>
<p> The current BitArray will be modified to store the result of the bitwise XOR operation. </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ByteStream"><span class="titletype">struct</span> <span class="titlelight">Core.</span><span class="titlestrong">ByteStream</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L1" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>readBuffer</td>
<td>const [..] u8</td>
<td></td>
</tr>
<tr>
<td>writeBuffer</td>
<td>*Core.Array'(u8)</td>
<td></td>
</tr>
<tr>
<td>seek</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td>eof</td>
<td>bool</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_ByteStream_getSeek">getSeek</a></td>
<td>Returns the seek value. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_isEof">isEof</a></td>
<td>Returns true if end has been reached. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_length">length</a></td>
<td>Returns length of associated slice. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_moveSeek">moveSeek</a></td>
<td>Seek to the next byte. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_openRead">openRead</a></td>
<td>Creates a byte stream to read from a slice. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_openWrite">openWrite</a></td>
<td>Creates a byte stream to write to an array. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_peekU8">peekU8</a></td>
<td>Read one byte and seek. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_readBytes">readBytes</a></td>
<td>Read the given amount of bytes. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_readData">readData</a></td>
<td>Get the buffer of datas to read. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_readNative">readNative</a></td>
<td>Read a <code class="incode">native</code> type value. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_readU8">readU8</a></td>
<td>Read one byte and seek. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_remainReadToSlice">remainReadToSlice</a></td>
<td>Returns a slice of the remaing bytes to read. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_remainReadToString">remainReadToString</a></td>
<td>Returns a string of the remaing bytes to read. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_setSeek">setSeek</a></td>
<td>Seek to the given position. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_writeBytes">writeBytes</a></td>
<td>Write the given amount of bytes. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_writeNative">writeNative</a></td>
<td>Write a <code class="incode">native</code> type value. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ByteStream_getSeek"><span class="titletype">func</span> <span class="titlelight">ByteStream.</span><span class="titlestrong">getSeek</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L145" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the seek value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getSeek</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ByteStream_isEof"><span class="titletype">func</span> <span class="titlelight">ByteStream.</span><span class="titlestrong">isEof</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L52" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if end has been reached. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isEof</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ByteStream_length"><span class="titletype">func</span> <span class="titlelight">ByteStream.</span><span class="titlestrong">length</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L40" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns length of associated slice. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">length</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ByteStream_moveSeek"><span class="titletype">func</span> <span class="titlelight">ByteStream.</span><span class="titlestrong">moveSeek</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L123" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Seek to the next byte. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">moveSeek</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, offset: </span><span class="SyntaxType">u64</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">1</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ByteStream_openRead"><span class="titletype">func</span> <span class="titlelight">ByteStream.</span><span class="titlestrong">openRead</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a byte stream to read from a slice. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">openRead</span><span class="SyntaxCode">(readBuffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_ByteStream"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ByteStream">ByteStream</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ByteStream_openWrite"><span class="titletype">func</span> <span class="titlelight">ByteStream.</span><span class="titlestrong">openWrite</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a byte stream to write to an array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">openWrite</span><span class="SyntaxCode">(writeBuffer: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">u8</span><span class="SyntaxCode">))-><a href=</span><span class="SyntaxString">"#Core_ByteStream"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ByteStream">ByteStream</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ByteStream_peekU8"><span class="titletype">func</span> <span class="titlelight">ByteStream.</span><span class="titlestrong">peekU8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L115" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read one byte and seek. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">peekU8</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ByteStream_readBytes"><span class="titletype">func</span> <span class="titlelight">ByteStream.</span><span class="titlestrong">readBytes</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L98" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read the given amount of bytes. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readBytes</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, dest: *</span><span class="SyntaxType">u8</span><span class="SyntaxCode">, count: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ByteStream_readData"><span class="titletype">func</span> <span class="titlelight">ByteStream.</span><span class="titlestrong">readData</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L46" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the buffer of datas to read. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readData</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> ^</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ByteStream_readNative"><span class="titletype">func</span> <span class="titlelight">ByteStream.</span><span class="titlestrong">readNative</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L88" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read a <code class="incode">native</code> type value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">readNative</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ByteStream_readU8"><span class="titletype">func</span> <span class="titlelight">ByteStream.</span><span class="titlestrong">readU8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L107" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read one byte and seek. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readU8</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ByteStream_remainReadToSlice"><span class="titletype">func</span> <span class="titlelight">ByteStream.</span><span class="titlestrong">remainReadToSlice</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a slice of the remaing bytes to read. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">remainReadToSlice</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ByteStream_remainReadToString"><span class="titletype">func</span> <span class="titlelight">ByteStream.</span><span class="titlestrong">remainReadToString</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a string of the remaing bytes to read. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">remainReadToString</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ByteStream_setSeek"><span class="titletype">func</span> <span class="titlelight">ByteStream.</span><span class="titlestrong">setSeek</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L136" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Seek to the given position. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setSeek</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, offset: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ByteStream_writeBytes"><span class="titletype">func</span> <span class="titlelight">ByteStream.</span><span class="titlestrong">writeBytes</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L71" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write the given amount of bytes. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeBytes</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, slice: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ByteStream_writeNative"><span class="titletype">func</span> <span class="titlelight">ByteStream.</span><span class="titlestrong">writeNative</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L58" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write a <code class="incode">native</code> type value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">writeNative</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, val: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_CharacterSet"><span class="titletype">enum</span> <span class="titlelight">Core.</span><span class="titlestrong">CharacterSet</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Latin1</td>
<td></td>
</tr>
<tr>
<td>Unicode</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_CommandLine"><span class="titletype">namespace</span> <span class="titlelight">Core.</span><span class="titlestrong">CommandLine</span></span>
</td>
</tr>
</table>
</p>
<h3>Structs</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_CommandLine_IsSet">IsSet</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_CommandLine_ParseOptions">ParseOptions</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_CommandLine_Result">Result</a></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_CommandLine_getField">getField</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_CommandLine_isOption">isOption</a></td>
<td>Returns true if <code class="incode">oneArg</code> is a valid option (starting with a delimiter). </td>
</tr>
<tr>
<td><a href="#Core_CommandLine_parse">parse</a></td>
<td>Parse all the arguments and fill the result. </td>
</tr>
<tr>
<td><a href="#Core_CommandLine_splitArguments">splitArguments</a></td>
<td>Clean and split a list of arguments  -option:value or -option=value =&gt; -option value. </td>
</tr>
</table>
<h3>Attributes</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_CommandLine_ArgParams">ArgParams</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_CommandLine_ArgParams"><span class="titletype">attr</span> <span class="titlelight">CommandLine.</span><span class="titlestrong">ArgParams</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="addinfos"><b>Usage</b>: all 
</div>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">attr</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_CommandLine_ArgParams">ArgParams</a></span><span class="SyntaxCode">(nameAlias: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_CommandLine_IsSet"><span class="titletype">struct</span> <span class="titlelight">CommandLine.</span><span class="titlestrong">IsSet</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_CommandLine_IsSet">IsSet</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_CommandLine_ParseOptions"><span class="titletype">struct</span> <span class="titlelight">CommandLine.</span><span class="titlestrong">ParseOptions</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_CommandLine_Result"><span class="titletype">struct</span> <span class="titlelight">CommandLine.</span><span class="titlestrong">Result</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_CommandLine_Result">Result</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<table class="enumeration">
<tr>
<td>isSet</td>
<td>Core.CommandLine.IsSet'(T)</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_CommandLine_getField"><span class="titletype">func</span> <span class="titlelight">CommandLine.</span><span class="titlestrong">getField</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L70" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getField</span><span class="SyntaxCode">(typeStruct: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfoStruct</span><span class="SyntaxCode">, name: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_CommandLine_isOption"><span class="titletype">func</span> <span class="titlelight">CommandLine.</span><span class="titlestrong">isOption</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if <code class="incode">oneArg</code> is a valid option (starting with a delimiter). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isOption</span><span class="SyntaxCode">(oneArg: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, _options: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_CommandLine">CommandLine</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_CommandLine_ParseOptions">ParseOptions</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_CommandLine_parse"><span class="titletype">func</span> <span class="titlelight">CommandLine.</span><span class="titlestrong">parse</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L88" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Parse all the arguments and fill the result. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">parse</span><span class="SyntaxCode">(st: *</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, args: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">string</span><span class="SyntaxCode">, options = </span><span class="SyntaxConstant"><a href="#Core_CommandLine">CommandLine</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_CommandLine_ParseOptions">ParseOptions</a></span><span class="SyntaxCode">{})-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_CommandLine">CommandLine</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_CommandLine_Result">Result</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_CommandLine_parse_parse_checkNext"><span class="titletype">func</span> <span class="titlelight">parse.</span><span class="titlestrong">checkNext</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L91" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">checkNext</span><span class="SyntaxCode">() </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_CommandLine_splitArguments"><span class="titletype">func</span> <span class="titlelight">CommandLine.</span><span class="titlestrong">splitArguments</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Clean and split a list of arguments  -option:value or -option=value =&gt; -option value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">splitArguments</span><span class="SyntaxCode">(args: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">string</span><span class="SyntaxCode">, options: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_CommandLine">CommandLine</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_CommandLine_ParseOptions">ParseOptions</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_BitStream"><span class="titletype">struct</span> <span class="titlelight">Compress.</span><span class="titlestrong">BitStream</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>stream</td>
<td>const [..] u8</td>
<td></td>
</tr>
<tr>
<td>curByte</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td>codeBuffer</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td>numBits</td>
<td>u8</td>
<td></td>
</tr>
<tr>
<td>eof</td>
<td>bool</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Compress_BitStream_consumeBits">consumeBits</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_curPtr">curPtr</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_discardToNextByte">discardToNextByte</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_init">init</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_peek32">peek32</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_peek32Be">peek32Be</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_peekBits">peekBits</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_peekBitsNoRefill">peekBitsNoRefill</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_peekBytes">peekBytes</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_readBits">readBits</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_readBitsNoRefill">readBitsNoRefill</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_refill">refill</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_revert">revert</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_size">size</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_startPtr">startPtr</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_BitStream_consumeBits"><span class="titletype">func</span> <span class="titlelight">BitStream.</span><span class="titlestrong">consumeBits</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L81" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">consumeBits</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, width: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_BitStream_curPtr"><span class="titletype">func</span> <span class="titlelight">BitStream.</span><span class="titlestrong">curPtr</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">curPtr</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> ^</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_BitStream_discardToNextByte"><span class="titletype">func</span> <span class="titlelight">BitStream.</span><span class="titlestrong">discardToNextByte</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L88" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">discardToNextByte</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_BitStream_init"><span class="titletype">func</span> <span class="titlelight">BitStream.</span><span class="titlestrong">init</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">init</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, buf: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_BitStream_peek32"><span class="titletype">func</span> <span class="titlelight">BitStream.</span><span class="titlestrong">peek32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L111" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">peek32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, dest: ^</span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_BitStream_peek32Be"><span class="titletype">func</span> <span class="titlelight">BitStream.</span><span class="titlestrong">peek32Be</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L123" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">peek32Be</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, dest: ^</span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_BitStream_peekBits"><span class="titletype">func</span> <span class="titlelight">BitStream.</span><span class="titlestrong">peekBits</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L53" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">peekBits</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, width: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_BitStream_peekBitsNoRefill"><span class="titletype">func</span> <span class="titlelight">BitStream.</span><span class="titlestrong">peekBitsNoRefill</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L59" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">peekBitsNoRefill</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, width: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_BitStream_peekBytes"><span class="titletype">func</span> <span class="titlelight">BitStream.</span><span class="titlestrong">peekBytes</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L101" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">peekBytes</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, width: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, dest: ^</span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_BitStream_readBits"><span class="titletype">func</span> <span class="titlelight">BitStream.</span><span class="titlestrong">readBits</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L66" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readBits</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, width: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_BitStream_readBitsNoRefill"><span class="titletype">func</span> <span class="titlelight">BitStream.</span><span class="titlestrong">readBitsNoRefill</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L73" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readBitsNoRefill</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, width: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_BitStream_refill"><span class="titletype">func</span> <span class="titlelight">BitStream.</span><span class="titlestrong">refill</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">refill</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, width = </span><span class="SyntaxNumber">24</span><span class="SyntaxCode">'</span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_BitStream_revert"><span class="titletype">func</span> <span class="titlelight">BitStream.</span><span class="titlestrong">revert</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L93" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">revert</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_BitStream_size"><span class="titletype">func</span> <span class="titlelight">BitStream.</span><span class="titlestrong">size</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">size</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_BitStream_startPtr"><span class="titletype">func</span> <span class="titlelight">BitStream.</span><span class="titlestrong">startPtr</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L21" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">startPtr</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> ^</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_Deflate"><span class="titletype">struct</span> <span class="titlelight">Compress.</span><span class="titlestrong">Deflate</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\deflate.swg#L158" class="src">[src]</a></td>
</tr>
</table>
</p>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Compress_Deflate_compress">compress</a></td>
<td>Compress the source buffer. </td>
</tr>
<tr>
<td><a href="#Core_Compress_Deflate_init">init</a></td>
<td>Initialize the compressor  Can be called multiple times. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_Deflate_CompressionFlags"><span class="titletype">enum</span> <span class="titlelight">Deflate.</span><span class="titlestrong">CompressionFlags</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\deflate.swg#L1105" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Zero</td>
<td></td>
</tr>
<tr>
<td>ComputeAdler32</td>
<td></td>
</tr>
<tr>
<td>Default</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_Deflate_CompressionLevel"><span class="titletype">enum</span> <span class="titlelight">Deflate.</span><span class="titlestrong">CompressionLevel</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\deflate.swg#L1113" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>NoCompression</td>
<td></td>
</tr>
<tr>
<td>BestSpeed</td>
<td></td>
</tr>
<tr>
<td>Default</td>
<td></td>
</tr>
<tr>
<td>BestCompression</td>
<td></td>
</tr>
<tr>
<td>UberCompression</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_Deflate_CompressionStrategy"><span class="titletype">enum</span> <span class="titlelight">Deflate.</span><span class="titlestrong">CompressionStrategy</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\deflate.swg#L1122" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Default</td>
<td></td>
</tr>
<tr>
<td>Filtered</td>
<td></td>
</tr>
<tr>
<td>HuffmanOnly</td>
<td></td>
</tr>
<tr>
<td>Rle</td>
<td></td>
</tr>
<tr>
<td>Fixed</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_Deflate_compress"><span class="titletype">func</span> <span class="titlelight">Deflate.</span><span class="titlestrong">compress</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\deflate.swg#L1149" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compress the source buffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compress</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, result: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">u8</span><span class="SyntaxCode">), src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_Deflate_init"><span class="titletype">func</span> <span class="titlelight">Deflate.</span><span class="titlestrong">init</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\deflate.swg#L1138" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize the compressor  Can be called multiple times. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">init</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, level = </span><span class="SyntaxConstant"><a href="#Core_Compress_Deflate_CompressionLevel">CompressionLevel</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Default</span><span class="SyntaxCode">, strategy = </span><span class="SyntaxConstant"><a href="#Core_Compress_Deflate_CompressionStrategy">CompressionStrategy</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Default</span><span class="SyntaxCode">, flags = </span><span class="SyntaxConstant"><a href="#Core_Compress_Deflate_CompressionFlags">CompressionFlags</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Default</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_Inflate"><span class="titletype">struct</span> <span class="titlelight">Compress.</span><span class="titlestrong">Inflate</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\inflate.swg#L142" class="src">[src]</a></td>
</tr>
</table>
</p>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Compress_Inflate_decompress">decompress</a></td>
<td>Decompress the associated stream. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_Inflate_decompress"><span class="titletype">func</span> <span class="titlelight">Inflate.</span><span class="titlestrong">decompress</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\inflate.swg#L250" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Decompress the associated stream. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">decompress</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, buf: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, winSize: </span><span class="SyntaxType">u32</span><span class="SyntaxCode"> = </span><span class="SyntaxConstant">InflateMaxDistance</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">u8</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_ZLib"><span class="titletype">struct</span> <span class="titlelight">Compress.</span><span class="titlestrong">ZLib</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\zlib.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Compress_ZLib_compress">compress</a></td>
<td>Decompress stream. </td>
</tr>
<tr>
<td><a href="#Core_Compress_ZLib_decompress">decompress</a></td>
<td>Decompress stream. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_ZLib_compress"><span class="titletype">func</span> <span class="titlelight">ZLib.</span><span class="titlestrong">compress</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\zlib.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Decompress stream. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compress</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, level = </span><span class="SyntaxConstant"><a href="#Core_Compress_Deflate">Deflate</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Compress_Deflate_CompressionLevel">CompressionLevel</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Default</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">u8</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Compress_ZLib_decompress"><span class="titletype">func</span> <span class="titlelight">ZLib.</span><span class="titlestrong">decompress</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\zlib.swg#L33" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Decompress stream. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">decompress</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">u8</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer"><span class="titletype">struct</span> <span class="titlelight">Core.</span><span class="titlestrong">ConcatBuffer</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Represents a growable buffer, which is divided in buckets to avoid a copy/realloc when  the buffer needs to increase its size. This is the main difference with Array. </p>
<table class="enumeration">
<tr>
<td>allocator</td>
<td><a href="swag.runtime.html#Swag_IAllocator">Swag.IAllocator</a></td>
<td></td>
</tr>
<tr>
<td>firstBucket</td>
<td>*Core.ConcatBufferBucket</td>
<td></td>
</tr>
<tr>
<td>curBucket</td>
<td>*Core.ConcatBufferBucket</td>
<td></td>
</tr>
<tr>
<td>lastBucket</td>
<td>*Core.ConcatBufferBucket</td>
<td></td>
</tr>
<tr>
<td>currentSP</td>
<td>^u8</td>
<td></td>
</tr>
<tr>
<td>granularity</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td>isAtEnd</td>
<td>bool</td>
<td></td>
</tr>
<tr>
<td>viewFirstBucket</td>
<td><a href="#Core_ConcatBufferBucket">Core.ConcatBufferBucket</a></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_ConcatBuffer_addBytes">addBytes</a></td>
<td>Append a slice of bytes to the buffer  If <code class="incode">contiguous</code> is false, the slice will be divided in chunks if necessary. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_addNative">addNative</a></td>
<td>Append one byte to the buffer. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_addStruct">addStruct</a></td>
<td>Append the content of a struct. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_clear">clear</a></td>
<td>Clear the content without freing the buffers. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_count">count</a></td>
<td>Returns the number of bytes. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_eatBuffer">eatBuffer</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_getOffset">getOffset</a></td>
<td>Get the linearized seek offset. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_getSeek">getSeek</a></td>
<td>Returns the current <code class="incode">seek</code> in the buffer. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_grow">grow</a></td>
<td>Be sure that there is enough room to store at least <code class="incode">numBytes</code> bytes. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_makeLinear">makeLinear</a></td>
<td>linearize all buckets in one single big bucket. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_moveSeek">moveSeek</a></td>
<td>Seek current write pointer. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_moveToString">moveToString</a></td>
<td>Move the content. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_release">release</a></td>
<td>Release all allocated buffers. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_setAllocator">setAllocator</a></td>
<td>Associate an allocator with the buffer. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_setBucketSize">setBucketSize</a></td>
<td>Set the granularity of datas when allocated new buckets. Minimum size is 4. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_setEndSeek">setEndSeek</a></td>
<td>Set the end <code class="incode">seek</code>. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_setFirstBucket">setFirstBucket</a></td>
<td>Share <code class="incode">data</code> with the firstBucket. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_setSeek">setSeek</a></td>
<td>Set the current <code class="incode">seek</code>. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_toSlice">toSlice</a></td>
<td>Convert to a slice <i>only</i> if the buffer is linear (see <code class="incode">makeLinear</code>). </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_toString">toString</a></td>
<td>Convert buffer to a String. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_ConcatBuffer_opCount">opCount</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_opVisit">opVisit</a></td>
<td>Visit all valid buckets. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_addBytes"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">addBytes</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L205" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append a slice of bytes to the buffer  If <code class="incode">contiguous</code> is false, the slice will be divided in chunks if necessary. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">addBytes</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, bytes: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, contiguous = </span><span class="SyntaxKeyword">true</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_addNative"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">addNative</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L170" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append one byte to the buffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">addNative</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, val: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_addStruct"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">addStruct</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L198" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append the content of a struct. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">addStruct</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, val: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_clear"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L158" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Clear the content without freing the buffers. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_count"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">count</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L65" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the number of bytes. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">count</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_eatBuffer"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">eatBuffer</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L415" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">eatBuffer</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;{data: ^</span><span class="SyntaxType">u8</span><span class="SyntaxCode">, size: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, capacity: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">}</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_getOffset"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">getOffset</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L287" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the linearized seek offset. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getOffset</span><span class="SyntaxCode">(seek: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBufferSeek">ConcatBufferSeek</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_getSeek"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">getSeek</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L293" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the current <code class="incode">seek</code> in the buffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getSeek</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_ConcatBufferSeek"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBufferSeek">ConcatBufferSeek</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_grow"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">grow</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L71" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Be sure that there is enough room to store at least <code class="incode">numBytes</code> bytes. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">grow</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, numBytes: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_makeLinear"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">makeLinear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L452" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>linearize all buckets in one single big bucket. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">makeLinear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_moveSeek"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">moveSeek</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L302" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Seek current write pointer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">moveSeek</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, num: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_moveToString"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">moveToString</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L432" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Move the content. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">moveToString</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_opCount"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">opCount</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCount</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_opVisit"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">opVisit</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L47" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Visit all valid buckets. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(ptr: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opVisit</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_release"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">release</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L138" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Release all allocated buffers. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">release</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_setAllocator"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">setAllocator</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L124" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Associate an allocator with the buffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setAllocator</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, alloc: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">IAllocator</span><span class="SyntaxCode">)</code>
</div>
<p> The allocator can only be changed if the buffer has no pending buckets. </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_setBucketSize"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">setBucketSize</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L131" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the granularity of datas when allocated new buckets. Minimum size is 4. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setBucketSize</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, size: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_setEndSeek"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">setEndSeek</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L358" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the end <code class="incode">seek</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setEndSeek</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, seek: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBufferSeek">ConcatBufferSeek</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_setFirstBucket"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">setFirstBucket</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L386" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Share <code class="incode">data</code> with the firstBucket. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setFirstBucket</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, data: [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_setSeek"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">setSeek</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L341" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the current <code class="incode">seek</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setSeek</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, seek: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBufferSeek">ConcatBufferSeek</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_toSlice"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">toSlice</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L378" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert to a slice <i>only</i> if the buffer is linear (see <code class="incode">makeLinear</code>). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toSlice</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;[..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBuffer_toString"><span class="titletype">func</span> <span class="titlelight">ConcatBuffer.</span><span class="titlestrong">toString</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L397" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert buffer to a String. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toString</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBufferBucket"><span class="titletype">struct</span> <span class="titlelight">Core.</span><span class="titlestrong">ConcatBufferBucket</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L3" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>datas</td>
<td>^u8</td>
<td></td>
</tr>
<tr>
<td>next</td>
<td>*Core.ConcatBufferBucket</td>
<td></td>
</tr>
<tr>
<td>count</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td>size</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td>countBefore</td>
<td>u64</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ConcatBufferSeek"><span class="titletype">struct</span> <span class="titlelight">Core.</span><span class="titlestrong">ConcatBufferSeek</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>bucket</td>
<td>*Core.ConcatBufferBucket</td>
<td></td>
</tr>
<tr>
<td>sp</td>
<td>^u8</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Console_Color"><span class="titletype">enum</span> <span class="titlelight">Console.</span><span class="titlestrong">Color</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Black</td>
<td></td>
</tr>
<tr>
<td>White</td>
<td></td>
</tr>
<tr>
<td>Gray</td>
<td></td>
</tr>
<tr>
<td>Red</td>
<td></td>
</tr>
<tr>
<td>Blue</td>
<td></td>
</tr>
<tr>
<td>Green</td>
<td></td>
</tr>
<tr>
<td>Cyan</td>
<td></td>
</tr>
<tr>
<td>Yellow</td>
<td></td>
</tr>
<tr>
<td>Magenta</td>
<td></td>
</tr>
<tr>
<td>DarkRed</td>
<td></td>
</tr>
<tr>
<td>DarkBlue</td>
<td></td>
</tr>
<tr>
<td>DarkGreen</td>
<td></td>
</tr>
<tr>
<td>DarkCyan</td>
<td></td>
</tr>
<tr>
<td>DarkYellow</td>
<td></td>
</tr>
<tr>
<td>DarkMagenta</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Console_fatal"><span class="titletype">func</span> <span class="titlelight">Console.</span><span class="titlestrong">fatal</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\error.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Fatal error  Exit the process with code -1. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">fatal</span><span class="SyntaxCode">(msg: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, args: ...)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Console_lock"><span class="titletype">func</span> <span class="titlelight">Console.</span><span class="titlestrong">lock</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Use to access console with multiple threads. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lock</span><span class="SyntaxCode">()</code>
</div>
<p> No console function is thread safe, so it is the user responsability  to lock the console when necessary </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Console_print"><span class="titletype">func</span> <span class="titlelight">Console.</span><span class="titlestrong">print</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.swg#L44" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write a bunch of parameters to the console. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">print</span><span class="SyntaxCode">(params: ...)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Console_printf"><span class="titletype">func</span> <span class="titlelight">Console.</span><span class="titlestrong">printf</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.win32.swg#L77" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write a formatted message to the console. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">printf</span><span class="SyntaxCode">(message: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, params: ...)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Console_println"><span class="titletype">func</span> <span class="titlelight">Console.</span><span class="titlestrong">println</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.swg#L53" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write a line to the console. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">println</span><span class="SyntaxCode">(params: ...)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Console_prompt"><span class="titletype">func</span> <span class="titlelight">Console.</span><span class="titlestrong">prompt</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.win32.swg#L102" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Wait for using input, and returns the corresponding string. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">prompt</span><span class="SyntaxCode">()-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Console_resetColor"><span class="titletype">func</span> <span class="titlelight">Console.</span><span class="titlestrong">resetColor</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.win32.swg#L71" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Restore the console colors to their default values. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">resetColor</span><span class="SyntaxCode">()</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Console_setBackColor"><span class="titletype">func</span> <span class="titlelight">Console.</span><span class="titlestrong">setBackColor</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.win32.swg#L62" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the console background color. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setBackColor</span><span class="SyntaxCode">(color: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Console</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Console_Color">Color</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Console_setTextColor"><span class="titletype">func</span> <span class="titlelight">Console.</span><span class="titlestrong">setTextColor</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.win32.swg#L53" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the console foreground color. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setTextColor</span><span class="SyntaxCode">(color: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Console</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Console_Color">Color</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Console_silent"><span class="titletype">func</span> <span class="titlelight">Console.</span><span class="titlestrong">silent</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Disable console output. This is a counter, so can be called  multiple times with the same <code class="incode">value</code>  Like any other console functions, this is not thread-safe  =&gt; call <code class="incode">lock</code> before if necessary, and <code class="incode">unlock</code> after. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">silent</span><span class="SyntaxCode">(value: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Console_unlock"><span class="titletype">func</span> <span class="titlelight">Console.</span><span class="titlestrong">unlock</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">unlock</span><span class="SyntaxCode">()</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Debug_assert"><span class="titletype">func</span> <span class="titlelight">Debug.</span><span class="titlestrong">assert</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\assert.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">assert</span><span class="SyntaxCode">(expr: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">, message: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, loc = #callerlocation)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Debug_breakPanic"><span class="titletype">func</span> <span class="titlelight">Debug.</span><span class="titlestrong">breakPanic</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\assert.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">breakPanic</span><span class="SyntaxCode">(message: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, loc = #callerlocation)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Debug_safety"><span class="titletype">func</span> <span class="titlelight">Debug.</span><span class="titlestrong">safety</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\assert.swg#L24" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(what: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">safety</span><span class="SyntaxCode">(expr: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">, message: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, loc = #callerlocation)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Debug_safetyBoundCheck"><span class="titletype">func</span> <span class="titlelight">Debug.</span><span class="titlestrong">safetyBoundCheck</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\assert.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">safetyBoundCheck</span><span class="SyntaxCode">(expr: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">, message: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, loc = #callerlocation)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Debugger_attach"><span class="titletype">func</span> <span class="titlelight">Debugger.</span><span class="titlestrong">attach</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\debugger.win32.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Try to attach to a debugger by calling "vsjitdebugger.exe"  If it works, it will open a dialog box to pickup a visual studio instance. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">attach</span><span class="SyntaxCode">() </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Debugger_debugBreak"><span class="titletype">func</span> <span class="titlelight">Debugger.</span><span class="titlestrong">debugBreak</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\debugger.win32.swg#L10" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Trigger a breakpoint. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">debugBreak</span><span class="SyntaxCode">()</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Debugger_isAttached"><span class="titletype">func</span> <span class="titlelight">Debugger.</span><span class="titlestrong">isAttached</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\debugger.win32.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if a debugger is attached to the current process. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isAttached</span><span class="SyntaxCode">()-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Debugger_log"><span class="titletype">func</span> <span class="titlelight">Debugger.</span><span class="titlestrong">log</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\debugger.win32.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Debug log. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">log</span><span class="SyntaxCode">(msg: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Directory_EnumerationOptions"><span class="titletype">struct</span> <span class="titlelight">Directory.</span><span class="titlestrong">EnumerationOptions</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>matchExtension</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>skipAttributes</td>
<td><a href="#Core_File_FileAttributes">Core.File.FileAttributes</a></td>
<td></td>
</tr>
<tr>
<td>recurse</td>
<td>bool</td>
<td></td>
</tr>
<tr>
<td>wantFiles</td>
<td>bool</td>
<td></td>
</tr>
<tr>
<td>wantDirectories</td>
<td>bool</td>
<td></td>
</tr>
<tr>
<td>wantSpecialDirectories</td>
<td>bool</td>
<td></td>
</tr>
<tr>
<td>filterLambda</td>
<td>func(Core.File.FileInfo)->bool</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Directory_create"><span class="titletype">func</span> <span class="titlelight">Directory.</span><span class="titlestrong">create</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.win32.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">create</span><span class="SyntaxCode">(dirname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Directory_enumerate"><span class="titletype">func</span> <span class="titlelight">Directory.</span><span class="titlestrong">enumerate</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.win32.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Enumerate a directory. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">enumerate</span><span class="SyntaxCode">(dirName: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, options: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Directory</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Directory_EnumerationOptions">EnumerationOptions</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">File</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_File_FileInfo">FileInfo</a></span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Directory_enumerateDirectories"><span class="titletype">func</span> <span class="titlelight">Directory.</span><span class="titlestrong">enumerateDirectories</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get all the directories in the given directory. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">enumerateDirectories</span><span class="SyntaxCode">(dirName: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, matchExtension: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, recurse = </span><span class="SyntaxKeyword">false</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">File</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_File_FileInfo">FileInfo</a></span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Directory_enumerateFiles"><span class="titletype">func</span> <span class="titlelight">Directory.</span><span class="titlestrong">enumerateFiles</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get all the files of the given directory. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">enumerateFiles</span><span class="SyntaxCode">(dirName: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, matchExtension: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, recurse = </span><span class="SyntaxKeyword">false</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">File</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_File_FileInfo">FileInfo</a></span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Directory_exists"><span class="titletype">func</span> <span class="titlelight">Directory.</span><span class="titlestrong">exists</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.win32.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given directory exists. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">exists</span><span class="SyntaxCode">(dirName: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Directory_getCurrent"><span class="titletype">func</span> <span class="titlelight">Directory.</span><span class="titlestrong">getCurrent</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.win32.swg#L116" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the current directory. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getCurrent</span><span class="SyntaxCode">()-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Directory_getDrives"><span class="titletype">func</span> <span class="titlelight">Directory.</span><span class="titlestrong">getDrives</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.win32.swg#L140" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the list of logical drives. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getDrives</span><span class="SyntaxCode">()-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Directory_setCurrent"><span class="titletype">func</span> <span class="titlelight">Directory.</span><span class="titlestrong">setCurrent</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.win32.swg#L133" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the current directory. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setCurrent</span><span class="SyntaxCode">(dirname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Env_Monitor"><span class="titletype">struct</span> <span class="titlelight">Env.</span><span class="titlestrong">Monitor</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\environment.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>rect</td>
<td><a href="#Core_Math_Rectangle">Core.Math.Rectangle</a></td>
<td></td>
</tr>
<tr>
<td>work</td>
<td><a href="#Core_Math_Rectangle">Core.Math.Rectangle</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Env_Process"><span class="titletype">struct</span> <span class="titlelight">Env.</span><span class="titlestrong">Process</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\process.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>handle</td>
<td>const *void</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Env_Process_waitForExit">waitForExit</a></td>
<td>Wait for the process to be done. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Env_Process_waitForExit"><span class="titletype">func</span> <span class="titlelight">Process.</span><span class="titlestrong">waitForExit</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\process.win32.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Wait for the process to be done. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">waitForExit</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Env_SpecialDirectory"><span class="titletype">enum</span> <span class="titlelight">Env.</span><span class="titlestrong">SpecialDirectory</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\environment.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Font</td>
<td></td>
</tr>
<tr>
<td>UserAppData</td>
<td></td>
</tr>
<tr>
<td>UserDocuments</td>
<td></td>
</tr>
<tr>
<td>CommonAppData</td>
<td></td>
</tr>
<tr>
<td>Desktop</td>
<td></td>
</tr>
<tr>
<td>UserPictures</td>
<td></td>
</tr>
<tr>
<td>UserVideos</td>
<td></td>
</tr>
<tr>
<td>UserMusic</td>
<td></td>
</tr>
<tr>
<td>CommonPictures</td>
<td></td>
</tr>
<tr>
<td>CommonVideos</td>
<td></td>
</tr>
<tr>
<td>CommonMusic</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Env_StartInfo"><span class="titletype">struct</span> <span class="titlelight">Env.</span><span class="titlestrong">StartInfo</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\process.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>fileName</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>arguments</td>
<td>string</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Env_doSyncProcess"><span class="titletype">func</span> <span class="titlelight">Env.</span><span class="titlestrong">doSyncProcess</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\process.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Starts a new process with arguments, and wait for it to be done. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">doSyncProcess</span><span class="SyntaxCode">(fileName: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, arguments: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Env_exit"><span class="titletype">func</span> <span class="titlelight">Env.</span><span class="titlestrong">exit</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\process.win32.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Exit the current process. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">exit</span><span class="SyntaxCode">(exitCode: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Env_getArg"><span class="titletype">func</span> <span class="titlelight">Env.</span><span class="titlestrong">getArg</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\environment.swg#L8" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get a given argument, or null. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getArg</span><span class="SyntaxCode">(idx: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Env_getArgs"><span class="titletype">func</span> <span class="titlelight">Env.</span><span class="titlestrong">getArgs</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\environment.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the program command line arguments as a [..] string. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getArgs</span><span class="SyntaxCode">()-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Env_getMonitors"><span class="titletype">func</span> <span class="titlelight">Env.</span><span class="titlestrong">getMonitors</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\environment.win32.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the list of all monitors. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getMonitors</span><span class="SyntaxCode">()-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Env</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Env_Monitor">Monitor</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Env_getSpecialDirectory"><span class="titletype">func</span> <span class="titlelight">Env.</span><span class="titlestrong">getSpecialDirectory</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\environment.win32.swg#L8" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>The system font directory. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getSpecialDirectory</span><span class="SyntaxCode">(what: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Env</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Env_SpecialDirectory">SpecialDirectory</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Env_hasArg"><span class="titletype">func</span> <span class="titlelight">Env.</span><span class="titlestrong">hasArg</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\environment.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get a given argument, or null. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">hasArg</span><span class="SyntaxCode">(arg: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Env_startProcess"><span class="titletype">func</span> <span class="titlelight">Env.</span><span class="titlestrong">startProcess</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\process.win32.swg#L10" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Starts a new process with arguments. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">startProcess</span><span class="SyntaxCode">(info: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Env</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Env_StartInfo">StartInfo</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Env_Process"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Env</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Env_Process">Process</a></span><span class="SyntaxCode"></a> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>Starts a new process with arguments. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">startProcess</span><span class="SyntaxCode">(fileName: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, arguments: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Env_Process"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Env</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Env_Process">Process</a></span><span class="SyntaxCode"></a> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_FileAccess"><span class="titletype">enum</span> <span class="titlelight">File.</span><span class="titlestrong">FileAccess</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Read</td>
<td></td>
</tr>
<tr>
<td>Write</td>
<td></td>
</tr>
<tr>
<td>ReadWrite</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_FileAttributes"><span class="titletype">enum</span> <span class="titlelight">File.</span><span class="titlestrong">FileAttributes</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\fileattributes.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Zero</td>
<td></td>
</tr>
<tr>
<td>ReadOnly</td>
<td></td>
</tr>
<tr>
<td>Hidden</td>
<td></td>
</tr>
<tr>
<td>System</td>
<td></td>
</tr>
<tr>
<td>Directory</td>
<td></td>
</tr>
<tr>
<td>Archive</td>
<td></td>
</tr>
<tr>
<td>Device</td>
<td></td>
</tr>
<tr>
<td>Normal</td>
<td></td>
</tr>
<tr>
<td>Temporary</td>
<td></td>
</tr>
<tr>
<td>SparseFile</td>
<td></td>
</tr>
<tr>
<td>ReparsePoint</td>
<td></td>
</tr>
<tr>
<td>Compressed</td>
<td></td>
</tr>
<tr>
<td>Offline</td>
<td></td>
</tr>
<tr>
<td>NotContentIndexed</td>
<td></td>
</tr>
<tr>
<td>Encrypted</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_FileInfo"><span class="titletype">struct</span> <span class="titlelight">File.</span><span class="titlestrong">FileInfo</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\fileinfo.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>fullname</td>
<td><a href="#Core_String">Core.String</a></td>
<td></td>
</tr>
<tr>
<td>attributes</td>
<td><a href="#Core_File_FileAttributes">Core.File.FileAttributes</a></td>
<td></td>
</tr>
<tr>
<td>creationTime</td>
<td><a href="#Core_Time_DateTime">Core.Time.DateTime</a></td>
<td></td>
</tr>
<tr>
<td>lastAccessTime</td>
<td><a href="#Core_Time_DateTime">Core.Time.DateTime</a></td>
<td></td>
</tr>
<tr>
<td>lastWriteTime</td>
<td><a href="#Core_Time_DateTime">Core.Time.DateTime</a></td>
<td></td>
</tr>
<tr>
<td>size</td>
<td>u64</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_File_FileInfo_isDirectory">isDirectory</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_FileInfo_isDirectory"><span class="titletype">func</span> <span class="titlelight">FileInfo.</span><span class="titlestrong">isDirectory</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\fileinfo.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isDirectory</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_FileMode"><span class="titletype">enum</span> <span class="titlelight">File.</span><span class="titlestrong">FileMode</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Append</td>
<td></td>
</tr>
<tr>
<td>Create</td>
<td></td>
</tr>
<tr>
<td>CreateNew</td>
<td></td>
</tr>
<tr>
<td>Open</td>
<td></td>
</tr>
<tr>
<td>OpenOrCreate</td>
<td></td>
</tr>
<tr>
<td>Truncate</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_FileShare"><span class="titletype">enum</span> <span class="titlelight">File.</span><span class="titlestrong">FileShare</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Zero</td>
<td></td>
</tr>
<tr>
<td>Delete</td>
<td></td>
</tr>
<tr>
<td>Inheritable</td>
<td></td>
</tr>
<tr>
<td>Read</td>
<td></td>
</tr>
<tr>
<td>Write</td>
<td></td>
</tr>
<tr>
<td>ReadWrite</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_FileStream"><span class="titletype">struct</span> <span class="titlelight">File.</span><span class="titlestrong">FileStream</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>name</td>
<td><a href="#Core_String">Core.String</a></td>
<td></td>
</tr>
<tr>
<td>handle</td>
<td>const *void</td>
<td></td>
</tr>
<tr>
<td>canRead</td>
<td>bool</td>
<td></td>
</tr>
<tr>
<td>canSeek</td>
<td>bool</td>
<td></td>
</tr>
<tr>
<td>canWrite</td>
<td>bool</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_File_FileStream_close">close</a></td>
<td>Close the given file stream. </td>
</tr>
<tr>
<td><a href="#Core_File_FileStream_getPosition">getPosition</a></td>
<td>Returns the current seek position of the given file stream. </td>
</tr>
<tr>
<td><a href="#Core_File_FileStream_getSize">getSize</a></td>
<td>Returns the given file stream length on disk. </td>
</tr>
<tr>
<td><a href="#Core_File_FileStream_isOpen">isOpen</a></td>
<td>Returns true if the stream is valid. </td>
</tr>
<tr>
<td><a href="#Core_File_FileStream_read">read</a></td>
<td>Read from the given file stream, and returns the number of bytes. </td>
</tr>
<tr>
<td><a href="#Core_File_FileStream_readValue">readValue</a></td>
<td>Read from the given file stream, and returns <code class="incode">true</code> if all bytes have been read. </td>
</tr>
<tr>
<td><a href="#Core_File_FileStream_setPosition">setPosition</a></td>
<td>Set the current seek position of the given file stream. </td>
</tr>
<tr>
<td><a href="#Core_File_FileStream_skipPosition">skipPosition</a></td>
<td>Skip <code class="incode">bytes</code> from current position. </td>
</tr>
<tr>
<td><a href="#Core_File_FileStream_write">write</a></td>
<td>Write to the given file stream, and returns the number of written bytes. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_FileStream_close"><span class="titletype">func</span> <span class="titlelight">FileStream.</span><span class="titlestrong">close</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.win32.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Close the given file stream. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">close</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_FileStream_getPosition"><span class="titletype">func</span> <span class="titlelight">FileStream.</span><span class="titlestrong">getPosition</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.win32.swg#L59" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the current seek position of the given file stream. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getPosition</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_FileStream_getSize"><span class="titletype">func</span> <span class="titlelight">FileStream.</span><span class="titlestrong">getSize</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.win32.swg#L47" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the given file stream length on disk. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getSize</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_FileStream_isOpen"><span class="titletype">func</span> <span class="titlelight">FileStream.</span><span class="titlestrong">isOpen</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the stream is valid. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isOpen</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_FileStream_read"><span class="titletype">func</span> <span class="titlelight">FileStream.</span><span class="titlestrong">read</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.win32.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read from the given file stream, and returns the number of bytes. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">read</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, buffer: *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, length: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_FileStream_readValue"><span class="titletype">func</span> <span class="titlelight">FileStream.</span><span class="titlestrong">readValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read from the given file stream, and returns <code class="incode">true</code> if all bytes have been read. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">readValue</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, buffer: *</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_FileStream_setPosition"><span class="titletype">func</span> <span class="titlelight">FileStream.</span><span class="titlestrong">setPosition</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.win32.swg#L71" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the current seek position of the given file stream. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setPosition</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, origin: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">File</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_File_SeekOrigin">SeekOrigin</a></span><span class="SyntaxCode">, seek: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_FileStream_skipPosition"><span class="titletype">func</span> <span class="titlelight">FileStream.</span><span class="titlestrong">skipPosition</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.win32.swg#L92" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Skip <code class="incode">bytes</code> from current position. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">skipPosition</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, bytes: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_FileStream_write"><span class="titletype">func</span> <span class="titlelight">FileStream.</span><span class="titlestrong">write</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.win32.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write to the given file stream, and returns the number of written bytes. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">write</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, length: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_Folder"><span class="titletype">struct</span> <span class="titlelight">File.</span><span class="titlestrong">Folder</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\tweakfile.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>type</td>
<td>const *Swag.TypeInfo</td>
<td></td>
</tr>
<tr>
<td>data</td>
<td>^void</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_SeekOrigin"><span class="titletype">enum</span> <span class="titlelight">File.</span><span class="titlestrong">SeekOrigin</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Begin</td>
<td></td>
</tr>
<tr>
<td>Current</td>
<td></td>
</tr>
<tr>
<td>End</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_TextEncoding"><span class="titletype">enum</span> <span class="titlelight">File.</span><span class="titlestrong">TextEncoding</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\textreader.swg#L3" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Ascii</td>
<td></td>
</tr>
<tr>
<td>Utf8</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_TextReader"><span class="titletype">struct</span> <span class="titlelight">File.</span><span class="titlestrong">TextReader</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\textreader.swg#L9" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>stream</td>
<td><a href="#Core_File_FileStream">Core.File.FileStream</a></td>
<td></td>
</tr>
<tr>
<td>buffer</td>
<td>Core.Array'(u8)</td>
<td></td>
</tr>
<tr>
<td>encodingType</td>
<td><a href="#Core_File_TextEncoding">Core.File.TextEncoding</a></td>
<td></td>
</tr>
<tr>
<td>byteSeek</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td>bufferSize</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td>checkPreamble</td>
<td>bool</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_File_TextReader_close">close</a></td>
<td>Close the reader. </td>
</tr>
<tr>
<td><a href="#Core_File_TextReader_open">open</a></td>
<td>Open the reader. </td>
</tr>
<tr>
<td><a href="#Core_File_TextReader_readLine">readLine</a></td>
<td>Read one line of text. </td>
</tr>
<tr>
<td><a href="#Core_File_TextReader_readToEnd">readToEnd</a></td>
<td>Read from the current position to the end, and returns the corresponding  utf8 string. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_TextReader_close"><span class="titletype">func</span> <span class="titlelight">TextReader.</span><span class="titlestrong">close</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\textreader.swg#L67" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Close the reader. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">close</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_TextReader_open"><span class="titletype">func</span> <span class="titlelight">TextReader.</span><span class="titlestrong">open</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\textreader.swg#L52" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Open the reader. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">open</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, encoding = </span><span class="SyntaxConstant"><a href="#Core_File_TextEncoding">TextEncoding</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Utf8</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_TextReader_readLine"><span class="titletype">func</span> <span class="titlelight">TextReader.</span><span class="titlestrong">readLine</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\textreader.swg#L75" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read one line of text. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readLine</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, result: </span><span class="SyntaxKeyword">ref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p> Returns false at the end </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_TextReader_readToEnd"><span class="titletype">func</span> <span class="titlelight">TextReader.</span><span class="titlestrong">readToEnd</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\textreader.swg#L138" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read from the current position to the end, and returns the corresponding  utf8 string. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readToEnd</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_TweakFile"><span class="titletype">struct</span> <span class="titlelight">File.</span><span class="titlestrong">TweakFile</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\tweakfile.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>folders</td>
<td>Core.Array'(Core.File.Folder)</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_File_TweakFile_parse">parse(self, const ref Array'(string))</a></td>
<td>Parse a list of lines. </td>
</tr>
<tr>
<td><a href="#Core_File_TweakFile_parse">parse(self, string)</a></td>
<td>Parse a list of lines. </td>
</tr>
<tr>
<td><a href="#Core_File_TweakFile_parseFile">parseFile</a></td>
<td>Read and parse a file. </td>
</tr>
<tr>
<td><a href="#Core_File_TweakFile_registerFolder">registerFolder</a></td>
<td>Register a new structure to be parsed. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_TweakFile_parse"><span class="titletype">func</span> <span class="titlelight">TweakFile.</span><span class="titlestrong">parse</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\tweakfile.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Parse a list of lines. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parse</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, lines: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">string</span><span class="SyntaxCode">)) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>Parse a list of lines. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parse</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, content: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_TweakFile_parseFile"><span class="titletype">func</span> <span class="titlelight">TweakFile.</span><span class="titlestrong">parseFile</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\tweakfile.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read and parse a file. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parseFile</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, fileName: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_TweakFile_registerFolder"><span class="titletype">func</span> <span class="titlelight">TweakFile.</span><span class="titlestrong">registerFolder</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\tweakfile.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Register a new structure to be parsed. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">registerFolder</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, folder: *</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_delete"><span class="titletype">func</span> <span class="titlelight">File.</span><span class="titlestrong">delete</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.win32.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Delete the specified file. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">delete</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_duplicate"><span class="titletype">func</span> <span class="titlelight">File.</span><span class="titlestrong">duplicate</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L129" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Duplicate a file. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">duplicate</span><span class="SyntaxCode">(newName: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, oldName: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_exists"><span class="titletype">func</span> <span class="titlelight">File.</span><span class="titlestrong">exists</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.win32.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given file exists. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">exists</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_getAttributes"><span class="titletype">func</span> <span class="titlelight">File.</span><span class="titlestrong">getAttributes</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\fileattributes.win32.swg#L48" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns attributes associated to the given filename. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getAttributes</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_File_FileAttributes"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">File</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_File_FileAttributes">FileAttributes</a></span><span class="SyntaxCode"></a> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_getFileInfo"><span class="titletype">func</span> <span class="titlelight">File.</span><span class="titlestrong">getFileInfo</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L136" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get informations about a file. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getFileInfo</span><span class="SyntaxCode">(fullName: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_File_FileInfo"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">File</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_File_FileInfo">FileInfo</a></span><span class="SyntaxCode"></a> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_getInfo"><span class="titletype">func</span> <span class="titlelight">File.</span><span class="titlestrong">getInfo</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\fileinfo.win32.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns various file informations. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getInfo</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_File_FileInfo"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">File</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_File_FileInfo">FileInfo</a></span><span class="SyntaxCode"></a> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_locateInExplorer"><span class="titletype">func</span> <span class="titlelight">File.</span><span class="titlestrong">locateInExplorer</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.win32.swg#L103" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Locate file in the file explorer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">locateInExplorer</span><span class="SyntaxCode">(name: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_open"><span class="titletype">func</span> <span class="titlelight">File.</span><span class="titlestrong">open</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.win32.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Open a new file stream. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">open</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, mode: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">File</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_File_FileMode">FileMode</a></span><span class="SyntaxCode">, access: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">File</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_File_FileAccess">FileAccess</a></span><span class="SyntaxCode">, share: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">File</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_File_FileShare">FileShare</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_File_FileStream"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">File</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_File_FileStream">FileStream</a></span><span class="SyntaxCode"></a> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_openRead"><span class="titletype">func</span> <span class="titlelight">File.</span><span class="titlestrong">openRead</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.win32.swg#L91" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a new file stream for reading. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">openRead</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_File_FileStream"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">File</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_File_FileStream">FileStream</a></span><span class="SyntaxCode"></a> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_openWrite"><span class="titletype">func</span> <span class="titlelight">File.</span><span class="titlestrong">openWrite</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.win32.swg#L97" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a new file stream for writing. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">openWrite</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_File_FileStream"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">File</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_File_FileStream">FileStream</a></span><span class="SyntaxCode"></a> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_readAllBytes"><span class="titletype">func</span> <span class="titlelight">File.</span><span class="titlestrong">readAllBytes</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L80" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read a file, and store the result in an array of bytes. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readAllBytes</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">u8</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_readAllLines"><span class="titletype">func</span> <span class="titlelight">File.</span><span class="titlestrong">readAllLines</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L49" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read all the lines of a file. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readAllLines</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, encoding = </span><span class="SyntaxConstant"><a href="#Core_File_TextEncoding">TextEncoding</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Utf8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_readAllText"><span class="titletype">func</span> <span class="titlelight">File.</span><span class="titlestrong">readAllText</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read a file, and store the result in an utf8 string. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readAllText</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, encoding = </span><span class="SyntaxConstant"><a href="#Core_File_TextEncoding">TextEncoding</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Utf8</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_readEachLines"><span class="titletype">func</span> <span class="titlelight">File.</span><span class="titlestrong">readEachLines</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L63" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Call user code for each line. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readEachLines</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, encoding = </span><span class="SyntaxConstant"><a href="#Core_File_TextEncoding">TextEncoding</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Utf8</span><span class="SyntaxCode">, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_touch"><span class="titletype">func</span> <span class="titlelight">File.</span><span class="titlestrong">touch</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.win32.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Change the file write date/time. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">touch</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_writeAllBytes"><span class="titletype">func</span> <span class="titlelight">File.</span><span class="titlestrong">writeAllBytes</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L93" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write a file with the content of a slice of bytes. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeAllBytes</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>Write a file with the content of a <code class="incode">ConcatBuffer</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeAllBytes</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, buffer: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_File_writeAllLines"><span class="titletype">func</span> <span class="titlelight">File.</span><span class="titlestrong">writeAllLines</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L114" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write a file with the content of an array of string, one per line. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeAllLines</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, lines: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">string</span><span class="SyntaxCode">))-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Format_append"><span class="titletype">func</span> <span class="titlelight">Format.</span><span class="titlestrong">append</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\format.swg#L80" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Format a string and put the result in a ConcatBuffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">append</span><span class="SyntaxCode">(buf: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">, fmt: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, values: ...)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Format_checkFormat"><span class="titletype">func</span> <span class="titlelight">Format.</span><span class="titlestrong">checkFormat</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\format.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Check if this is a valid <code class="incode">fmt</code> <code class="incode">values</code> pair, coherent with <code class="incode">format</code> specification. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">checkFormat</span><span class="SyntaxCode">(fct: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, fmt: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, values: ...)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Format_countPercent"><span class="titletype">func</span> <span class="titlelight">Format.</span><span class="titlestrong">countPercent</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\format.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Count the number of valid <code class="incode">%</code> placeholders in the string format  Note that %% will not be counted, as this represents the <code class="incode">%</code> character. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">countPercent</span><span class="SyntaxCode">(fmt: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Format_replaceString"><span class="titletype">func</span> <span class="titlelight">Format.</span><span class="titlestrong">replaceString</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\format.swg#L39" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Format a string in <code class="incode">dest</code>  Can be lot faster than the convenient version which returns a string. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">replaceString</span><span class="SyntaxCode">(dest: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode">, fmt: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, values: ...)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Format_toInterp"><span class="titletype">func</span> <span class="titlelight">Format.</span><span class="titlestrong">toInterp</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\format.swg#L152" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>String interolation  Format is "my {&lt;value to interpolate&gt;:format}. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toInterp</span><span class="SyntaxCode">(buf: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">, exp: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>String interolation  Format is "my {&lt;value to interpolate&gt;:format}. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toInterp</span><span class="SyntaxCode">(exp: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Format_toString"><span class="titletype">func</span> <span class="titlelight">Format.</span><span class="titlestrong">toString</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\format.swg#L63" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Format a string and returns the result as a String. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toString</span><span class="SyntaxCode">(fmt: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, values: ...)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Globalization_CultureInfo"><span class="titletype">struct</span> <span class="titlelight">Globalization.</span><span class="titlestrong">CultureInfo</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\globalization\cultureinfo.swg#L3" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>numberFormat</td>
<td><a href="#Core_Globalization_NumberFormatInfo">Core.Globalization.NumberFormatInfo</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Globalization_NumberFormatInfo"><span class="titletype">struct</span> <span class="titlelight">Globalization.</span><span class="titlestrong">NumberFormatInfo</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\globalization\numberformatinfo.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Provides culture-specific information for formatting and parsing numeric values. </p>
<table class="enumeration">
<tr>
<td>negativeSign</td>
<td>u8</td>
<td></td>
</tr>
<tr>
<td>positiveSign</td>
<td>u8</td>
<td></td>
</tr>
<tr>
<td>decimalSeparator</td>
<td>u8</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Globalization_getCultureInfo"><span class="titletype">func</span> <span class="titlelight">Globalization.</span><span class="titlestrong">getCultureInfo</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\globalization\cultureinfo.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the global culture info structure. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getCultureInfo</span><span class="SyntaxCode">()-&gt;*</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Globalization</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Globalization_CultureInfo">CultureInfo</a></span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hardware_getMacAddress"><span class="titletype">func</span> <span class="titlelight">Hardware.</span><span class="titlestrong">getMacAddress</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\hardware.win32.swg#L9" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Max address. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getMacAddress</span><span class="SyntaxCode">()-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hardware_getProcessorCount"><span class="titletype">func</span> <span class="titlelight">Hardware.</span><span class="titlestrong">getProcessorCount</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\hardware.win32.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Number of processors. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getProcessorCount</span><span class="SyntaxCode">()-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Adler32"><span class="titletype">struct</span> <span class="titlelight">Hash.</span><span class="titlestrong">Adler32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\adler32.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>adler</td>
<td>u32</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Hash_Adler32_compute">compute</a></td>
<td>Returns the adler32 hash value for the given buffer. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Adler32_init">init</a></td>
<td>Initialize the hashing sequence. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Adler32_update">update</a></td>
<td>Update the hash value with <code class="incode">buffer</code> content. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Adler32_compute"><span class="titletype">func</span> <span class="titlelight">Adler32.</span><span class="titlestrong">compute</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\adler32.swg#L105" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the adler32 hash value for the given buffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compute</span><span class="SyntaxCode">(buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Adler32_init"><span class="titletype">func</span> <span class="titlelight">Adler32.</span><span class="titlestrong">init</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\adler32.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize the hashing sequence. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">init</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Adler32_update"><span class="titletype">func</span> <span class="titlelight">Adler32.</span><span class="titlestrong">update</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\adler32.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Update the hash value with <code class="incode">buffer</code> content. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">update</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Crc32"><span class="titletype">struct</span> <span class="titlelight">Hash.</span><span class="titlestrong">Crc32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\crc32.swg#L3" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>crc</td>
<td>u32</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Hash_Crc32_compute">compute</a></td>
<td>Returns the crc32 hash value for the given buffer. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Crc32_init">init</a></td>
<td>Initialize the hashing sequence. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Crc32_update">update</a></td>
<td>Update the hash value with <code class="incode">buffer</code> content. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Crc32_compute"><span class="titletype">func</span> <span class="titlelight">Crc32.</span><span class="titlestrong">compute</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\crc32.swg#L587" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the crc32 hash value for the given buffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compute</span><span class="SyntaxCode">(buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Crc32_init"><span class="titletype">func</span> <span class="titlelight">Crc32.</span><span class="titlestrong">init</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\crc32.swg#L513" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize the hashing sequence. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">init</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Crc32_update"><span class="titletype">func</span> <span class="titlelight">Crc32.</span><span class="titlestrong">update</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\crc32.swg#L519" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Update the hash value with <code class="incode">buffer</code> content. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">update</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, data: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_IHash32"><span class="titletype">interface</span> <span class="titlelight">Hash.</span><span class="titlestrong">IHash32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\hash32.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>compute</td>
<td>func(const *Core.Hash.IHash32)->u32</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Md5"><span class="titletype">struct</span> <span class="titlelight">Hash.</span><span class="titlestrong">Md5</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\md5.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>padding</td>
<td>[64] u8</td>
<td></td>
</tr>
<tr>
<td>state</td>
<td>[4] u32</td>
<td></td>
</tr>
<tr>
<td>count</td>
<td>[2] u32</td>
<td></td>
</tr>
<tr>
<td>buffer</td>
<td>[64] u8</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Hash_Md5_compute">compute</a></td>
<td>Returns the md5 value for the given buffer. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Md5_final">final</a></td>
<td>Finalize the computation. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Md5_init">init</a></td>
<td>Initialize the hashing sequence. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Md5_update">update</a></td>
<td>Update the hash value with <code class="incode">buffer</code> content. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Md5_compute"><span class="titletype">func</span> <span class="titlelight">Md5.</span><span class="titlestrong">compute</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\md5.swg#L75" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the md5 value for the given buffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compute</span><span class="SyntaxCode">(buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Hash</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Hash_Md5">Md5</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Digest</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Md5_final"><span class="titletype">func</span> <span class="titlelight">Md5.</span><span class="titlestrong">final</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\md5.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Finalize the computation. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">final</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, digest: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Hash</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Hash_Md5">Md5</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Digest</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Md5_init"><span class="titletype">func</span> <span class="titlelight">Md5.</span><span class="titlestrong">init</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\md5.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize the hashing sequence. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">init</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Md5_update"><span class="titletype">func</span> <span class="titlelight">Md5.</span><span class="titlestrong">update</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\md5.swg#L42" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Update the hash value with <code class="incode">buffer</code> content. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">update</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, data: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Sha256"><span class="titletype">struct</span> <span class="titlelight">Hash.</span><span class="titlestrong">Sha256</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\sha256.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>data</td>
<td>[64] u8</td>
<td></td>
</tr>
<tr>
<td>state</td>
<td>[8] u32</td>
<td></td>
</tr>
<tr>
<td>datalen</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td>bitlen</td>
<td>u64</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Hash_Sha256_compute">compute</a></td>
<td>Returns the sha256 value for the given buffer. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Sha256_final">final</a></td>
<td>Finalize the computation. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Sha256_init">init</a></td>
<td>Initialize the hashing sequence. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Sha256_update">update</a></td>
<td>Update the hash value with <code class="incode">buffer</code> content. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Sha256_compute"><span class="titletype">func</span> <span class="titlelight">Sha256.</span><span class="titlestrong">compute</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\sha256.swg#L171" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the sha256 value for the given buffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compute</span><span class="SyntaxCode">(buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Hash</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Hash_Sha256">Sha256</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Digest</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Sha256_final"><span class="titletype">func</span> <span class="titlelight">Sha256.</span><span class="titlestrong">final</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\sha256.swg#L96" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Finalize the computation. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">final</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, result: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Hash</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Hash_Sha256">Sha256</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Digest</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Sha256_init"><span class="titletype">func</span> <span class="titlelight">Sha256.</span><span class="titlestrong">init</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\sha256.swg#L137" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize the hashing sequence. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">init</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_Sha256_update"><span class="titletype">func</span> <span class="titlelight">Sha256.</span><span class="titlestrong">update</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\sha256.swg#L151" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Update the hash value with <code class="incode">buffer</code> content. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">update</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Hash_hash32"><span class="titletype">func</span> <span class="titlelight">Hash.</span><span class="titlestrong">hash32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\hash32.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Hash the given value and returns the corresponding u32. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">hash32</span><span class="SyntaxCode">(value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashSet"><span class="titletype">struct</span> <span class="titlelight">Core.</span><span class="titlestrong">HashSet</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L10" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_HashSet">HashSet</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">K</span><span class="SyntaxCode">)</code>
</div>
<table class="enumeration">
<tr>
<td>HASH_FREE</td>
<td>s32</td>
<td></td>
</tr>
<tr>
<td>HASH_DELETED</td>
<td>s32</td>
<td></td>
</tr>
<tr>
<td>HASH_FIRST</td>
<td>s32</td>
<td></td>
</tr>
<tr>
<td>HASH_MASK</td>
<td>s32</td>
<td></td>
</tr>
<tr>
<td>allocator</td>
<td><a href="swag.runtime.html#Swag_IAllocator">Swag.IAllocator</a></td>
<td></td>
</tr>
<tr>
<td>table</td>
<td>^Core.HashSetEntry'(K)</td>
<td></td>
</tr>
<tr>
<td>count</td>
<td>u64</td>
<td>Number of valid entries. </td>
</tr>
<tr>
<td>capacity</td>
<td>u64</td>
<td>Number of total entries the table can hold. </td>
</tr>
<tr>
<td>deleted</td>
<td>u64</td>
<td>Number of deleted entries. </td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_HashSet_add">add(self, K)</a></td>
<td>Add a new key. </td>
</tr>
<tr>
<td><a href="#Core_HashSet_add">add(self, moveref K)</a></td>
<td>Add a new key. </td>
</tr>
<tr>
<td><a href="#Core_HashSet_clear">clear</a></td>
<td>Remove all elements. </td>
</tr>
<tr>
<td><a href="#Core_HashSet_contains">contains</a></td>
<td>Returns true if the table contains the given key. </td>
</tr>
<tr>
<td><a href="#Core_HashSet_emplaceInternal">emplaceInternal</a></td>
<td>Add a new key. </td>
</tr>
<tr>
<td><a href="#Core_HashSet_free">free</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashSet_grow">grow</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashSet_hashKey">hashKey</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashSet_remove">remove</a></td>
<td>Remove the given key if it exists. </td>
</tr>
<tr>
<td><a href="#Core_HashSet_reserve">reserve</a></td>
<td>Reserve <code class="incode">newCapacity</code> elements in the table. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_HashSet_opCount">opCount</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashSet_opDrop">opDrop</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashSet_opPostCopy">opPostCopy</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashSet_opVisit">opVisit</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashSet_add"><span class="titletype">func</span> <span class="titlelight">HashSet.</span><span class="titlestrong">add</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L171" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a new key. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, key: </span><span class="SyntaxConstant">K</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_HashSetEntry">HashSetEntry</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">K</span><span class="SyntaxCode">)</code>
</div>
<p>Add a new key. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, key: </span><span class="SyntaxKeyword">moveref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">K</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_HashSetEntry">HashSetEntry</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">K</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashSet_clear"><span class="titletype">func</span> <span class="titlelight">HashSet.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L309" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove all elements. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashSet_contains"><span class="titletype">func</span> <span class="titlelight">HashSet.</span><span class="titlestrong">contains</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L290" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the table contains the given key. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">contains</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, key: </span><span class="SyntaxConstant">K</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashSet_emplaceInternal"><span class="titletype">func</span> <span class="titlelight">HashSet.</span><span class="titlestrong">emplaceInternal</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L236" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a new key. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">emplaceInternal</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, hashVal: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, key: </span><span class="SyntaxKeyword">ref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">K</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_HashSetEntry">HashSetEntry</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">K</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashSet_free"><span class="titletype">func</span> <span class="titlelight">HashSet.</span><span class="titlestrong">free</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L103" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">free</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashSet_grow"><span class="titletype">func</span> <span class="titlelight">HashSet.</span><span class="titlestrong">grow</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L121" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">grow</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashSet_hashKey"><span class="titletype">func</span> <span class="titlelight">HashSet.</span><span class="titlestrong">hashKey</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L98" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">hashKey</span><span class="SyntaxCode">(key: </span><span class="SyntaxConstant">K</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashSet_opCount"><span class="titletype">func</span> <span class="titlelight">HashSet.</span><span class="titlestrong">opCount</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCount</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashSet_opDrop"><span class="titletype">func</span> <span class="titlelight">HashSet.</span><span class="titlestrong">opDrop</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L32" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opDrop</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashSet_opPostCopy"><span class="titletype">func</span> <span class="titlelight">HashSet.</span><span class="titlestrong">opPostCopy</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opPostCopy</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashSet_opVisit"><span class="titletype">func</span> <span class="titlelight">HashSet.</span><span class="titlestrong">opVisit</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L60" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(ptr: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opVisit</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashSet_remove"><span class="titletype">func</span> <span class="titlelight">HashSet.</span><span class="titlestrong">remove</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L267" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove the given key if it exists. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">remove</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, key: </span><span class="SyntaxConstant">K</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashSet_reserve"><span class="titletype">func</span> <span class="titlelight">HashSet.</span><span class="titlestrong">reserve</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L132" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve <code class="incode">newCapacity</code> elements in the table. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">reserve</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, newCapacity: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashSetEntry"><span class="titletype">struct</span> <span class="titlelight">Core.</span><span class="titlestrong">HashSetEntry</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_HashSetEntry">HashSetEntry</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">K</span><span class="SyntaxCode">)</code>
</div>
<table class="enumeration">
<tr>
<td>hash</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td>key</td>
<td>K</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashTable"><span class="titletype">struct</span> <span class="titlelight">Core.</span><span class="titlestrong">HashTable</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_HashTable">HashTable</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">K</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)</code>
</div>
<table class="enumeration">
<tr>
<td>HASH_FREE</td>
<td>s32</td>
<td></td>
</tr>
<tr>
<td>HASH_DELETED</td>
<td>s32</td>
<td></td>
</tr>
<tr>
<td>HASH_FIRST</td>
<td>s32</td>
<td></td>
</tr>
<tr>
<td>HASH_MASK</td>
<td>s32</td>
<td></td>
</tr>
<tr>
<td>allocator</td>
<td><a href="swag.runtime.html#Swag_IAllocator">Swag.IAllocator</a></td>
<td></td>
</tr>
<tr>
<td>table</td>
<td>^Core.HashTableEntry'(K, V)</td>
<td></td>
</tr>
<tr>
<td>count</td>
<td>u64</td>
<td>Number of valid entries. </td>
</tr>
<tr>
<td>capacity</td>
<td>u64</td>
<td>Number of total entries the table can hold. </td>
</tr>
<tr>
<td>deleted</td>
<td>u64</td>
<td>Number of deleted entries. </td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_HashTable_add">add(self, K, V)</a></td>
<td>Add a new key value pair. If the key already exists, then the value will be replaced. </td>
</tr>
<tr>
<td><a href="#Core_HashTable_add">add(self, K, moveref V)</a></td>
<td>Add a new key value pair. If the key already exists, then the value will be replaced. </td>
</tr>
<tr>
<td><a href="#Core_HashTable_clear">clear</a></td>
<td>Remove all elements. </td>
</tr>
<tr>
<td><a href="#Core_HashTable_contains">contains</a></td>
<td>Returns true if the table contains the given key. </td>
</tr>
<tr>
<td><a href="#Core_HashTable_emplaceInternal">emplaceInternal</a></td>
<td>Use with care !. </td>
</tr>
<tr>
<td><a href="#Core_HashTable_find">find</a></td>
<td>Find the given key, and returns the corresponding entry. </td>
</tr>
<tr>
<td><a href="#Core_HashTable_free">free</a></td>
<td>Free the hashtable content. </td>
</tr>
<tr>
<td><a href="#Core_HashTable_grow">grow</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashTable_hashKey">hashKey</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashTable_remove">remove</a></td>
<td>Remove the given key if it exists. </td>
</tr>
<tr>
<td><a href="#Core_HashTable_reserve">reserve</a></td>
<td>Reserve <code class="incode">newCapacity</code> elements in the table. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_HashTable_opCount">opCount</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashTable_opDrop">opDrop</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashTable_opPostCopy">opPostCopy</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashTable_opVisit">opVisit</a></td>
<td>alias0 is the key, and alias1 is the value. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashTable_add"><span class="titletype">func</span> <span class="titlelight">HashTable.</span><span class="titlestrong">add</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L184" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a new key value pair. If the key already exists, then the value will be replaced. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, key: </span><span class="SyntaxConstant">K</span><span class="SyntaxCode">, value: </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_HashTableEntry">HashTableEntry</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">K</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)</code>
</div>
<p>Add a new key value pair. If the key already exists, then the value will be replaced. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, key: </span><span class="SyntaxConstant">K</span><span class="SyntaxCode">, value: </span><span class="SyntaxKeyword">moveref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_HashTableEntry">HashTableEntry</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">K</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashTable_clear"><span class="titletype">func</span> <span class="titlelight">HashTable.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L361" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove all elements. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashTable_contains"><span class="titletype">func</span> <span class="titlelight">HashTable.</span><span class="titlestrong">contains</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L322" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the table contains the given key. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">contains</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, key: </span><span class="SyntaxConstant">K</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashTable_emplaceInternal"><span class="titletype">func</span> <span class="titlelight">HashTable.</span><span class="titlestrong">emplaceInternal</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L262" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Use with care !. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">emplaceInternal</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, hashVal: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, key: </span><span class="SyntaxKeyword">ref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">K</span><span class="SyntaxCode">, value: </span><span class="SyntaxKeyword">ref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_HashTableEntry">HashTableEntry</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">K</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashTable_find"><span class="titletype">func</span> <span class="titlelight">HashTable.</span><span class="titlestrong">find</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L342" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Find the given key, and returns the corresponding entry. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">find</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, key: </span><span class="SyntaxConstant">K</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_HashTableEntry">HashTableEntry</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">K</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)</code>
</div>
<p> Returns null if the key is not there. </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashTable_free"><span class="titletype">func</span> <span class="titlelight">HashTable.</span><span class="titlestrong">free</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L120" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Free the hashtable content. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">free</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashTable_grow"><span class="titletype">func</span> <span class="titlelight">HashTable.</span><span class="titlestrong">grow</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L109" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">grow</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashTable_hashKey"><span class="titletype">func</span> <span class="titlelight">HashTable.</span><span class="titlestrong">hashKey</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L104" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">hashKey</span><span class="SyntaxCode">(key: </span><span class="SyntaxConstant">K</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashTable_opCount"><span class="titletype">func</span> <span class="titlelight">HashTable.</span><span class="titlestrong">opCount</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCount</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashTable_opDrop"><span class="titletype">func</span> <span class="titlelight">HashTable.</span><span class="titlestrong">opDrop</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L33" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opDrop</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashTable_opPostCopy"><span class="titletype">func</span> <span class="titlelight">HashTable.</span><span class="titlestrong">opPostCopy</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L38" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opPostCopy</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashTable_opVisit"><span class="titletype">func</span> <span class="titlelight">HashTable.</span><span class="titlestrong">opVisit</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L63" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>alias0 is the key, and alias1 is the value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(ptr: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opVisit</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashTable_remove"><span class="titletype">func</span> <span class="titlelight">HashTable.</span><span class="titlestrong">remove</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L299" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove the given key if it exists. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">remove</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, key: </span><span class="SyntaxConstant">K</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashTable_reserve"><span class="titletype">func</span> <span class="titlelight">HashTable.</span><span class="titlestrong">reserve</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L144" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve <code class="incode">newCapacity</code> elements in the table. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">reserve</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, newCapacity: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_HashTableEntry"><span class="titletype">struct</span> <span class="titlelight">Core.</span><span class="titlestrong">HashTableEntry</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_HashTableEntry">HashTableEntry</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">K</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)</code>
</div>
<table class="enumeration">
<tr>
<td>hash</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td>key</td>
<td>K</td>
<td></td>
</tr>
<tr>
<td>value</td>
<td>V</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ILogWriter"><span class="titletype">interface</span> <span class="titlelight">Core.</span><span class="titlestrong">ILogWriter</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>print</td>
<td>func(*Core.ILogWriter, string)</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_GamePad"><span class="titletype">struct</span> <span class="titlelight">Input.</span><span class="titlestrong">GamePad</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Represents a gamepad. </p>
<table class="enumeration">
<tr>
<td>previousState</td>
<td><a href="#Core_Input_GamePadState">Core.Input.GamePadState</a></td>
<td></td>
</tr>
<tr>
<td>currentState</td>
<td><a href="#Core_Input_GamePadState">Core.Input.GamePadState</a></td>
<td></td>
</tr>
<tr>
<td>padIndex</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td>connected</td>
<td>bool</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Input_GamePad_clear">clear</a></td>
<td>Reset the previous and current state. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_getPosition">getPosition</a></td>
<td>Get the analog position of the given button. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_isButtonJustPressed">isButtonJustPressed</a></td>
<td>Determines whether specified input device button has just been pressed. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_isButtonJustReleased">isButtonJustReleased</a></td>
<td>Determines whether specified input device button has just been released. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_isButtonPressed">isButtonPressed</a></td>
<td>Determines whether specified input device button is pressed. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_isButtonReleased">isButtonReleased</a></td>
<td>Determines whether specified input device button is released (not pressed). </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_isConnected">isConnected</a></td>
<td>Returns true if the corresponding <code class="incode">padIndex</code> is connected. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_setVibration">setVibration(self, f32, f32)</a></td>
<td>Set the vibration motor speeds. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_setVibration">setVibration(u32, f32, f32)</a></td>
<td>Set the left and right vibration of the given <code class="incode">padIndex</code>. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_update">update</a></td>
<td>Update the GamePad current state. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_GamePad_clear"><span class="titletype">func</span> <span class="titlelight">GamePad.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L43" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reset the previous and current state. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_GamePad_getPosition"><span class="titletype">func</span> <span class="titlelight">GamePad.</span><span class="titlestrong">getPosition</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L74" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the analog position of the given button. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getPosition</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, button: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_GamePadButton">GamePadButton</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Point"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Point">Point</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_GamePad_isButtonJustPressed"><span class="titletype">func</span> <span class="titlelight">GamePad.</span><span class="titlestrong">isButtonJustPressed</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L56" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether specified input device button has just been pressed. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isButtonJustPressed</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, button: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_GamePadButton">GamePadButton</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_GamePad_isButtonJustReleased"><span class="titletype">func</span> <span class="titlelight">GamePad.</span><span class="titlestrong">isButtonJustReleased</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L68" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether specified input device button has just been released. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isButtonJustReleased</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, button: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_GamePadButton">GamePadButton</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_GamePad_isButtonPressed"><span class="titletype">func</span> <span class="titlelight">GamePad.</span><span class="titlestrong">isButtonPressed</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L50" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether specified input device button is pressed. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isButtonPressed</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, button: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_GamePadButton">GamePadButton</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_GamePad_isButtonReleased"><span class="titletype">func</span> <span class="titlelight">GamePad.</span><span class="titlestrong">isButtonReleased</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L62" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether specified input device button is released (not pressed). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isButtonReleased</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, button: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_GamePadButton">GamePadButton</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_GamePad_isConnected"><span class="titletype">func</span> <span class="titlelight">GamePad.</span><span class="titlestrong">isConnected</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.xinput.swg#L8" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the corresponding <code class="incode">padIndex</code> is connected. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isConnected</span><span class="SyntaxCode">(padIndex: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_GamePad_setVibration"><span class="titletype">func</span> <span class="titlelight">GamePad.</span><span class="titlestrong">setVibration</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L80" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the vibration motor speeds. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setVibration</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, left: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, right: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>Set the left and right vibration of the given <code class="incode">padIndex</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setVibration</span><span class="SyntaxCode">(padIndex: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, left: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, right: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_GamePad_update"><span class="titletype">func</span> <span class="titlelight">GamePad.</span><span class="titlestrong">update</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Update the GamePad current state. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">update</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_GamePadButton"><span class="titletype">enum</span> <span class="titlelight">Input.</span><span class="titlestrong">GamePadButton</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepadbutton.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Enumerates gamepad buttons. </p>
<table class="enumeration">
<tr>
<td>A</td>
<td></td>
</tr>
<tr>
<td>B</td>
<td></td>
</tr>
<tr>
<td>Back</td>
<td></td>
</tr>
<tr>
<td>BigButton</td>
<td></td>
</tr>
<tr>
<td>DPadDown</td>
<td></td>
</tr>
<tr>
<td>DPadLeft</td>
<td></td>
</tr>
<tr>
<td>DPadRight</td>
<td></td>
</tr>
<tr>
<td>DPadUp</td>
<td></td>
</tr>
<tr>
<td>LeftShoulder</td>
<td></td>
</tr>
<tr>
<td>LeftStick</td>
<td></td>
</tr>
<tr>
<td>LeftThumbstickDown</td>
<td></td>
</tr>
<tr>
<td>LeftThumbstickLeft</td>
<td></td>
</tr>
<tr>
<td>LeftThumbstickRight</td>
<td></td>
</tr>
<tr>
<td>LeftThumbstickUp</td>
<td></td>
</tr>
<tr>
<td>LeftTrigger</td>
<td></td>
</tr>
<tr>
<td>RightShoulder</td>
<td></td>
</tr>
<tr>
<td>RightStick</td>
<td></td>
</tr>
<tr>
<td>RightThumbstickDown</td>
<td></td>
</tr>
<tr>
<td>RightThumbstickLeft</td>
<td></td>
</tr>
<tr>
<td>RightThumbstickRight</td>
<td></td>
</tr>
<tr>
<td>RightThumbstickUp</td>
<td></td>
</tr>
<tr>
<td>RightTrigger</td>
<td></td>
</tr>
<tr>
<td>Start</td>
<td></td>
</tr>
<tr>
<td>X</td>
<td></td>
</tr>
<tr>
<td>Y</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_GamePadError"><span class="titletype">enum</span> <span class="titlelight">Input.</span><span class="titlestrong">GamePadError</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>DeviceNotConnected</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_GamePadState"><span class="titletype">struct</span> <span class="titlelight">Input.</span><span class="titlestrong">GamePadState</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepadstate.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Represents specific information about the state of the controller,  including the current state of buttons and sticks. </p>
<table class="enumeration">
<tr>
<td>pressed</td>
<td>[25] bool</td>
<td></td>
</tr>
<tr>
<td>position</td>
<td>[25] Core.Math.Point</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Input_GamePadState_clear">clear</a></td>
<td>Reset state to its default value. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePadState_update">update</a></td>
<td>Compute the current state of the given pad index. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_GamePadState_clear"><span class="titletype">func</span> <span class="titlelight">GamePadState.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepadstate.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reset state to its default value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_GamePadState_update"><span class="titletype">func</span> <span class="titlelight">GamePadState.</span><span class="titlestrong">update</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepadstate.xinput.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compute the current state of the given pad index. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">update</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, padIndex: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Key"><span class="titletype">enum</span> <span class="titlelight">Input.</span><span class="titlestrong">Key</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\key.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Defines the keys on a keyboard. </p>
<table class="enumeration">
<tr>
<td>None</td>
<td></td>
</tr>
<tr>
<td>A</td>
<td></td>
</tr>
<tr>
<td>Add</td>
<td></td>
</tr>
<tr>
<td>Apps</td>
<td></td>
</tr>
<tr>
<td>Attn</td>
<td></td>
</tr>
<tr>
<td>B</td>
<td></td>
</tr>
<tr>
<td>Back</td>
<td></td>
</tr>
<tr>
<td>BrowserBack</td>
<td></td>
</tr>
<tr>
<td>BrowserFavorites</td>
<td></td>
</tr>
<tr>
<td>BrowserForward</td>
<td></td>
</tr>
<tr>
<td>BrowserHome</td>
<td></td>
</tr>
<tr>
<td>BrowserRefresh</td>
<td></td>
</tr>
<tr>
<td>BrowserSearch</td>
<td></td>
</tr>
<tr>
<td>BrowserStop</td>
<td></td>
</tr>
<tr>
<td>C</td>
<td></td>
</tr>
<tr>
<td>Cancel</td>
<td></td>
</tr>
<tr>
<td>Capital</td>
<td></td>
</tr>
<tr>
<td>CapsLock</td>
<td></td>
</tr>
<tr>
<td>Clear</td>
<td></td>
</tr>
<tr>
<td>Control</td>
<td></td>
</tr>
<tr>
<td>Crsel</td>
<td></td>
</tr>
<tr>
<td>D</td>
<td></td>
</tr>
<tr>
<td>D0</td>
<td></td>
</tr>
<tr>
<td>D1</td>
<td></td>
</tr>
<tr>
<td>D2</td>
<td></td>
</tr>
<tr>
<td>D3</td>
<td></td>
</tr>
<tr>
<td>D4</td>
<td></td>
</tr>
<tr>
<td>D5</td>
<td></td>
</tr>
<tr>
<td>D6</td>
<td></td>
</tr>
<tr>
<td>D7</td>
<td></td>
</tr>
<tr>
<td>D8</td>
<td></td>
</tr>
<tr>
<td>D9</td>
<td></td>
</tr>
<tr>
<td>Decimal</td>
<td></td>
</tr>
<tr>
<td>Delete</td>
<td></td>
</tr>
<tr>
<td>Divide</td>
<td></td>
</tr>
<tr>
<td>Down</td>
<td></td>
</tr>
<tr>
<td>E</td>
<td></td>
</tr>
<tr>
<td>End</td>
<td></td>
</tr>
<tr>
<td>Enter</td>
<td></td>
</tr>
<tr>
<td>EraseEof</td>
<td></td>
</tr>
<tr>
<td>Escape</td>
<td></td>
</tr>
<tr>
<td>Execute</td>
<td></td>
</tr>
<tr>
<td>Exsel</td>
<td></td>
</tr>
<tr>
<td>F</td>
<td></td>
</tr>
<tr>
<td>F1</td>
<td></td>
</tr>
<tr>
<td>F10</td>
<td></td>
</tr>
<tr>
<td>F11</td>
<td></td>
</tr>
<tr>
<td>F12</td>
<td></td>
</tr>
<tr>
<td>F13</td>
<td></td>
</tr>
<tr>
<td>F14</td>
<td></td>
</tr>
<tr>
<td>F15</td>
<td></td>
</tr>
<tr>
<td>F16</td>
<td></td>
</tr>
<tr>
<td>F17</td>
<td></td>
</tr>
<tr>
<td>F18</td>
<td></td>
</tr>
<tr>
<td>F19</td>
<td></td>
</tr>
<tr>
<td>F2</td>
<td></td>
</tr>
<tr>
<td>F20</td>
<td></td>
</tr>
<tr>
<td>F21</td>
<td></td>
</tr>
<tr>
<td>F22</td>
<td></td>
</tr>
<tr>
<td>F23</td>
<td></td>
</tr>
<tr>
<td>F24</td>
<td></td>
</tr>
<tr>
<td>F3</td>
<td></td>
</tr>
<tr>
<td>F4</td>
<td></td>
</tr>
<tr>
<td>F5</td>
<td></td>
</tr>
<tr>
<td>F6</td>
<td></td>
</tr>
<tr>
<td>F7</td>
<td></td>
</tr>
<tr>
<td>F8</td>
<td></td>
</tr>
<tr>
<td>F9</td>
<td></td>
</tr>
<tr>
<td>FinalMode</td>
<td></td>
</tr>
<tr>
<td>G</td>
<td></td>
</tr>
<tr>
<td>H</td>
<td></td>
</tr>
<tr>
<td>HanguelMode</td>
<td></td>
</tr>
<tr>
<td>HangulMode</td>
<td></td>
</tr>
<tr>
<td>HanjaMode</td>
<td></td>
</tr>
<tr>
<td>Help</td>
<td></td>
</tr>
<tr>
<td>Home</td>
<td></td>
</tr>
<tr>
<td>I</td>
<td></td>
</tr>
<tr>
<td>IMEAccept</td>
<td></td>
</tr>
<tr>
<td>IMEAceept</td>
<td></td>
</tr>
<tr>
<td>IMEConvert</td>
<td></td>
</tr>
<tr>
<td>IMEModeChange</td>
<td></td>
</tr>
<tr>
<td>IMENonConvert</td>
<td></td>
</tr>
<tr>
<td>Insert</td>
<td></td>
</tr>
<tr>
<td>J</td>
<td></td>
</tr>
<tr>
<td>JunjaMode</td>
<td></td>
</tr>
<tr>
<td>K</td>
<td></td>
</tr>
<tr>
<td>KanaMode</td>
<td></td>
</tr>
<tr>
<td>KanjiMode</td>
<td></td>
</tr>
<tr>
<td>L</td>
<td></td>
</tr>
<tr>
<td>LButton</td>
<td></td>
</tr>
<tr>
<td>LControl</td>
<td></td>
</tr>
<tr>
<td>LMenu</td>
<td></td>
</tr>
<tr>
<td>LShift</td>
<td></td>
</tr>
<tr>
<td>LWin</td>
<td></td>
</tr>
<tr>
<td>LaunchApplication1</td>
<td></td>
</tr>
<tr>
<td>LaunchApplication2</td>
<td></td>
</tr>
<tr>
<td>LaunchMail</td>
<td></td>
</tr>
<tr>
<td>Left</td>
<td></td>
</tr>
<tr>
<td>LineFeed</td>
<td></td>
</tr>
<tr>
<td>M</td>
<td></td>
</tr>
<tr>
<td>MButton</td>
<td></td>
</tr>
<tr>
<td>MediaNextTrack</td>
<td></td>
</tr>
<tr>
<td>MediaPlayPause</td>
<td></td>
</tr>
<tr>
<td>MediaPreviousTrack</td>
<td></td>
</tr>
<tr>
<td>MediaStop</td>
<td></td>
</tr>
<tr>
<td>MenuCtrl</td>
<td></td>
</tr>
<tr>
<td>Multiply</td>
<td></td>
</tr>
<tr>
<td>N</td>
<td></td>
</tr>
<tr>
<td>Next</td>
<td></td>
</tr>
<tr>
<td>NoName</td>
<td></td>
</tr>
<tr>
<td>NumLock</td>
<td></td>
</tr>
<tr>
<td>NumPad0</td>
<td></td>
</tr>
<tr>
<td>NumPad1</td>
<td></td>
</tr>
<tr>
<td>NumPad2</td>
<td></td>
</tr>
<tr>
<td>NumPad3</td>
<td></td>
</tr>
<tr>
<td>NumPad4</td>
<td></td>
</tr>
<tr>
<td>NumPad5</td>
<td></td>
</tr>
<tr>
<td>NumPad6</td>
<td></td>
</tr>
<tr>
<td>NumPad7</td>
<td></td>
</tr>
<tr>
<td>NumPad8</td>
<td></td>
</tr>
<tr>
<td>NumPad9</td>
<td></td>
</tr>
<tr>
<td>O</td>
<td></td>
</tr>
<tr>
<td>Oem1</td>
<td></td>
</tr>
<tr>
<td>Oem102</td>
<td></td>
</tr>
<tr>
<td>Oem2</td>
<td></td>
</tr>
<tr>
<td>Oem3</td>
<td></td>
</tr>
<tr>
<td>Oem4</td>
<td></td>
</tr>
<tr>
<td>Oem5</td>
<td></td>
</tr>
<tr>
<td>Oem6</td>
<td></td>
</tr>
<tr>
<td>Oem7</td>
<td></td>
</tr>
<tr>
<td>Oem8</td>
<td></td>
</tr>
<tr>
<td>OemBackslash</td>
<td></td>
</tr>
<tr>
<td>OemClear</td>
<td></td>
</tr>
<tr>
<td>OemCloseBrackets</td>
<td></td>
</tr>
<tr>
<td>OemComma</td>
<td></td>
</tr>
<tr>
<td>OemMinus</td>
<td></td>
</tr>
<tr>
<td>OemOpenBrackets</td>
<td></td>
</tr>
<tr>
<td>OemPeriod</td>
<td></td>
</tr>
<tr>
<td>OemPipe</td>
<td></td>
</tr>
<tr>
<td>OemPlus</td>
<td></td>
</tr>
<tr>
<td>OemQuestion</td>
<td></td>
</tr>
<tr>
<td>OemQuotes</td>
<td></td>
</tr>
<tr>
<td>OemSemicolon</td>
<td></td>
</tr>
<tr>
<td>OemTilde</td>
<td></td>
</tr>
<tr>
<td>P</td>
<td></td>
</tr>
<tr>
<td>Pa1</td>
<td></td>
</tr>
<tr>
<td>Packet</td>
<td></td>
</tr>
<tr>
<td>PageDown</td>
<td></td>
</tr>
<tr>
<td>PageUp</td>
<td></td>
</tr>
<tr>
<td>Pause</td>
<td></td>
</tr>
<tr>
<td>Play</td>
<td></td>
</tr>
<tr>
<td>Print</td>
<td></td>
</tr>
<tr>
<td>PrintScreen</td>
<td></td>
</tr>
<tr>
<td>Prior</td>
<td></td>
</tr>
<tr>
<td>Process</td>
<td></td>
</tr>
<tr>
<td>Q</td>
<td></td>
</tr>
<tr>
<td>R</td>
<td></td>
</tr>
<tr>
<td>RButton</td>
<td></td>
</tr>
<tr>
<td>RControl</td>
<td></td>
</tr>
<tr>
<td>RMenu</td>
<td></td>
</tr>
<tr>
<td>RShift</td>
<td></td>
</tr>
<tr>
<td>RWin</td>
<td></td>
</tr>
<tr>
<td>Return</td>
<td></td>
</tr>
<tr>
<td>Right</td>
<td></td>
</tr>
<tr>
<td>S</td>
<td></td>
</tr>
<tr>
<td>Scroll</td>
<td></td>
</tr>
<tr>
<td>Select</td>
<td></td>
</tr>
<tr>
<td>SelectMedia</td>
<td></td>
</tr>
<tr>
<td>Separator</td>
<td></td>
</tr>
<tr>
<td>Shift</td>
<td></td>
</tr>
<tr>
<td>Sleep</td>
<td></td>
</tr>
<tr>
<td>Space</td>
<td></td>
</tr>
<tr>
<td>Subtract</td>
<td></td>
</tr>
<tr>
<td>T</td>
<td></td>
</tr>
<tr>
<td>Tab</td>
<td></td>
</tr>
<tr>
<td>U</td>
<td></td>
</tr>
<tr>
<td>Up</td>
<td></td>
</tr>
<tr>
<td>V</td>
<td></td>
</tr>
<tr>
<td>VolumeDown</td>
<td></td>
</tr>
<tr>
<td>VolumeMute</td>
<td></td>
</tr>
<tr>
<td>VolumeUp</td>
<td></td>
</tr>
<tr>
<td>W</td>
<td></td>
</tr>
<tr>
<td>X</td>
<td></td>
</tr>
<tr>
<td>XButton1</td>
<td></td>
</tr>
<tr>
<td>XButton2</td>
<td></td>
</tr>
<tr>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>Z</td>
<td></td>
</tr>
<tr>
<td>Zoom</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_KeyModifiers"><span class="titletype">enum</span> <span class="titlelight">Input.</span><span class="titlestrong">KeyModifiers</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\key.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Zero</td>
<td></td>
</tr>
<tr>
<td>Shift</td>
<td></td>
</tr>
<tr>
<td>Control</td>
<td></td>
</tr>
<tr>
<td>Alt</td>
<td></td>
</tr>
<tr>
<td>CtrlShift</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Keyboard"><span class="titletype">struct</span> <span class="titlelight">Input.</span><span class="titlestrong">Keyboard</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Allows getting keystrokes from keyboard. </p>
<table class="enumeration">
<tr>
<td>previousState</td>
<td><a href="#Core_Input_KeyboardState">Core.Input.KeyboardState</a></td>
<td></td>
</tr>
<tr>
<td>currentState</td>
<td><a href="#Core_Input_KeyboardState">Core.Input.KeyboardState</a></td>
<td></td>
</tr>
<tr>
<td>pressedRepeat</td>
<td>[188] bool</td>
<td></td>
</tr>
<tr>
<td>pressedTime</td>
<td>[188] u32</td>
<td></td>
</tr>
<tr>
<td>pressedRepeatStartTimeMs</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td>pressedRepeatTimeMs</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td>canRepeat</td>
<td>bool</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Input_Keyboard_clear">clear</a></td>
<td>Reset the keyboard state. </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_getPressedModifiers">getPressedModifiers</a></td>
<td>Returns the currently pressed key modifiers. </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_isKeyJustPressed">isKeyJustPressed</a></td>
<td>Determines whether given key has just been pressed. </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_isKeyJustReleased">isKeyJustReleased</a></td>
<td>Determines whether given key has just been released. </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_isKeyPressed">isKeyPressed(self, Key)</a></td>
<td>Determines whether given key is currently being pressed. </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_isKeyPressed">isKeyPressed(Key)</a></td>
<td>Returns true if the given key is pressed. </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_isKeyReleased">isKeyReleased</a></td>
<td>Determines whether given key is currently being released. </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_keyToRune">keyToRune</a></td>
<td>Try to transform the given key to the corresponding rune. </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_keyToVirtualKey">keyToVirtualKey</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_update">update</a></td>
<td>Compute current state of the keyboard (all keys). </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_virtualKeyToKey">virtualKeyToKey</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Keyboard_clear"><span class="titletype">func</span> <span class="titlelight">Keyboard.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.swg#L63" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reset the keyboard state. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Keyboard_getPressedModifiers"><span class="titletype">func</span> <span class="titlelight">Keyboard.</span><span class="titlestrong">getPressedModifiers</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.swg#L96" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the currently pressed key modifiers. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getPressedModifiers</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_Input_KeyModifiers"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_KeyModifiers">KeyModifiers</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Keyboard_isKeyJustPressed"><span class="titletype">func</span> <span class="titlelight">Keyboard.</span><span class="titlestrong">isKeyJustPressed</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.swg#L78" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether given key has just been pressed. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isKeyJustPressed</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, key: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_Key">Key</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Keyboard_isKeyJustReleased"><span class="titletype">func</span> <span class="titlelight">Keyboard.</span><span class="titlestrong">isKeyJustReleased</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.swg#L90" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether given key has just been released. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isKeyJustReleased</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, key: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_Key">Key</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Keyboard_isKeyPressed"><span class="titletype">func</span> <span class="titlelight">Keyboard.</span><span class="titlestrong">isKeyPressed</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.swg#L72" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether given key is currently being pressed. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isKeyPressed</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, key: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_Key">Key</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>Returns true if the given key is pressed. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isKeyPressed</span><span class="SyntaxCode">(key: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_Key">Key</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Keyboard_isKeyReleased"><span class="titletype">func</span> <span class="titlelight">Keyboard.</span><span class="titlestrong">isKeyReleased</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.swg#L84" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether given key is currently being released. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isKeyReleased</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, key: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_Key">Key</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Keyboard_keyToRune"><span class="titletype">func</span> <span class="titlelight">Keyboard.</span><span class="titlestrong">keyToRune</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.win32.swg#L234" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Try to transform the given key to the corresponding rune. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">keyToRune</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, key: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_Key">Key</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">rune</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Keyboard_keyToVirtualKey"><span class="titletype">func</span> <span class="titlelight">Keyboard.</span><span class="titlestrong">keyToVirtualKey</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.win32.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">keyToVirtualKey</span><span class="SyntaxCode">(key: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_Key">Key</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Input_VirtualKey"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_VirtualKey">VirtualKey</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Keyboard_update"><span class="titletype">func</span> <span class="titlelight">Keyboard.</span><span class="titlestrong">update</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compute current state of the keyboard (all keys). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">update</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Keyboard_virtualKeyToKey"><span class="titletype">func</span> <span class="titlelight">Keyboard.</span><span class="titlestrong">virtualKeyToKey</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.win32.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">virtualKeyToKey</span><span class="SyntaxCode">(vkey: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_VirtualKey">VirtualKey</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Input_Key"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_Key">Key</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_KeyboardState"><span class="titletype">struct</span> <span class="titlelight">Input.</span><span class="titlestrong">KeyboardState</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboardstate.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Represents one keyboard state. </p>
<table class="enumeration">
<tr>
<td><b>using</b> native</td>
<td><a href="#Core_Input_KeyboardStateNative">Core.Input.KeyboardStateNative</a></td>
<td></td>
</tr>
<tr>
<td>pressed</td>
<td>[188] bool</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Input_KeyboardState_clear">clear</a></td>
<td>Reset keyboard state. </td>
</tr>
<tr>
<td><a href="#Core_Input_KeyboardState_update">update</a></td>
<td>Compute current keyboard state. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_KeyboardState_clear"><span class="titletype">func</span> <span class="titlelight">KeyboardState.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboardstate.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reset keyboard state. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_KeyboardState_update"><span class="titletype">func</span> <span class="titlelight">KeyboardState.</span><span class="titlestrong">update</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboardstate.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compute current keyboard state. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">update</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_KeyboardStateNative"><span class="titletype">struct</span> <span class="titlelight">Input.</span><span class="titlestrong">KeyboardStateNative</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboardstate.win32.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>nativeState</td>
<td>[256] Win32.BYTE</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Mouse"><span class="titletype">struct</span> <span class="titlelight">Input.</span><span class="titlestrong">Mouse</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Allows reading position and button click information from mouse. </p>
<table class="enumeration">
<tr>
<td>previousState</td>
<td><a href="#Core_Input_MouseState">Core.Input.MouseState</a></td>
<td></td>
</tr>
<tr>
<td>currentState</td>
<td><a href="#Core_Input_MouseState">Core.Input.MouseState</a></td>
<td></td>
</tr>
<tr>
<td>dblClk</td>
<td>[5] bool</td>
<td></td>
</tr>
<tr>
<td>dblClkTimeMs</td>
<td>u32</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Input_Mouse_clear">clear</a></td>
<td>Reset the mouse state to its default value. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_getMove">getMove</a></td>
<td>Returns the move between the current position and the previous one. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_getPosition">getPosition</a></td>
<td>Returns the mouse position. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_getPreviousPos">getPreviousPos</a></td>
<td>Returns the previous mouse position, before the last update. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_isButtonDoubleClick">isButtonDoubleClick</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_isButtonJustPressed">isButtonJustPressed</a></td>
<td>Determines whether the specified mouse button has just been pressed. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_isButtonJustReleased">isButtonJustReleased</a></td>
<td>Determines whether the specified mouse button has just been released. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_isButtonPressed">isButtonPressed(self, MouseButton)</a></td>
<td>Determines whether the specified mouse button is pressed. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_isButtonPressed">isButtonPressed(MouseButton)</a></td>
<td>Determins if one given mouse button is pressed or not. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_isButtonReleased">isButtonReleased</a></td>
<td>Determines whether the specified mouse button is released. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_update">update</a></td>
<td>Compute the current state of the mouse. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Mouse_clear"><span class="titletype">func</span> <span class="titlelight">Mouse.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L38" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reset the mouse state to its default value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Mouse_getMove"><span class="titletype">func</span> <span class="titlelight">Mouse.</span><span class="titlestrong">getMove</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L102" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the move between the current position and the previous one. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getMove</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_Math_Point"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Point">Point</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Mouse_getPosition"><span class="titletype">func</span> <span class="titlelight">Mouse.</span><span class="titlestrong">getPosition</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L96" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the mouse position. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getPosition</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_Math_Point"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Point">Point</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Mouse_getPreviousPos"><span class="titletype">func</span> <span class="titlelight">Mouse.</span><span class="titlestrong">getPreviousPos</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L90" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the previous mouse position, before the last update. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getPreviousPos</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_Math_Point"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Point">Point</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Mouse_isButtonDoubleClick"><span class="titletype">func</span> <span class="titlelight">Mouse.</span><span class="titlestrong">isButtonDoubleClick</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L44" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isButtonDoubleClick</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, button: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_MouseButton">MouseButton</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Mouse_isButtonJustPressed"><span class="titletype">func</span> <span class="titlelight">Mouse.</span><span class="titlestrong">isButtonJustPressed</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L72" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether the specified mouse button has just been pressed. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isButtonJustPressed</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, button: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_MouseButton">MouseButton</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Mouse_isButtonJustReleased"><span class="titletype">func</span> <span class="titlelight">Mouse.</span><span class="titlestrong">isButtonJustReleased</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L84" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether the specified mouse button has just been released. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isButtonJustReleased</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, button: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_MouseButton">MouseButton</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Mouse_isButtonPressed"><span class="titletype">func</span> <span class="titlelight">Mouse.</span><span class="titlestrong">isButtonPressed</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L66" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether the specified mouse button is pressed. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isButtonPressed</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, button: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_MouseButton">MouseButton</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>Determins if one given mouse button is pressed or not. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isButtonPressed</span><span class="SyntaxCode">(button: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_MouseButton">MouseButton</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Mouse_isButtonReleased"><span class="titletype">func</span> <span class="titlelight">Mouse.</span><span class="titlestrong">isButtonReleased</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L78" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether the specified mouse button is released. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isButtonReleased</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, button: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_MouseButton">MouseButton</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_Mouse_update"><span class="titletype">func</span> <span class="titlelight">Mouse.</span><span class="titlestrong">update</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compute the current state of the mouse. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">update</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_MouseButton"><span class="titletype">enum</span> <span class="titlelight">Input.</span><span class="titlestrong">MouseButton</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mousebutton.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Left</td>
<td></td>
</tr>
<tr>
<td>Middle</td>
<td></td>
</tr>
<tr>
<td>Right</td>
<td></td>
</tr>
<tr>
<td>XButton1</td>
<td></td>
</tr>
<tr>
<td>XButton2</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_MouseState"><span class="titletype">struct</span> <span class="titlelight">Input.</span><span class="titlestrong">MouseState</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mousestate.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Represents one mouse state. </p>
<table class="enumeration">
<tr>
<td>pressed</td>
<td>[5] bool</td>
<td></td>
</tr>
<tr>
<td>pressedTime</td>
<td>[5] u32</td>
<td></td>
</tr>
<tr>
<td>pressedPos</td>
<td>[5] Core.Math.Point</td>
<td></td>
</tr>
<tr>
<td>position</td>
<td><a href="#Core_Math_Point">Core.Math.Point</a></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Input_MouseState_clear">clear</a></td>
<td>Reset the state to its default value. </td>
</tr>
<tr>
<td><a href="#Core_Input_MouseState_update">update</a></td>
<td>Compute the actual state of the mouse. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_MouseState_clear"><span class="titletype">func</span> <span class="titlelight">MouseState.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mousestate.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reset the state to its default value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_MouseState_update"><span class="titletype">func</span> <span class="titlelight">MouseState.</span><span class="titlestrong">update</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mousestate.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compute the actual state of the mouse. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">update</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_getKeyName"><span class="titletype">func</span> <span class="titlelight">Input.</span><span class="titlestrong">getKeyName</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\key.swg#L211" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a "shortcut" display name. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getKeyName</span><span class="SyntaxCode">(mdf: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_KeyModifiers">KeyModifiers</a></span><span class="SyntaxCode">, key: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Input</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Input_Key">Key</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_getMousePos"><span class="titletype">func</span> <span class="titlelight">Input.</span><span class="titlestrong">getMousePos</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.win32.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the current mouse position. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getMousePos</span><span class="SyntaxCode">()-><a href=</span><span class="SyntaxString">"#Core_Math_Point"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Point">Point</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_setMousePos"><span class="titletype">func</span> <span class="titlelight">Input.</span><span class="titlestrong">setMousePos</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.win32.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the current mouse position. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setMousePos</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Input_showMouseCursor"><span class="titletype">func</span> <span class="titlelight">Input.</span><span class="titlestrong">showMouseCursor</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.win32.swg#L21" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Shoud or hide the mouse cursor. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">showMouseCursor</span><span class="SyntaxCode">(show: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Jobs_ForJob"><span class="titletype">struct</span> <span class="titlelight">Jobs.</span><span class="titlestrong">ForJob</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td><b>using</b> base</td>
<td><a href="#Core_Jobs_Job">Core.Jobs.Job</a></td>
<td></td>
</tr>
<tr>
<td>startIndex</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td>endIndex</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td>userData</td>
<td>*void</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Jobs_Job"><span class="titletype">struct</span> <span class="titlelight">Jobs.</span><span class="titlestrong">Job</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>lambda</td>
<td>func(*void)</td>
<td></td>
</tr>
<tr>
<td>data</td>
<td>*void</td>
<td></td>
</tr>
<tr>
<td>state</td>
<td><a href="#Core_Jobs_JobState">Core.Jobs.JobState</a></td>
<td></td>
</tr>
<tr>
<td>pendingIndex</td>
<td>u32</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Jobs_JobState"><span class="titletype">enum</span> <span class="titlelight">Jobs.</span><span class="titlestrong">JobState</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Zero</td>
<td></td>
</tr>
<tr>
<td>InPending</td>
<td></td>
</tr>
<tr>
<td>Done</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Jobs_SliceJob"><span class="titletype">struct</span> <span class="titlelight">Jobs.</span><span class="titlestrong">SliceJob</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_Jobs_SliceJob">SliceJob</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<table class="enumeration">
<tr>
<td><b>using</b> base</td>
<td><a href="#Core_Jobs_Job">Core.Jobs.Job</a></td>
<td></td>
</tr>
<tr>
<td>buffer</td>
<td>[..] T</td>
<td></td>
</tr>
<tr>
<td>offset</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td>userData</td>
<td>*void</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Jobs_getNumWorkers"><span class="titletype">func</span> <span class="titlelight">Jobs.</span><span class="titlestrong">getNumWorkers</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L125" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns number of threads in the job system. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getNumWorkers</span><span class="SyntaxCode">()-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Jobs_isSynchrone"><span class="titletype">func</span> <span class="titlelight">Jobs.</span><span class="titlestrong">isSynchrone</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L122" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true is the job system has been initialized. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isSynchrone</span><span class="SyntaxCode">()-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Jobs_parallelFor"><span class="titletype">func</span> <span class="titlelight">Jobs.</span><span class="titlestrong">parallelFor</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L278" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Do a for loop in parallel chunks  Exposed variables:  - @alias0: current loop index  - @alias1: userData as passed to the macro. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parallelFor</span><span class="SyntaxCode">(count: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, userData: *</span><span class="SyntaxType">void</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Jobs_parallelVisit"><span class="titletype">func</span> <span class="titlelight">Jobs.</span><span class="titlestrong">parallelVisit</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L206" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Operate on a range in parallel chunks  Exposed variables:  - buffer: address of the element of the range to process  - data:   userData as passed to the macro. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">parallelVisit</span><span class="SyntaxCode">(range: [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, offset: </span><span class="SyntaxType">u32</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">1</span><span class="SyntaxCode">, userData: *</span><span class="SyntaxType">void</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Jobs_scheduleJob"><span class="titletype">func</span> <span class="titlelight">Jobs.</span><span class="titlestrong">scheduleJob</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L148" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Schedule a job to execute. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">scheduleJob</span><span class="SyntaxCode">(job: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Jobs</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Jobs_Job">Job</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Jobs_setNumWorkers"><span class="titletype">func</span> <span class="titlelight">Jobs.</span><span class="titlestrong">setNumWorkers</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L128" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the number of worker threads. Must be done once. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setNumWorkers</span><span class="SyntaxCode">(numWorkers: </span><span class="SyntaxType">u32</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">0</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Jobs_waitDone"><span class="titletype">func</span> <span class="titlelight">Jobs.</span><span class="titlestrong">waitDone</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L160" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Wait for all registered jobs to be finished. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">waitDone</span><span class="SyntaxCode">()</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Jobs_waitJob"><span class="titletype">func</span> <span class="titlelight">Jobs.</span><span class="titlestrong">waitJob</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L167" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Wait for a given job to be finished. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">waitJob</span><span class="SyntaxCode">(job: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Jobs</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Jobs_Job">Job</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_CharAttribute"><span class="titletype">enum</span> <span class="titlelight">Latin1.</span><span class="titlestrong">CharAttribute</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1tables.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Zero</td>
<td></td>
</tr>
<tr>
<td>Control</td>
<td></td>
</tr>
<tr>
<td>Punctuation</td>
<td></td>
</tr>
<tr>
<td>BinDigit</td>
<td></td>
</tr>
<tr>
<td>HexDigit</td>
<td></td>
</tr>
<tr>
<td>Digit</td>
<td></td>
</tr>
<tr>
<td>Symbol</td>
<td></td>
</tr>
<tr>
<td>Spacing</td>
<td></td>
</tr>
<tr>
<td>Upper</td>
<td></td>
</tr>
<tr>
<td>Lower</td>
<td></td>
</tr>
<tr>
<td>Printable</td>
<td></td>
</tr>
<tr>
<td>LowerUtf8</td>
<td></td>
</tr>
<tr>
<td>UpperUtf8</td>
<td></td>
</tr>
<tr>
<td>Graphical</td>
<td></td>
</tr>
<tr>
<td>Letter</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_compare"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">compare</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L62" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compare two utf8 strings, dealing only with latin1 table  Returns -1, 0 or 1. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compare</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, dst: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, ignoreCase = </span><span class="SyntaxKeyword">false</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_compareNatural"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">compareNatural</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L102" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compare two utf8 strings in a natural way, dealing only with latin1 table  Returns -1, 0 or 1. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compareNatural</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, dst: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, ignoreCase = </span><span class="SyntaxKeyword">false</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode"></code>
</div>
<p> :LICENCE  This code is based on <code class="incode">natsort</code> by Martin Pool (https://github.com/sourcefrog/natsort)  The original code has been modified for Swag  See LICENCE.md for the corresponding licence. </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_isAscii"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">isAscii</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isAscii</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_isBinDigit"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">isBinDigit</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L10" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isBinDigit</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_isControl"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">isControl</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isControl</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_isDigit"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">isDigit</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L8" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isDigit</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_isHexDigit"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">isHexDigit</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isHexDigit</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_isLetter"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">isLetter</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isLetter</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_isLetterOrDigit"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">isLetterOrDigit</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isLetterOrDigit</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_isLower"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">isLower</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isLower</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_isNumber"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">isNumber</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L9" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isNumber</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_isPunctuation"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">isPunctuation</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isPunctuation</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_isSpace"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">isSpace</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isSpace</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_isSymbol"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">isSymbol</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isSymbol</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_isUpper"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">isUpper</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isUpper</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_makeLower"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">makeLower</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L51" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Make an utf8 buffer lower case, dealing only with latin1 table. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">makeLower</span><span class="SyntaxCode">(buffer: [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_makeUpper"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">makeUpper</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Make an utf8 buffer upper case, dealing only with latin1 table. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">makeUpper</span><span class="SyntaxCode">(buffer: [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_toLower"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">toLower</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toLower</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Latin1_toUpper"><span class="titletype">func</span> <span class="titlelight">Latin1.</span><span class="titlestrong">toUpper</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L21" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toUpper</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_List"><span class="titletype">struct</span> <span class="titlelight">Core.</span><span class="titlestrong">List</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_List">List</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<table class="enumeration">
<tr>
<td>head</td>
<td>*Core.ListNode'(T)</td>
<td></td>
</tr>
<tr>
<td>tail</td>
<td>*Core.ListNode'(T)</td>
<td></td>
</tr>
<tr>
<td>count</td>
<td>u64</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_List_addBack">addBack(self, T)</a></td>
<td>Add a new element on front. </td>
</tr>
<tr>
<td><a href="#Core_List_addBack">addBack(self, moveref T)</a></td>
<td>Add a new element on front. </td>
</tr>
<tr>
<td><a href="#Core_List_addFront">addFront(self, T)</a></td>
<td>Add a new element on front. </td>
</tr>
<tr>
<td><a href="#Core_List_addFront">addFront(self, moveref T)</a></td>
<td>Add a new element on front. </td>
</tr>
<tr>
<td><a href="#Core_List_clear">clear</a></td>
<td>Clear all elements. </td>
</tr>
<tr>
<td><a href="#Core_List_insertAfter">insertAfter(self, *ListNode'(T), T)</a></td>
<td>Insert a node before the reference. </td>
</tr>
<tr>
<td><a href="#Core_List_insertAfter">insertAfter(self, *ListNode'(T), moveref T)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_List_insertBefore">insertBefore(self, *ListNode'(T), T)</a></td>
<td>Insert a node before the reference. </td>
</tr>
<tr>
<td><a href="#Core_List_insertBefore">insertBefore(self, *ListNode'(T), moveref T)</a></td>
<td></td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_List_opDrop">opDrop</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_List_opVisit">opVisit</a></td>
<td>Visit every elements of the list  @alias0 is the value  @alias1 is the node  @alias2 is the index. </td>
</tr>
<tr>
<td><a href="#Core_List_opVisitBack">opVisitBack</a></td>
<td>Visit every elements of the list from tail to head  @alias0 is the value  @alias1 is the node  @alias2 is the index. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_List_addBack"><span class="titletype">func</span> <span class="titlelight">List.</span><span class="titlestrong">addBack</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L144" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a new element on front. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">addBack</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ListNode">ListNode</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>Add a new element on front. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">addBack</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxKeyword">moveref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ListNode">ListNode</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_List_addFront"><span class="titletype">func</span> <span class="titlelight">List.</span><span class="titlestrong">addFront</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L102" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a new element on front. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">addFront</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ListNode">ListNode</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>Add a new element on front. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">addFront</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxKeyword">moveref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ListNode">ListNode</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_List_clear"><span class="titletype">func</span> <span class="titlelight">List.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L86" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Clear all elements. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_List_insertAfter"><span class="titletype">func</span> <span class="titlelight">List.</span><span class="titlestrong">insertAfter</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L225" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Insert a node before the reference. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">insertAfter</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, node: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ListNode">ListNode</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">), value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ListNode">ListNode</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">insertAfter</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, node: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ListNode">ListNode</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">), value: </span><span class="SyntaxKeyword">moveref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ListNode">ListNode</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_List_insertBefore"><span class="titletype">func</span> <span class="titlelight">List.</span><span class="titlestrong">insertBefore</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L186" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Insert a node before the reference. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">insertBefore</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, node: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ListNode">ListNode</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">), value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ListNode">ListNode</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">insertBefore</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, node: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ListNode">ListNode</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">), value: </span><span class="SyntaxKeyword">moveref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ListNode">ListNode</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_List_opDrop"><span class="titletype">func</span> <span class="titlelight">List.</span><span class="titlestrong">opDrop</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opDrop</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_List_opVisit"><span class="titletype">func</span> <span class="titlelight">List.</span><span class="titlestrong">opVisit</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Visit every elements of the list  @alias0 is the value  @alias1 is the node  @alias2 is the index. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(ptr: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opVisit</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_List_opVisitBack"><span class="titletype">func</span> <span class="titlelight">List.</span><span class="titlestrong">opVisitBack</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L60" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Visit every elements of the list from tail to head  @alias0 is the value  @alias1 is the node  @alias2 is the index. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(ptr: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opVisitBack</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_ListNode"><span class="titletype">struct</span> <span class="titlelight">Core.</span><span class="titlestrong">ListNode</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_ListNode">ListNode</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<table class="enumeration">
<tr>
<td>prev</td>
<td>*Core.ListNode'(T)</td>
<td></td>
</tr>
<tr>
<td>next</td>
<td>*Core.ListNode'(T)</td>
<td></td>
</tr>
<tr>
<td>value</td>
<td>T</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Log"><span class="titletype">struct</span> <span class="titlelight">Core.</span><span class="titlestrong">Log</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L24" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>lock</td>
<td><a href="#Core_Sync_Mutex">Core.Sync.Mutex</a></td>
<td></td>
</tr>
<tr>
<td>buf</td>
<td><a href="#Core_StrConv_StringBuilder">Core.StrConv.StringBuilder</a></td>
<td></td>
</tr>
<tr>
<td>dt</td>
<td><a href="#Core_Time_DateTime">Core.Time.DateTime</a></td>
<td></td>
</tr>
<tr>
<td>writers</td>
<td>Core.Array'(Core.ILogWriter)</td>
<td></td>
</tr>
<tr>
<td>prefix</td>
<td>string</td>
<td></td>
</tr>
<tr>
<td>flags</td>
<td><a href="#Core_LogFlags">Core.LogFlags</a></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Log_addWriter">addWriter</a></td>
<td>Register a new writer interface. </td>
</tr>
<tr>
<td><a href="#Core_Log_clearWriters">clearWriters</a></td>
<td>Remove all writers. </td>
</tr>
<tr>
<td><a href="#Core_Log_create">create</a></td>
<td>Create a new log. </td>
</tr>
<tr>
<td><a href="#Core_Log_getFlags">getFlags</a></td>
<td>Get the logger prefix. </td>
</tr>
<tr>
<td><a href="#Core_Log_getPrefix">getPrefix</a></td>
<td>Get the logger prefix. </td>
</tr>
<tr>
<td><a href="#Core_Log_print">print</a></td>
<td>Main print function. </td>
</tr>
<tr>
<td><a href="#Core_Log_setFlags">setFlags</a></td>
<td>Set the logger flags. </td>
</tr>
<tr>
<td><a href="#Core_Log_setPrefix">setPrefix</a></td>
<td>Set the logger prefix. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Log_addWriter"><span class="titletype">func</span> <span class="titlelight">Log.</span><span class="titlestrong">addWriter</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L112" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Register a new writer interface. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">addWriter</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, writer: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ILogWriter">ILogWriter</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Log_clearWriters"><span class="titletype">func</span> <span class="titlelight">Log.</span><span class="titlestrong">clearWriters</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L119" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove all writers. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clearWriters</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Log_create"><span class="titletype">func</span> <span class="titlelight">Log.</span><span class="titlestrong">create</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L77" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Create a new log. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">create</span><span class="SyntaxCode">()-><a href=</span><span class="SyntaxString">"#Core_Log"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Log">Log</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Log_getFlags"><span class="titletype">func</span> <span class="titlelight">Log.</span><span class="titlestrong">getFlags</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L105" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the logger prefix. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getFlags</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_LogFlags"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_LogFlags">LogFlags</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Log_getPrefix"><span class="titletype">func</span> <span class="titlelight">Log.</span><span class="titlestrong">getPrefix</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L91" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the logger prefix. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getPrefix</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Log_print"><span class="titletype">func</span> <span class="titlelight">Log.</span><span class="titlestrong">print</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L126" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Main print function. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">print</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, text: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, loc = #callerlocation)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Log_setFlags"><span class="titletype">func</span> <span class="titlelight">Log.</span><span class="titlestrong">setFlags</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L98" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the logger flags. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setFlags</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, flags: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_LogFlags">LogFlags</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Log_setPrefix"><span class="titletype">func</span> <span class="titlelight">Log.</span><span class="titlestrong">setPrefix</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L84" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the logger prefix. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setPrefix</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, prefix: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_LogFlags"><span class="titletype">enum</span> <span class="titlelight">Core.</span><span class="titlestrong">LogFlags</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Zero</td>
<td></td>
</tr>
<tr>
<td>Prefix</td>
<td></td>
</tr>
<tr>
<td>Date</td>
<td></td>
</tr>
<tr>
<td>Time</td>
<td></td>
</tr>
<tr>
<td>ShortFileName</td>
<td>Exclusive with LongFileName. </td>
</tr>
<tr>
<td>LongFileName</td>
<td></td>
</tr>
<tr>
<td>Line</td>
<td>Exclusive with FullLoc. </td>
</tr>
<tr>
<td>FullLoc</td>
<td></td>
</tr>
<tr>
<td>Default</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Angle"><span class="titletype">struct</span> <span class="titlelight">Math.</span><span class="titlestrong">Angle</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\angle.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>rad</td>
<td>f32</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Angle_toDegrees">toDegrees</a></td>
<td></td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Angle_opAffect">opAffect</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Angle_opAffectSuffix">opAffectSuffix</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Angle_opAffect"><span class="titletype">func</span> <span class="titlelight">Angle.</span><span class="titlestrong">opAffect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\angle.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opAffect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, valueRad: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Angle_opAffectSuffix"><span class="titletype">func</span> <span class="titlelight">Angle.</span><span class="titlestrong">opAffectSuffix</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\angle.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(suffix: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opAffectSuffix</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Angle_toDegrees"><span class="titletype">func</span> <span class="titlelight">Angle.</span><span class="titlestrong">toDegrees</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\angle.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toDegrees</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Const"><span class="titletype">struct</span> <span class="titlelight">Math.</span><span class="titlestrong">Const</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_Math_Const">Const</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<table class="enumeration">
<tr>
<td>Pi</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>E</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>TwoPi</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>PiBy2</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>PiBy3</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>PiBy4</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>PiBy6</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>PiBy8</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>ThreePiBy4</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>OneByPi</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>TwoByPi</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>Sqrt2</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>OneBySqrt2</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>Ln2</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>Ln10</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>Log2E</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>Log10E</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>Epsilon</td>
<td>T</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Int128"><span class="titletype">struct</span> <span class="titlelight">Math.</span><span class="titlestrong">Int128</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer64.swg#L32" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>lo</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td>hi</td>
<td>s64</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Int128_mul">mul</a></td>
<td></td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Int128_opCast">opCast</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Int128_opCmp">opCmp</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Int128_opEquals">opEquals</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Int128_mul"><span class="titletype">func</span> <span class="titlelight">Int128.</span><span class="titlestrong">mul</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer64.swg#L65" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">mul</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Int128"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Int128">Int128</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Int128_opCast"><span class="titletype">func</span> <span class="titlelight">Int128.</span><span class="titlestrong">opCast</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer64.swg#L51" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCast</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Int128_opCmp"><span class="titletype">func</span> <span class="titlelight">Int128.</span><span class="titlestrong">opCmp</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer64.swg#L45" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCmp</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Int128">Int128</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Int128_opEquals"><span class="titletype">func</span> <span class="titlelight">Int128.</span><span class="titlestrong">opEquals</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer64.swg#L40" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opEquals</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Int128">Int128</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Matrix3x3"><span class="titletype">struct</span> <span class="titlelight">Math.</span><span class="titlestrong">Matrix3x3</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\Matrix3x3.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>m</td>
<td>[3,3] f32</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Matrix3x3_setIdentity">setIdentity</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Matrix3x3_setIdentity"><span class="titletype">func</span> <span class="titlelight">Matrix3x3.</span><span class="titlestrong">setIdentity</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\Matrix3x3.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setIdentity</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Matrix4x4"><span class="titletype">struct</span> <span class="titlelight">Math.</span><span class="titlestrong">Matrix4x4</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\matrix4x4.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>m</td>
<td>[4,4] f32</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Matrix4x4_setIdentity">setIdentity</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Matrix4x4_setIdentity"><span class="titletype">func</span> <span class="titlelight">Matrix4x4.</span><span class="titlestrong">setIdentity</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\matrix4x4.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setIdentity</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_NumericArray"><span class="titletype">struct</span> <span class="titlelight">Math.</span><span class="titlestrong">NumericArray</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_Math_NumericArray">NumericArray</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">N</span><span class="SyntaxCode">: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)</code>
</div>
<table class="enumeration">
<tr>
<td>buf</td>
<td>[?] T</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_NumericArray_from">from</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_mulAdd">mulAdd(self, NumericArray'(T, N), NumericArray'(T, N))</a></td>
<td>Multiply & Add. </td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_mulAdd">mulAdd(self, T, T)</a></td>
<td>Multiply & add. </td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_set">set</a></td>
<td>Set all values. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_NumericArray_opAffect">opAffect(self, T)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_opAffect">opAffect(self, const [..] T)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_opAssign">opAssign(self, NumericArray'(T, N))</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_opAssign">opAssign(self, T)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_opBinary">opBinary</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_opEquals">opEquals</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_opIndex">opIndex</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_NumericArray_from"><span class="titletype">func</span> <span class="titlelight">NumericArray.</span><span class="titlestrong">from</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L98" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">from</span><span class="SyntaxCode">(values: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">...)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_NumericArray">NumericArray</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">N</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_NumericArray_mulAdd"><span class="titletype">func</span> <span class="titlelight">NumericArray.</span><span class="titlestrong">mulAdd</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L126" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Multiply & Add. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">mulAdd</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value1: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_NumericArray">NumericArray</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">N</span><span class="SyntaxCode">), value2: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_NumericArray">NumericArray</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">N</span><span class="SyntaxCode">))</code>
</div>
<p>Multiply & add. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">mulAdd</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value1: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, value2: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_NumericArray_opAffect"><span class="titletype">func</span> <span class="titlelight">NumericArray.</span><span class="titlestrong">opAffect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L83" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opAffect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, what: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opAffect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, what: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_NumericArray_opAssign"><span class="titletype">func</span> <span class="titlelight">NumericArray.</span><span class="titlestrong">opAssign</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L65" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opAssign</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_NumericArray">NumericArray</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">N</span><span class="SyntaxCode">))
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opAssign</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_NumericArray_opBinary"><span class="titletype">func</span> <span class="titlelight">NumericArray.</span><span class="titlestrong">opBinary</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opBinary</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_NumericArray">NumericArray</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">N</span><span class="SyntaxCode">))-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_NumericArray">NumericArray</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">N</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_NumericArray_opEquals"><span class="titletype">func</span> <span class="titlelight">NumericArray.</span><span class="titlestrong">opEquals</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opEquals</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_NumericArray">NumericArray</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">N</span><span class="SyntaxCode">))-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_NumericArray_opIndex"><span class="titletype">func</span> <span class="titlelight">NumericArray.</span><span class="titlestrong">opIndex</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opIndex</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, idx: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_NumericArray_set"><span class="titletype">func</span> <span class="titlelight">NumericArray.</span><span class="titlestrong">set</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L109" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set all values. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">set</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, values: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">...)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Point"><span class="titletype">struct</span> <span class="titlelight">Math.</span><span class="titlestrong">Point</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>A simple Point with 2 coordinates X and Y. </p>
<table class="enumeration">
<tr>
<td>x</td>
<td>f32</td>
<td></td>
</tr>
<tr>
<td>y</td>
<td>f32</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Point_ceil">ceil</a></td>
<td>Perform a Math.ceil operation on all the coordinates. </td>
</tr>
<tr>
<td><a href="#Core_Math_Point_clear">clear</a></td>
<td>Set Point to (0, 0). </td>
</tr>
<tr>
<td><a href="#Core_Math_Point_isEqualEpsilon">isEqualEpsilon</a></td>
<td>Check if two points are equal with an epsilon. </td>
</tr>
<tr>
<td><a href="#Core_Math_Point_isZero">isZero</a></td>
<td>Returns <code class="incode">true</code> if the Point is null. </td>
</tr>
<tr>
<td><a href="#Core_Math_Point_isZeroEpsilon">isZeroEpsilon</a></td>
<td>Check for zero with an epsilon. </td>
</tr>
<tr>
<td><a href="#Core_Math_Point_offset">offset(self, f32)</a></td>
<td>Offset this Point by a given value. </td>
</tr>
<tr>
<td><a href="#Core_Math_Point_offset">offset(self, f32, f32)</a></td>
<td>Offset this Point by a given value. </td>
</tr>
<tr>
<td><a href="#Core_Math_Point_round">round</a></td>
<td>Perform a Math.round operation on all the coordinates. </td>
</tr>
<tr>
<td><a href="#Core_Math_Point_trunc">trunc</a></td>
<td>Perform a Math.trunc operation on all the coordinates. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Point_opAffect">opAffect</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Point_opAssign">opAssign(self, const ref Point)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Point_opAssign">opAssign(self, f32)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Point_opBinary">opBinary(self, const ref Point)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Point_opBinary">opBinary(self, f32)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Point_opEquals">opEquals</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Point_opUnary">opUnary</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Point_ceil"><span class="titletype">func</span> <span class="titlelight">Point.</span><span class="titlestrong">ceil</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L133" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Perform a Math.ceil operation on all the coordinates. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">ceil</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Point_clear"><span class="titletype">func</span> <span class="titlelight">Point.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L82" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set Point to (0, 0). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Point_isEqualEpsilon"><span class="titletype">func</span> <span class="titlelight">Point.</span><span class="titlestrong">isEqualEpsilon</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L100" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Check if two points are equal with an epsilon. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isEqualEpsilon</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Point">Point</a></span><span class="SyntaxCode">, eps = </span><span class="SyntaxConstant"><a href="#Core_Math_ConstF32">ConstF32</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Epsilon</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Point_isZero"><span class="titletype">func</span> <span class="titlelight">Point.</span><span class="titlestrong">isZero</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L88" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns <code class="incode">true</code> if the Point is null. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isZero</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Point_isZeroEpsilon"><span class="titletype">func</span> <span class="titlelight">Point.</span><span class="titlestrong">isZeroEpsilon</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L94" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Check for zero with an epsilon. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isZeroEpsilon</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, eps = </span><span class="SyntaxConstant"><a href="#Core_Math_ConstF32">ConstF32</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Epsilon</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Point_offset"><span class="titletype">func</span> <span class="titlelight">Point.</span><span class="titlestrong">offset</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L106" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Offset this Point by a given value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">offset</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>Offset this Point by a given value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">offset</span><span class="SyntaxCode">(self, x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Point_opAffect"><span class="titletype">func</span> <span class="titlelight">Point.</span><span class="titlestrong">opAffect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opAffect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Point_opAssign"><span class="titletype">func</span> <span class="titlelight">Point.</span><span class="titlestrong">opAssign</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opAssign</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Point">Point</a></span><span class="SyntaxCode">)
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opAssign</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Point_opBinary"><span class="titletype">func</span> <span class="titlelight">Point.</span><span class="titlestrong">opBinary</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L48" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opBinary</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Point">Point</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Point"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Point">Point</a></span><span class="SyntaxCode"></a>
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opBinary</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Point"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Point">Point</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Point_opEquals"><span class="titletype">func</span> <span class="titlelight">Point.</span><span class="titlestrong">opEquals</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opEquals</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Point">Point</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Point_opUnary"><span class="titletype">func</span> <span class="titlelight">Point.</span><span class="titlestrong">opUnary</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L66" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opUnary</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_Math_Point"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Point">Point</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Point_round"><span class="titletype">func</span> <span class="titlelight">Point.</span><span class="titlestrong">round</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L119" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Perform a Math.round operation on all the coordinates. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">round</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Point_trunc"><span class="titletype">func</span> <span class="titlelight">Point.</span><span class="titlestrong">trunc</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L126" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Perform a Math.trunc operation on all the coordinates. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">trunc</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle"><span class="titletype">struct</span> <span class="titlelight">Math.</span><span class="titlestrong">Rectangle</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>A simple rectangle with 4 coordinates. </p>
<table class="enumeration">
<tr>
<td>x</td>
<td>f32</td>
<td>Left position. </td>
</tr>
<tr>
<td>y</td>
<td>f32</td>
<td>Top position. </td>
</tr>
<tr>
<td>width</td>
<td>f32</td>
<td>Rectangle width. </td>
</tr>
<tr>
<td>height</td>
<td>f32</td>
<td>Rectangle height. </td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Rectangle_applyPadding">applyPadding</a></td>
<td>Add a padding (offset to each side). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_bottom">bottom</a></td>
<td>Bottom coordinate (y + height). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_ceil">ceil</a></td>
<td>Perform a Math.ceil operation on all the coordinates. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_center">center</a></td>
<td>Central point. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_clear">clear</a></td>
<td>Set rectangle to (0, 0, 0, 0). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_constrainIn">constrainIn</a></td>
<td>Constrain the rectangle to be inside another one, without changing its size  (so the other rectangle must be bigger). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_contains">contains(self, const ref Point)</a></td>
<td>Determines if the specfied point is contained within the rectangular region. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_contains">contains(self, const ref Rectangle)</a></td>
<td>Determines if the specfied rectangle is contained within the rectangular region. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_contains">contains(self, f32, f32)</a></td>
<td>Determines if the specfied point is contained within the rectangular region. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_getUnion">getUnion</a></td>
<td>Creates a rectangle that represents the union between <code class="incode">a</code> and <code class="incode">b</code>. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_horzCenter">horzCenter</a></td>
<td>Horizontal center coordinate (x + width / 2). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_inflate">inflate(self, f32)</a></td>
<td>Inflates the rectangle by the given <code class="incode">value</code>. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_inflate">inflate(self, f32, f32)</a></td>
<td>Inflates the rectangle by the given amount in <code class="incode">x</code> and <code class="incode">y</code> directions. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_intersect">intersect(self, const ref Rectangle)</a></td>
<td>Intersect this rectangle with another one. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_intersect">intersect(const ref Rectangle, const ref Rectangle)</a></td>
<td>Creates a rectangle that represents the intersetion between <code class="incode">a</code> and <code class="incode">b</code>. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_intersectWith">intersectWith</a></td>
<td>Determines if this rectangle intersets with <code class="incode">rect</code>. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_isEmpty">isEmpty</a></td>
<td>Returns true if this instance has a surface of zero (width or height are null). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_isEmptyEpsilon">isEmptyEpsilon</a></td>
<td>Returns true if this instance has a surface of zero (width and height are null). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_isNormalized">isNormalized</a></td>
<td>Returns true if this instance has a positive or null surface (width and height greater or equal than zero). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_isZero">isZero</a></td>
<td>Returns true if this instance is null. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_isZeroEpsilon">isZeroEpsilon</a></td>
<td>Returns true if this instance is null with an epsilon. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_moveBottom">moveBottom</a></td>
<td>Move the left coordinate, reducing the width. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_moveLeft">moveLeft</a></td>
<td>Move the left coordinate, reducing the width. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_moveRight">moveRight</a></td>
<td>Move the left coordinate, reducing the width. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_moveTop">moveTop</a></td>
<td>Move the left coordinate, reducing the width. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_offset">offset(self, const ref Point)</a></td>
<td>Offset the rectangle position by a given value. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_offset">offset(self, f32)</a></td>
<td>Offset the rectangle position by a given value. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_offset">offset(self, f32, f32)</a></td>
<td>Offset the rectangle position by a x and y values. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_right">right</a></td>
<td>Right coordinate (x + width). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_round">round</a></td>
<td>Perform a Math.round operation on all the coordinates. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_scale">scale(self, f32)</a></td>
<td>Multiply the width and height of the rectangle by a given <code class="incode">value</code>. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_scale">scale(self, f32, f32)</a></td>
<td>Multiply the width by <code class="incode">x</code> and the height by <code class="incode">y</code>. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_set">set</a></td>
<td>Initialize the rectangle with two position. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_setBottom">setBottom</a></td>
<td>Bottom coordinate (y + height). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_setRight">setRight</a></td>
<td>Right coordinate (x + width). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_setUnion">setUnion</a></td>
<td>Creates a rectangle that represents the union. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_trunc">trunc</a></td>
<td>Perform a Math.trunc operation on all the coordinates. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_vertCenter">vertCenter</a></td>
<td>Vertical center coordinate (y + height / 2). </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Rectangle_opEquals">opEquals</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_applyPadding"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">applyPadding</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L152" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a padding (offset to each side). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">applyPadding</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, padding: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector4">Vector4</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_bottom"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">bottom</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L69" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Bottom coordinate (y + height). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">bottom</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_ceil"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">ceil</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L222" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Perform a Math.ceil operation on all the coordinates. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">ceil</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_center"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">center</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L48" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Central point. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">center</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_Math_Point"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Point">Point</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_clear"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L108" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set rectangle to (0, 0, 0, 0). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_constrainIn"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">constrainIn</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L291" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Constrain the rectangle to be inside another one, without changing its size  (so the other rectangle must be bigger). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">constrainIn</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Rectangle">Rectangle</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_contains"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">contains</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L237" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines if the specfied point is contained within the rectangular region. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">contains</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, pt: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Point">Point</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>Determines if the specfied rectangle is contained within the rectangular region. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">contains</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, rect: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Rectangle">Rectangle</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>Determines if the specfied point is contained within the rectangular region. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">contains</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_getUnion"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">getUnion</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L280" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a rectangle that represents the union between <code class="incode">a</code> and <code class="incode">b</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getUnion</span><span class="SyntaxCode">(a: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Rectangle">Rectangle</a></span><span class="SyntaxCode">, b: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Rectangle">Rectangle</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Rectangle"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Rectangle">Rectangle</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_horzCenter"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">horzCenter</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Horizontal center coordinate (x + width / 2). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">horzCenter</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_inflate"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">inflate</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L174" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Inflates the rectangle by the given <code class="incode">value</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">inflate</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>Inflates the rectangle by the given amount in <code class="incode">x</code> and <code class="incode">y</code> directions. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">inflate</span><span class="SyntaxCode">(self, x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_intersect"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">intersect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L249" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Intersect this rectangle with another one. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">intersect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Rectangle">Rectangle</a></span><span class="SyntaxCode">)</code>
</div>
<p>Creates a rectangle that represents the intersetion between <code class="incode">a</code> and <code class="incode">b</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">intersect</span><span class="SyntaxCode">(a: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Rectangle">Rectangle</a></span><span class="SyntaxCode">, b: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Rectangle">Rectangle</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Rectangle"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Rectangle">Rectangle</a></span><span class="SyntaxCode"></a></code>
</div>
<p> If there is no intersection, Zero is returned. </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_intersectWith"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">intersectWith</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L268" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines if this rectangle intersets with <code class="incode">rect</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">intersectWith</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, rect: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Rectangle">Rectangle</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_isEmpty"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">isEmpty</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L120" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this instance has a surface of zero (width or height are null). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isEmpty</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_isEmptyEpsilon"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">isEmptyEpsilon</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L198" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this instance has a surface of zero (width and height are null). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isEmptyEpsilon</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, eps = </span><span class="SyntaxConstant"><a href="#Core_Math_ConstF32">ConstF32</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Epsilon</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_isNormalized"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">isNormalized</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L126" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this instance has a positive or null surface (width and height greater or equal than zero). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isNormalized</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_isZero"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">isZero</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L114" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this instance is null. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isZero</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_isZeroEpsilon"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">isZeroEpsilon</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L192" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this instance is null with an epsilon. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isZeroEpsilon</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, eps = </span><span class="SyntaxConstant"><a href="#Core_Math_ConstF32">ConstF32</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Epsilon</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_moveBottom"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">moveBottom</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L102" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Move the left coordinate, reducing the width. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">moveBottom</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_moveLeft"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">moveLeft</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L82" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Move the left coordinate, reducing the width. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">moveLeft</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_moveRight"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">moveRight</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L89" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Move the left coordinate, reducing the width. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">moveRight</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_moveTop"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">moveTop</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L95" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Move the left coordinate, reducing the width. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">moveTop</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_offset"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">offset</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L145" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Offset the rectangle position by a given value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">offset</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, offset: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Point">Point</a></span><span class="SyntaxCode">)</code>
</div>
<p>Offset the rectangle position by a given value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">offset</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, offsetXY: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>Offset the rectangle position by a x and y values. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">offset</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, offsetX: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, offsetY: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_opEquals"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">opEquals</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opEquals</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Rectangle">Rectangle</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_right"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">right</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L55" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Right coordinate (x + width). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">right</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_round"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">round</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L204" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Perform a Math.round operation on all the coordinates. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">round</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_scale"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">scale</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L161" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Multiply the width and height of the rectangle by a given <code class="incode">value</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">scale</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>Multiply the width by <code class="incode">x</code> and the height by <code class="incode">y</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">scale</span><span class="SyntaxCode">(self, x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_set"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">set</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize the rectangle with two position. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">set</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, topLeft: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Point">Point</a></span><span class="SyntaxCode">, bottomRight: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Point">Point</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_setBottom"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">setBottom</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L76" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Bottom coordinate (y + height). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setBottom</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_setRight"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">setRight</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L62" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Right coordinate (x + width). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setRight</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_setUnion"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">setUnion</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L274" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a rectangle that represents the union. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setUnion</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Rectangle">Rectangle</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_trunc"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">trunc</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L213" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Perform a Math.trunc operation on all the coordinates. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">trunc</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Rectangle_vertCenter"><span class="titletype">func</span> <span class="titlelight">Rectangle.</span><span class="titlestrong">vertCenter</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L42" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Vertical center coordinate (y + height / 2). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">vertCenter</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Transform2"><span class="titletype">struct</span> <span class="titlelight">Math.</span><span class="titlestrong">Transform2</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\transform2.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>m11</td>
<td>f32</td>
<td></td>
</tr>
<tr>
<td>m12</td>
<td>f32</td>
<td></td>
</tr>
<tr>
<td>m21</td>
<td>f32</td>
<td></td>
</tr>
<tr>
<td>m22</td>
<td>f32</td>
<td></td>
</tr>
<tr>
<td>m31</td>
<td>f32</td>
<td></td>
</tr>
<tr>
<td>m32</td>
<td>f32</td>
<td></td>
</tr>
<tr>
<td>m</td>
<td>[2,2] f32</td>
<td></td>
</tr>
<tr>
<td>tx</td>
<td>f32</td>
<td></td>
</tr>
<tr>
<td>ty</td>
<td>f32</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Transform2_createRotation">createRotation</a></td>
<td>Creates a rotation matix, with a given center of rotation. </td>
</tr>
<tr>
<td><a href="#Core_Math_Transform2_createScale">createScale</a></td>
<td>Creates a scale matix, with a given center. </td>
</tr>
<tr>
<td><a href="#Core_Math_Transform2_createTranslation">createTranslation</a></td>
<td>Creates a translation matix. </td>
</tr>
<tr>
<td><a href="#Core_Math_Transform2_multiply">multiply</a></td>
<td>Multiply two matricies. </td>
</tr>
<tr>
<td><a href="#Core_Math_Transform2_setIdentity">setIdentity</a></td>
<td>Set transform to identity. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Transform2_createRotation"><span class="titletype">func</span> <span class="titlelight">Transform2.</span><span class="titlestrong">createRotation</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\transform2.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a rotation matix, with a given center of rotation. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">createRotation</span><span class="SyntaxCode">(angle: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, centerX: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, centerY: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Transform2"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Transform2">Transform2</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Transform2_createScale"><span class="titletype">func</span> <span class="titlelight">Transform2.</span><span class="titlestrong">createScale</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\transform2.swg#L52" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a scale matix, with a given center. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">createScale</span><span class="SyntaxCode">(scaleX: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, scaleY: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, centerX: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, centerY: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Transform2"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Transform2">Transform2</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Transform2_createTranslation"><span class="titletype">func</span> <span class="titlelight">Transform2.</span><span class="titlestrong">createTranslation</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\transform2.swg#L68" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a translation matix. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">createTranslation</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Transform2"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Transform2">Transform2</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Transform2_multiply"><span class="titletype">func</span> <span class="titlelight">Transform2.</span><span class="titlestrong">multiply</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\transform2.swg#L84" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Multiply two matricies. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">multiply</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, matrix2: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Transform2">Transform2</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Transform2_setIdentity"><span class="titletype">func</span> <span class="titlelight">Transform2.</span><span class="titlestrong">setIdentity</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\transform2.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set transform to identity. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setIdentity</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Variant"><span class="titletype">struct</span> <span class="titlelight">Math.</span><span class="titlestrong">Variant</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_Math_Variant">Variant</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)</code>
</div>
<table class="enumeration">
<tr>
<td>type</td>
<td>const *Swag.TypeInfo</td>
<td></td>
</tr>
<tr>
<td>buffer</td>
<td>[?] u8</td>
<td></td>
</tr>
<tr>
<td>AllFlags</td>
<td>s32</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Variant_checkValidType">checkValidType</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Variant_drop">drop</a></td>
<td>Drop the variant content (if necessary). </td>
</tr>
<tr>
<td><a href="#Core_Math_Variant_get">get</a></td>
<td>Get the variant value of the given type  Will assert if the current type does not match. </td>
</tr>
<tr>
<td><a href="#Core_Math_Variant_set">set</a></td>
<td>Set the variant value. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Variant_opAffect">opAffect</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Variant_opCmp">opCmp</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Variant_opDrop">opDrop</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Variant_opEquals">opEquals</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Variant_opPostCopy">opPostCopy</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Variant_opPostMove">opPostMove</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Variant_checkValidType"><span class="titletype">func</span> <span class="titlelight">Variant.</span><span class="titlestrong">checkValidType</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">checkValidType</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, tn: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Variant_drop"><span class="titletype">func</span> <span class="titlelight">Variant.</span><span class="titlestrong">drop</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L72" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Drop the variant content (if necessary). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">drop</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Variant_get"><span class="titletype">func</span> <span class="titlelight">Variant.</span><span class="titlestrong">get</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L98" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the variant value of the given type  Will assert if the current type does not match. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">TN</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">get</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxConstant">TN</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Variant_opAffect"><span class="titletype">func</span> <span class="titlelight">Variant.</span><span class="titlestrong">opAffect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">TN</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opAffect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">TN</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Variant_opCmp"><span class="titletype">func</span> <span class="titlelight">Variant.</span><span class="titlestrong">opCmp</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L40" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">TN</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opCmp</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">TN</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Variant_opDrop"><span class="titletype">func</span> <span class="titlelight">Variant.</span><span class="titlestrong">opDrop</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opDrop</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Variant_opEquals"><span class="titletype">func</span> <span class="titlelight">Variant.</span><span class="titlestrong">opEquals</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L33" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">TN</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opEquals</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">TN</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Variant_opPostCopy"><span class="titletype">func</span> <span class="titlelight">Variant.</span><span class="titlestrong">opPostCopy</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L47" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opPostCopy</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Variant_opPostMove"><span class="titletype">func</span> <span class="titlelight">Variant.</span><span class="titlestrong">opPostMove</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L59" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opPostMove</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Variant_set"><span class="titletype">func</span> <span class="titlelight">Variant.</span><span class="titlestrong">set</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L86" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the variant value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">TN</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">set</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxConstant">TN</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2"><span class="titletype">struct</span> <span class="titlelight">Math.</span><span class="titlestrong">Vector2</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>x</td>
<td>f32</td>
<td></td>
</tr>
<tr>
<td>y</td>
<td>f32</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Vector2_angle">angle</a></td>
<td>Returns the angle with another vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_ceil">ceil</a></td>
<td>Math.ceil. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_clear">clear</a></td>
<td>Set the vector to zero. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_cosAngle">cosAngle</a></td>
<td>Returns the cosine angle with another vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_cross">cross(self, const ref Vector2)</a></td>
<td>Returns the Z signed length of the perpendicular vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_cross">cross(self, f32)</a></td>
<td>Returns the perpendicular vector in the 2D plane. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_distance">distance</a></td>
<td>Returns the distance between two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_distanceSquared">distanceSquared</a></td>
<td>Returns the square distance between two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_distanceToLine">distanceToLine</a></td>
<td>Returns the distance of the point to the given line. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_distanceToSegment">distanceToSegment</a></td>
<td>Returns the distance of the point to the given segment. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_dot">dot</a></td>
<td>Returns the dot product between two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_floor">floor</a></td>
<td>Math.floor. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_isEqualEpsilon">isEqualEpsilon</a></td>
<td>Returns true if this vector is equals to another with an epsilon. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_isInEllipse">isInEllipse</a></td>
<td>Returns true if the point <code class="incode">pt</code> is inside an ellipse. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_isInTriangle">isInTriangle</a></td>
<td>Returns true if the point <code class="incode">pt</code> is inside the triangle defined with 'a, b, c'. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_isZero">isZero</a></td>
<td>Returns true if this vector is null. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_isZeroEpsilon">isZeroEpsilon</a></td>
<td>Returns true if this vector is null with an epsilon. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_length">length</a></td>
<td>Return sthe length of the vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_lengthSquared">lengthSquared</a></td>
<td>Returns the squared length of the vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_lerp">lerp</a></td>
<td>Lerp one vector with another. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_lineLineIntersect">lineLineIntersect</a></td>
<td>Compute the intersection point of two lines. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_max">max</a></td>
<td>Returns a vector which is the <code class="incode">min</code> of two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_min">min</a></td>
<td>Returns a vector which is the <code class="incode">min</code> of two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_nearestPointsSegSeg">nearestPointsSegSeg</a></td>
<td>Returns the minimal segment between two segments (and the minimal distance). </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_negate">negate</a></td>
<td>Negate the vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_normalize">normalize</a></td>
<td>Normalize this vector (set its length to 1). </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_normalizeSafe">normalizeSafe</a></td>
<td>Normalize this vector (set its length to 1) even if its length is almost null. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_polyContains">polyContains</a></td>
<td>Returns true if the given point is inside the polygon  PNPoly by W. Randolph Franklin. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_rotate">rotate</a></td>
<td>Rotate the vector by a given angle. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_round">round</a></td>
<td>Math.round. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_segSegIntersect">segSegIntersect</a></td>
<td>Compute the intersection point of two segments. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_set">set</a></td>
<td>Set content. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_setLength">setLength</a></td>
<td>Set the vector length. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_setLengthSafe">setLengthSafe</a></td>
<td>Set the vector length. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_toNormalize">toNormalize</a></td>
<td>Returns this vector normalized. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_toNormalizeSafe">toNormalizeSafe</a></td>
<td>Returns this vector normalized even if its length is almost null. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Vector2_opAffect">opAffect</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_opAssign">opAssign(self, const ref Vector2)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_opAssign">opAssign(self, f32)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_opBinary">opBinary(self, const ref Vector2)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_opBinary">opBinary(self, f32)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_opEquals">opEquals</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_opUnary">opUnary</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_angle"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">angle</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L271" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the angle with another vector. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">angle</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_ceil"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">ceil</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L238" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Math.ceil. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">ceil</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_clear"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L106" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the vector to zero. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_cosAngle"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">cosAngle</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L263" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the cosine angle with another vector. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">cosAngle</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_cross"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">cross</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L100" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the Z signed length of the perpendicular vector. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">cross</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>Returns the perpendicular vector in the 2D plane. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">cross</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, axis: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector2"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode"></a></code>
</div>
<p> <code class="incode">axis</code> will give the sign of the result </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_distance"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">distance</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L137" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the distance between two vectors. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">distance</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, to: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_distanceSquared"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">distanceSquared</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L145" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the square distance between two vectors. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">distanceSquared</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, to: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_distanceToLine"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">distanceToLine</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2utils.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the distance of the point to the given line. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">distanceToLine</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, a: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, b: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_distanceToSegment"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">distanceToSegment</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2utils.swg#L48" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the distance of the point to the given segment. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">distanceToSegment</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, a: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, b: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_dot"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">dot</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L90" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the dot product between two vectors. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">dot</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_floor"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">floor</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L231" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Math.floor. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">floor</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_isEqualEpsilon"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">isEqualEpsilon</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L131" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this vector is equals to another with an epsilon. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isEqualEpsilon</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, eps = </span><span class="SyntaxKeyword">cast</span><span class="SyntaxCode">(</span><span class="SyntaxType">f32</span><span class="SyntaxCode">) </span><span class="SyntaxConstant"><a href="#Core_Math_ConstF64">ConstF64</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Epsilon</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_isInEllipse"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">isInEllipse</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2utils.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the point <code class="incode">pt</code> is inside an ellipse. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isInEllipse</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, center: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, radiusX: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, radiusY: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_isInTriangle"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">isInTriangle</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2utils.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the point <code class="incode">pt</code> is inside the triangle defined with 'a, b, c'. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isInTriangle</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, a: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, b: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, c: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_isZero"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">isZero</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L119" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this vector is null. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isZero</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_isZeroEpsilon"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">isZeroEpsilon</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L125" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this vector is null with an epsilon. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isZeroEpsilon</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, eps = </span><span class="SyntaxKeyword">cast</span><span class="SyntaxCode">(</span><span class="SyntaxType">f32</span><span class="SyntaxCode">) </span><span class="SyntaxConstant"><a href="#Core_Math_ConstF64">ConstF64</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Epsilon</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_length"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">length</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L84" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Return sthe length of the vector. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">length</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_lengthSquared"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">lengthSquared</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L87" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the squared length of the vector. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lengthSquared</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_lerp"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">lerp</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L280" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Lerp one vector with another. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lerp</span><span class="SyntaxCode">(src: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, dst: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, factor: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector2"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_lineLineIntersect"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">lineLineIntersect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2utils.swg#L252" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compute the intersection point of two lines. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lineLineIntersect</span><span class="SyntaxCode">(start0: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, end0: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, start1: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, end1: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, epsilon: </span><span class="SyntaxType">f32</span><span class="SyntaxCode"> = </span><span class="SyntaxConstant"><a href="#Core_Math_ConstF32">ConstF32</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Epsilon</span><span class="SyntaxCode">)-&gt;{yes: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">, pos: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">}</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_max"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">max</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L222" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a vector which is the <code class="incode">min</code> of two vectors. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">max</span><span class="SyntaxCode">(a: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, b: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector2"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_min"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">min</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L213" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a vector which is the <code class="incode">min</code> of two vectors. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">min</span><span class="SyntaxCode">(a: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, b: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector2"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_nearestPointsSegSeg"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">nearestPointsSegSeg</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2utils.swg#L80" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the minimal segment between two segments (and the minimal distance). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nearestPointsSegSeg</span><span class="SyntaxCode">(p0: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, p1: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, q0: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, q1: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">)-&gt;{a: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, b: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, dist: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">}</code>
</div>
<p style="white-space: break-spaces"> David Eberly, Geometric Tools, Redmond WA 98052
 Copyright (c) 1998-2022
 Distributed under the Boost Software License, Version 1.0.
 https://www.boost.org/LICENSE_1_0.txt
 https://www.geometrictools.com/License/Boost/LICENSE_1_0.txt
 https://www.geometrictools.com/GTE/Mathematics/DistSegmentSegment.h</p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_negate"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">negate</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L112" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Negate the vector. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">negate</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_normalize"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">normalize</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L153" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Normalize this vector (set its length to 1). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">normalize</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_normalizeSafe"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">normalizeSafe</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L188" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Normalize this vector (set its length to 1) even if its length is almost null. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">normalizeSafe</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_opAffect"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">opAffect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opAffect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_opAssign"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">opAssign</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L33" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opAssign</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">)
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opAssign</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_opBinary"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">opBinary</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L51" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opBinary</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector2"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode"></a>
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opBinary</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector2"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_opEquals"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">opEquals</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opEquals</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_opUnary"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">opUnary</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L69" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opUnary</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector2"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_polyContains"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">polyContains</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2utils.swg#L286" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given point is inside the polygon  PNPoly by W. Randolph Franklin. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">polyContains</span><span class="SyntaxCode">(poly: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">), pt: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_rotate"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">rotate</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L252" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Rotate the vector by a given angle. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">rotate</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, angle: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Angle">Angle</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_round"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">round</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L245" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Math.round. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">round</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_segSegIntersect"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">segSegIntersect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2utils.swg#L267" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compute the intersection point of two segments. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">segSegIntersect</span><span class="SyntaxCode">(start0: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, end0: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, start1: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, end1: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">, epsilon: </span><span class="SyntaxType">f32</span><span class="SyntaxCode"> = </span><span class="SyntaxConstant"><a href="#Core_Math_ConstF32">ConstF32</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Epsilon</span><span class="SyntaxCode">)-&gt;{yes: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">, pos: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode">}</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_set"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">set</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L77" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set content. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">set</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_setLength"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">setLength</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L180" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the vector length. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setLength</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, newLength: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_setLengthSafe"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">setLengthSafe</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L172" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the vector length. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setLengthSafe</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, newLength: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_toNormalize"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">toNormalize</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L163" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns this vector normalized. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toNormalize</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector2"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector2_toNormalizeSafe"><span class="titletype">func</span> <span class="titlelight">Vector2.</span><span class="titlestrong">toNormalizeSafe</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L203" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns this vector normalized even if its length is almost null. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toNormalizeSafe</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector2"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector2">Vector2</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3"><span class="titletype">struct</span> <span class="titlelight">Math.</span><span class="titlestrong">Vector3</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>x</td>
<td>f32</td>
<td></td>
</tr>
<tr>
<td>y</td>
<td>f32</td>
<td></td>
</tr>
<tr>
<td>z</td>
<td>f32</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Vector3_clear">clear</a></td>
<td>Set the vector to zero. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_distance">distance</a></td>
<td>Returns the distance between two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_distanceSquared">distanceSquared</a></td>
<td>Returns the square distance between two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_dot">dot</a></td>
<td>Returns the dot product between two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_isEqualEpsilon">isEqualEpsilon</a></td>
<td>Returns true if this vector is equals to another with an epsilon. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_isZero">isZero</a></td>
<td>Returns true if this vector is null. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_isZeroEpsilon">isZeroEpsilon</a></td>
<td>Returns true if this vector is null with an epsilon. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_length">length</a></td>
<td>Return sthe length of the vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_lengthSquared">lengthSquared</a></td>
<td>Returns the squared length of the vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_lerp">lerp</a></td>
<td>Lerp one vector with another. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_max">max</a></td>
<td>Returns a vector which is the <code class="incode">min</code> of two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_min">min</a></td>
<td>Returns a vector which is the <code class="incode">min</code> of two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_negate">negate</a></td>
<td>Negate the vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_normalize">normalize</a></td>
<td>Normalize this vector (set its length to 1). </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_normalizeSafe">normalizeSafe</a></td>
<td>Normalize this vector (set its length to 1) even if its length is almost null. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_set">set</a></td>
<td>Set content. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_setLength">setLength</a></td>
<td>Set the vector length. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_setLengthSafe">setLengthSafe</a></td>
<td>Set the vector length. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_toNormalize">toNormalize</a></td>
<td>Returns this vector normalized. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_toNormalizeSafe">toNormalizeSafe</a></td>
<td>Returns this vector normalized even if its length is almost null. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Vector3_opAffect">opAffect</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_opAssign">opAssign(self, const ref Vector3)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_opAssign">opAssign(self, f32)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_opBinary">opBinary(self, const ref Vector3)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_opBinary">opBinary(self, f32)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_opEquals">opEquals</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_opUnary">opUnary</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_clear"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L96" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the vector to zero. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_distance"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">distance</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L128" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the distance between two vectors. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">distance</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, to: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_distanceSquared"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">distanceSquared</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L137" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the square distance between two vectors. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">distanceSquared</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, to: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_dot"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">dot</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L93" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the dot product between two vectors. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">dot</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_isEqualEpsilon"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">isEqualEpsilon</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L122" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this vector is equals to another with an epsilon. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isEqualEpsilon</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode">, eps = </span><span class="SyntaxKeyword">cast</span><span class="SyntaxCode">(</span><span class="SyntaxType">f32</span><span class="SyntaxCode">) </span><span class="SyntaxConstant"><a href="#Core_Math_ConstF64">ConstF64</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Epsilon</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_isZero"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">isZero</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L110" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this vector is null. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isZero</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_isZeroEpsilon"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">isZeroEpsilon</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L116" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this vector is null with an epsilon. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isZeroEpsilon</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, eps = </span><span class="SyntaxKeyword">cast</span><span class="SyntaxCode">(</span><span class="SyntaxType">f32</span><span class="SyntaxCode">) </span><span class="SyntaxConstant"><a href="#Core_Math_ConstF64">ConstF64</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Epsilon</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_length"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">length</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L87" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Return sthe length of the vector. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">length</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_lengthSquared"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">lengthSquared</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L90" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the squared length of the vector. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lengthSquared</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_lerp"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">lerp</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L230" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Lerp one vector with another. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lerp</span><span class="SyntaxCode">(src: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode">, dst: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode">, factor: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector3"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_max"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">max</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L220" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a vector which is the <code class="incode">min</code> of two vectors. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">max</span><span class="SyntaxCode">(a: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode">, b: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector3"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_min"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">min</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L210" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a vector which is the <code class="incode">min</code> of two vectors. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">min</span><span class="SyntaxCode">(a: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode">, b: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector3"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_negate"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">negate</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L102" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Negate the vector. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">negate</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_normalize"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">normalize</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L146" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Normalize this vector (set its length to 1). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">normalize</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_normalizeSafe"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">normalizeSafe</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L184" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Normalize this vector (set its length to 1) even if its length is almost null. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">normalizeSafe</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_opAffect"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">opAffect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opAffect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_opAssign"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">opAssign</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opAssign</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode">)
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opAssign</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_opBinary"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">opBinary</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L53" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opBinary</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector3"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode"></a>
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opBinary</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector3"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_opEquals"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">opEquals</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opEquals</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_opUnary"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">opUnary</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L71" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opUnary</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector3"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_set"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">set</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L79" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set content. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">set</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, z: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_setLength"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">setLength</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L175" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the vector length. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setLength</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, newLength: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_setLengthSafe"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">setLengthSafe</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L166" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the vector length. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setLengthSafe</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, newLength: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_toNormalize"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">toNormalize</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L157" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns this vector normalized. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toNormalize</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector3"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector3_toNormalizeSafe"><span class="titletype">func</span> <span class="titlelight">Vector3.</span><span class="titlestrong">toNormalizeSafe</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L200" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns this vector normalized even if its length is almost null. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toNormalizeSafe</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector3"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector3">Vector3</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector4"><span class="titletype">struct</span> <span class="titlelight">Math.</span><span class="titlestrong">Vector4</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector4.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>x</td>
<td>f32</td>
<td></td>
</tr>
<tr>
<td>y</td>
<td>f32</td>
<td></td>
</tr>
<tr>
<td>z</td>
<td>f32</td>
<td></td>
</tr>
<tr>
<td>w</td>
<td>f32</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Vector4_clear">clear</a></td>
<td>Set the vector to zero. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector4_lerp">lerp</a></td>
<td>Lerp one vector with another. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Vector4_opAffect">opAffect</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector4_opEquals">opEquals</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector4_opUnary">opUnary</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector4_clear"><span class="titletype">func</span> <span class="titlelight">Vector4.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector4.swg#L33" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the vector to zero. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector4_lerp"><span class="titletype">func</span> <span class="titlelight">Vector4.</span><span class="titlestrong">lerp</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector4.swg#L39" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Lerp one vector with another. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lerp</span><span class="SyntaxCode">(src: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector4">Vector4</a></span><span class="SyntaxCode">, dst: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector4">Vector4</a></span><span class="SyntaxCode">, factor: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector4"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector4">Vector4</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector4_opAffect"><span class="titletype">func</span> <span class="titlelight">Vector4.</span><span class="titlestrong">opAffect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector4.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opAffect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector4_opEquals"><span class="titletype">func</span> <span class="titlelight">Vector4.</span><span class="titlestrong">opEquals</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector4.swg#L21" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opEquals</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector4">Vector4</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_Vector4_opUnary"><span class="titletype">func</span> <span class="titlelight">Vector4.</span><span class="titlestrong">opUnary</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector4.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opUnary</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_Math_Vector4"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Math</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Math_Vector4">Vector4</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_abs"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">abs</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L137" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">abs</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">abs</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">abs</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">abs</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">abs</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">abs</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_acos"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">acos</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L116" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">acos</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">acos</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_asin"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">asin</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L114" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">asin</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">asin</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_atan"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">atan</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L118" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">atan</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">atan</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_atan2"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">atan2</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L94" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">atan2</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">atan2</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_bigEndianToNative"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">bigEndianToNative</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\helpers.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a big endian integer to current arch native format. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">bigEndianToNative</span><span class="SyntaxCode">(x: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_ceil"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">ceil</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L130" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">ceil</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">ceil</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_clamp"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">clamp</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\helpers.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">clamp</span><span class="SyntaxCode">(x: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, low: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, up: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_cos"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">cos</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L102" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">cos</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">cos</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_cosh"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">cosh</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L109" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">cosh</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">cosh</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_countOnes"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">countOnes</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\bits.swg#L40" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the number of bits set to 1. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">countOnes</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">countOnes</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">countOnes</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">countOnes</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_exp"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">exp</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L140" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">exp</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">exp</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_exp2"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">exp2</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L142" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">exp2</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">exp2</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_floor"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">floor</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L128" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">floor</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">floor</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_hasByte"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">hasByte</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer.swg#L80" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determin if an integer has a given byte. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">hasByte</span><span class="SyntaxCode">(value: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, byte: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">hasByte</span><span class="SyntaxCode">(value: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, byte: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">hasByte</span><span class="SyntaxCode">(value: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, byte: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_hasZeroByte"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">hasZeroByte</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determin if any of the bytes is zero. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">hasZeroByte</span><span class="SyntaxCode">(v: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">hasZeroByte</span><span class="SyntaxCode">(v: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">hasZeroByte</span><span class="SyntaxCode">(v: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_isEqualEpsilon"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">isEqualEpsilon</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L46" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isEqualEpsilon</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, eps = </span><span class="SyntaxConstant"><a href="#Core_Math_ConstF32">ConstF32</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Epsilon</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isEqualEpsilon</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, eps = </span><span class="SyntaxConstant"><a href="#Core_Math_ConstF64">ConstF64</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Epsilon</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_isNan"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">isNan</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L49" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isNan</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isNan</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_isPowerOf2"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">isPowerOf2</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isPowerOf2</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_isZeroEpsilon"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">isZeroEpsilon</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L44" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isZeroEpsilon</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, eps = </span><span class="SyntaxConstant"><a href="#Core_Math_ConstF32">ConstF32</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Epsilon</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isZeroEpsilon</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, eps = </span><span class="SyntaxConstant"><a href="#Core_Math_ConstF64">ConstF64</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Epsilon</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_leadingZeros"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">leadingZeros</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\bits.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the number of bits set to 0 from the left. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">leadingZeros</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">leadingZeros</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">leadingZeros</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">leadingZeros</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_lerp"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">lerp</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lerp</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, factor: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lerp</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, factor: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_littleEndianToNative"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">littleEndianToNative</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\helpers.swg#L33" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a little endian integer to current arch native format. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">littleEndianToNative</span><span class="SyntaxCode">(x: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_log"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">log</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L121" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">log</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">log</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_log10"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">log10</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L125" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">log10</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">log10</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_log2"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">log2</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L123" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">log2</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">log2</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_makeRepeat16"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">makeRepeat16</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer.swg#L57" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Make a 16 bits by repeating a given byte  0x20 =&gt; 0x2020. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">makeRepeat16</span><span class="SyntaxCode">(v: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_makeRepeat32"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">makeRepeat32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer.swg#L65" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Make a 32 bits by repeating a given byte  0x20 =&gt; 0x20202020. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">makeRepeat32</span><span class="SyntaxCode">(v: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_makeRepeat64"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">makeRepeat64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer.swg#L73" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Make a 64 bits by repeating a given byte  0x20 =&gt; 0x20202020_20202020. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">makeRepeat64</span><span class="SyntaxCode">(v: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_map"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">map</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L64" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">map</span><span class="SyntaxCode">(val: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, minSrc: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, maxSrc: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, minDst: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, maxDst: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">map</span><span class="SyntaxCode">(val: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, minSrc: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, maxSrc: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, minDst: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, maxDst: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_max"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">max</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\helpers.swg#L8" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">max</span><span class="SyntaxCode">(x: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, y: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, z: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">max</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">max</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, z: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">max</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, z: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, w: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">max</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">max</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, z: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">max</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, z: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, w: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">max</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s16</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">s16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">max</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">max</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">max</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s8</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">s8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s8</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">max</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">max</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">max</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">max</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_min"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">min</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\helpers.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">min</span><span class="SyntaxCode">(x: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, y: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, z: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">min</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">min</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, z: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">min</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, z: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, w: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">min</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">min</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, z: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">min</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, z: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, w: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">min</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s16</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">s16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">min</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">min</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">min</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s8</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">s8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s8</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">min</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">min</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">min</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">min</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_mulAdd"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">mulAdd</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L147" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">mulAdd</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, z: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">mulAdd</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, z: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_mulU64"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">mulU64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer64.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">mulU64</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;{hi: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, lo: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">}</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_nativeToBigEndian"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">nativeToBigEndian</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\helpers.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a native arch integer to a big endian. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">nativeToBigEndian</span><span class="SyntaxCode">(x: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_pow"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">pow</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L144" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">pow</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">pow</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_reverse"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">reverse</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\bits.swg#L53" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reverse all bits. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">reverse</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">reverse</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">reverse</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">reverse</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_round"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">round</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L134" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">round</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">round</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_roundDownToPowerOf2"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">roundDownToPowerOf2</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">roundDownToPowerOf2</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_roundUpToPowerOf2"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">roundUpToPowerOf2</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer.swg#L8" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">roundUpToPowerOf2</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_saturate"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">saturate</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">saturate</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">saturate</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_sign"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">sign</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sign</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sign</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sign</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sign</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sign</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sign</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">s8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_sin"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">sin</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L100" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sin</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sin</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_sinh"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">sinh</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L107" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sinh</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sinh</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_smoothstep"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">smoothstep</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L52" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">smoothstep</span><span class="SyntaxCode">(edge0: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, edge1: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">smoothstep</span><span class="SyntaxCode">(edge0: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, edge1: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_sqrt"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">sqrt</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L97" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sqrt</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sqrt</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_tan"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">tan</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L104" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">tan</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">tan</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_tanh"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">tanh</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L111" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">tanh</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">tanh</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_toDegrees"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">toDegrees</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L39" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toDegrees</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toDegrees</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_toRadians"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">toRadians</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L40" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toRadians</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toRadians</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_trailingZeros"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">trailingZeros</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\bits.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the number of bits set to 0 from the right. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">trailingZeros</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">trailingZeros</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">trailingZeros</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">trailingZeros</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Math_trunc"><span class="titletype">func</span> <span class="titlelight">Math.</span><span class="titlestrong">trunc</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L132" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">trunc</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">trunc</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_align"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">align</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L50" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Align a pointer to the given amount. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">align</span><span class="SyntaxCode">(value: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">, alignement: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> ^</span><span class="SyntaxType">void</span><span class="SyntaxCode"></code>
</div>
<p>Align a value to the given amount. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">align</span><span class="SyntaxCode">(value: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, alignement: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_alloc"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">alloc</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\alloc.swg#L68" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Allocate a given amount of bytes. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">alloc</span><span class="SyntaxCode">(size: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, allocator: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">IAllocator</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, alignement: </span><span class="SyntaxType">u32</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">0</span><span class="SyntaxCode">, hint: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, loc = #callerlocation)-&gt;^</span><span class="SyntaxType">void</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_assertIsAllocated"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">assertIsAllocated</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\alloc.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Check if a given pointer is allocated. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">assertIsAllocated</span><span class="SyntaxCode">(buffer: ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">, size: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, allocator: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">IAllocator</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, hint: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, loc = #callerlocation)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_clear"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Clear one block of memory. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(dest: ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">, size: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_compare"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">compare</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compare two blocks of memory. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compare</span><span class="SyntaxCode">(dest: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">, src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">, size: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_copy"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">copy</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Copy one block of memory to a given address. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">copy</span><span class="SyntaxCode">(dest: ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">, src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">, size: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_copyOver"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">copyOver</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Move one block of memory to a given address. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">copyOver</span><span class="SyntaxCode">(dest: ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">, src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">, size: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_delete"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">delete</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\alloc.swg#L121" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Drop and release memory of the given type. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">delete</span><span class="SyntaxCode">(ptr: *</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, allocator: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">IAllocator</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, hint: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, loc = #callerlocation)</code>
</div>
<p>Drop and release memory of an array of the given type. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">delete</span><span class="SyntaxCode">(ptr: ^</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, num: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, allocator: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">IAllocator</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, hint: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, loc = #callerlocation)</code>
</div>
<p>Drop and release memory of the given type. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">delete</span><span class="SyntaxCode">(ptr: *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, allocator: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">IAllocator</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, hint: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, loc = #callerlocation)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_equals"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">equals</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compare two blocks of memory. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">equals</span><span class="SyntaxCode">(dest: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_free"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">free</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\alloc.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Free the specified memory block. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">free</span><span class="SyntaxCode">(buffer: ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">, size: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, allocator: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">IAllocator</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, hint: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, loc = #callerlocation)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_freeAll"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">freeAll</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\alloc.swg#L38" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Free all allocated memory of the given allocator if possible. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">freeAll</span><span class="SyntaxCode">(allocator: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">IAllocator</span><span class="SyntaxCode">, hint: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, loc = #callerlocation)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_freeTemp"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">freeTemp</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L56" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Clear the temporary allocator. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">freeTemp</span><span class="SyntaxCode">()</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_new"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">new</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\alloc.swg#L112" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Allocate and initialize the given type. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">new</span><span class="SyntaxCode">(allocator: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">IAllocator</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, alignement: </span><span class="SyntaxType">u32</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">0</span><span class="SyntaxCode">, hint: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, loc = #callerlocation)-&gt;*</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>Allocate and initialize an array of the given type. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">new</span><span class="SyntaxCode">(num: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, allocator: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">IAllocator</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, alignement: </span><span class="SyntaxType">u32</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">0</span><span class="SyntaxCode">, hint: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, loc = #callerlocation)-&gt;^</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>Allocate and initialize the given type. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">new</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, allocator: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">IAllocator</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, alignement: </span><span class="SyntaxType">u32</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">0</span><span class="SyntaxCode">, hint: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, loc = #callerlocation)-&gt;*</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_pushAllocator"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">pushAllocator</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L63" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Push a new allocator for the given block of code. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">pushAllocator</span><span class="SyntaxCode">(allocator: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">IAllocator</span><span class="SyntaxCode">, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_pushTempAllocator"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">pushTempAllocator</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L80" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Push the temporary allocator for the given block of code. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">pushTempAllocator</span><span class="SyntaxCode">(stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_realloc"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">realloc</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\alloc.swg#L50" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reallocate/allocate a given amount of bytes. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">realloc</span><span class="SyntaxCode">(buffer: ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">, newSize: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, oldSize: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, allocator: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">IAllocator</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, alignement: </span><span class="SyntaxType">u16</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">0</span><span class="SyntaxCode">, hint: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, loc = #callerlocation)-&gt;^</span><span class="SyntaxType">void</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_set"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">set</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the content of one block of memory to a specific byte value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">set</span><span class="SyntaxCode">(dest: ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, size: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Memory_tempAlloc"><span class="titletype">func</span> <span class="titlelight">Memory.</span><span class="titlestrong">tempAlloc</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\alloc.swg#L84" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Allocate a given amount of bytes in the temporary allocator. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">tempAlloc</span><span class="SyntaxCode">(size: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, alignement: </span><span class="SyntaxType">u32</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">0</span><span class="SyntaxCode">, hint: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, loc = #callerlocation)-&gt;^</span><span class="SyntaxType">void</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Noise_perlin"><span class="titletype">func</span> <span class="titlelight">Noise.</span><span class="titlestrong">perlin</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\noise.swg#L138" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Perlin. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">perlin</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, z: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, seed: </span><span class="SyntaxType">s32</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">1337</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">perlin</span><span class="SyntaxCode">(x: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, y: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, seed: </span><span class="SyntaxType">s32</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">1337</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Parser_RegExp"><span class="titletype">struct</span> <span class="titlelight">Parser.</span><span class="titlestrong">RegExp</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\regexp.swg#L82" class="src">[src]</a></td>
</tr>
</table>
</p>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Parser_RegExp_clear">clear</a></td>
<td>Clear content. </td>
</tr>
<tr>
<td><a href="#Core_Parser_RegExp_compile">compile</a></td>
<td>Compile the expression. </td>
</tr>
<tr>
<td><a href="#Core_Parser_RegExp_grep">grep</a></td>
<td>Find the first occurence in the string. </td>
</tr>
<tr>
<td><a href="#Core_Parser_RegExp_grepAll">grepAll</a></td>
<td>Find all the occurences in the string. </td>
</tr>
<tr>
<td><a href="#Core_Parser_RegExp_match">match</a></td>
<td>Returns true if <code class="incode">str</code> matches the regexp. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Parser_RegExp_clear"><span class="titletype">func</span> <span class="titlelight">RegExp.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\regexp.swg#L104" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Clear content. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Parser_RegExp_compile"><span class="titletype">func</span> <span class="titlelight">RegExp.</span><span class="titlestrong">compile</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\regexp.swg#L126" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compile the expression. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compile</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, ignoreCase: </span><span class="SyntaxType">bool</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">false</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Parser_RegExp_grep"><span class="titletype">func</span> <span class="titlelight">RegExp.</span><span class="titlestrong">grep</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\regexp.swg#L203" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Find the first occurence in the string. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">grep</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Parser_RegExp_grepAll"><span class="titletype">func</span> <span class="titlelight">RegExp.</span><span class="titlestrong">grepAll</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\regexp.swg#L184" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Find all the occurences in the string. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">grepAll</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Parser_RegExp_match"><span class="titletype">func</span> <span class="titlelight">RegExp.</span><span class="titlestrong">match</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\regexp.swg#L136" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if <code class="incode">str</code> matches the regexp. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">match</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Path_combine"><span class="titletype">func</span> <span class="titlelight">Path.</span><span class="titlestrong">combine</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L181" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Combine multiple paths into one, by adding a directory separator  between them if necessary. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">combine</span><span class="SyntaxCode">(fullnames: </span><span class="SyntaxType">string</span><span class="SyntaxCode">...)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Path_equals"><span class="titletype">func</span> <span class="titlelight">Path.</span><span class="titlestrong">equals</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L203" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the two paths are equal. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">equals</span><span class="SyntaxCode">(path1: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, path2: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Path_getAbsolute"><span class="titletype">func</span> <span class="titlelight">Path.</span><span class="titlestrong">getAbsolute</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.win32.swg#L123" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform <code class="incode">fullname</code> to an absolute path. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getAbsolute</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Path_getDirectoryName"><span class="titletype">func</span> <span class="titlelight">Path.</span><span class="titlestrong">getDirectoryName</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L45" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the directory part of the path, null if not found. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getDirectoryName</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Path_getExtension"><span class="titletype">func</span> <span class="titlelight">Path.</span><span class="titlestrong">getExtension</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L124" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the file name extension, including the <code class="incode">.</code> character  Returns null if no extension was found. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getExtension</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Path_getExtensionLowerCase"><span class="titletype">func</span> <span class="titlelight">Path.</span><span class="titlestrong">getExtensionLowerCase</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L146" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the file name extension, including the <code class="incode">.</code> character, in lower case  Returns null if no extension was found. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getExtensionLowerCase</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Path_getFileName"><span class="titletype">func</span> <span class="titlelight">Path.</span><span class="titlestrong">getFileName</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L72" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the file name part of the path, null if not found. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getFileName</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Path_getFileNameWithoutExtension"><span class="titletype">func</span> <span class="titlelight">Path.</span><span class="titlestrong">getFileNameWithoutExtension</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L96" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the path file name, null if not found. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getFileNameWithoutExtension</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Path_getRootLength"><span class="titletype">func</span> <span class="titlelight">Path.</span><span class="titlestrong">getRootLength</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.win32.swg#L49" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the length of the root part of the path. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getRootLength</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Path_getRootName"><span class="titletype">func</span> <span class="titlelight">Path.</span><span class="titlestrong">getRootName</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the root part of the path, null if not found. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getRootName</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Path_hasExtension"><span class="titletype">func</span> <span class="titlelight">Path.</span><span class="titlestrong">hasExtension</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L159" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the file name contains an extension. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">hasExtension</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Path_isDirectorySeparator"><span class="titletype">func</span> <span class="titlelight">Path.</span><span class="titlestrong">isDirectorySeparator</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given character is a directory separator. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isDirectorySeparator</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Path_isExtension"><span class="titletype">func</span> <span class="titlelight">Path.</span><span class="titlestrong">isExtension</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L152" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given file is of the given extension. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isExtension</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, extension: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Path_isRooted"><span class="titletype">func</span> <span class="titlelight">Path.</span><span class="titlestrong">isRooted</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Tests if the given path contains a root. A path is considered rooted  if it starts with a directory separator or a drive letter and a colon. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isRooted</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Path_isValidFileName"><span class="titletype">func</span> <span class="titlelight">Path.</span><span class="titlestrong">isValidFileName</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.win32.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given file name is valid. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isValidFileName</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Path_isValidPathName"><span class="titletype">func</span> <span class="titlelight">Path.</span><span class="titlestrong">isValidPathName</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.win32.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given path name is valid. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isValidPathName</span><span class="SyntaxCode">(fullname: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Path_normalize"><span class="titletype">func</span> <span class="titlelight">Path.</span><span class="titlestrong">normalize</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L210" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Normalize path  <code class="incode">\</code> are replaced with <code class="incode">/</code> as this is the std norm for paths. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">normalize</span><span class="SyntaxCode">(fullname: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_CMWC4096"><span class="titletype">struct</span> <span class="titlelight">Random.</span><span class="titlestrong">CMWC4096</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\cmwc.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>q</td>
<td>[4096] u32</td>
<td></td>
</tr>
<tr>
<td>c</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td>i</td>
<td>u32</td>
<td>special invalid value (&gt; 4095) to force the seed on first get. </td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Random_CMWC4096_nextU32">nextU32</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Random_CMWC4096_seedU32">seedU32</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_CMWC4096_nextU32"><span class="titletype">func</span> <span class="titlelight">CMWC4096.</span><span class="titlestrong">nextU32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\cmwc.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nextU32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_CMWC4096_seedU32"><span class="titletype">func</span> <span class="titlelight">CMWC4096.</span><span class="titlestrong">seedU32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\cmwc.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">seedU32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_MWC"><span class="titletype">struct</span> <span class="titlelight">Random.</span><span class="titlestrong">MWC</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\mwc.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>w</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td>z</td>
<td>u32</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Random_MWC_nextU32">nextU32</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Random_MWC_seedU32">seedU32(self, u32)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Random_MWC_seedU32">seedU32(self, u32, u32)</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_MWC_nextU32"><span class="titletype">func</span> <span class="titlelight">MWC.</span><span class="titlestrong">nextU32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\mwc.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nextU32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_MWC_seedU32"><span class="titletype">func</span> <span class="titlelight">MWC.</span><span class="titlestrong">seedU32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\mwc.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">seedU32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">seedU32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value1: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, value2: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_Mt64"><span class="titletype">struct</span> <span class="titlelight">Random.</span><span class="titlestrong">Mt64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\mt64.swg#L21" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>mt</td>
<td>[312] u64</td>
<td></td>
</tr>
<tr>
<td>mti</td>
<td>u64</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Random_Mt64_nextU64">nextU64</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Random_Mt64_seedU64">seedU64(self, const [..] u64)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Random_Mt64_seedU64">seedU64(self, u64)</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_Mt64_nextU64"><span class="titletype">func</span> <span class="titlelight">Mt64.</span><span class="titlestrong">nextU64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\mt64.swg#L80" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nextU64</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_Mt64_seedU64"><span class="titletype">func</span> <span class="titlelight">Mt64.</span><span class="titlestrong">seedU64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\mt64.swg#L42" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">seedU64</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, seed: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">seedU64</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, seed: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_Rng"><span class="titletype">struct</span> <span class="titlelight">Random.</span><span class="titlestrong">Rng</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_Random_Rng">Rng</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"> = </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Random</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Random_MWC">MWC</a></span><span class="SyntaxCode">)</code>
</div>
<table class="enumeration">
<tr>
<td>rng</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>seedDone</td>
<td>bool</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Random_Rng_nextBool">nextBool</a></td>
<td>Returns a random bool. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextF32">nextF32(self)</a></td>
<td>Range is [0..1[, so 1.0 will never be returned. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextF32">nextF32(self, f32, f32)</a></td>
<td>Returns a float value in a given range  <code class="incode">max</code> is excluded. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextF64">nextF64(self)</a></td>
<td>Range is [0..1[, so 1.0 will never be returned. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextF64">nextF64(self, f64, f64)</a></td>
<td>Returns a float value in a given range  <code class="incode">max</code> is excluded. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextS32">nextS32(self)</a></td>
<td>Returns a signed 32 bits random value. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextS32">nextS32(self, s32, s32)</a></td>
<td>Returns a signed random value in a given range  <code class="incode">max</code> is excluded. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextS64">nextS64(self)</a></td>
<td>Returns a signed 64 bits random value. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextS64">nextS64(self, s64, s64)</a></td>
<td>Returns a signed random value in a given range  <code class="incode">max</code> is excluded. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextU32">nextU32(self)</a></td>
<td>Returns an unsigned 32 bits random value. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextU32">nextU32(self, u32, u32)</a></td>
<td>Returns an unsigned random value in a given range  <code class="incode">max</code> is excluded. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextU64">nextU64(self)</a></td>
<td>Returns an unsigned 64 bits random value. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextU64">nextU64(self, u64, u64)</a></td>
<td>Returns an unsigned random value in a given range  <code class="incode">max</code> is excluded. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_seedNow">seedNow</a></td>
<td>Seed the rng with the current time. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_seedU32">seedU32</a></td>
<td>Seed random generator with a 32 bits value. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_seedU64">seedU64</a></td>
<td>Seed random generator with a 64 bits value. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_shuffle">shuffle</a></td>
<td>Randomly change the order of a slice. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_Rng_nextBool"><span class="titletype">func</span> <span class="titlelight">Rng.</span><span class="titlestrong">nextBool</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L159" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a random bool. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nextBool</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_Rng_nextF32"><span class="titletype">func</span> <span class="titlelight">Rng.</span><span class="titlestrong">nextF32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L82" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Range is [0..1[, so 1.0 will never be returned. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nextF32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>Returns a float value in a given range  <code class="incode">max</code> is excluded. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nextF32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, min: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, max: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_Rng_nextF64"><span class="titletype">func</span> <span class="titlelight">Rng.</span><span class="titlestrong">nextF64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L91" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Range is [0..1[, so 1.0 will never be returned. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nextF64</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>Returns a float value in a given range  <code class="incode">max</code> is excluded. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nextF64</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, min: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, max: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_Rng_nextS32"><span class="titletype">func</span> <span class="titlelight">Rng.</span><span class="titlestrong">nextS32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L68" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a signed 32 bits random value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nextS32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode"></code>
</div>
<p>Returns a signed random value in a given range  <code class="incode">max</code> is excluded. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nextS32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, min: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">, max: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_Rng_nextS64"><span class="titletype">func</span> <span class="titlelight">Rng.</span><span class="titlestrong">nextS64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L75" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a signed 64 bits random value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nextS64</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">s64</span><span class="SyntaxCode"></code>
</div>
<p>Returns a signed random value in a given range  <code class="incode">max</code> is excluded. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nextS64</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, min: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">, max: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_Rng_nextU32"><span class="titletype">func</span> <span class="titlelight">Rng.</span><span class="titlestrong">nextU32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns an unsigned 32 bits random value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nextU32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>Returns an unsigned random value in a given range  <code class="incode">max</code> is excluded. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nextU32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, min: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, max: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_Rng_nextU64"><span class="titletype">func</span> <span class="titlelight">Rng.</span><span class="titlestrong">nextU64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L49" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns an unsigned 64 bits random value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nextU64</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>Returns an unsigned random value in a given range  <code class="incode">max</code> is excluded. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nextU64</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, min: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, max: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_Rng_seedNow"><span class="titletype">func</span> <span class="titlelight">Rng.</span><span class="titlestrong">seedNow</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L61" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Seed the rng with the current time. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">seedNow</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_Rng_seedU32"><span class="titletype">func</span> <span class="titlelight">Rng.</span><span class="titlestrong">seedU32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Seed random generator with a 32 bits value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">seedU32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, seed: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_Rng_seedU64"><span class="titletype">func</span> <span class="titlelight">Rng.</span><span class="titlestrong">seedU64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Seed random generator with a 64 bits value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">seedU64</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, seed: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_Rng_shuffle"><span class="titletype">func</span> <span class="titlelight">Rng.</span><span class="titlestrong">shuffle</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L165" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Randomly change the order of a slice. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">V</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">shuffle</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, slice: [..] </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Random_shared"><span class="titletype">func</span> <span class="titlelight">Random.</span><span class="titlestrong">shared</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\random.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the default per thread random generator. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">shared</span><span class="SyntaxCode">()-&gt;*</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Random</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Random_Rng">Rng</a></span><span class="SyntaxCode">'(</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Random</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Random_MWC">MWC</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_canCopy"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">canCopy</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L202" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">canCopy</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_copy"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">copy</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L460" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">copy</span><span class="SyntaxCode">(dst: *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, src: *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_crcToType"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">crcToType</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L536" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a crc to a registered typeinfo. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">crcToType</span><span class="SyntaxCode">(crc: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_getAttribute"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">getAttribute</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L317" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the given associated <code class="incode">attribute</code> to <code class="incode">type</code> or null. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getAttribute</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, attribute: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Attribute</span><span class="SyntaxCode"></code>
</div>
<p>Returns the given associated <code class="incode">attribute</code> to <code class="incode">value</code> or null. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getAttribute</span><span class="SyntaxCode">(value: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">, attribute: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Attribute</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_getAttributeValue"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">getAttributeValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L240" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the given attribute value, or null. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getAttributeValue</span><span class="SyntaxCode">(attribute: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Attribute</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">any</span><span class="SyntaxCode"></code>
</div>
<p>Returns the given attribute value, or null. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getAttributeValue</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, attribute: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">any</span><span class="SyntaxCode"></code>
</div>
<p>Returns the given attribute value, or null. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getAttributeValue</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">, attribute: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">any</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_getAttributes"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">getAttributes</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L283" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the given associated attributes to <code class="incode">type</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getAttributes</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, attribute: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Attribute</span><span class="SyntaxCode">)</code>
</div>
<p>Returns the given associated attributes to <code class="incode">value</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getAttributes</span><span class="SyntaxCode">(value: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">, attribute: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Attribute</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_getEnumName"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">getEnumName</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L374" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the enum value name corresponding to the value pointed by <code class="incode">valueAddr</code>  Can have multiple names if the enum is tagged with #<a href="swag.runtime.html#Swag_EnumFlags">Swag.EnumFlags</a>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getEnumName</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, valueAddr: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, fullname = </span><span class="SyntaxKeyword">true</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_getEnumValue"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">getEnumValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L357" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get information about a specific value in a given enum  Returns null if the value does not exist. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getEnumValue</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, name: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_getField"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">getField</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L129" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get information about a specific field in a given struct  Returns null if the field does not exist. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getField</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, name: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_getFieldValue"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">getFieldValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L145" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get a field value with a given runtime type. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getFieldValue</span><span class="SyntaxCode">(dest: *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">, src: *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, hardCast: </span><span class="SyntaxType">bool</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">false</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_getMethod"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">getMethod</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L112" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get information about a specific mtd in a given struct  Returns null if the mtd does not exist. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getMethod</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, name: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_hasAttribute"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">hasAttribute</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L350" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given <code class="incode">type</code> has the associated <code class="incode">attribute</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">hasAttribute</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, attribute: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>Returns true if the given <code class="incode">value</code> has the associated <code class="incode">attribute</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">hasAttribute</span><span class="SyntaxCode">(value: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">, attribute: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_hasDrop"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">hasDrop</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L199" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">hasDrop</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_hasInterface"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">hasInterface</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L206" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the interface <code class="incode">itf</code> is implemented in the given structure type. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">hasInterface</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, itf: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_hasMethod"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">hasMethod</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L195" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Helpers functions to know if a struct has a special function. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">hasMethod</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, name: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_hasPostCopy"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">hasPostCopy</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L201" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">hasPostCopy</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_hasPostMove"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">hasPostMove</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L200" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">hasPostMove</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isAny"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isAny</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L49" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isAny</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isArray"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isArray</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isArray</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isBool"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isBool</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L58" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isBool</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isEnum"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isEnum</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isEnum</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isEnumFlags"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isEnumFlags</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isEnumFlags</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isFloat"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isFloat</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isFloat</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"swag.runtime.html#Swag_TypeInfoFlags"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfoFlags</span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isGeneric"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isGeneric</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isGeneric</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"swag.runtime.html#Swag_TypeInfoFlags"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfoFlags</span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isInteger"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isInteger</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isInteger</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"swag.runtime.html#Swag_TypeInfoFlags"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfoFlags</span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isInterface"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isInterface</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isInterface</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isNative"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isNative</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L9" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isNative</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isPointer"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isPointer</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L10" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isPointer</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isPointerArithmetic"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isPointerArithmetic</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L24" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isPointerArithmetic</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"swag.runtime.html#Swag_TypeInfoFlags"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfoFlags</span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isPointerRef"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isPointerRef</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isPointerRef</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"swag.runtime.html#Swag_TypeInfoFlags"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfoFlags</span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isRune"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isRune</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L40" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isRune</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isSimpleNative"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isSimpleNative</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isSimpleNative</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isSlice"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isSlice</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isSlice</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isString"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isString</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L67" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isString</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isStruct"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isStruct</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isStruct</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isStructOfName"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isStructOfName</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L78" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this is a struct of the given name. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isStructOfName</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, name: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isTuple"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isTuple</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L21" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isTuple</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"swag.runtime.html#Swag_TypeInfoFlags"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfoFlags</span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isType"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isType</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isType</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"swag.runtime.html#Swag_TypeInfoFlags"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfoFlags</span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_isTypeAlias"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">isTypeAlias</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isTypeAlias</span><span class="SyntaxCode">(t: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_makeConcreteAlias"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">makeConcreteAlias</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L88" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>In case this is a type typealias, need to go deep inside it to find the right type. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">makeConcreteAlias</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_makeConcreteEnum"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">makeConcreteEnum</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L101" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform an enum type to its underling real native type. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">makeConcreteEnum</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_maxSizeOf"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">maxSizeOf</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L443" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the maximum sizeof a bunch of <code class="incode">typeinfo</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">maxSizeOf</span><span class="SyntaxCode">(v: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_nameToType"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">nameToType</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L546" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a crc to a registered typeinfo. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nameToType</span><span class="SyntaxCode">(name: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_orFlags"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">orFlags</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L452" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Make an union of flags of all types. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">orFlags</span><span class="SyntaxCode">(v: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"swag.runtime.html#Swag_TypeInfoFlags"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfoFlags</span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_roomInArray"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">roomInArray</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L473" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Used to add an element in a <code class="incode">Core.Array</code> without knowing the type of the element at compile time  but knowing it at runtime (valueType). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">roomInArray</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, valueType: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxType">void</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Reflection_setFieldValue"><span class="titletype">func</span> <span class="titlelight">Reflection.</span><span class="titlestrong">setFieldValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L170" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set a field value with a given runtime type. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setFieldValue</span><span class="SyntaxCode">(dest: *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">, src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, hardCast: </span><span class="SyntaxType">bool</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">false</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Alias"><span class="titletype">attr</span> <span class="titlelight">Serialization.</span><span class="titlestrong">Alias</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Accept this other name for the field. </p>
<div class="addinfos"><b>Usage</b>: struct-var multi 
</div>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">attr</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_Serialization_Alias">Alias</a></span><span class="SyntaxCode">(name: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder"><span class="titletype">struct</span> <span class="titlelight">Serialization.</span><span class="titlestrong">Decoder</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L39" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_Serialization_Decoder">Decoder</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<table class="enumeration">
<tr>
<td>serializer</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>flags</td>
<td><a href="#Core_Serialization_DecoderFlags">Core.Serialization.DecoderFlags</a></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Serialization_Decoder_end">end</a></td>
<td>Finish reading. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Decoder_readAll">readAll</a></td>
<td>Read a full struct. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Decoder_readTypeValue">readTypeValue</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Decoder_readValue">readValue</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Decoder_start">start</a></td>
<td>Start reading. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_beginField"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">beginField</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L271" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginField</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, val: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_beginSection"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">beginSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L285" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginSection</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, kind: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Serialization</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Serialization_SectionKind">SectionKind</a></span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_end"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">end</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L266" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">end</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_endField"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">endField</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L279" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endField</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_endSection"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">endSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L290" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endSection</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_getVersion"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">getVersion</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L295" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getVersion</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_read"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">read</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L300" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">read</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, data: *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, dataType: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_readBool"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readBool</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L328" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readBool</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_readBufferU8"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readBufferU8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L305" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readBufferU8</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, count: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxType">u8</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_readF32"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readF32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L337" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readF32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_readF64"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readF64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L338" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readF64</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_readS16"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readS16</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L330" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readS16</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">s16</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_readS32"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readS32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L331" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readS32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_readS64"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readS64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L332" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readS64</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">s64</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_readS8"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readS8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L329" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readS8</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">s8</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_readU16"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readU16</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L334" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readU16</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_readU32"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readU32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L335" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readU32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_readU64"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readU64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L336" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readU64</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_readU8"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readU8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L333" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readU8</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_IDecoder_start"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">start</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L260" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">start</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, input: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_end"><span class="titletype">func</span> <span class="titlelight">Decoder.</span><span class="titlestrong">end</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L236" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Finish reading. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">end</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_readAll"><span class="titletype">func</span> <span class="titlelight">Decoder.</span><span class="titlestrong">readAll</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L242" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read a full struct. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">TR</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">readAll</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, input: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxConstant">TR</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_readTypeValue"><span class="titletype">func</span> <span class="titlelight">Decoder.</span><span class="titlestrong">readTypeValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L47" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readTypeValue</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, typeVal: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">, data: ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_readValue"><span class="titletype">func</span> <span class="titlelight">Decoder.</span><span class="titlestrong">readValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L54" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readValue</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, data: ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">, dataType: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Decoder_start"><span class="titletype">func</span> <span class="titlelight">Decoder.</span><span class="titlestrong">start</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L229" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Start reading. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">start</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, input: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_DecoderFlags"><span class="titletype">enum</span> <span class="titlelight">Serialization.</span><span class="titlestrong">DecoderFlags</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L33" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Zero</td>
<td></td>
</tr>
<tr>
<td>IgnoreStructFieldError</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder"><span class="titletype">struct</span> <span class="titlelight">Serialization.</span><span class="titlestrong">Encoder</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L38" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_Serialization_Encoder">Encoder</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<table class="enumeration">
<tr>
<td>serializer</td>
<td>T</td>
<td></td>
</tr>
<tr>
<td>errorIfUnknown</td>
<td>bool</td>
<td>If true, raise an error if a type cannot be saved, and just ignore if false. </td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Serialization_Encoder_end">end</a></td>
<td>End serialization. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Encoder_start">start</a></td>
<td>Start serialization. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Encoder_writeAll">writeAll</a></td>
<td>Write a full struct. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Encoder_writeTypeValue">writeTypeValue</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Encoder_writeValue">writeValue</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_beginField"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">beginField</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L262" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginField</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, val: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_beginSection"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">beginSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L274" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginSection</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, kind: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Serialization</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Serialization_SectionKind">SectionKind</a></span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_end"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">end</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L257" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>End serialization. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">end</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_endField"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">endField</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L268" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endField</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_endSection"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">endSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L279" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endSection</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_start"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">start</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L250" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Start serialization. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">start</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, result: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_write"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">write</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L284" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">write</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, data: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">, type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_writeBool"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeBool</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L307" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeBool</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_writeBufferU8"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeBufferU8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L289" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeBufferU8</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, data: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> ^</span><span class="SyntaxType">u8</span><span class="SyntaxCode">, count: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_writeF32"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeF32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L316" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeF32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_writeF64"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeF64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L317" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeF64</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_writeS16"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeS16</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L309" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeS16</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">s16</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_writeS32"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeS32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L310" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeS32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_writeS64"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeS64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L311" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeS64</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_writeS8"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeS8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L308" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeS8</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">s8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_writeU16"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeU16</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L313" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeU16</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_writeU32"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeU32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L314" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeU32</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_writeU64"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeU64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L315" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeU64</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_IEncoder_writeU8"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeU8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L312" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeU8</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_end"><span class="titletype">func</span> <span class="titlelight">Encoder.</span><span class="titlestrong">end</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L54" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>End serialization. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">end</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_start"><span class="titletype">func</span> <span class="titlelight">Encoder.</span><span class="titlestrong">start</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L47" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Start serialization. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">start</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, result: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_writeAll"><span class="titletype">func</span> <span class="titlelight">Encoder.</span><span class="titlestrong">writeAll</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L238" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write a full struct. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeAll</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, result: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">, value: </span><span class="SyntaxType">any</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_writeTypeValue"><span class="titletype">func</span> <span class="titlelight">Encoder.</span><span class="titlestrong">writeTypeValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L59" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeTypeValue</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, typeVal: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">, data: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Encoder_writeValue"><span class="titletype">func</span> <span class="titlelight">Encoder.</span><span class="titlestrong">writeValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L66" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeValue</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, data: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">, dataType: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Final"><span class="titletype">attr</span> <span class="titlelight">Serialization.</span><span class="titlestrong">Final</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>The struct does not need versionning. </p>
<div class="addinfos"><b>Usage</b>: struct 
</div>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">attr</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_Serialization_Final">Final</a></span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder"><span class="titletype">interface</span> <span class="titlelight">Serialization.</span><span class="titlestrong">IDecoder</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>start</td>
<td>func(*Core.Serialization.IDecoder, const [..] u8) throw</td>
<td></td>
</tr>
<tr>
<td>end</td>
<td>func(*Core.Serialization.IDecoder) throw</td>
<td></td>
</tr>
<tr>
<td>beginField</td>
<td>func(*Core.Serialization.IDecoder, Swag.TypeValue)->bool throw</td>
<td></td>
</tr>
<tr>
<td>endField</td>
<td>func(*Core.Serialization.IDecoder) throw</td>
<td></td>
</tr>
<tr>
<td>beginSection</td>
<td>func(*Core.Serialization.IDecoder, Core.Serialization.SectionKind) throw</td>
<td></td>
</tr>
<tr>
<td>endSection</td>
<td>func(*Core.Serialization.IDecoder) throw</td>
<td></td>
</tr>
<tr>
<td>getVersion</td>
<td>func(*Core.Serialization.IDecoder)->u32</td>
<td></td>
</tr>
<tr>
<td>read</td>
<td>func(*Core.Serialization.IDecoder, *void, const *Swag.TypeInfo) throw</td>
<td></td>
</tr>
<tr>
<td>readBufferU8</td>
<td>func(*Core.Serialization.IDecoder, u64)->*u8 throw</td>
<td></td>
</tr>
<tr>
<td>readBool</td>
<td>func(*Core.Serialization.IDecoder)->bool throw</td>
<td></td>
</tr>
<tr>
<td>readS8</td>
<td>func(*Core.Serialization.IDecoder)->s8 throw</td>
<td></td>
</tr>
<tr>
<td>readS16</td>
<td>func(*Core.Serialization.IDecoder)->s16 throw</td>
<td></td>
</tr>
<tr>
<td>readS32</td>
<td>func(*Core.Serialization.IDecoder)->s32 throw</td>
<td></td>
</tr>
<tr>
<td>readS64</td>
<td>func(*Core.Serialization.IDecoder)->s64 throw</td>
<td></td>
</tr>
<tr>
<td>readU8</td>
<td>func(*Core.Serialization.IDecoder)->u8 throw</td>
<td></td>
</tr>
<tr>
<td>readU16</td>
<td>func(*Core.Serialization.IDecoder)->u16 throw</td>
<td></td>
</tr>
<tr>
<td>readU32</td>
<td>func(*Core.Serialization.IDecoder)->u32 throw</td>
<td></td>
</tr>
<tr>
<td>readU64</td>
<td>func(*Core.Serialization.IDecoder)->u64 throw</td>
<td></td>
</tr>
<tr>
<td>readF32</td>
<td>func(*Core.Serialization.IDecoder)->f32 throw</td>
<td></td>
</tr>
<tr>
<td>readF64</td>
<td>func(*Core.Serialization.IDecoder)->f64 throw</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_beginField"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">beginField</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L10" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginField</span><span class="SyntaxCode">(self, val: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_beginSection"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">beginSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginSection</span><span class="SyntaxCode">(self, kind: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Serialization</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Serialization_SectionKind">SectionKind</a></span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_end"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">end</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L8" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">end</span><span class="SyntaxCode">(self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_endField"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">endField</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endField</span><span class="SyntaxCode">(self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_endSection"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">endSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endSection</span><span class="SyntaxCode">(self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_getVersion"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">getVersion</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getVersion</span><span class="SyntaxCode">(self)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_read"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">read</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">read</span><span class="SyntaxCode">(self, data: *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, dataType: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_readBool"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readBool</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readBool</span><span class="SyntaxCode">(self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_readBufferU8"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readBufferU8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readBufferU8</span><span class="SyntaxCode">(self, count: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;*</span><span class="SyntaxType">u8</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_readF32"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readF32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readF32</span><span class="SyntaxCode">(self)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_readF64"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readF64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readF64</span><span class="SyntaxCode">(self)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_readS16"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readS16</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L21" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readS16</span><span class="SyntaxCode">(self)-&gt;</span><span class="SyntaxType">s16</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_readS32"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readS32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readS32</span><span class="SyntaxCode">(self)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_readS64"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readS64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readS64</span><span class="SyntaxCode">(self)-&gt;</span><span class="SyntaxType">s64</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_readS8"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readS8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readS8</span><span class="SyntaxCode">(self)-&gt;</span><span class="SyntaxType">s8</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_readU16"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readU16</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readU16</span><span class="SyntaxCode">(self)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_readU32"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readU32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readU32</span><span class="SyntaxCode">(self)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_readU64"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readU64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readU64</span><span class="SyntaxCode">(self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_readU8"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">readU8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L24" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readU8</span><span class="SyntaxCode">(self)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IDecoder_start"><span class="titletype">func</span> <span class="titlelight">IDecoder.</span><span class="titlestrong">start</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">start</span><span class="SyntaxCode">(self, input: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder"><span class="titletype">interface</span> <span class="titlelight">Serialization.</span><span class="titlestrong">IEncoder</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>start</td>
<td>func(*Core.Serialization.IEncoder, *Core.ConcatBuffer) throw</td>
<td></td>
</tr>
<tr>
<td>end</td>
<td>func(*Core.Serialization.IEncoder) throw</td>
<td></td>
</tr>
<tr>
<td>beginField</td>
<td>func(*Core.Serialization.IEncoder, Swag.TypeValue) throw</td>
<td></td>
</tr>
<tr>
<td>endField</td>
<td>func(*Core.Serialization.IEncoder) throw</td>
<td></td>
</tr>
<tr>
<td>beginSection</td>
<td>func(*Core.Serialization.IEncoder, Core.Serialization.SectionKind) throw</td>
<td></td>
</tr>
<tr>
<td>endSection</td>
<td>func(*Core.Serialization.IEncoder) throw</td>
<td></td>
</tr>
<tr>
<td>write</td>
<td>func(*Core.Serialization.IEncoder, const ^void, const *Swag.TypeInfo) throw</td>
<td></td>
</tr>
<tr>
<td>writeBufferU8</td>
<td>func(*Core.Serialization.IEncoder, const ^u8, u64) throw</td>
<td></td>
</tr>
<tr>
<td>writeBool</td>
<td>func(*Core.Serialization.IEncoder, bool)</td>
<td></td>
</tr>
<tr>
<td>writeS8</td>
<td>func(*Core.Serialization.IEncoder, s8)</td>
<td></td>
</tr>
<tr>
<td>writeS16</td>
<td>func(*Core.Serialization.IEncoder, s16)</td>
<td></td>
</tr>
<tr>
<td>writeS32</td>
<td>func(*Core.Serialization.IEncoder, s32)</td>
<td></td>
</tr>
<tr>
<td>writeS64</td>
<td>func(*Core.Serialization.IEncoder, s64)</td>
<td></td>
</tr>
<tr>
<td>writeU8</td>
<td>func(*Core.Serialization.IEncoder, u8)</td>
<td></td>
</tr>
<tr>
<td>writeU16</td>
<td>func(*Core.Serialization.IEncoder, u16)</td>
<td></td>
</tr>
<tr>
<td>writeU32</td>
<td>func(*Core.Serialization.IEncoder, u32)</td>
<td></td>
</tr>
<tr>
<td>writeU64</td>
<td>func(*Core.Serialization.IEncoder, u64)</td>
<td></td>
</tr>
<tr>
<td>writeF32</td>
<td>func(*Core.Serialization.IEncoder, f32)</td>
<td></td>
</tr>
<tr>
<td>writeF64</td>
<td>func(*Core.Serialization.IEncoder, f64)</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_beginField"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">beginField</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginField</span><span class="SyntaxCode">(self, val: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_beginSection"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">beginSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginSection</span><span class="SyntaxCode">(self, kind: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Serialization</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Serialization_SectionKind">SectionKind</a></span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_end"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">end</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">end</span><span class="SyntaxCode">(self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_endField"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">endField</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endField</span><span class="SyntaxCode">(self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_endSection"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">endSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endSection</span><span class="SyntaxCode">(self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_start"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">start</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">start</span><span class="SyntaxCode">(self, result: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_write"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">write</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">write</span><span class="SyntaxCode">(self, data: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> ^</span><span class="SyntaxType">void</span><span class="SyntaxCode">, type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_writeBool"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeBool</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeBool</span><span class="SyntaxCode">(self, value: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_writeBufferU8"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeBufferU8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeBufferU8</span><span class="SyntaxCode">(self, data: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> ^</span><span class="SyntaxType">u8</span><span class="SyntaxCode">, count: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_writeF32"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeF32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeF32</span><span class="SyntaxCode">(self, value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_writeF64"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeF64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeF64</span><span class="SyntaxCode">(self, value: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_writeS16"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeS16</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeS16</span><span class="SyntaxCode">(self, value: </span><span class="SyntaxType">s16</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_writeS32"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeS32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeS32</span><span class="SyntaxCode">(self, value: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_writeS64"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeS64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeS64</span><span class="SyntaxCode">(self, value: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_writeS8"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeS8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeS8</span><span class="SyntaxCode">(self, value: </span><span class="SyntaxType">s8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_writeU16"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeU16</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeU16</span><span class="SyntaxCode">(self, value: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_writeU32"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeU32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L32" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeU32</span><span class="SyntaxCode">(self, value: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_writeU64"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeU64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L33" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeU64</span><span class="SyntaxCode">(self, value: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_IEncoder_writeU8"><span class="titletype">func</span> <span class="titlelight">IEncoder.</span><span class="titlestrong">writeU8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeU8</span><span class="SyntaxCode">(self, value: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_ISerialize"><span class="titletype">interface</span> <span class="titlelight">Serialization.</span><span class="titlestrong">ISerialize</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>read</td>
<td>func(*Core.Serialization.ISerialize, Core.Serialization.IDecoder)->bool throw</td>
<td></td>
</tr>
<tr>
<td>write</td>
<td>func(*Core.Serialization.ISerialize, Core.Serialization.IEncoder)->bool throw</td>
<td></td>
</tr>
<tr>
<td>readElement</td>
<td>func(*Core.Serialization.ISerialize, Swag.TypeValue, *void, Core.Serialization.IDecoder)->bool throw</td>
<td></td>
</tr>
<tr>
<td>writeElement</td>
<td>func(*Core.Serialization.ISerialize, Swag.TypeValue, const *void, Core.Serialization.IEncoder)->bool throw</td>
<td></td>
</tr>
<tr>
<td>postSerialize</td>
<td>func(*Core.Serialization.ISerialize, *void, Core.Serialization.IDecoder) throw</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_ISerialize_postSerialize"><span class="titletype">func</span> <span class="titlelight">ISerialize.</span><span class="titlestrong">postSerialize</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">postSerialize</span><span class="SyntaxCode">(self, data: *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, decoder: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Serialization</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Serialization_IDecoder">IDecoder</a></span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_ISerialize_read"><span class="titletype">func</span> <span class="titlelight">ISerialize.</span><span class="titlestrong">read</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">read</span><span class="SyntaxCode">(self, decoder: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Serialization</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Serialization_IDecoder">IDecoder</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_ISerialize_readElement"><span class="titletype">func</span> <span class="titlelight">ISerialize.</span><span class="titlestrong">readElement</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">readElement</span><span class="SyntaxCode">(self, type: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">, data: *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, decoder: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Serialization</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Serialization_IDecoder">IDecoder</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_ISerialize_write"><span class="titletype">func</span> <span class="titlelight">ISerialize.</span><span class="titlestrong">write</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">write</span><span class="SyntaxCode">(self, decoder: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Serialization</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Serialization_IEncoder">IEncoder</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_ISerialize_writeElement"><span class="titletype">func</span> <span class="titlelight">ISerialize.</span><span class="titlestrong">writeElement</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeElement</span><span class="SyntaxCode">(self, type: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">, data: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, decoder: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Serialization</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Serialization_IEncoder">IEncoder</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_NoSerialize"><span class="titletype">attr</span> <span class="titlelight">Serialization.</span><span class="titlestrong">NoSerialize</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Do not serialize a struct or a field. </p>
<div class="addinfos"><b>Usage</b>: struct struct-var 
</div>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">attr</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_Serialization_NoSerialize">NoSerialize</a></span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_PodFinal"><span class="titletype">attr</span> <span class="titlelight">Serialization.</span><span class="titlestrong">PodFinal</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>The struct does not need versionning an can be serialized in place. </p>
<div class="addinfos"><b>Usage</b>: struct 
</div>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">attr</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_Serialization_PodFinal">PodFinal</a></span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon"><span class="titletype">struct</span> <span class="titlelight">Read.</span><span class="titlestrong">JSon</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>stream</td>
<td><a href="#Core_ByteStream">Core.ByteStream</a></td>
<td></td>
</tr>
<tr>
<td>line</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td>col</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td>propName</td>
<td><a href="#Core_String">Core.String</a></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Serialization_Read_JSon_beginElement">beginElement</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_beginRoot">beginRoot</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_beginSection">beginSection</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_beginSequence">beginSequence</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_beginStruct">beginStruct</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_beginValue">beginValue</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_endElement">endElement</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_endRoot">endRoot</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_endSection">endSection</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_endSequence">endSequence</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_endStruct">endStruct</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_endValue">endValue</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_getVersion">getVersion</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_readNative">readNative</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_startRead">startRead</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_toNextSequenceElement">toNextSequenceElement</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_zapBlanks">zapBlanks</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon_beginElement"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">beginElement</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L103" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginElement</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, val: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon_beginRoot"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">beginRoot</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L60" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginRoot</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon_beginSection"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">beginSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L76" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginSection</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, _kind: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Serialization</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Serialization_SectionKind">SectionKind</a></span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon_beginSequence"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">beginSequence</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginSequence</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, _typeElem: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, _data: *</span><span class="SyntaxType">u8</span><span class="SyntaxCode">, _countElem: *</span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon_beginStruct"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">beginStruct</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L92" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginStruct</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, _structType: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, _structData: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon_beginValue"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">beginValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L138" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginValue</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon_endElement"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">endElement</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L133" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endElement</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon_endRoot"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">endRoot</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L68" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endRoot</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon_endSection"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">endSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L84" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endSection</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon_endSequence"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">endSequence</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L45" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endSequence</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon_endStruct"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">endStruct</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L98" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endStruct</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon_endValue"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">endValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L143" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endValue</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon_getVersion"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">getVersion</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L152" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getVersion</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon_readNative"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">readNative</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L161" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">NT</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">readNative</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxConstant">NT</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon_startRead"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">startRead</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">startRead</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, input: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon_toNextSequenceElement"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">toNextSequenceElement</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L53" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toNextSequenceElement</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, _countElem: *</span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_JSon_zapBlanks"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">zapBlanks</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">zapBlanks</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBin"><span class="titletype">struct</span> <span class="titlelight">Read.</span><span class="titlestrong">TagBin</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Binary serializer with forward/backward compatibility. </p>
<table class="enumeration">
<tr>
<td>stream</td>
<td><a href="#Core_ByteStream">Core.ByteStream</a></td>
<td></td>
</tr>
<tr>
<td>options</td>
<td><a href="#Core_Serialization_Read_TagBinOptions">Core.Serialization.Read.TagBinOptions</a></td>
<td></td>
</tr>
<tr>
<td>freeSections</td>
<td>Core.ArrayPtr'(Core.Serialization.Read.TagBinSection)</td>
<td></td>
</tr>
<tr>
<td>sections</td>
<td>Core.ArrayPtr'(Core.Serialization.Read.TagBinSection)</td>
<td></td>
</tr>
<tr>
<td>convertNextNative</td>
<td>const *Swag.TypeInfoNative</td>
<td></td>
</tr>
<tr>
<td>convertValToArray</td>
<td>bool</td>
<td></td>
</tr>
<tr>
<td>convertArrayToVal</td>
<td>bool</td>
<td></td>
</tr>
</table>
<p>    Changes that are supported from V to V+1 are : </p>
<ul>
<li>Add a new field. The new field will stay at the default value.</li>
<li>Remove a field. It will just be ignored.</li>
<li>Reorder of fields, as long as their name/type are the same.</li>
<li>Rename a field with <code class="incode">Serialization.Alias</code>.</li>
</ul>
<p>    Supported type changes are : </p>
<ul>
<li>Change the size of a static array.</li>
<li>Convert a static array to a dynamic array, and vice versa.</li>
<li>Conversion from integer/float/rune/bool to integer/float/rune/bool.</li>
<li>Conversion from single value to array/Core.Array, and vice versa.</li>
</ul>
<p>    Supported attributes are : </p>
<ul>
<li><code class="incode">Serialisation.Version</code>. If version is specified, then loading will not have versioning if versions are the same</li>
<li><code class="incode">Serialization.Alias</code>. To rename a field. Multiple aliases are supported.</li>
<li><code class="incode">Serialization.Final</code>. The struct will be loaded/saved without versioning (faster and lower serialization size)</li>
<li><code class="incode">Serialization.PodFinal</code>. The struct will be loaded/saved in place without versioning</li>
</ul>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Serialization_Read_TagBin_beginElement">beginElement</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_beginRoot">beginRoot</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_beginSection">beginSection</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_beginSequence">beginSequence</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_beginStruct">beginStruct</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_beginValue">beginValue</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_endElement">endElement</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_endRoot">endRoot</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_endSection">endSection</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_endSequence">endSequence</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_endStruct">endStruct</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_endValue">endValue</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_getVersion">getVersion</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_readNative">readNative</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_startRead">startRead</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_toNextSequenceElement">toNextSequenceElement</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBin_beginElement"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">beginElement</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L328" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginElement</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, val: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBin_beginRoot"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">beginRoot</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L217" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginRoot</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBin_beginSection"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">beginSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L229" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginSection</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, kind: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Serialization</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Serialization_SectionKind">SectionKind</a></span><span class="SyntaxCode">, skipFat = </span><span class="SyntaxKeyword">false</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBin_beginSequence"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">beginSequence</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L418" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginSequence</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, typeElem: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, data: *</span><span class="SyntaxType">u8</span><span class="SyntaxCode">, countElem: *</span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBin_beginStruct"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">beginStruct</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L285" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginStruct</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, structType: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, _structData: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBin_beginValue"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">beginValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L409" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginValue</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBin_endElement"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">endElement</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L403" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endElement</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBin_endRoot"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">endRoot</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L225" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endRoot</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBin_endSection"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">endSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L272" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endSection</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBin_endSequence"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">endSequence</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L482" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endSequence</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBin_endStruct"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">endStruct</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L323" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endStruct</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBin_endValue"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">endValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L414" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endValue</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBin_getVersion"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">getVersion</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L495" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getVersion</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBin_readNative"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">readNative</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L506" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">NT</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">readNative</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxConstant">NT</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBin_startRead"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">startRead</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L212" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">startRead</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, input: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBin_toNextSequenceElement"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">toNextSequenceElement</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L487" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toNextSequenceElement</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, countElem: *</span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBinOptions"><span class="titletype">struct</span> <span class="titlelight">Read.</span><span class="titlestrong">TagBinOptions</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L47" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>tryForward</td>
<td>bool</td>
<td>Accept to try to read a newest version, otherwise error. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Read_TagBinSection"><span class="titletype">struct</span> <span class="titlelight">Read.</span><span class="titlestrong">TagBinSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L38" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>mapSeek</td>
<td>Core.HashTable'(u32, u64)</td>
<td></td>
</tr>
<tr>
<td>afterFatSeek</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td>version</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td>kind</td>
<td><a href="#Core_Serialization_SectionKind">Core.Serialization.SectionKind</a></td>
<td></td>
</tr>
<tr>
<td>skipFat</td>
<td>bool</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_SectionKind"><span class="titletype">enum</span> <span class="titlelight">Serialization.</span><span class="titlestrong">SectionKind</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Raw</td>
<td></td>
</tr>
<tr>
<td>Unordered</td>
<td></td>
</tr>
<tr>
<td>Ordered</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Serializer"><span class="titletype">struct</span> <span class="titlelight">Serialization.</span><span class="titlestrong">Serializer</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>encode</td>
<td><a href="#Core_Serialization_IEncoder">Core.Serialization.IEncoder</a></td>
<td></td>
</tr>
<tr>
<td>decode</td>
<td><a href="#Core_Serialization_IDecoder">Core.Serialization.IDecoder</a></td>
<td></td>
</tr>
<tr>
<td>isWrite</td>
<td>bool</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Serialization_Serializer_beginSection">beginSection</a></td>
<td>Start a new section. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Serializer_end">end</a></td>
<td>End encoding/decoding. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Serializer_endSection">endSection</a></td>
<td>End the previous section. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Serializer_isReading">isReading</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Serializer_isWriting">isWriting</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Serializer_serialize">serialize(self, string, *MT)</a></td>
<td>Serialize one value. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Serializer_serialize">serialize(self, string, u32, *MT)</a></td>
<td>Serialize one value. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Serializer_startRead">startRead</a></td>
<td>Start decoding. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Serializer_startWrite">startWrite</a></td>
<td>Start encoding. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Serializer_beginSection"><span class="titletype">func</span> <span class="titlelight">Serializer.</span><span class="titlestrong">beginSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L74" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Start a new section. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginSection</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, kind = </span><span class="SyntaxConstant"><a href="#Core_Serialization_SectionKind">SectionKind</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Unordered</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Serializer_end"><span class="titletype">func</span> <span class="titlelight">Serializer.</span><span class="titlestrong">end</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L65" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>End encoding/decoding. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">end</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Serializer_endSection"><span class="titletype">func</span> <span class="titlelight">Serializer.</span><span class="titlestrong">endSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L83" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>End the previous section. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endSection</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Serializer_isReading"><span class="titletype">func</span> <span class="titlelight">Serializer.</span><span class="titlestrong">isReading</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L46" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isReading</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Serializer_isWriting"><span class="titletype">func</span> <span class="titlelight">Serializer.</span><span class="titlestrong">isWriting</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L44" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isWriting</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Serializer_serialize"><span class="titletype">func</span> <span class="titlelight">Serializer.</span><span class="titlestrong">serialize</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L165" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Serialize one value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">MT</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">serialize</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, name: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, res: *</span><span class="SyntaxConstant">MT</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>Serialize one value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">MT</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">serialize</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, name: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, crc32: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, res: *</span><span class="SyntaxConstant">MT</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Serializer_startRead"><span class="titletype">func</span> <span class="titlelight">Serializer.</span><span class="titlestrong">startRead</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L57" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Start decoding. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">startRead</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, decoder: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Serialization</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Serialization_IDecoder">IDecoder</a></span><span class="SyntaxCode">, input: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Serializer_startWrite"><span class="titletype">func</span> <span class="titlelight">Serializer.</span><span class="titlestrong">startWrite</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L49" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Start encoding. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">startWrite</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, encoder: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Serialization</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Serialization_IEncoder">IEncoder</a></span><span class="SyntaxCode">, output: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Version"><span class="titletype">attr</span> <span class="titlelight">Serialization.</span><span class="titlestrong">Version</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the struct version number. </p>
<div class="addinfos"><b>Usage</b>: struct 
</div>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">attr</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_Serialization_Version">Version</a></span><span class="SyntaxCode">(v: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_JSon"><span class="titletype">struct</span> <span class="titlelight">Write.</span><span class="titlestrong">JSon</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>options</td>
<td><a href="#Core_Serialization_Write_JSonOptions">Core.Serialization.Write.JSonOptions</a></td>
<td></td>
</tr>
<tr>
<td>output</td>
<td>*Core.ConcatBuffer</td>
<td></td>
</tr>
<tr>
<td>indent</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td>fmtInt</td>
<td><a href="#Core_StrConv_ConvertFormatInt">Core.StrConv.ConvertFormatInt</a></td>
<td></td>
</tr>
<tr>
<td>fmtFloat</td>
<td><a href="#Core_StrConv_ConvertFormatFloat">Core.StrConv.ConvertFormatFloat</a></td>
<td></td>
</tr>
<tr>
<td>lastSeekValue</td>
<td><a href="#Core_ConcatBufferSeek">Core.ConcatBufferSeek</a></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Serialization_Write_JSon_beginElement">beginElement</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_beginRoot">beginRoot</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_beginSection">beginSection</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_beginSequence">beginSequence</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_beginStruct">beginStruct</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_beginValue">beginValue</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_endElement">endElement</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_endRoot">endRoot</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_endSection">endSection</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_endSequence">endSequence</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_endStruct">endStruct</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_endValue">endValue</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_startWrite">startWrite</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_writeIndent">writeIndent</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_writeNative">writeNative</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_JSon_beginElement"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">beginElement</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L112" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginElement</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, val: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_JSon_beginRoot"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">beginRoot</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginRoot</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_JSon_beginSection"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">beginSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L75" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginSection</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, _kind: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Serialization</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Serialization_SectionKind">SectionKind</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_JSon_beginSequence"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">beginSequence</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L47" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginSequence</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, _typeElem: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, _data: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, _countElem: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_JSon_beginStruct"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">beginStruct</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L101" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginStruct</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, _structType: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, _structData: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_JSon_beginValue"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">beginValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L127" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginValue</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_JSon_endElement"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">endElement</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L122" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endElement</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_JSon_endRoot"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">endRoot</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endRoot</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_JSon_endSection"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">endSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L87" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endSection</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_JSon_endSequence"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">endSequence</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L61" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endSequence</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_JSon_endStruct"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">endStruct</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L107" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endStruct</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_JSon_endValue"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">endValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L131" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endValue</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_JSon_startWrite"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">startWrite</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">startWrite</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, buf: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_JSon_writeIndent"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">writeIndent</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">writeIndent</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_JSon_writeNative"><span class="titletype">func</span> <span class="titlelight">JSon.</span><span class="titlestrong">writeNative</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L144" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">NT</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">writeNative</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxConstant">NT</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_JSonOptions"><span class="titletype">struct</span> <span class="titlelight">Write.</span><span class="titlestrong">JSonOptions</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>indentLevel</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td>saveBlanks</td>
<td>bool</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_TagBin"><span class="titletype">struct</span> <span class="titlelight">Write.</span><span class="titlestrong">TagBin</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>output</td>
<td>*Core.ConcatBuffer</td>
<td></td>
</tr>
<tr>
<td>freeSections</td>
<td>Core.ArrayPtr'(Core.Serialization.Write.TagBinSection)</td>
<td></td>
</tr>
<tr>
<td>sections</td>
<td>Core.ArrayPtr'(Core.Serialization.Write.TagBinSection)</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Serialization_Write_TagBin_beginElement">beginElement</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_beginRoot">beginRoot</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_beginSection">beginSection</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_beginSequence">beginSequence</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_beginStruct">beginStruct</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_beginValue">beginValue</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_endElement">endElement</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_endRoot">endRoot</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_endSection">endSection</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_endSequence">endSequence</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_endStruct">endStruct</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_endValue">endValue</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_startWrite">startWrite</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_writeNative">writeNative</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_TagBin_beginElement"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">beginElement</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L135" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginElement</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, val: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeValue</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_TagBin_beginRoot"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">beginRoot</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L56" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginRoot</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_TagBin_beginSection"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">beginSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L66" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginSection</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, kind: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Serialization</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Serialization_SectionKind">SectionKind</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_TagBin_beginSequence"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">beginSequence</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L172" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginSequence</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, typeElem: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, data: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, countElem: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_TagBin_beginStruct"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">beginStruct</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L106" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginStruct</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, structType: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, _structData: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_TagBin_beginValue"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">beginValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L163" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">beginValue</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_TagBin_endElement"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">endElement</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L158" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endElement</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_TagBin_endRoot"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">endRoot</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L61" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endRoot</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_TagBin_endSection"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">endSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L79" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endSection</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_TagBin_endSequence"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">endSequence</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L211" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endSequence</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_TagBin_endStruct"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">endStruct</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L130" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endStruct</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_TagBin_endValue"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">endValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L168" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endValue</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_TagBin_startWrite"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">startWrite</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L51" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">startWrite</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, buf: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_TagBin_writeNative"><span class="titletype">func</span> <span class="titlelight">TagBin.</span><span class="titlestrong">writeNative</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L219" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">NT</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">writeNative</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxConstant">NT</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_TagBinSection"><span class="titletype">struct</span> <span class="titlelight">Write.</span><span class="titlestrong">TagBinSection</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>startSeek</td>
<td><a href="#Core_ConcatBufferSeek">Core.ConcatBufferSeek</a></td>
<td></td>
</tr>
<tr>
<td>mapSeek</td>
<td>Core.HashTable'(u32, Core.ConcatBufferSeek)</td>
<td></td>
</tr>
<tr>
<td>kind</td>
<td><a href="#Core_Serialization_SectionKind">Core.Serialization.SectionKind</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_Write_TagBinSignatures"><span class="titletype">enum</span> <span class="titlelight">Write.</span><span class="titlestrong">TagBinSignatures</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Root</td>
<td></td>
</tr>
<tr>
<td>Fat</td>
<td></td>
</tr>
<tr>
<td>Sequence</td>
<td></td>
</tr>
<tr>
<td>Version</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Serialization_isPodFinal"><span class="titletype">func</span> <span class="titlelight">Serialization.</span><span class="titlestrong">isPodFinal</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\helpers.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determin if a type can be serialized by a simple copy. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isPodFinal</span><span class="SyntaxCode">(type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">)-&gt;{raw: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">, sizeof: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">}</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Slice"><span class="titletype">namespace</span> <span class="titlelight">Core.</span><span class="titlestrong">Slice</span></span>
</td>
</tr>
</table>
</p>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Slice_contains">contains</a></td>
<td>Returns true if the given slice contains the <code class="incode">value</code>. </td>
</tr>
<tr>
<td><a href="#Core_Slice_equals">equals</a></td>
<td>Returns true if two slices are equal. </td>
</tr>
<tr>
<td><a href="#Core_Slice_findLinear">findLinear</a></td>
<td>Find <code class="incode">value</code> in a slice by performing a linear search. </td>
</tr>
<tr>
<td><a href="#Core_Slice_findSorted">findSorted</a></td>
<td>Find <code class="incode">value</code> in a slice by performing a binary search. </td>
</tr>
<tr>
<td><a href="#Core_Slice_insertionSort">insertionSort</a></td>
<td>Insertion sort algorithm (slow). </td>
</tr>
<tr>
<td><a href="#Core_Slice_isSorted">isSorted(const [..] T)</a></td>
<td>Returns true if the slice is sorted. </td>
</tr>
<tr>
<td><a href="#Core_Slice_isSorted">isSorted(const [..] T, func(*void, T, T)->s32)</a></td>
<td>Returns true if the slice is sorted. </td>
</tr>
<tr>
<td><a href="#Core_Slice_modifyInPlace">modifyInPlace</a></td>
<td>Transform the content of a slice with a given lambda. </td>
</tr>
<tr>
<td><a href="#Core_Slice_quickSort">quickSort</a></td>
<td>Quick sort algorithm. </td>
</tr>
<tr>
<td><a href="#Core_Slice_reverse">reverse</a></td>
<td>Reverse the content of a slice. </td>
</tr>
<tr>
<td><a href="#Core_Slice_sort">sort([..] T)</a></td>
<td>Sort the slice, by picking the right algorithm depending on the type and the  number of elements. </td>
</tr>
<tr>
<td><a href="#Core_Slice_sort">sort([..] T, func(*void, T, T)->s32)</a></td>
<td>Sort the slice, by picking the right algorithm depending on the type and the  number of elements. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Slice_contains"><span class="titletype">func</span> <span class="titlelight">Slice.</span><span class="titlestrong">contains</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\find.swg#L56" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given slice contains the <code class="incode">value</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">contains</span><span class="SyntaxCode">(values: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, value: </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Slice_equals"><span class="titletype">func</span> <span class="titlelight">Slice.</span><span class="titlestrong">equals</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\find.swg#L69" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if two slices are equal. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">equals</span><span class="SyntaxCode">(dst: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Slice_findLinear"><span class="titletype">func</span> <span class="titlelight">Slice.</span><span class="titlestrong">findLinear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\find.swg#L38" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Find <code class="incode">value</code> in a slice by performing a linear search. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">findLinear</span><span class="SyntaxCode">(values: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, value: </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)-&gt;{index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, success: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">}</code>
</div>
<p> O^n, but slice does not have to be sorted </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Slice_findSorted"><span class="titletype">func</span> <span class="titlelight">Slice.</span><span class="titlestrong">findSorted</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\find.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Find <code class="incode">value</code> in a slice by performing a binary search. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">findSorted</span><span class="SyntaxCode">(values: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, value: </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)-&gt;{index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, success: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">}</code>
</div>
<p> The slice must be sorted in ascending order </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Slice_insertionSort"><span class="titletype">func</span> <span class="titlelight">Slice.</span><span class="titlestrong">insertionSort</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\sort.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Insertion sort algorithm (slow). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">insertionSort</span><span class="SyntaxCode">(values: [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, cb: </span><span class="SyntaxKeyword">closure</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Slice_isSorted"><span class="titletype">func</span> <span class="titlelight">Slice.</span><span class="titlestrong">isSorted</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\sort.swg#L105" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the slice is sorted. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">isSorted</span><span class="SyntaxCode">(values: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>Returns true if the slice is sorted. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">isSorted</span><span class="SyntaxCode">(values: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, cb: </span><span class="SyntaxKeyword">closure</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Slice_modifyInPlace"><span class="titletype">func</span> <span class="titlelight">Slice.</span><span class="titlestrong">modifyInPlace</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\treat.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform the content of a slice with a given lambda. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">modifyInPlace</span><span class="SyntaxCode">(values: [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, cb: </span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(*</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">))</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Slice_quickSort"><span class="titletype">func</span> <span class="titlelight">Slice.</span><span class="titlestrong">quickSort</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\sort.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Quick sort algorithm. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">quickSort</span><span class="SyntaxCode">(values: [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, cb: </span><span class="SyntaxKeyword">closure</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Slice_reverse"><span class="titletype">func</span> <span class="titlelight">Slice.</span><span class="titlestrong">reverse</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\treat.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reverse the content of a slice. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">reverse</span><span class="SyntaxCode">(values: [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Slice_sort"><span class="titletype">func</span> <span class="titlelight">Slice.</span><span class="titlestrong">sort</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\sort.swg#L88" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sort the slice, by picking the right algorithm depending on the type and the  number of elements. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">sort</span><span class="SyntaxCode">(values: [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>Sort the slice, by picking the right algorithm depending on the type and the  number of elements. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">sort</span><span class="SyntaxCode">(values: [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, cb: </span><span class="SyntaxKeyword">closure</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray"><span class="titletype">struct</span> <span class="titlelight">Core.</span><span class="titlestrong">StaticArray</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">struct</span><span class="SyntaxCode"> </span><span class="SyntaxConstant"><a href="#Core_StaticArray">StaticArray</a></span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">N</span><span class="SyntaxCode">: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<table class="enumeration">
<tr>
<td>buffer</td>
<td>[?] T</td>
<td></td>
</tr>
<tr>
<td>count</td>
<td>u64</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_StaticArray_add">add(self, T)</a></td>
<td>Add a copy of one element at the end of the array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_add">add(self, const [..] T)</a></td>
<td>Append a slice to the end of this instance. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_add">add(self, moveref T)</a></td>
<td>Move one element at the end of the array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_addOnce">addOnce</a></td>
<td>Add a copy of one element at the end of the array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_back">back</a></td>
<td>Returns a copy of the last element. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_backPtr">backPtr</a></td>
<td>Returns the address of the last element. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_clear">clear</a></td>
<td>Set the number of elements to 0. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_contains">contains</a></td>
<td>Returns true if the given <code class="incode">value</code> is in the array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_emplaceAddress">emplaceAddress</a></td>
<td>Reserve room at the end of the array for <code class="incode">num</code> elements, but does not  initialize them. Returns the address of the first element. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_emplaceAt">emplaceAt</a></td>
<td>Move some values at the given index. If <code class="incode">index</code> is equal to <code class="incode">count</code>, then  the values are moved at the end of the array.  Order is preserved. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_emplaceInitAddress">emplaceInitAddress</a></td>
<td>Reserve room at the end of the array for <code class="incode">num</code> elements. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_free">free</a></td>
<td>Free the array content. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_front">front</a></td>
<td>Returns a copy of the first element. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_frontPtr">frontPtr</a></td>
<td>Returns the address of the first element. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_insertAt">insertAt(self, u64, T)</a></td>
<td>Insert a value at the given index. If <code class="incode">index</code> is equal to <code class="incode">count</code>, then  the value is added at the end of the array.  Order is preserved. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_insertAt">insertAt(self, u64, const [..] T)</a></td>
<td>Insert some values at the given index. If <code class="incode">index</code> is equal to <code class="incode">count</code>, then  the values are added at the end of the array.  Order is preserved. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_insertAt">insertAt(self, u64, moveref T)</a></td>
<td>Move a value at the given index. If <code class="incode">index</code> is equal to <code class="incode">count</code>, then  the value is added at the end of the array.  Order is preserved. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_isEmpty">isEmpty</a></td>
<td>Returns true if the array is empty. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_popBack">popBack</a></td>
<td>Returns a copy of the last element, and remove it from the array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_remove">remove(self, V)</a></td>
<td>Remove the given <code class="incode">value</code>  If not found, does nothing. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_remove">remove(self, u64, u64)</a></td>
<td>Remove <code class="incode">num</code> elements starting at <code class="incode">index</code>. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_removeAt">removeAt</a></td>
<td>Remove an element at <code class="incode">index</code> by replacing it with the last element. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_removeAtOrdered">removeAtOrdered</a></td>
<td>Remove <code class="incode">numValues</code> elements at <code class="incode">index</code> by shifting all others. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_removeBack">removeBack</a></td>
<td>Remove the last element. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_removeOrdered">removeOrdered</a></td>
<td>Remove the given <code class="incode">value</code>  If not found, does nothing. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_resize">resize</a></td>
<td>Change the number of valid elements in the array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_sort">sort(self)</a></td>
<td>Sort array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_sort">sort(self, func(*void, T, T)->s32)</a></td>
<td>Sort array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_sortReverse">sortReverse</a></td>
<td>Sort array in reverse order (from biggest to lowest value). </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_toSlice">toSlice</a></td>
<td>Returns a slice. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_StaticArray_opAffect">opAffect</a></td>
<td>Initializes an Array that contains values copied from the specified array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opCast">opCast(self)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opCast">opCast(self)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opCount">opCount</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opData">opData</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opDrop">opDrop</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opIndex">opIndex(self, u64)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opIndex">opIndex(self, u64)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opIndexAffect">opIndexAffect</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opIndexAssign">opIndexAssign</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opSlice">opSlice</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opVisit">opVisit</a></td>
<td>Vist every elements of the array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opVisitBack">opVisitBack</a></td>
<td>Vist every elements of the array from end to start. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_add"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">add</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L229" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a copy of one element at the end of the array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>Append a slice to the end of this instance. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, values: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>Move one element at the end of the array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxKeyword">moveref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_addOnce"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">addOnce</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L218" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a copy of one element at the end of the array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">addOnce</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_back"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">back</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L540" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a copy of the last element. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">back</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_backPtr"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">backPtr</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L548" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the address of the last element. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">backPtr</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;*</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_clear"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L206" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the number of elements to 0. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_contains"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">contains</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L499" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given <code class="incode">value</code> is in the array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">V</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">contains</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_emplaceAddress"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">emplaceAddress</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L247" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve room at the end of the array for <code class="incode">num</code> elements, but does not  initialize them. Returns the address of the first element. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">emplaceAddress</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, num: </span><span class="SyntaxType">u32</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">1</span><span class="SyntaxCode">)-&gt;^</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_emplaceAt"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">emplaceAt</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L354" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Move some values at the given index. If <code class="incode">index</code> is equal to <code class="incode">count</code>, then  the values are moved at the end of the array.  Order is preserved. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">emplaceAt</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, values: [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_emplaceInitAddress"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">emplaceInitAddress</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L256" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve room at the end of the array for <code class="incode">num</code> elements. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">emplaceInitAddress</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, num: </span><span class="SyntaxType">u32</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">1</span><span class="SyntaxCode">)-&gt;^</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p> Returns the address of the first element </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_free"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">free</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L162" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Free the array content. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">free</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_front"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">front</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L525" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a copy of the first element. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">front</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_frontPtr"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">frontPtr</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L533" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the address of the first element. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">frontPtr</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;*</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_insertAt"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">insertAt</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L268" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Insert a value at the given index. If <code class="incode">index</code> is equal to <code class="incode">count</code>, then  the value is added at the end of the array.  Order is preserved. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">insertAt</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>Insert some values at the given index. If <code class="incode">index</code> is equal to <code class="incode">count</code>, then  the values are added at the end of the array.  Order is preserved. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">insertAt</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, values: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>Move a value at the given index. If <code class="incode">index</code> is equal to <code class="incode">count</code>, then  the value is added at the end of the array.  Order is preserved. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">insertAt</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, value: </span><span class="SyntaxKeyword">moveref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_isEmpty"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">isEmpty</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L178" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the array is empty. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isEmpty</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_opAffect"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">opAffect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L82" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initializes an Array that contains values copied from the specified array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opAffect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, arr: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_opCast"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">opCast</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCast</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;[..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCast</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_opCount"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">opCount</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCount</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_opData"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">opData</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opData</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_opDrop"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">opDrop</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L24" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opDrop</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_opIndex"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">opIndex</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L59" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opIndex</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opIndex</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxKeyword">ref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_opIndexAffect"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">opIndexAffect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L67" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opIndexAffect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_opIndexAssign"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">opIndexAssign</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L75" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opIndexAssign</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_opSlice"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">opSlice</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L42" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opSlice</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, lower: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, upper: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;[..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_opVisit"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">opVisit</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L107" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Vist every elements of the array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(ptr: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opVisit</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_opVisitBack"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">opVisitBack</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L135" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Vist every elements of the array from end to start. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(ptr: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opVisitBack</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_popBack"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">popBack</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L555" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a copy of the last element, and remove it from the array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">popBack</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_remove"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">remove</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L482" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove the given <code class="incode">value</code>  If not found, does nothing. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">V</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">remove</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)</code>
</div>
<p>Remove <code class="incode">num</code> elements starting at <code class="incode">index</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">remove</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, num: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_removeAt"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">removeAt</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L437" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove an element at <code class="incode">index</code> by replacing it with the last element. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">removeAt</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p> Order is not preserved </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_removeAtOrdered"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">removeAtOrdered</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L449" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove <code class="incode">numValues</code> elements at <code class="incode">index</code> by shifting all others. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">removeAtOrdered</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, numValues: </span><span class="SyntaxType">u64</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">1</span><span class="SyntaxCode">)</code>
</div>
<p> Order is preserved </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_removeBack"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">removeBack</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L565" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove the last element. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">removeBack</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_removeOrdered"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">removeOrdered</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L491" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove the given <code class="incode">value</code>  If not found, does nothing. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">V</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">removeOrdered</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxConstant">V</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_resize"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">resize</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L188" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Change the number of valid elements in the array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">resize</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, newCount: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_sort"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">sort</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L506" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sort array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sort</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>Sort array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sort</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, cb: </span><span class="SyntaxKeyword">closure</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_sortReverse"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">sortReverse</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L512" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sort array in reverse order (from biggest to lowest value). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sortReverse</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StaticArray_toSlice"><span class="titletype">func</span> <span class="titlelight">StaticArray.</span><span class="titlestrong">toSlice</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L182" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a slice. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toSlice</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;[..] </span><span class="SyntaxConstant">T</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_Atod_parse"><span class="titletype">func</span> <span class="titlelight">Atod.</span><span class="titlestrong">parse</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\atod.swg#L874" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parse</span><span class="SyntaxCode">(s: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;{value: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, ovf: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">} </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_ConvertFormat"><span class="titletype">struct</span> <span class="titlelight">StrConv.</span><span class="titlestrong">ConvertFormat</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>value</td>
<td>any</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_ConvertFormatFloat"><span class="titletype">struct</span> <span class="titlelight">StrConv.</span><span class="titlestrong">ConvertFormatFloat</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Format structure to convert a float to a string. </p>
<table class="enumeration">
<tr>
<td><b>using</b> val</td>
<td><a href="#Core_StrConv_ConvertFormat">Core.StrConv.ConvertFormat</a></td>
<td></td>
</tr>
<tr>
<td>precision</td>
<td>s8</td>
<td>-1 is for 'most possible precision'. </td>
</tr>
<tr>
<td>fmt</td>
<td>u8</td>
<td></td>
</tr>
<tr>
<td>forceSign</td>
<td>bool</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_StrConv_ConvertFormatFloat_setFormat">setFormat</a></td>
<td>Set some format options with a given user string. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_ConvertFormatFloat_setFormat"><span class="titletype">func</span> <span class="titlelight">ConvertFormatFloat.</span><span class="titlestrong">setFormat</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set some format options with a given user string. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setFormat</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, strFormat: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p> Format is: </p>
<p style="white-space: break-spaces"> `[+][fmt][precision]`

 `[+]`
      force the positive sign if number is positive
 `[fmt]` output format:
      `e (-d.dddde±dd, a decimal exponent)`
      `E (-d.ddddE±dd, a decimal exponent)`
      `f (-ddd.dddd, no exponent)`
      `g ('e' for large exponents, 'f' otherwise)`
      `G ('E' for large exponents, 'f' otherwise)`
 `[precision]`
      integer, precision of the fractional part</p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_ConvertFormatInt"><span class="titletype">struct</span> <span class="titlelight">StrConv.</span><span class="titlestrong">ConvertFormatInt</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L79" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Format structure to convert an integer to a string. </p>
<table class="enumeration">
<tr>
<td><b>using</b> val</td>
<td><a href="#Core_StrConv_ConvertFormat">Core.StrConv.ConvertFormat</a></td>
<td></td>
</tr>
<tr>
<td>base</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td>padding</td>
<td>u8</td>
<td></td>
</tr>
<tr>
<td>width</td>
<td>u8</td>
<td></td>
</tr>
<tr>
<td>forceSign</td>
<td>bool</td>
<td></td>
</tr>
</table>
<p> If <code class="incode">signed</code> is <code class="incode">true</code>, the value to convert must be stored in <code class="incode">signedValue</code>, otherwise it must  be stored in <code class="incode">unsignedValue</code>. </p>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_StrConv_ConvertFormatInt_setFormat">setFormat</a></td>
<td>Set some format options with a given user string. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_ConvertFormatInt_setFormat"><span class="titletype">func</span> <span class="titlelight">ConvertFormatInt.</span><span class="titlestrong">setFormat</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L104" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set some format options with a given user string. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setFormat</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, strFormat: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p> Format is: </p>
<p style="white-space: break-spaces"> `[+][B|D|X][padding][width]`

 `[+]`
      force sign for positive numbers
 `[B|D|X]`
      binary, decimal, hexadecimal
 `[padding]`
      padding character, in ascii, mandatory before the next field
 `[width]`
      width of the output, in characters</p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_Dtoa_parse"><span class="titletype">func</span> <span class="titlelight">Dtoa.</span><span class="titlestrong">parse</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\dtoa.swg#L352" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>The format <code class="incode">fmt</code> is one of  <code class="incode">e</code> (-d.dddde±dd, a decimal exponent)  <code class="incode">E</code> (-d.ddddE±dd, a decimal exponent)  <code class="incode">f</code> (-ddd.dddd, no exponent)  <code class="incode">g</code> (<code class="incode">e</code> for large exponents, <code class="incode">f</code> otherwise)  <code class="incode">G</code> (<code class="incode">E</code> for large exponents, <code class="incode">f</code> otherwise)  Negative precision means "only as much as needed to be exact.". </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parse</span><span class="SyntaxCode">(buf: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">, val: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, fmt: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, precision: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">, forceSign: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_IConvert"><span class="titletype">interface</span> <span class="titlelight">StrConv.</span><span class="titlestrong">IConvert</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\iconvert.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>convert</td>
<td>func(*Core.StrConv.IConvert, *Core.ConcatBuffer, const *Core.StrConv.ConvertFormat, string)</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_IPokeValue"><span class="titletype">interface</span> <span class="titlelight">StrConv.</span><span class="titlestrong">IPokeValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\ipokevalue.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>poke</td>
<td>func(*Core.StrConv.IPokeValue, string)->string throw</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_StringBuilder"><span class="titletype">struct</span> <span class="titlelight">StrConv.</span><span class="titlestrong">StringBuilder</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>buffer</td>
<td><a href="#Core_ConcatBuffer">Core.ConcatBuffer</a></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_StrConv_StringBuilder_appendAny">appendAny</a></td>
<td>Append a value. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_appendEOL">appendEOL</a></td>
<td>Append a end of line. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_appendFormat">appendFormat</a></td>
<td>Append a formatted string. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_appendRune">appendRune</a></td>
<td>Append a rune. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_appendString">appendString</a></td>
<td>Append a string. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_clear">clear</a></td>
<td>Clear the content of the builder. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_count">count</a></td>
<td>Returns the number of characters. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_moveToString">moveToString</a></td>
<td>Return the content as a string by eating the content of the string builder (if possible). </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_setBucketSize">setBucketSize</a></td>
<td>Set sizes of buckets of the string builder. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_toString">toString</a></td>
<td>Return the content as a string. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_zeroTerminated">zeroTerminated</a></td>
<td>Force a ending 0. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_StringBuilder_appendAny"><span class="titletype">func</span> <span class="titlelight">StringBuilder.</span><span class="titlestrong">appendAny</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L48" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append a value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">appendAny</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">any</span><span class="SyntaxCode">, strFormat: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_StringBuilder_appendEOL"><span class="titletype">func</span> <span class="titlelight">StringBuilder.</span><span class="titlestrong">appendEOL</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append a end of line. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">appendEOL</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_StringBuilder_appendFormat"><span class="titletype">func</span> <span class="titlelight">StringBuilder.</span><span class="titlestrong">appendFormat</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L54" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append a formatted string. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">appendFormat</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, fmt: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, values: ...)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_StringBuilder_appendRune"><span class="titletype">func</span> <span class="titlelight">StringBuilder.</span><span class="titlestrong">appendRune</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L42" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append a rune. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">appendRune</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_StringBuilder_appendString"><span class="titletype">func</span> <span class="titlelight">StringBuilder.</span><span class="titlestrong">appendString</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append a string. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">appendString</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_StringBuilder_clear"><span class="titletype">func</span> <span class="titlelight">StringBuilder.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Clear the content of the builder. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_StringBuilder_count"><span class="titletype">func</span> <span class="titlelight">StringBuilder.</span><span class="titlestrong">count</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the number of characters. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">count</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_StringBuilder_moveToString"><span class="titletype">func</span> <span class="titlelight">StringBuilder.</span><span class="titlestrong">moveToString</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L72" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Return the content as a string by eating the content of the string builder (if possible). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">moveToString</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_StringBuilder_setBucketSize"><span class="titletype">func</span> <span class="titlelight">StringBuilder.</span><span class="titlestrong">setBucketSize</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L24" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set sizes of buckets of the string builder. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setBucketSize</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, size: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_StringBuilder_toString"><span class="titletype">func</span> <span class="titlelight">StringBuilder.</span><span class="titlestrong">toString</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L66" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Return the content as a string. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toString</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_StringBuilder_zeroTerminated"><span class="titletype">func</span> <span class="titlelight">StringBuilder.</span><span class="titlestrong">zeroTerminated</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L60" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Force a ending 0. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">zeroTerminated</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_convert"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">convert</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L519" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Templated version. Convert a value of type <code class="incode">T</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">convert</span><span class="SyntaxCode">(buf: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, strFormat: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_convertAny"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">convertAny</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L152" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a value to an utf8 string, and append the result in a ConcatBuffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">convertAny</span><span class="SyntaxCode">(buf: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">, value: </span><span class="SyntaxType">any</span><span class="SyntaxCode">, strFormat: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_convertBool"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">convertBool</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L505" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a <code class="incode">bool</code> to a string, and put the result in a ConcatBuffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">convertBool</span><span class="SyntaxCode">(buf: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">, value: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_convertFloat"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">convertFloat</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L483" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a float to an utf8 string, and put the result in a ConcatBuffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">convertFloat</span><span class="SyntaxCode">(buf: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">, value: </span><span class="SyntaxType">any</span><span class="SyntaxCode">, strFormat: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>Convert a float to an utf8 string, and put the result in a ConcatBuffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">convertFloat</span><span class="SyntaxCode">(buf: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">, fmt: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">StrConv</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_StrConv_ConvertFormatFloat">ConvertFormatFloat</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_convertInt"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">convertInt</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L494" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an integer to an utf8 string, and put the result in a ConcatBuffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">convertInt</span><span class="SyntaxCode">(buf: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">, value: </span><span class="SyntaxType">any</span><span class="SyntaxCode">, strFormat: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>Convert an integer to an utf8 string, and put the result in a ConcatBuffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">convertInt</span><span class="SyntaxCode">(buf: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">, fmt: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">StrConv</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_StrConv_ConvertFormatInt">ConvertFormatInt</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_convertRune"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">convertRune</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L511" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a <code class="incode">rune</code> to a string, and put the result in a ConcatBuffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">convertRune</span><span class="SyntaxCode">(buf: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">, value: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_convertStruct"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">convertStruct</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L301" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a structure content to an utf8 string, and put the result in a ConcatBuffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">convertStruct</span><span class="SyntaxCode">(buf: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">, value: </span><span class="SyntaxType">any</span><span class="SyntaxCode">, strFormat: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_parseB64"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">parseB64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L57" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer in binary to an unsigned integer value  Returns the value and the number of bytes used to make the conversion  <code class="incode">ovf</code> will be true in case of overflow. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parseB64</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;{value: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, ovf: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">} </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_parseBool"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">parseBool</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L354" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer to a boolean  Returns the value and the number of bytes used to make the conversion. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parseBool</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;{value: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">} </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_parseF32"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">parseF32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L330" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer to a floating point value  Returns the value and the number of bytes used to make the conversion  <code class="incode">ovf</code> will be true in case of overflow. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parseF32</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;{value: </span><span class="SyntaxType">f32</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, ovf: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">} </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_parseF64"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">parseF64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L347" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parseF64</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;{value: </span><span class="SyntaxType">f64</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, ovf: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">} </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_parseIdentifier"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">parseIdentifier</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L383" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Parse an identifier name in the sens of swag (ascii). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parseIdentifier</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_parseRune"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">parseRune</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L374" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer to a simple rune. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parseRune</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;{value: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">} </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_parseS16"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">parseS16</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L216" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parseS16</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;{value: </span><span class="SyntaxType">s16</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, ovf: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">} </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_parseS32"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">parseS32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L233" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parseS32</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;{value: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, ovf: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">} </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_parseS64"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">parseS64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L250" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parseS64</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;{value: </span><span class="SyntaxType">s64</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, ovf: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">} </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_parseS8"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">parseS8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L199" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer to an signed integer value  Returns the value and the number of bytes used to make the conversion  <code class="incode">ovf</code> will be true in case of overflow. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parseS8</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;{value: </span><span class="SyntaxType">s8</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, ovf: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">} </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_parseString"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">parseString</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L400" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer to a Core.String  String in the buffer can be quoted (but the result will not be in that case). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parseString</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;{value: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">} </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_parseU16"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">parseU16</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L106" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parseU16</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;{value: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, ovf: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">} </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_parseU32"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">parseU32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L118" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parseU32</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;{value: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, ovf: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">} </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_parseU64"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">parseU64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L130" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parseU64</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;{value: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, ovf: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">} </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_parseU8"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">parseU8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L94" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer in decimal to an unsigned integer value  Returns the value and the number of bytes used to make the conversion  <code class="incode">ovf</code> will be true in case of overflow. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parseU8</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;{value: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, ovf: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">} </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_parseX64"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">parseX64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer in hexadecimal to an unsigned integer value  Returns the value and the number of bytes used to make the conversion  <code class="incode">ovf</code> will be true in case of overflow. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parseX64</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;{value: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, ovf: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">} </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_pokeValue"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">pokeValue</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\pokevalue.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>This function will parse <code class="incode">buf</code> and poke the corresponding value to <code class="incode">addr</code>  <code class="incode">addr</code> must point to an initialized memory location that can hold type <code class="incode">type</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">pokeValue</span><span class="SyntaxCode">(addr: *</span><span class="SyntaxType">void</span><span class="SyntaxCode">, type: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">TypeInfo</span><span class="SyntaxCode">, buf: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p> Accepted types are :  - s8,s16,s32,s64,s64,u8,u16,u32,u64,u64,rune,bool,f32,f64  - <code class="incode">Core.String</code>  literal strings are not supported as <code class="incode">buf</code> is supposed to be transient  - enum           with or without <code class="incode">Swag.EnumFlags</code> attribute </p>
<p> <code class="incode">buf</code> can contain multiple values separated with blanks if <code class="incode">type</code> is:  - a static array of the types above  - a dynamic <code class="incode">Core.Array</code> of the types above </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_toDisplaySize"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">toDisplaySize</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\to.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a size in a displayable format (with Kb, Mb and so on). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toDisplaySize</span><span class="SyntaxCode">(value: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_toF32"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">toF32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L525" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="incode">f32</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toF32</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f32</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_toF64"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">toF64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L534" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="incode">f64</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toF64</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_toNum"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">toNum</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L543" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an integer or float. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">toNum</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">T</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_toS16"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">toS16</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L462" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="incode">s16</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toS16</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s16</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_toS32"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">toS32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L471" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="incode">s32</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toS32</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_toS64"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">toS64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L480" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="incode">s64</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toS64</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s64</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_toS8"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">toS8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L453" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="incode">s8</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toS8</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s8</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_toU16"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">toU16</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L498" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="incode">u16</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toU16</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_toU32"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">toU32</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L507" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="incode">u32</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toU32</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_toU64"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">toU64</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L516" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="incode">u64</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toU64</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_StrConv_toU8"><span class="titletype">func</span> <span class="titlelight">StrConv.</span><span class="titlestrong">toU8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L489" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="incode">u8</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toU8</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String"><span class="titletype">struct</span> <span class="titlelight">Core.</span><span class="titlestrong">String</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>buffer</td>
<td>^u8</td>
<td></td>
</tr>
<tr>
<td>length</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td>capacity</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td>allocator</td>
<td><a href="swag.runtime.html#Swag_IAllocator">Swag.IAllocator</a></td>
<td></td>
</tr>
<tr>
<td>padding</td>
<td>[16] u8</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_String_append">append(self, rune)</a></td>
<td>Append a rune to the String. </td>
</tr>
<tr>
<td><a href="#Core_String_append">append(self, string)</a></td>
<td>Append a string to the String. </td>
</tr>
<tr>
<td><a href="#Core_String_append">append(self, u8)</a></td>
<td>Append a byte to the String. </td>
</tr>
<tr>
<td><a href="#Core_String_appendFormat">appendFormat</a></td>
<td>Append a formatted string. </td>
</tr>
<tr>
<td><a href="#Core_String_back">back</a></td>
<td>Get the last byte. </td>
</tr>
<tr>
<td><a href="#Core_String_clear">clear</a></td>
<td>Set the length of the String to 0. </td>
</tr>
<tr>
<td><a href="#Core_String_ensureNotNull">ensureNotNull</a></td>
<td>Transform a null string in an empty one. </td>
</tr>
<tr>
<td><a href="#Core_String_from">from</a></td>
<td>Convert a literal string to a String. </td>
</tr>
<tr>
<td><a href="#Core_String_grow">grow</a></td>
<td>Ensure the String is big enough to store a given amount of bytes. </td>
</tr>
<tr>
<td><a href="#Core_String_insert">insert</a></td>
<td>Insert a substring at the given position. </td>
</tr>
<tr>
<td><a href="#Core_String_isEmpty">isEmpty</a></td>
<td>Returns true if the String has zero length. </td>
</tr>
<tr>
<td><a href="#Core_String_isNull">isNull</a></td>
<td>Returns true if the String is null (undefined). </td>
</tr>
<tr>
<td><a href="#Core_String_isNullOrEmpty">isNullOrEmpty</a></td>
<td>Returns true if the String is null or empty. </td>
</tr>
<tr>
<td><a href="#Core_String_join">join</a></td>
<td>Join a list of strings to make a unique one. </td>
</tr>
<tr>
<td><a href="#Core_String_joinWith">joinWith</a></td>
<td>Join an list of strings to make a unique one, by using a given <code class="incode">separator</code>  between them. </td>
</tr>
<tr>
<td><a href="#Core_String_makeLower">makeLower</a></td>
<td>Convert the string inplace to lower case. </td>
</tr>
<tr>
<td><a href="#Core_String_makeUpper">makeUpper</a></td>
<td>Convert the string inplace to upper case. </td>
</tr>
<tr>
<td><a href="#Core_String_remove">remove</a></td>
<td>Remove some bytes at the given index. </td>
</tr>
<tr>
<td><a href="#Core_String_removeBack">removeBack</a></td>
<td>Remove some bytes at the end. </td>
</tr>
<tr>
<td><a href="#Core_String_replace">replace</a></td>
<td>Replace all occurences of <code class="incode">what</code> with <code class="incode">by</code>. </td>
</tr>
<tr>
<td><a href="#Core_String_reserve">reserve</a></td>
<td>Reserve room for at least <code class="incode">newCapacity</code> bytes. </td>
</tr>
<tr>
<td><a href="#Core_String_toCharArray">toCharArray</a></td>
<td>Convert string to a 32 bits character array. </td>
</tr>
<tr>
<td><a href="#Core_String_toLower">toLower(self, CharacterSet)</a></td>
<td>Returns a new String in lower case. </td>
</tr>
<tr>
<td><a href="#Core_String_toLower">toLower(string, CharacterSet)</a></td>
<td>Returns a new String in lower case. </td>
</tr>
<tr>
<td><a href="#Core_String_toSlice">toSlice</a></td>
<td>Returns a slice type. </td>
</tr>
<tr>
<td><a href="#Core_String_toString">toString</a></td>
<td>Returns a string type. </td>
</tr>
<tr>
<td><a href="#Core_String_toUpper">toUpper(self, CharacterSet)</a></td>
<td>Returns a new String in upper case. </td>
</tr>
<tr>
<td><a href="#Core_String_toUpper">toUpper(string, CharacterSet)</a></td>
<td>Returns a new String in lower case. </td>
</tr>
<tr>
<td><a href="#Core_String_trim">trim</a></td>
<td>Removes all leading and trailing white-space characters from the current String. </td>
</tr>
<tr>
<td><a href="#Core_String_trimEnd">trimEnd</a></td>
<td>Remove whitespaces at the end of the String. </td>
</tr>
<tr>
<td><a href="#Core_String_trimStart">trimStart</a></td>
<td>Remove whitespaces at the start of the String. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_String_opAffect">opAffect</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opAssign">opAssign(self, rune)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opAssign">opAssign(self, string)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opAssign">opAssign(self, u8)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opCast">opCast(self)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opCast">opCast(self)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opCast">opCast(self)</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opCmp">opCmp</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opCount">opCount</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opData">opData</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opEquals">opEquals</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opIndex">opIndex</a></td>
<td>Returns the byte at the given index. </td>
</tr>
<tr>
<td><a href="#Core_String_opIndexAffect">opIndexAffect</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opIndexAssign">opIndexAssign</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opSlice">opSlice</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opVisitBytes">opVisitBytes</a></td>
<td>Visit the String utf8 bytes  @alias0 will contain the byte or the pointer to the byte  @alias1 will contain the byte index. </td>
</tr>
<tr>
<td><a href="#Core_String_opVisitRunes">opVisitRunes</a></td>
<td>Visit the string runes  See Utf8.visitRunes for aliases. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_IHash32_compute"><span class="titletype">func</span> <span class="titlelight">IHash32.</span><span class="titlestrong">compute</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L569" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compute</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_append"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">append</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L327" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append a rune to the String. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">append</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)</code>
</div>
<p>Append a string to the String. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">append</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>Append a byte to the String. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">append</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_appendFormat"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">appendFormat</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L311" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append a formatted string. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">appendFormat</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, format: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, values: ...)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_back"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">back</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L262" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the last byte. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">back</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_clear"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L205" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the length of the String to 0. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_ensureNotNull"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">ensureNotNull</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L229" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a null string in an empty one. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">ensureNotNull</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_from"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">from</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L476" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a literal string to a String. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">from</span><span class="SyntaxCode">(value: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_grow"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">grow</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L379" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Ensure the String is big enough to store a given amount of bytes. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">grow</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, wantedCapacity: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_insert"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">insert</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L291" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Insert a substring at the given position. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">insert</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, byteIndex: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_isEmpty"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">isEmpty</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L211" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the String has zero length. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isEmpty</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_isNull"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">isNull</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L217" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the String is null (undefined). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isNull</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_isNullOrEmpty"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">isNullOrEmpty</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L223" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the String is null or empty. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isNullOrEmpty</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_join"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">join</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L354" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Join a list of strings to make a unique one. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">join</span><span class="SyntaxCode">(values: </span><span class="SyntaxType">string</span><span class="SyntaxCode">...)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_joinWith"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">joinWith</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L364" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Join an list of strings to make a unique one, by using a given <code class="incode">separator</code>  between them. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">joinWith</span><span class="SyntaxCode">(separator: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, values: </span><span class="SyntaxType">string</span><span class="SyntaxCode">...)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_makeLower"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">makeLower</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L516" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert the string inplace to lower case. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">makeLower</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, set = </span><span class="SyntaxConstant"><a href="#Core_CharacterSet">CharacterSet</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Latin1</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_makeUpper"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">makeUpper</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L497" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert the string inplace to upper case. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">makeUpper</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, set = </span><span class="SyntaxConstant"><a href="#Core_CharacterSet">CharacterSet</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Latin1</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_opAffect"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">opAffect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L55" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opAffect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_opAssign"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">opAssign</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L115" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opAssign</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opAssign</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opAssign</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_opCast"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">opCast</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L49" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCast</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCast</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">cstring</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCast</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_opCmp"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">opCmp</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L85" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCmp</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_opCount"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">opCount</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCount</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_opData"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">opData</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opData</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> ^</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_opEquals"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">opEquals</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L76" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opEquals</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_opIndex"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">opIndex</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L161" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the byte at the given index. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opIndex</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_opIndexAffect"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">opIndexAffect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L101" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opIndexAffect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_opIndexAssign"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">opIndexAssign</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L90" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(op: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opIndexAssign</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, value: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_opSlice"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">opSlice</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L70" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opSlice</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, lower: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, upper: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_opVisitBytes"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">opVisitBytes</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L180" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Visit the String utf8 bytes  @alias0 will contain the byte or the pointer to the byte  @alias1 will contain the byte index. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(ptr: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opVisitBytes</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_opVisitRunes"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">opVisitRunes</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L170" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Visit the string runes  See Utf8.visitRunes for aliases. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(ptr: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opVisitRunes</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_remove"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">remove</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L270" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove some bytes at the given index. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">remove</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, byteIndex: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, byteCount: </span><span class="SyntaxType">u64</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">1</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_removeBack"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">removeBack</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L281" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove some bytes at the end. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">removeBack</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, byteCount: </span><span class="SyntaxType">u64</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">1</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_replace"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">replace</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L237" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Replace all occurences of <code class="incode">what</code> with <code class="incode">by</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">replace</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, what: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, by: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, comparisonType = </span><span class="SyntaxConstant">Utf8</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Utf8_ComparisonType">ComparisonType</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Latin1</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_reserve"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">reserve</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L388" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve room for at least <code class="incode">newCapacity</code> bytes. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">reserve</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, newCapacity: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_toCharArray"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">toCharArray</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L470" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert string to a 32 bits character array. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toCharArray</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">rune</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_toLower"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">toLower</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L551" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a new String in lower case. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toLower</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, set = </span><span class="SyntaxConstant"><a href="#Core_CharacterSet">CharacterSet</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Latin1</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>Returns a new String in lower case. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toLower</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, set = </span><span class="SyntaxConstant"><a href="#Core_CharacterSet">CharacterSet</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Latin1</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_toSlice"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">toSlice</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L491" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a slice type. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toSlice</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;[..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_toString"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">toString</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L484" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a string type. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toString</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_toUpper"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">toUpper</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L535" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a new String in upper case. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toUpper</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, set = </span><span class="SyntaxConstant"><a href="#Core_CharacterSet">CharacterSet</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Latin1</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>Returns a new String in lower case. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toUpper</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, set = </span><span class="SyntaxConstant"><a href="#Core_CharacterSet">CharacterSet</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Latin1</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_trim"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">trim</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L463" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Removes all leading and trailing white-space characters from the current String. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">trim</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_trimEnd"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">trimEnd</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L445" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove whitespaces at the end of the String. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">trimEnd</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_String_trimStart"><span class="titletype">func</span> <span class="titlelight">String.</span><span class="titlestrong">trimStart</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L424" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove whitespaces at the start of the String. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">trimStart</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_Event"><span class="titletype">struct</span> <span class="titlelight">Sync.</span><span class="titlestrong">Event</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\event.win32.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>handle</td>
<td>const ^void</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Sync_Event_create">create</a></td>
<td>Creates a new event. </td>
</tr>
<tr>
<td><a href="#Core_Sync_Event_init">init</a></td>
<td>Initialize event. </td>
</tr>
<tr>
<td><a href="#Core_Sync_Event_isValid">isValid</a></td>
<td>Returns true if the event is valid. </td>
</tr>
<tr>
<td><a href="#Core_Sync_Event_release">release</a></td>
<td>Destroy an existing event. </td>
</tr>
<tr>
<td><a href="#Core_Sync_Event_reset">reset</a></td>
<td>Reset the event state. </td>
</tr>
<tr>
<td><a href="#Core_Sync_Event_signal">signal</a></td>
<td>Signal the event. </td>
</tr>
<tr>
<td><a href="#Core_Sync_Event_wait">wait</a></td>
<td>Wait for the event to be signaled. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_Event_create"><span class="titletype">func</span> <span class="titlelight">Event.</span><span class="titlestrong">create</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\event.win32.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a new event. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">create</span><span class="SyntaxCode">()-><a href=</span><span class="SyntaxString">"#Core_Sync_Event"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Sync</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Sync_Event">Event</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_Event_init"><span class="titletype">func</span> <span class="titlelight">Event.</span><span class="titlestrong">init</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\event.win32.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize event. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">init</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, manual = </span><span class="SyntaxKeyword">false</span><span class="SyntaxCode">, initState = </span><span class="SyntaxKeyword">false</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_Event_isValid"><span class="titletype">func</span> <span class="titlelight">Event.</span><span class="titlestrong">isValid</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\event.win32.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the event is valid. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isValid</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_Event_release"><span class="titletype">func</span> <span class="titlelight">Event.</span><span class="titlestrong">release</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\event.win32.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Destroy an existing event. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">release</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_Event_reset"><span class="titletype">func</span> <span class="titlelight">Event.</span><span class="titlestrong">reset</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\event.win32.swg#L57" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reset the event state. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">reset</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_Event_signal"><span class="titletype">func</span> <span class="titlelight">Event.</span><span class="titlestrong">signal</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\event.win32.swg#L50" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Signal the event. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">signal</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_Event_wait"><span class="titletype">func</span> <span class="titlelight">Event.</span><span class="titlestrong">wait</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\event.win32.swg#L64" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Wait for the event to be signaled. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">wait</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_Mutex"><span class="titletype">struct</span> <span class="titlelight">Sync.</span><span class="titlestrong">Mutex</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\mutex.win32.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>v</td>
<td>*void</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Sync_Mutex_lock">lock</a></td>
<td>Lock mutex. </td>
</tr>
<tr>
<td><a href="#Core_Sync_Mutex_tryLock">tryLock</a></td>
<td>Try to lock the mutex, and return <code class="incode">true</code> if it's the case. </td>
</tr>
<tr>
<td><a href="#Core_Sync_Mutex_unlock">unlock</a></td>
<td>Unlock mutex. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_Mutex_lock"><span class="titletype">func</span> <span class="titlelight">Mutex.</span><span class="titlestrong">lock</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\mutex.win32.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Lock mutex. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lock</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_Mutex_tryLock"><span class="titletype">func</span> <span class="titlelight">Mutex.</span><span class="titlestrong">tryLock</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\mutex.win32.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Try to lock the mutex, and return <code class="incode">true</code> if it's the case. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">tryLock</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_Mutex_unlock"><span class="titletype">func</span> <span class="titlelight">Mutex.</span><span class="titlestrong">unlock</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\mutex.win32.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Unlock mutex. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">unlock</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_RWLock"><span class="titletype">struct</span> <span class="titlelight">Sync.</span><span class="titlestrong">RWLock</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>v</td>
<td>*void</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Sync_RWLock_lock">lock</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Sync_RWLock_lockExclusive">lockExclusive</a></td>
<td>Lock mutex. </td>
</tr>
<tr>
<td><a href="#Core_Sync_RWLock_lockShared">lockShared</a></td>
<td>Lock mutex. </td>
</tr>
<tr>
<td><a href="#Core_Sync_RWLock_tryLockExclusive">tryLockExclusive</a></td>
<td>Try to lock the mutex, and return <code class="incode">true</code> if it's the case. </td>
</tr>
<tr>
<td><a href="#Core_Sync_RWLock_tryLockShared">tryLockShared</a></td>
<td>Try to lock the mutex, and return <code class="incode">true</code> if it's the case. </td>
</tr>
<tr>
<td><a href="#Core_Sync_RWLock_unlock">unlock</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Sync_RWLock_unlockExclusive">unlockExclusive</a></td>
<td>Unlock mutex. </td>
</tr>
<tr>
<td><a href="#Core_Sync_RWLock_unlockShared">unlockShared</a></td>
<td>Unlock mutex. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_RWLock_lock"><span class="titletype">func</span> <span class="titlelight">RWLock.</span><span class="titlestrong">lock</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lock</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_RWLock_lockExclusive"><span class="titletype">func</span> <span class="titlelight">RWLock.</span><span class="titlestrong">lockExclusive</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Lock mutex. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lockExclusive</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_RWLock_lockShared"><span class="titletype">func</span> <span class="titlelight">RWLock.</span><span class="titlestrong">lockShared</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Lock mutex. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lockShared</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_RWLock_tryLockExclusive"><span class="titletype">func</span> <span class="titlelight">RWLock.</span><span class="titlestrong">tryLockExclusive</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Try to lock the mutex, and return <code class="incode">true</code> if it's the case. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">tryLockExclusive</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_RWLock_tryLockShared"><span class="titletype">func</span> <span class="titlelight">RWLock.</span><span class="titlestrong">tryLockShared</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Try to lock the mutex, and return <code class="incode">true</code> if it's the case. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">tryLockShared</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_RWLock_unlock"><span class="titletype">func</span> <span class="titlelight">RWLock.</span><span class="titlestrong">unlock</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">unlock</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_RWLock_unlockExclusive"><span class="titletype">func</span> <span class="titlelight">RWLock.</span><span class="titlestrong">unlockExclusive</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Unlock mutex. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">unlockExclusive</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_RWLock_unlockShared"><span class="titletype">func</span> <span class="titlelight">RWLock.</span><span class="titlestrong">unlockShared</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L47" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Unlock mutex. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">unlockShared</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_scopedLock"><span class="titletype">func</span> <span class="titlelight">Sync.</span><span class="titlestrong">scopedLock</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\sync.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">scopedLock</span><span class="SyntaxCode">(syncObj: *</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Sync_sharedLock"><span class="titletype">func</span> <span class="titlelight">Sync.</span><span class="titlestrong">sharedLock</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\sync.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">sharedLock</span><span class="SyntaxCode">(syncObj: *</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_System_pushContext"><span class="titletype">func</span> <span class="titlelight">System.</span><span class="titlestrong">pushContext</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\system.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Push a new execution context for the given block of code. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">pushContext</span><span class="SyntaxCode">(cxt: </span><span class="SyntaxConstant">Swag</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Context</span><span class="SyntaxCode">, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Threading_Thread"><span class="titletype">struct</span> <span class="titlelight">Threading.</span><span class="titlestrong">Thread</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>userLambda</td>
<td>closure(Core.Threading.Thread)</td>
<td></td>
</tr>
<tr>
<td>context</td>
<td><a href="swag.runtime.html#Swag_Context">Swag.Context</a></td>
<td></td>
</tr>
<tr>
<td>userParam</td>
<td>*void</td>
<td></td>
</tr>
<tr>
<td>priority</td>
<td><a href="#Core_Threading_ThreadPriority">Core.Threading.ThreadPriority</a></td>
<td></td>
</tr>
<tr>
<td>handle</td>
<td>const *void</td>
<td></td>
</tr>
<tr>
<td>id</td>
<td>u32</td>
<td></td>
</tr>
<tr>
<td>requestEnd</td>
<td>bool</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Threading_Thread_init">init</a></td>
<td>Initialize a thread in pause state. </td>
</tr>
<tr>
<td><a href="#Core_Threading_Thread_isDone">isDone</a></td>
<td>Returns true if the thread has finished. </td>
</tr>
<tr>
<td><a href="#Core_Threading_Thread_isValid">isValid</a></td>
<td>Returns true if the thread is valid. </td>
</tr>
<tr>
<td><a href="#Core_Threading_Thread_safeForceEnd">safeForceEnd</a></td>
<td>Force the thread to safely exist  User code needs to check for <code class="incode">requestEnd</code>. </td>
</tr>
<tr>
<td><a href="#Core_Threading_Thread_setPriority">setPriority</a></td>
<td>Set the thread priority. </td>
</tr>
<tr>
<td><a href="#Core_Threading_Thread_sleep">sleep</a></td>
<td>Sleep the current thread for a given amount of milliseconds. </td>
</tr>
<tr>
<td><a href="#Core_Threading_Thread_start">start</a></td>
<td>Resume the given thread, if it was paused. </td>
</tr>
<tr>
<td><a href="#Core_Threading_Thread_wait">wait</a></td>
<td>Wait for the given thread to be done, and close it  After that call, isValid() will return false. </td>
</tr>
<tr>
<td><a href="#Core_Threading_Thread_yield">yield</a></td>
<td>Sleep the current thread for a given amount of milliseconds. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Threading_Thread_init"><span class="titletype">func</span> <span class="titlelight">Thread.</span><span class="titlestrong">init</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.win32.swg#L57" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize a thread in pause state. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">init</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, lambda: </span><span class="SyntaxKeyword">closure</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Threading</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Threading_Thread">Thread</a></span><span class="SyntaxCode">), userParam: *</span><span class="SyntaxType">void</span><span class="SyntaxCode"> = </span><span class="SyntaxKeyword">null</span><span class="SyntaxCode">, priority = </span><span class="SyntaxConstant"><a href="#Core_Threading_ThreadPriority">ThreadPriority</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Normal</span><span class="SyntaxCode">, tempAllocSize: </span><span class="SyntaxType">s32</span><span class="SyntaxCode"> = -</span><span class="SyntaxNumber">1</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Threading_Thread_isDone"><span class="titletype">func</span> <span class="titlelight">Thread.</span><span class="titlestrong">isDone</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.win32.swg#L120" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the thread has finished. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isDone</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Threading_Thread_isValid"><span class="titletype">func</span> <span class="titlelight">Thread.</span><span class="titlestrong">isValid</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the thread is valid. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isValid</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Threading_Thread_safeForceEnd"><span class="titletype">func</span> <span class="titlelight">Thread.</span><span class="titlestrong">safeForceEnd</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.swg#L44" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Force the thread to safely exist  User code needs to check for <code class="incode">requestEnd</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">safeForceEnd</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Threading_Thread_setPriority"><span class="titletype">func</span> <span class="titlelight">Thread.</span><span class="titlestrong">setPriority</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.win32.swg#L86" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the thread priority. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setPriority</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, priority: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Threading</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Threading_ThreadPriority">ThreadPriority</a></span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Threading_Thread_sleep"><span class="titletype">func</span> <span class="titlelight">Thread.</span><span class="titlestrong">sleep</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.win32.swg#L45" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sleep the current thread for a given amount of milliseconds. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">sleep</span><span class="SyntaxCode">(ms: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_Duration">Duration</a></span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Threading_Thread_start"><span class="titletype">func</span> <span class="titlelight">Thread.</span><span class="titlestrong">start</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.win32.swg#L79" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Resume the given thread, if it was paused. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">start</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Threading_Thread_wait"><span class="titletype">func</span> <span class="titlelight">Thread.</span><span class="titlestrong">wait</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.win32.swg#L111" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Wait for the given thread to be done, and close it  After that call, isValid() will return false. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">wait</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Threading_Thread_yield"><span class="titletype">func</span> <span class="titlelight">Thread.</span><span class="titlestrong">yield</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.win32.swg#L51" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sleep the current thread for a given amount of milliseconds. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">yield</span><span class="SyntaxCode">()</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Threading_ThreadPriority"><span class="titletype">enum</span> <span class="titlelight">Threading.</span><span class="titlestrong">ThreadPriority</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Lowest</td>
<td></td>
</tr>
<tr>
<td>BelowNormal</td>
<td></td>
</tr>
<tr>
<td>Normal</td>
<td></td>
</tr>
<tr>
<td>AboveNormal</td>
<td></td>
</tr>
<tr>
<td>Highest</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Threading_wait"><span class="titletype">func</span> <span class="titlelight">Threading.</span><span class="titlestrong">wait</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.win32.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Wait multiple threads. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">wait</span><span class="SyntaxCode">(threads: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Threading</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Threading_Thread">Thread</a></span><span class="SyntaxCode">...)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_DateTime"><span class="titletype">struct</span> <span class="titlelight">Time.</span><span class="titlestrong">DateTime</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Represents an instant in time, typically expressed as a date and time of day. </p>
<table class="enumeration">
<tr>
<td>year</td>
<td>u16</td>
<td></td>
</tr>
<tr>
<td>month</td>
<td>u16</td>
<td></td>
</tr>
<tr>
<td>day</td>
<td>u16</td>
<td></td>
</tr>
<tr>
<td>hour</td>
<td>u16</td>
<td></td>
</tr>
<tr>
<td>minute</td>
<td>u16</td>
<td></td>
</tr>
<tr>
<td>second</td>
<td>u16</td>
<td></td>
</tr>
<tr>
<td>millisecond</td>
<td>u16</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_DateTime_dayOfWeek">dayOfWeek</a></td>
<td>Returns the day of week of the current date. </td>
</tr>
<tr>
<td><a href="#Core_Time_DateTime_dayOfWeekName">dayOfWeekName</a></td>
<td>Returns the day of week name. </td>
</tr>
<tr>
<td><a href="#Core_Time_DateTime_isValid">isValid</a></td>
<td>Returns true if this is a valid datatime. </td>
</tr>
<tr>
<td><a href="#Core_Time_DateTime_monthName">monthName</a></td>
<td>Returns the month name. </td>
</tr>
<tr>
<td><a href="#Core_Time_DateTime_now">now</a></td>
<td>Returns a DateTime containing the current date and time. </td>
</tr>
<tr>
<td><a href="#Core_Time_DateTime_parse">parse</a></td>
<td>Convert a string to a DateTime with the given format. </td>
</tr>
<tr>
<td><a href="#Core_Time_DateTime_setNow">setNow</a></td>
<td>Initialize the structure with the current local date and time. </td>
</tr>
<tr>
<td><a href="#Core_Time_DateTime_toString">toString</a></td>
<td>Convert to string. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_DateTime_opCmp">opCmp</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Time_DateTime_opEquals">opEquals</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_DateTime_IConvert_convert"><span class="titletype">func</span> <span class="titlelight">IConvert.</span><span class="titlestrong">convert</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L341" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">convert</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, buf: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">, fmt: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">StrConv</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_StrConv_ConvertFormat">ConvertFormat</a></span><span class="SyntaxCode">, strFormat: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_DateTime_dayOfWeek"><span class="titletype">func</span> <span class="titlelight">DateTime.</span><span class="titlestrong">dayOfWeek</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L79" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the day of week of the current date. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">dayOfWeek</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_Time_DayOfWeek"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_DayOfWeek">DayOfWeek</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_DateTime_dayOfWeekName"><span class="titletype">func</span> <span class="titlelight">DateTime.</span><span class="titlestrong">dayOfWeekName</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L96" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the day of week name. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">dayOfWeekName</span><span class="SyntaxCode">(day: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_DayOfWeek">DayOfWeek</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_DateTime_isValid"><span class="titletype">func</span> <span class="titlelight">DateTime.</span><span class="titlestrong">isValid</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L66" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this is a valid datatime. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isValid</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_DateTime_monthName"><span class="titletype">func</span> <span class="titlelight">DateTime.</span><span class="titlestrong">monthName</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L89" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the month name. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">monthName</span><span class="SyntaxCode">(month: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_DateTime_now"><span class="titletype">func</span> <span class="titlelight">DateTime.</span><span class="titlestrong">now</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.win32.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a DateTime containing the current date and time. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">now</span><span class="SyntaxCode">()-><a href=</span><span class="SyntaxString">"#Core_Time_DateTime"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_DateTime">DateTime</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_DateTime_opCmp"><span class="titletype">func</span> <span class="titlelight">DateTime.</span><span class="titlestrong">opCmp</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L46" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCmp</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_DateTime">DateTime</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_DateTime_opEquals"><span class="titletype">func</span> <span class="titlelight">DateTime.</span><span class="titlestrong">opEquals</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opEquals</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_DateTime">DateTime</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_DateTime_parse"><span class="titletype">func</span> <span class="titlelight">DateTime.</span><span class="titlestrong">parse</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L102" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a string to a DateTime with the given format. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">parse</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, fmt = </span><span class="SyntaxConstant"><a href="#Core_Time_DateTimeFormat">DateTimeFormat</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_DateTime">DateTime</a></span><span class="SyntaxCode">, checkDate = </span><span class="SyntaxKeyword">true</span><span class="SyntaxCode">)-&gt;{value: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_DateTime">DateTime</a></span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">} </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_DateTime_setNow"><span class="titletype">func</span> <span class="titlelight">DateTime.</span><span class="titlestrong">setNow</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.win32.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize the structure with the current local date and time. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setNow</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_DateTime_toString"><span class="titletype">func</span> <span class="titlelight">DateTime.</span><span class="titlestrong">toString</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L283" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert to string. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toString</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, fmt = </span><span class="SyntaxConstant"><a href="#Core_Time_DateTimeFormat">DateTimeFormat</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_DateTime">DateTime</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_DateTimeFormat"><span class="titletype">enum</span> <span class="titlelight">Time.</span><span class="titlestrong">DateTimeFormat</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>DateTime</td>
<td>DDDD MMMM D YYYY HH:MM:SS. </td>
</tr>
<tr>
<td>DateTimeMs</td>
<td>DDDD MMMM D YYYY HH:MM:SS.ZZZ. </td>
</tr>
<tr>
<td>Iso</td>
<td>YYYY-MM-DD HH:MM:SS. </td>
</tr>
<tr>
<td>IsoMs</td>
<td>YYYY-MM-DD HH:MM:SS.ZZZ. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_DayOfWeek"><span class="titletype">enum</span> <span class="titlelight">Time.</span><span class="titlestrong">DayOfWeek</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Sunday</td>
<td></td>
</tr>
<tr>
<td>Monday</td>
<td></td>
</tr>
<tr>
<td>Tuesday</td>
<td></td>
</tr>
<tr>
<td>Wednesday</td>
<td></td>
</tr>
<tr>
<td>Thursday</td>
<td></td>
</tr>
<tr>
<td>Friday</td>
<td></td>
</tr>
<tr>
<td>Saturday</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Duration"><span class="titletype">struct</span> <span class="titlelight">Time.</span><span class="titlestrong">Duration</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\duration.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Represents a delay, expressed in seconds. </p>
<table class="enumeration">
<tr>
<td>timeInSeconds</td>
<td>f32</td>
<td>The duration in seconds. </td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_Duration_fromMs">fromMs</a></td>
<td>Returns a duration initialized with milliseconds. </td>
</tr>
<tr>
<td><a href="#Core_Time_Duration_toMs">toMs</a></td>
<td>Returns the value in milliseconds. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_Duration_opAffect">opAffect</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Time_Duration_opAffectSuffix">opAffectSuffix</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Duration_fromMs"><span class="titletype">func</span> <span class="titlelight">Duration.</span><span class="titlestrong">fromMs</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\duration.swg#L39" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a duration initialized with milliseconds. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">fromMs</span><span class="SyntaxCode">(valueMs: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Time_Duration"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_Duration">Duration</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Duration_opAffect"><span class="titletype">func</span> <span class="titlelight">Duration.</span><span class="titlestrong">opAffect</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\duration.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opAffect</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, valueMs: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Duration_opAffectSuffix"><span class="titletype">func</span> <span class="titlelight">Duration.</span><span class="titlestrong">opAffectSuffix</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\duration.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(suffix: </span><span class="SyntaxType">string</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">opAffectSuffix</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, value: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Duration_toMs"><span class="titletype">func</span> <span class="titlelight">Duration.</span><span class="titlestrong">toMs</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\duration.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the value in milliseconds. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toMs</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_FrameTiming"><span class="titletype">struct</span> <span class="titlelight">Time.</span><span class="titlestrong">FrameTiming</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\frametiming.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>dtMin</td>
<td>f32</td>
<td></td>
</tr>
<tr>
<td>dtMax</td>
<td>f32</td>
<td></td>
</tr>
<tr>
<td>dt</td>
<td>f32</td>
<td>Current delta time, in seconds. </td>
</tr>
<tr>
<td>frameCount</td>
<td>u32</td>
<td>Frame counter. </td>
</tr>
<tr>
<td>prevTick</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td>paused</td>
<td>bool</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_FrameTiming_pause">pause</a></td>
<td>Pause frame timing & count. </td>
</tr>
<tr>
<td><a href="#Core_Time_FrameTiming_unpause">unpause</a></td>
<td>Unpause frame timing & count. </td>
</tr>
<tr>
<td><a href="#Core_Time_FrameTiming_update">update</a></td>
<td>Update frame timers. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_FrameTiming_pause"><span class="titletype">func</span> <span class="titlelight">FrameTiming.</span><span class="titlestrong">pause</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\frametiming.swg#L44" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Pause frame timing & count. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">pause</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_FrameTiming_unpause"><span class="titletype">func</span> <span class="titlelight">FrameTiming.</span><span class="titlestrong">unpause</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\frametiming.swg#L50" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Unpause frame timing & count. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">unpause</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_FrameTiming_update"><span class="titletype">func</span> <span class="titlelight">FrameTiming.</span><span class="titlestrong">update</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\frametiming.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Update frame timers. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">update</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Stopwatch"><span class="titletype">struct</span> <span class="titlelight">Time.</span><span class="titlestrong">Stopwatch</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Provides a set of methods and properties that you can use to accurately measure elapsed time. </p>
<table class="enumeration">
<tr>
<td>isStarted</td>
<td>bool</td>
<td></td>
</tr>
<tr>
<td>startTimeStamp</td>
<td>u64</td>
<td></td>
</tr>
<tr>
<td>elapsedTicks</td>
<td>u64</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_Stopwatch_elapsedMicroseconds">elapsedMicroseconds</a></td>
<td>Gets the total elapsed time in microseconds, after a call to <code class="incode">stop</code>. </td>
</tr>
<tr>
<td><a href="#Core_Time_Stopwatch_elapsedMicrosecondsNow">elapsedMicrosecondsNow</a></td>
<td>Gets the current elapsed time in milliseconds since the start. </td>
</tr>
<tr>
<td><a href="#Core_Time_Stopwatch_elapsedMilliseconds">elapsedMilliseconds</a></td>
<td>Gets the total elapsed time in milliseconds, after a call to <code class="incode">stop</code>. </td>
</tr>
<tr>
<td><a href="#Core_Time_Stopwatch_elapsedMillisecondsNow">elapsedMillisecondsNow</a></td>
<td>Gets the current elapsed time in milliseconds since the start. </td>
</tr>
<tr>
<td><a href="#Core_Time_Stopwatch_reset">reset</a></td>
<td>Stops time interval measurement and resets the elapsed time to zero. </td>
</tr>
<tr>
<td><a href="#Core_Time_Stopwatch_restart">restart</a></td>
<td>Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time. </td>
</tr>
<tr>
<td><a href="#Core_Time_Stopwatch_scopeMeasure">scopeMeasure</a></td>
<td>Measure until the end of the scope, and print the result in the console. </td>
</tr>
<tr>
<td><a href="#Core_Time_Stopwatch_start">start</a></td>
<td>Starts, or resumes, measuring elapsed time for an interval. </td>
</tr>
<tr>
<td><a href="#Core_Time_Stopwatch_stop">stop</a></td>
<td>Stops measuring elapsed time for an interval. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Stopwatch_elapsedMicroseconds"><span class="titletype">func</span> <span class="titlelight">Stopwatch.</span><span class="titlestrong">elapsedMicroseconds</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L74" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Gets the total elapsed time in microseconds, after a call to <code class="incode">stop</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">elapsedMicroseconds</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Stopwatch_elapsedMicrosecondsNow"><span class="titletype">func</span> <span class="titlelight">Stopwatch.</span><span class="titlestrong">elapsedMicrosecondsNow</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L60" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Gets the current elapsed time in milliseconds since the start. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">elapsedMicrosecondsNow</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Stopwatch_elapsedMilliseconds"><span class="titletype">func</span> <span class="titlelight">Stopwatch.</span><span class="titlestrong">elapsedMilliseconds</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L68" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Gets the total elapsed time in milliseconds, after a call to <code class="incode">stop</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">elapsedMilliseconds</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Stopwatch_elapsedMillisecondsNow"><span class="titletype">func</span> <span class="titlelight">Stopwatch.</span><span class="titlestrong">elapsedMillisecondsNow</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L52" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Gets the current elapsed time in milliseconds since the start. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">elapsedMillisecondsNow</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Stopwatch_reset"><span class="titletype">func</span> <span class="titlelight">Stopwatch.</span><span class="titlestrong">reset</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Stops time interval measurement and resets the elapsed time to zero. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">reset</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Stopwatch_restart"><span class="titletype">func</span> <span class="titlelight">Stopwatch.</span><span class="titlestrong">restart</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L44" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">restart</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Stopwatch_scopeMeasure"><span class="titletype">func</span> <span class="titlelight">Stopwatch.</span><span class="titlestrong">scopeMeasure</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L81" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Measure until the end of the scope, and print the result in the console. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">scopeMeasure</span><span class="SyntaxCode">(name: </span><span class="SyntaxType">string</span><span class="SyntaxCode"> = </span><span class="SyntaxString">"stopwatch"</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Stopwatch_start"><span class="titletype">func</span> <span class="titlelight">Stopwatch.</span><span class="titlestrong">start</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Starts, or resumes, measuring elapsed time for an interval. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">start</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Stopwatch_stop"><span class="titletype">func</span> <span class="titlelight">Stopwatch.</span><span class="titlestrong">stop</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L24" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Stops measuring elapsed time for an interval. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">stop</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan"><span class="titletype">struct</span> <span class="titlelight">Time.</span><span class="titlestrong">TimeSpan</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Represents an interval of time, stored as a 64 bits integer. </p>
<table class="enumeration">
<tr>
<td>ticks</td>
<td>u64</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_TimeSpan_addDays">addDays</a></td>
<td>Add or remove the given amount of days to the TimeSpan. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_addHours">addHours</a></td>
<td>Add or remove the given amount of hours to the TimeSpan. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_addMilliSeconds">addMilliSeconds</a></td>
<td>Add or remove the given amount of minutes to the TimeSpan. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_addMinutes">addMinutes</a></td>
<td>Add or remove the given amount of minutes to the TimeSpan. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_addMonths">addMonths</a></td>
<td>Add or remove the given amount of months to the TimeSpan. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_addSeconds">addSeconds</a></td>
<td>Add or remove the given amount of minutes to the TimeSpan. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_addYears">addYears</a></td>
<td>Add or remove the given amount of years to the TimeSpan. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_from">from</a></td>
<td>Creates a TimeSpan with the given DateTime. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_now">now</a></td>
<td>Returns the current date and time. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_setNow">setNow</a></td>
<td>Initialize the TimeSpan with the current date and time. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_toDateTime">toDateTime</a></td>
<td>Converts a TimeSpan to a DateTime. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_totalDays">totalDays</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_totalHours">totalHours</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_totalMilliSeconds">totalMilliSeconds</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_totalMinutes">totalMinutes</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_totalSeconds">totalSeconds</a></td>
<td></td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_TimeSpan_opCmp">opCmp</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan_addDays"><span class="titletype">func</span> <span class="titlelight">TimeSpan.</span><span class="titlestrong">addDays</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L84" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add or remove the given amount of days to the TimeSpan. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">addDays</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, days: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan_addHours"><span class="titletype">func</span> <span class="titlelight">TimeSpan.</span><span class="titlestrong">addHours</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L93" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add or remove the given amount of hours to the TimeSpan. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">addHours</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, hours: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan_addMilliSeconds"><span class="titletype">func</span> <span class="titlelight">TimeSpan.</span><span class="titlestrong">addMilliSeconds</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L120" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add or remove the given amount of minutes to the TimeSpan. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">addMilliSeconds</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, milliSeconds: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan_addMinutes"><span class="titletype">func</span> <span class="titlelight">TimeSpan.</span><span class="titlestrong">addMinutes</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L102" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add or remove the given amount of minutes to the TimeSpan. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">addMinutes</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, minutes: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan_addMonths"><span class="titletype">func</span> <span class="titlelight">TimeSpan.</span><span class="titlestrong">addMonths</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L61" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add or remove the given amount of months to the TimeSpan. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">addMonths</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, months: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan_addSeconds"><span class="titletype">func</span> <span class="titlelight">TimeSpan.</span><span class="titlestrong">addSeconds</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L111" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add or remove the given amount of minutes to the TimeSpan. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">addSeconds</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, seconds: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan_addYears"><span class="titletype">func</span> <span class="titlelight">TimeSpan.</span><span class="titlestrong">addYears</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L54" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add or remove the given amount of years to the TimeSpan. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">addYears</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, years: </span><span class="SyntaxType">s32</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan_from"><span class="titletype">func</span> <span class="titlelight">TimeSpan.</span><span class="titlestrong">from</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a TimeSpan with the given DateTime. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">from</span><span class="SyntaxCode">(dateTime: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_DateTime">DateTime</a></span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Time_TimeSpan"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_TimeSpan">TimeSpan</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan_now"><span class="titletype">func</span> <span class="titlelight">TimeSpan.</span><span class="titlestrong">now</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the current date and time. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">now</span><span class="SyntaxCode">()-><a href=</span><span class="SyntaxString">"#Core_Time_TimeSpan"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_TimeSpan">TimeSpan</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan_opCmp"><span class="titletype">func</span> <span class="titlelight">TimeSpan.</span><span class="titlestrong">opCmp</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opCmp</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_TimeSpan">TimeSpan</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan_setNow"><span class="titletype">func</span> <span class="titlelight">TimeSpan.</span><span class="titlestrong">setNow</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize the TimeSpan with the current date and time. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">setNow</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan_toDateTime"><span class="titletype">func</span> <span class="titlelight">TimeSpan.</span><span class="titlestrong">toDateTime</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L44" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Converts a TimeSpan to a DateTime. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toDateTime</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_Time_DateTime"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_DateTime">DateTime</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan_totalDays"><span class="titletype">func</span> <span class="titlelight">TimeSpan.</span><span class="titlestrong">totalDays</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L128" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">totalDays</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan_totalHours"><span class="titletype">func</span> <span class="titlelight">TimeSpan.</span><span class="titlestrong">totalHours</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L129" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">totalHours</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan_totalMilliSeconds"><span class="titletype">func</span> <span class="titlelight">TimeSpan.</span><span class="titlestrong">totalMilliSeconds</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L132" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">totalMilliSeconds</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan_totalMinutes"><span class="titletype">func</span> <span class="titlelight">TimeSpan.</span><span class="titlestrong">totalMinutes</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L130" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">totalMinutes</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_TimeSpan_totalSeconds"><span class="titletype">func</span> <span class="titlelight">TimeSpan.</span><span class="titlestrong">totalSeconds</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L131" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">totalSeconds</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">f64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Timer"><span class="titletype">struct</span> <span class="titlelight">Time.</span><span class="titlestrong">Timer</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timer.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>userLambda</td>
<td>func(Core.Time.Timer)</td>
<td></td>
</tr>
<tr>
<td>handle</td>
<td>const *void</td>
<td></td>
</tr>
<tr>
<td>context</td>
<td><a href="swag.runtime.html#Swag_Context">Swag.Context</a></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_Timer_create">create</a></td>
<td>Creates a new timer. </td>
</tr>
<tr>
<td><a href="#Core_Time_Timer_init">init</a></td>
<td>Initialize timer. </td>
</tr>
<tr>
<td><a href="#Core_Time_Timer_release">release</a></td>
<td>Release the timer. </td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Timer_create"><span class="titletype">func</span> <span class="titlelight">Timer.</span><span class="titlestrong">create</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timer.win32.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a new timer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">create</span><span class="SyntaxCode">(elapsedTimeMs: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, lambda: </span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_Timer">Timer</a></span><span class="SyntaxCode">), periodic = </span><span class="SyntaxKeyword">false</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Time_Timer"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_Timer">Timer</a></span><span class="SyntaxCode"></a> </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Timer_init"><span class="titletype">func</span> <span class="titlelight">Timer.</span><span class="titlestrong">init</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timer.win32.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize timer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">init</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, elapsedTimeMs: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">, lambda: </span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_Timer">Timer</a></span><span class="SyntaxCode">), periodic = </span><span class="SyntaxKeyword">false</span><span class="SyntaxCode">) </span><span class="SyntaxKeyword">throw</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_Timer_release"><span class="titletype">func</span> <span class="titlelight">Timer.</span><span class="titlestrong">release</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timer.win32.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Release the timer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">release</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_dateToTicks"><span class="titletype">func</span> <span class="titlelight">Time.</span><span class="titlestrong">dateToTicks</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.swg#L72" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a date to a 64 bits value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">dateToTicks</span><span class="SyntaxCode">(year: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, month: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, day: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Time_Ticks"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_Ticks">Ticks</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_daysInMonth"><span class="titletype">func</span> <span class="titlelight">Time.</span><span class="titlestrong">daysInMonth</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.swg#L134" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the number of days of the given month, for the given year. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">daysInMonth</span><span class="SyntaxCode">(year: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, month: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u16</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_isLeapYear"><span class="titletype">func</span> <span class="titlelight">Time.</span><span class="titlestrong">isLeapYear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.swg#L128" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given year is a leap year. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isLeapYear</span><span class="SyntaxCode">(year: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_nowMicroseconds"><span class="titletype">func</span> <span class="titlelight">Time.</span><span class="titlestrong">nowMicroseconds</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the current time expressed in microseconds. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nowMicroseconds</span><span class="SyntaxCode">()-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_nowMilliseconds"><span class="titletype">func</span> <span class="titlelight">Time.</span><span class="titlestrong">nowMilliseconds</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the current time expressed in milliseconds. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nowMilliseconds</span><span class="SyntaxCode">()-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_nowPrecise"><span class="titletype">func</span> <span class="titlelight">Time.</span><span class="titlestrong">nowPrecise</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.win32.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get current time precise value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">nowPrecise</span><span class="SyntaxCode">()-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_preciseFrequency"><span class="titletype">func</span> <span class="titlelight">Time.</span><span class="titlestrong">preciseFrequency</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.win32.swg#L21" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>The frequency of the precise counter, in ticks per second. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">preciseFrequency</span><span class="SyntaxCode">()-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_ticksToDate"><span class="titletype">func</span> <span class="titlelight">Time.</span><span class="titlestrong">ticksToDate</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.swg#L85" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a 64 bits value to a date. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">ticksToDate</span><span class="SyntaxCode">(ticks: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_Ticks">Ticks</a></span><span class="SyntaxCode">)-&gt;{year: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, month: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, day: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">}</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_ticksToTime"><span class="titletype">func</span> <span class="titlelight">Time.</span><span class="titlestrong">ticksToTime</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.swg#L61" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a 64 bits tick value to a time. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">ticksToTime</span><span class="SyntaxCode">(ticks: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_Ticks">Ticks</a></span><span class="SyntaxCode">)-&gt;{hour: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, minute: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, second: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, millisecond: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">}</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Time_timeToTicks"><span class="titletype">func</span> <span class="titlelight">Time.</span><span class="titlestrong">timeToTicks</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.swg#L45" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a time to a 64 bits value. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">timeToTicks</span><span class="SyntaxCode">(hour: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, minute: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, second: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, millisecond: </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_Time_Ticks"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Time</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Time_Ticks">Ticks</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Tokenize_eatCount"><span class="titletype">func</span> <span class="titlelight">Tokenize.</span><span class="titlestrong">eatCount</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\tokenize.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Eat <code class="incode">count</code> bytes, and returns the remaining string. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">eatCount</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, count: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Tokenize_eatQuotes"><span class="titletype">func</span> <span class="titlelight">Tokenize.</span><span class="titlestrong">eatQuotes</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\tokenize.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove "". </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">eatQuotes</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Tokenize_eatSpaces"><span class="titletype">func</span> <span class="titlelight">Tokenize.</span><span class="titlestrong">eatSpaces</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\tokenize.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Eat all spaces, and returns the remaining string (trim left). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">eatSpaces</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Tokenize_getTo"><span class="titletype">func</span> <span class="titlelight">Tokenize.</span><span class="titlestrong">getTo</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\tokenize.swg#L165" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a sub string starting at <code class="incode">startByteIndex</code> and ending with <code class="incode">delimiter</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getTo</span><span class="SyntaxCode">(src: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, delimiter: </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, startByteIndex = </span><span class="SyntaxNumber">0</span><span class="SyntaxCode">'</span><span class="SyntaxType">u64</span><span class="SyntaxCode">, includeDelimiter = </span><span class="SyntaxKeyword">true</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Tokenize_getToSpace"><span class="titletype">func</span> <span class="titlelight">Tokenize.</span><span class="titlestrong">getToSpace</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\tokenize.swg#L145" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the first substring of <code class="incode">str</code>, stopping at the first blank character. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getToSpace</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Tokenize_getWhileAlnum"><span class="titletype">func</span> <span class="titlelight">Tokenize.</span><span class="titlestrong">getWhileAlnum</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\tokenize.swg#L155" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the first substring of <code class="incode">str</code> containing only digits and letters. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getWhileAlnum</span><span class="SyntaxCode">(str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">string</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Tokenize_split"><span class="titletype">func</span> <span class="titlelight">Tokenize.</span><span class="titlestrong">split</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\tokenize.swg#L77" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Split string into sub strings, given an array of rune separators  Note that this returns an array of native strings, not copies.  All strings will be invalid if <code class="incode">src</code> String is destroyed. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">split</span><span class="SyntaxCode">(src: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, separators: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">rune</span><span class="SyntaxCode">, maxSplit: </span><span class="SyntaxType">u32</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">0</span><span class="SyntaxCode">, removeEmpty = </span><span class="SyntaxKeyword">true</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>Split string into sub strings, given a rune separator  Note that this returns an array of native strings, not copies.  All strings will be invalid if <code class="incode">src</code> is destroyed. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">split</span><span class="SyntaxCode">(src: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, separator: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">, maxSplit: </span><span class="SyntaxType">u32</span><span class="SyntaxCode"> = </span><span class="SyntaxNumber">0</span><span class="SyntaxCode">, removeEmpty = </span><span class="SyntaxKeyword">true</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Tokenize_splitLines"><span class="titletype">func</span> <span class="titlelight">Tokenize.</span><span class="titlestrong">splitLines</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\tokenize.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Split the string into an array of lines  Note that this returns an array of native strings, not copies.  All strings will be invalid if <code class="incode">src</code> is destroyed. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">splitLines</span><span class="SyntaxCode">(src: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_UUID"><span class="titletype">struct</span> <span class="titlelight">Core.</span><span class="titlestrong">UUID</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\uuid.swg#L9" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td><b>using</b> uuid</td>
<td>{val8: [16] u8, val64: [2] u64}</td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_UUID_clear">clear</a></td>
<td>Clear id. </td>
</tr>
<tr>
<td><a href="#Core_UUID_getRandom">getRandom</a></td>
<td>Get a version 4 UUID (random). </td>
</tr>
<tr>
<td><a href="#Core_UUID_toString">toString(self)</a></td>
<td>Convert uuid to a string. </td>
</tr>
<tr>
<td><a href="#Core_UUID_toString">toString(self, [..] u8)</a></td>
<td>Convert uuid to a string of the form xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_UUID_opEquals">opEquals</a></td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_UUID_IConvert_convert"><span class="titletype">func</span> <span class="titlelight">IConvert.</span><span class="titlestrong">convert</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\uuid.swg#L120" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">convert</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, buf: *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span><span class="SyntaxCode">, fmt: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> *</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant">StrConv</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_StrConv_ConvertFormat">ConvertFormat</a></span><span class="SyntaxCode">, strFormat: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_UUID_IHash32_compute"><span class="titletype">func</span> <span class="titlelight">IHash32.</span><span class="titlestrong">compute</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\uuid.swg#L128" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compute</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> self)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_UUID_clear"><span class="titletype">func</span> <span class="titlelight">UUID.</span><span class="titlestrong">clear</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\uuid.swg#L52" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Clear id. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">clear</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_UUID_getRandom"><span class="titletype">func</span> <span class="titlelight">UUID.</span><span class="titlestrong">getRandom</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\uuid.swg#L40" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get a version 4 UUID (random). </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">getRandom</span><span class="SyntaxCode">()-><a href=</span><span class="SyntaxString">"#Core_UUID"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_UUID">UUID</a></span><span class="SyntaxCode"></a></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_UUID_opEquals"><span class="titletype">func</span> <span class="titlelight">UUID.</span><span class="titlestrong">opEquals</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\uuid.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">opEquals</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, other: </span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_UUID">UUID</a></span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_UUID_toString"><span class="titletype">func</span> <span class="titlelight">UUID.</span><span class="titlestrong">toString</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\uuid.swg#L108" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert uuid to a string. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toString</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p>Convert uuid to a string of the form xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toString</span><span class="SyntaxCode">(</span><span class="SyntaxKeyword">using</span><span class="SyntaxCode"> self, result: [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_fromUtf8"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">fromUtf8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L142" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer to a character sequence, and returns the  number of valid elements in the destination buffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">fromUtf8</span><span class="SyntaxCode">(dest: [..] </span><span class="SyntaxType">rune</span><span class="SyntaxCode">, src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>Convert an utf8 buffer to a character sequence. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">fromUtf8</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">rune</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_isAscii"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">isAscii</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isAscii</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_isControl"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">isControl</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isControl</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_isDigit"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">isDigit</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isDigit</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_isLatin1"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">isLatin1</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isLatin1</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_isLetter"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">isLetter</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L48" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isLetter</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_isLetterOrDigit"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">isLetterOrDigit</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L67" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isLetterOrDigit</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_isLower"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">isLower</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L81" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isLower</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_isNumber"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">isNumber</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isNumber</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_isSpace"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">isSpace</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isSpace</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_isSymbol"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">isSymbol</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L55" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isSymbol</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_isSymbolMath"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">isSymbolMath</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L62" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isSymbolMath</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_isTitle"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">isTitle</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L74" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isTitle</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_isUpper"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">isUpper</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L88" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isUpper</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_makeLower"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">makeLower</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L186" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Make a rune buffer lower case. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">makeLower</span><span class="SyntaxCode">(buffer: [..] </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_makeUpper"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">makeUpper</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L175" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Make a rune buffer upper case. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">makeUpper</span><span class="SyntaxCode">(buffer: [..] </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_toLower"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">toLower</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L95" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toLower</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">rune</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_toTitle"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">toTitle</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L124" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toTitle</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">rune</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Unicode_toUpper"><span class="titletype">func</span> <span class="titlelight">Unicode.</span><span class="titlestrong">toUpper</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L109" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toUpper</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">rune</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf16_decodeRune"><span class="titletype">func</span> <span class="titlelight">Utf16.</span><span class="titlestrong">decodeRune</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf16.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the unicode character pointed by <code class="incode">buffer</code>, and the number of u16 to encode it  Will return <code class="incode">RuneError</code> for an invalid utf16 sequence. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">decodeRune</span><span class="SyntaxCode">(buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;{c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">}</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf16_encodeRune"><span class="titletype">func</span> <span class="titlelight">Utf16.</span><span class="titlestrong">encodeRune</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf16.swg#L38" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert unicode character <code class="incode">src</code> to an utf16 sequence, and returns  the number of u16 that were needed to make the conversion.  <code class="incode">dest</code> must be at least 2 u16 long. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">encodeRune</span><span class="SyntaxCode">(dest: [..] </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, src: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf16_fromUnicode"><span class="titletype">func</span> <span class="titlelight">Utf16.</span><span class="titlestrong">fromUnicode</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf16.swg#L97" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a character array (32 bits unicode) to an utf16 buffer  Returns the number of bytes written in the destination buffer  <code class="incode">dest</code> must be at least 2 bytes long. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">fromUnicode</span><span class="SyntaxCode">(dest: [..] </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>Convert a character array (32 bits unicode) to an utf16 sequence. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">fromUnicode</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">u16</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf16_fromUtf8"><span class="titletype">func</span> <span class="titlelight">Utf16.</span><span class="titlestrong">fromUtf8</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf16.swg#L61" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer to a utf16 buffer, and returns the  number of valid elements in the destination buffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">fromUtf8</span><span class="SyntaxCode">(dest: [..] </span><span class="SyntaxType">u16</span><span class="SyntaxCode">, src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>Convert an utf8 buffer to an utf16 sequence. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">fromUtf8</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">u16</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf16_lengthZeroTerminated"><span class="titletype">func</span> <span class="titlelight">Utf16.</span><span class="titlestrong">lengthZeroTerminated</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf16.swg#L133" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compute the string length of a zero terminated utf16 buffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lengthZeroTerminated</span><span class="SyntaxCode">(buf: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> ^</span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf16_toZeroTerminated"><span class="titletype">func</span> <span class="titlelight">Utf16.</span><span class="titlestrong">toZeroTerminated</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf16.swg#L123" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert string to an utf16 array, zero terminated. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">toZeroTerminated</span><span class="SyntaxCode">(src: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_Array">Array</a></span><span class="SyntaxCode">'(</span><span class="SyntaxType">u16</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_ComparisonType"><span class="titletype">enum</span> <span class="titlelight">Utf8.</span><span class="titlestrong">ComparisonType</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L634" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td>Latin1</td>
<td></td>
</tr>
<tr>
<td>Latin1NoCase</td>
<td></td>
</tr>
<tr>
<td>Unicode</td>
<td></td>
</tr>
<tr>
<td>UnicodeNoCase</td>
<td></td>
</tr>
</table>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_byteIndex"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">byteIndex</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L403" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the byte index of the given rune index. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">byteIndex</span><span class="SyntaxCode">(buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, charIndex: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;{index: </span><span class="SyntaxType">u64</span><span class="SyntaxCode">, success: </span><span class="SyntaxType">bool</span><span class="SyntaxCode">}</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_compare"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">compare</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L643" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compare two utf8 buffers with the given algorithm. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">compare</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, dst: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, comparisonType = </span><span class="SyntaxConstant"><a href="#Core_Utf8_ComparisonType">ComparisonType</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Latin1</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">s32</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_contains"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">contains</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L520" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if <code class="incode">src</code> contains the string <code class="incode">what</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">contains</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, what: </span><span class="SyntaxType">string</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_countBytesAt"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">countBytesAt</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L358" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the number of bytes to encode the first rune of the utf8 buffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">countBytesAt</span><span class="SyntaxCode">(buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p> If it's an invalid encoding, returns 1. </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_countRunes"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">countRunes</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L437" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the number of runes in an utf8 buffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">countRunes</span><span class="SyntaxCode">(buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_decodeLastRune"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">decodeLastRune</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L81" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the last unicode rune of the utf8 slice, and the number of  bytes to encode it. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">decodeLastRune</span><span class="SyntaxCode">(buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;{c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">}</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_decodeRune"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">decodeRune</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L140" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the unicode rune pointed by <code class="incode">buffer</code>, and the number of bytes to encode it. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">decodeRune</span><span class="SyntaxCode">(buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;{c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">, eat: </span><span class="SyntaxType">u32</span><span class="SyntaxCode">}</code>
</div>
<p> Will return <code class="incode">RuneError</code> for an invalid utf8 sequence </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_encodeRune"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">encodeRune</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L234" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert rune <code class="incode">src</code> to an utf8 sequence, and returns  the number of bytes that were needed to make the conversion. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">encodeRune</span><span class="SyntaxCode">(dest: [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, src: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u32</span><span class="SyntaxCode"></code>
</div>
<p> <code class="incode">dest</code> must be at least 4 bytes long </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_endsWith"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">endsWith</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L598" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Return true if the string ends with <code class="incode">str</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">endsWith</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, comparisonType = </span><span class="SyntaxConstant"><a href="#Core_Utf8_ComparisonType">ComparisonType</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Latin1</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_firstRune"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">firstRune</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L609" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the first rune of the slice. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">firstRune</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">rune</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_fromUnicode"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">fromUnicode</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L274" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a rune array to an utf8 buffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">fromUnicode</span><span class="SyntaxCode">(dest: [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>Convert an unicode buffer to a String. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">fromUnicode</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p> Returns the number of bytes written in the destination buffer  <code class="incode">dest</code> must be at least 4 bytes long </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_fromUtf16"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">fromUtf16</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L305" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf16 array to an utf8 buffer. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">fromUtf16</span><span class="SyntaxCode">(dest: [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>Convert an utf16 buffer to a String. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">fromUtf16</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u16</span><span class="SyntaxCode">)-><a href=</span><span class="SyntaxString">"#Core_String"</span><span class="SyntaxCode">></span><span class="SyntaxConstant">Core</span><span class="SyntaxCode">.</span><span class="SyntaxConstant"><a href="#Core_String">String</a></span><span class="SyntaxCode"></a></code>
</div>
<p> Returns the number of bytes written in the destination buffer.  <code class="incode">dest</code> must be at least 4 bytes long </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_indexOf"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">indexOf</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L464" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Find one of the runes in <code class="incode">what</code>, and returns the byte index of it. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">indexOf</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, what: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">rune</span><span class="SyntaxCode">, startByteIndex = </span><span class="SyntaxNumber">0</span><span class="SyntaxCode">'</span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>Find the first occurence of rune <code class="incode">what</code>, and returns the byte index of it. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">indexOf</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, what: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">, startByteIndex = </span><span class="SyntaxNumber">0</span><span class="SyntaxCode">'</span><span class="SyntaxType">u64</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>Find the given string, and returns the byte index of it. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">indexOf</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, what: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, startByteIndex = </span><span class="SyntaxNumber">0</span><span class="SyntaxCode">'</span><span class="SyntaxType">u64</span><span class="SyntaxCode">, comparisonType = </span><span class="SyntaxConstant"><a href="#Core_Utf8_ComparisonType">ComparisonType</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Latin1</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p> Returns <code class="incode">Swag.U64.Max</code> if not found </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_isValid"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">isValid</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L742" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the utf8 sequence is valid. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isValid</span><span class="SyntaxCode">(buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_isValidRune"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">isValidRune</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L341" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given unicode rune can be encoded in utf8. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">isValidRune</span><span class="SyntaxCode">(c: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_lastIndexOf"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">lastIndexOf</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L536" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the last index (in bytes) of a rune. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lastIndexOf</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, what: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>Find the last rune occurence of <code class="incode">what</code>, and returns the byte index of it. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lastIndexOf</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, what: </span><span class="SyntaxType">rune</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p>Returns the last index (in bytes) of a string. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lastIndexOf</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, what: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, comparisonType = </span><span class="SyntaxConstant"><a href="#Core_Utf8_ComparisonType">ComparisonType</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Latin1</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">u64</span><span class="SyntaxCode"></code>
</div>
<p> Returns <code class="incode">Swag.U64.Max</code> if not found </p>
<p> Returns <code class="incode">Swag.U64.Max</code> if not found </p>
<p> Returns <code class="incode">Swag.U64.Max</code> if not found </p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_lastRune"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">lastRune</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L622" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the last rune of the slice. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">lastRune</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">rune</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_startsWith"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">startsWith</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L587" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Return true if the string starts with <code class="incode">str</code>. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">startsWith</span><span class="SyntaxCode">(src: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, str: </span><span class="SyntaxType">string</span><span class="SyntaxCode">, comparisonType = </span><span class="SyntaxConstant"><a href="#Core_Utf8_ComparisonType">ComparisonType</a></span><span class="SyntaxCode">.</span><span class="SyntaxConstant">Latin1</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_Utf8_visitRunes"><span class="titletype">func</span> <span class="titlelight">Utf8.</span><span class="titlestrong">visitRunes</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L708" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Macro to visit the unicode characters of the utf8 sequence. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxAttribute">#[<a href="swag.runtime.html#Swag_Macro">Swag.Macro</a>]</span><span class="SyntaxCode">
</span><span class="SyntaxKeyword">func</span><span class="SyntaxCode"> </span><span class="SyntaxFunction">visitRunes</span><span class="SyntaxCode">(buffer: </span><span class="SyntaxKeyword">const</span><span class="SyntaxCode"> [..] </span><span class="SyntaxType">u8</span><span class="SyntaxCode">, stmt: </span><span class="SyntaxType">code</span><span class="SyntaxCode">)</code>
</div>
<p style="white-space: break-spaces"> '@alias0' will contain the character
 '@alias1' will contain the character index
 '@alias2' will contain the byte index of that character within the utf8 sequence</p>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_add"><span class="titletype">func</span> <span class="titlelight">Core.</span><span class="titlestrong">add</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\helpers.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">add</span><span class="SyntaxCode">(flags: </span><span class="SyntaxKeyword">ref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_has"><span class="titletype">func</span> <span class="titlelight">Core.</span><span class="titlestrong">has</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\helpers.swg#L8" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">has</span><span class="SyntaxCode">(flags: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_is"><span class="titletype">func</span> <span class="titlelight">Core.</span><span class="titlestrong">is</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\helpers.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">is</span><span class="SyntaxCode">(flags: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)-&gt;</span><span class="SyntaxType">bool</span><span class="SyntaxCode"></code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_remove"><span class="titletype">func</span> <span class="titlelight">Core.</span><span class="titlestrong">remove</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\helpers.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">remove</span><span class="SyntaxCode">(flags: </span><span class="SyntaxKeyword">ref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_set"><span class="titletype">func</span> <span class="titlelight">Core.</span><span class="titlestrong">set</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\helpers.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">set</span><span class="SyntaxCode">(flags: </span><span class="SyntaxKeyword">ref</span><span class="SyntaxCode"> </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, value: </span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
<p>
<table class="item">
<tr>
<td class="item">
<span class="content" id="Core_swap"><span class="titletype">func</span> <span class="titlelight">Core.</span><span class="titlestrong">swap</span></span>
</td>
<td class="srcref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\algorithms\generic.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Swap two values. </p>
<div class="precode"><code></span><span class="SyntaxCode"></span><span class="SyntaxKeyword">func</span><span class="SyntaxCode">(</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">) </span><span class="SyntaxFunction">swap</span><span class="SyntaxCode">(x: *</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">, y: *</span><span class="SyntaxConstant">T</span><span class="SyntaxCode">)</code>
</div>
</div>
</div>
</div>
</body>
</html>
