<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<?php include('common/start-head.php'); ?><title>Swag Std.Core</title>
<link rel="icon" type="image/x-icon" href="favicon.ico">
<link rel="stylesheet" type="text/css" href="css/style.css">
<style>

        .container {
            display:        flex;
            flex-wrap:      nowrap;
            flex-direction: row;
            margin:         0px auto;
            padding:        0px;
        }
        .left {
            display:    block;
            overflow-y: scroll;
            width:      500px;
        }
        .left-page {
            margin:     10px;
        }
        .right {
            display:    block;
            width:      100%;
        }
        .right-page {
            max-width:  1024px;
            margin:     10px auto;
        }
        @media(min-width: 640px) {
            .container {
                max-width: 640px;
            }
        }
        @media(min-width: 768px) {
            .container {
                max-width: 768px;
            }
        }
        @media(min-width: 1024px) {
            .container {
                max-width: 1024px;
            }
        }
        @media(min-width: 1280px) {
            .container {
                max-width: 1280px;
            }
        }
        @media(min-width: 1536px) {
            .container {
                max-width: 1536px;
            }
        }
        @media screen and (max-width: 600px) {
            .left {
                display: none;
            }
            .right-page {
                margin:  10px;
            }
        }

            .container {
                height:     100vh;
            }
            .right {
                overflow-y: scroll;
            }

        body {
            margin:         0px;
            line-height:    1.3em;
            font-family:    Segoe UI;
        }
        .container blockquote {
            border-radius:      5px;
            border:             1px solid Orange;
            background-color:   LightYellow;
            border-left:        6px solid Orange;
            margin:             20px;
            margin-left:        20px;
            margin-right:       20px;
            padding:            10px;
        }
        .container a {
            color:              DoggerBlue;
        }
        .code-type a {
            color:              inherit;
        }
        .left a, .enumeration a {
            text-decoration:    none;
        }
        .container a:hover {
            text-decoration:    underline;
        }
        table.api-item {
            border-collapse:    separate;
            background-color:   Black;
            color:              White;
            width:              100%;
            margin-top:         70px;
            margin-right:       0px;
            font-size:          110%;
        }
        .api-item td:first-child {
            width:              33%;
            white-space:        nowrap;
        }
        .api-item-title-src-ref {
            text-align:         right;
        }
        .api-item-title-kind {
            font-weight:        normal;
            font-size:          80%;
        }
        .api-item-title-light {
            font-weight:        normal;
        }
        .api-item-title-strong {
            font-weight:        bold;
            font-size:          100%;
        }
        table.enumeration {
            border:             1px solid LightGrey;
            border-collapse:    collapse;
            width:              100%;
            font-size:          90%;
        }
        .enumeration td {
            padding:            6px;
            border:             1px solid LightGrey;
            border-collapse:    collapse;
            min-width:          100px;
        }
        .enumeration td:first-child {
            background-color:   #f8f8f8;
            white-space:        nowrap;
        }
        .code-type {
            background-color:   #eeeeee;
        }
        .container td:last-child {
            width:              100%;
        }
        .left ul {
            list-style-type:    none;
            margin-left:        -20px;
        }
        .left h3 {
            background-color:   Black;
            color:              White;
            padding:            6px;
        }
        .right h1 {
            margin-top:         50px;
            margin-bottom:      50px;
        }
        .right h2 {
            margin-top:         35px;
        }
        .inline-code {
            background-color:   #eeeeee;
            padding:            2px;
            border: 1px dotted  #cccccc;
        }
        .tdname .inline-code {
            background-color:   revert;
            padding:            2px;
            border:             revert;
        }
        .addinfos {
            font-size:          90%;
            white-space:        break-spaces;
            overflow-wrap:      break-word;
        }
        .code-block {
            background-color:   #eeeeee;
            border-radius:      5px;
            border:             1px solid LightGrey;
            padding:            10px;
            margin:             20px;
            white-space:        pre;
            overflow-x:         auto;
        }
        .code-block a {
            color:  inherit; 
        }
            .SCde { color: #222222; }
    .SCmt { color: #71a35b; }
    .SCmp { color: #7f7f7f; }
    .SFct { color: #ff6a00; }
    .SCst { color: #3bc3a7; }
    .SItr { color: #b4b44a; }
    .STpe { color: #ed9a11; }
    .SKwd { color: #3186cd; }
    .SLgc { color: #b040be; }
    .SNum { color: #74a35b; }
    .SStr { color: #bb6643; }
    .SAtr { color: #7f7f7f; }
    .SInv { color: #ff0000; }
</style>
<?php include('common/end-head.php'); ?></head>
<body>
<?php include('common/start-body.php'); ?><div class="container">
<div class="left">
<div class="left-page">
<h2>Table of Contents</h2>
<h3>Namespaces</h3>
<h4></h4>
<ul>
<li><a href="#Core_CommandLine">CommandLine</a></li>
<li><a href="#Core_Slice">Slice</a></li>
</ul>
<h3>Structs</h3>
<h4>collections</h4>
<ul>
<li><a href="#Core_Array">Array</a></li>
<li><a href="#Core_ArrayPtr">ArrayPtr</a></li>
<li><a href="#Core_BitArray">BitArray</a></li>
<li><a href="#Core_ConcatBuffer">ConcatBuffer</a></li>
<li><a href="#Core_ConcatBufferBucket">ConcatBufferBucket</a></li>
<li><a href="#Core_ConcatBufferSeek">ConcatBufferSeek</a></li>
<li><a href="#Core_HashSet">HashSet</a></li>
<li><a href="#Core_HashSetEntry">HashSetEntry</a></li>
<li><a href="#Core_HashTable">HashTable</a></li>
<li><a href="#Core_HashTableEntry">HashTableEntry</a></li>
<li><a href="#Core_List">List</a></li>
<li><a href="#Core_ListNode">ListNode</a></li>
<li><a href="#Core_StaticArray">StaticArray</a></li>
</ul>
<h4>compress</h4>
<ul>
<li><a href="#Core_Compress_BitStream">BitStream</a></li>
<li><a href="#Core_Compress_Deflate">Deflate</a></li>
<li><a href="#Core_Compress_Inflate">Inflate</a></li>
<li><a href="#Core_Compress_ZLib">ZLib</a></li>
</ul>
<h4>crypto</h4>
<ul>
<li><a href="#Core_Hash_Adler32">Adler32</a></li>
<li><a href="#Core_Hash_Crc32">Crc32</a></li>
<li><a href="#Core_Hash_Md5">Md5</a></li>
<li><a href="#Core_Hash_Sha256">Sha256</a></li>
</ul>
<h4>diagnostics</h4>
<ul>
<li><a href="#Core_Log">Log</a></li>
</ul>
<h4>globalization</h4>
<ul>
<li><a href="#Core_Globalization_CultureInfo">CultureInfo</a></li>
<li><a href="#Core_Globalization_NumberFormatInfo">NumberFormatInfo</a></li>
</ul>
<h4>input</h4>
<ul>
<li><a href="#Core_Input_GamePad">GamePad</a></li>
<li><a href="#Core_Input_GamePadState">GamePadState</a></li>
<li><a href="#Core_Input_Keyboard">Keyboard</a></li>
<li><a href="#Core_Input_KeyboardState">KeyboardState</a></li>
<li><a href="#Core_Input_KeyboardStateNative">KeyboardStateNative</a></li>
<li><a href="#Core_Input_Mouse">Mouse</a></li>
<li><a href="#Core_Input_MouseState">MouseState</a></li>
</ul>
<h4>io</h4>
<ul>
<li><a href="#Core_ByteStream">ByteStream</a></li>
<li><a href="#Core_Directory_EnumerationOptions">EnumerationOptions</a></li>
<li><a href="#Core_File_FileInfo">FileInfo</a></li>
<li><a href="#Core_File_FileStream">FileStream</a></li>
<li><a href="#Core_File_Folder">Folder</a></li>
<li><a href="#Core_File_TextReader">TextReader</a></li>
<li><a href="#Core_File_TweakFile">TweakFile</a></li>
</ul>
<h4>math</h4>
<ul>
<li><a href="#Core_Math_Angle">Angle</a></li>
<li><a href="#Core_Math_Const">Const</a></li>
<li><a href="#Core_Math_Int128">Int128</a></li>
<li><a href="#Core_Math_Matrix3x3">Matrix3x3</a></li>
<li><a href="#Core_Math_Matrix4x4">Matrix4x4</a></li>
<li><a href="#Core_Math_NumericArray">NumericArray</a></li>
<li><a href="#Core_Math_Point">Point</a></li>
<li><a href="#Core_Math_Rectangle">Rectangle</a></li>
<li><a href="#Core_Math_Transform2">Transform2</a></li>
<li><a href="#Core_Math_Variant">Variant</a></li>
<li><a href="#Core_Math_Vector2">Vector2</a></li>
<li><a href="#Core_Math_Vector3">Vector3</a></li>
<li><a href="#Core_Math_Vector4">Vector4</a></li>
</ul>
<h4>rand</h4>
<ul>
<li><a href="#Core_Random_CMWC4096">CMWC4096</a></li>
<li><a href="#Core_Random_MWC">MWC</a></li>
<li><a href="#Core_Random_Mt64">Mt64</a></li>
<li><a href="#Core_Random_Rng">Rng</a></li>
</ul>
<h4>serialization</h4>
<ul>
<li><a href="#Core_Serialization_Serializer">Serializer</a></li>
</ul>
<h4>serialization/read</h4>
<ul>
<li><a href="#Core_Serialization_Decoder">Decoder</a></li>
<li><a href="#Core_Serialization_Read_JSon">JSon</a></li>
<li><a href="#Core_Serialization_Read_TagBin">TagBin</a></li>
<li><a href="#Core_Serialization_Read_TagBinOptions">TagBinOptions</a></li>
<li><a href="#Core_Serialization_Read_TagBinSection">TagBinSection</a></li>
</ul>
<h4>serialization/write</h4>
<ul>
<li><a href="#Core_Serialization_Encoder">Encoder</a></li>
<li><a href="#Core_Serialization_Write_JSon">JSon</a></li>
<li><a href="#Core_Serialization_Write_JSonOptions">JSonOptions</a></li>
<li><a href="#Core_Serialization_Write_TagBin">TagBin</a></li>
<li><a href="#Core_Serialization_Write_TagBinSection">TagBinSection</a></li>
</ul>
<h4>system</h4>
<ul>
<li><a href="#Core_CommandLine_IsSet">IsSet</a></li>
<li><a href="#Core_Env_Monitor">Monitor</a></li>
<li><a href="#Core_CommandLine_ParseOptions">ParseOptions</a></li>
<li><a href="#Core_Env_Process">Process</a></li>
<li><a href="#Core_CommandLine_Result">Result</a></li>
<li><a href="#Core_Env_StartInfo">StartInfo</a></li>
<li><a href="#Core_UUID">UUID</a></li>
</ul>
<h4>text</h4>
<ul>
<li><a href="#Core_StrConv_ConvertFormat">ConvertFormat</a></li>
<li><a href="#Core_StrConv_ConvertFormatFloat">ConvertFormatFloat</a></li>
<li><a href="#Core_StrConv_ConvertFormatInt">ConvertFormatInt</a></li>
<li><a href="#Core_Parser_RegExp">RegExp</a></li>
<li><a href="#Core_String">String</a></li>
<li><a href="#Core_StrConv_StringBuilder">StringBuilder</a></li>
</ul>
<h4>thread</h4>
<ul>
<li><a href="#Core_Sync_Event">Event</a></li>
<li><a href="#Core_Jobs_ForJob">ForJob</a></li>
<li><a href="#Core_Jobs_Job">Job</a></li>
<li><a href="#Core_Sync_Mutex">Mutex</a></li>
<li><a href="#Core_Sync_RWLock">RWLock</a></li>
<li><a href="#Core_Jobs_SliceJob">SliceJob</a></li>
<li><a href="#Core_Threading_Thread">Thread</a></li>
</ul>
<h4>time</h4>
<ul>
<li><a href="#Core_Time_DateTime">DateTime</a></li>
<li><a href="#Core_Time_Duration">Duration</a></li>
<li><a href="#Core_Time_FrameTiming">FrameTiming</a></li>
<li><a href="#Core_Time_Stopwatch">Stopwatch</a></li>
<li><a href="#Core_Time_TimeSpan">TimeSpan</a></li>
<li><a href="#Core_Time_Timer">Timer</a></li>
</ul>
<h3>Interfaces</h3>
<h4>crypto</h4>
<ul>
<li><a href="#Core_Hash_IHash32">IHash32</a></li>
</ul>
<h4>diagnostics</h4>
<ul>
<li><a href="#Core_ILogWriter">ILogWriter</a></li>
</ul>
<h4>serialization</h4>
<ul>
<li><a href="#Core_Serialization_ISerialize">ISerialize</a></li>
</ul>
<h4>serialization/read</h4>
<ul>
<li><a href="#Core_Serialization_IDecoder">IDecoder</a></li>
</ul>
<h4>serialization/write</h4>
<ul>
<li><a href="#Core_Serialization_IEncoder">IEncoder</a></li>
</ul>
<h4>text</h4>
<ul>
<li><a href="#Core_StrConv_IConvert">IConvert</a></li>
<li><a href="#Core_StrConv_IPokeValue">IPokeValue</a></li>
</ul>
<h3>Enums</h3>
<h4>compress</h4>
<ul>
<li><a href="#Core_Compress_Deflate_CompressionFlags">CompressionFlags</a></li>
<li><a href="#Core_Compress_Deflate_CompressionLevel">CompressionLevel</a></li>
<li><a href="#Core_Compress_Deflate_CompressionStrategy">CompressionStrategy</a></li>
</ul>
<h4>diagnostics</h4>
<ul>
<li><a href="#Core_Console_Color">Color</a></li>
<li><a href="#Core_LogFlags">LogFlags</a></li>
</ul>
<h4>input</h4>
<ul>
<li><a href="#Core_Input_GamePadButton">GamePadButton</a></li>
<li><a href="#Core_Input_GamePadError">GamePadError</a></li>
<li><a href="#Core_Input_Key">Key</a></li>
<li><a href="#Core_Input_KeyModifiers">KeyModifiers</a></li>
<li><a href="#Core_Input_MouseButton">MouseButton</a></li>
</ul>
<h4>io</h4>
<ul>
<li><a href="#Core_File_FileAccess">FileAccess</a></li>
<li><a href="#Core_File_FileAttributes">FileAttributes</a></li>
<li><a href="#Core_File_FileMode">FileMode</a></li>
<li><a href="#Core_File_FileShare">FileShare</a></li>
<li><a href="#Core_File_SeekOrigin">SeekOrigin</a></li>
<li><a href="#Core_File_TextEncoding">TextEncoding</a></li>
</ul>
<h4>serialization/read</h4>
<ul>
<li><a href="#Core_Serialization_DecoderFlags">DecoderFlags</a></li>
</ul>
<h4>serialization/write</h4>
<ul>
<li><a href="#Core_Serialization_SectionKind">SectionKind</a></li>
<li><a href="#Core_Serialization_Write_TagBinSignatures">TagBinSignatures</a></li>
</ul>
<h4>system</h4>
<ul>
<li><a href="#Core_Env_SpecialDirectory">SpecialDirectory</a></li>
</ul>
<h4>text</h4>
<ul>
<li><a href="#Core_Latin1_CharAttribute">CharAttribute</a></li>
<li><a href="#Core_CharacterSet">CharacterSet</a></li>
<li><a href="#Core_Utf8_ComparisonType">ComparisonType</a></li>
</ul>
<h4>thread</h4>
<ul>
<li><a href="#Core_Jobs_JobState">JobState</a></li>
<li><a href="#Core_Threading_ThreadPriority">ThreadPriority</a></li>
</ul>
<h4>time</h4>
<ul>
<li><a href="#Core_Time_DateTimeFormat">DateTimeFormat</a></li>
<li><a href="#Core_Time_DayOfWeek">DayOfWeek</a></li>
</ul>
<h3>Constants</h3>
<h4></h4>
<ul>
<li><a href="#Core_ASSERT">ASSERT</a></li>
<li><a href="#Core_BIG_ENDIAN">BIG_ENDIAN</a></li>
<li><a href="#Core_WINDOWS">WINDOWS</a></li>
</ul>
<h4>io</h4>
<ul>
<li><a href="#Core_Path_AltDirectorySeparatorChar">AltDirectorySeparatorChar</a></li>
<li><a href="#Core_Path_DirectorySeparatorChar">DirectorySeparatorChar</a></li>
<li><a href="#Core_Path_VolumeSeparatorChar">VolumeSeparatorChar</a></li>
</ul>
<h4>rand</h4>
<ul>
<li><a href="#Core_Random_NN">NN</a></li>
</ul>
<h4>system</h4>
<ul>
<li><a href="#Core_Env_EndLine">EndLine</a></li>
</ul>
<h4>text</h4>
<ul>
<li><a href="#Core_Latin1_CharProperties">CharProperties</a></li>
<li><a href="#Core_Utf8_MaxRunes">MaxRunes</a></li>
<li><a href="#Core_StrConv_ParseErrorIncomplete">ParseErrorIncomplete</a></li>
<li><a href="#Core_StrConv_ParseErrorInvalid">ParseErrorInvalid</a></li>
<li><a href="#Core_StrConv_ParseErrorOverflow">ParseErrorOverflow</a></li>
<li><a href="#Core_StringSmallSize">StringSmallSize</a></li>
<li><a href="#Core_Utf16_Surr1">Surr1</a></li>
<li><a href="#Core_Utf16_Surr2">Surr2</a></li>
<li><a href="#Core_Utf16_Surr3">Surr3</a></li>
<li><a href="#Core_Utf16_SurrSelf">SurrSelf</a></li>
<li><a href="#Core_Utf8_SurrogateMax">SurrogateMax</a></li>
<li><a href="#Core_Utf8_SurrogateMin">SurrogateMin</a></li>
<li><a href="#Core_Utf16_RuneError">Utf16.RuneError</a></li>
<li><a href="#Core_Utf8_RuneError">Utf8.RuneError</a></li>
</ul>
<h4>time</h4>
<ul>
<li><a href="#Core_Time_DayOfWeekNames">DayOfWeekNames</a></li>
<li><a href="#Core_Time_DaysPer100Years">DaysPer100Years</a></li>
<li><a href="#Core_Time_DaysPer400Years">DaysPer400Years</a></li>
<li><a href="#Core_Time_DaysPer4Years">DaysPer4Years</a></li>
<li><a href="#Core_Time_DaysPerYear">DaysPerYear</a></li>
<li><a href="#Core_Time_DaysTo10000">DaysTo10000</a></li>
<li><a href="#Core_Time_DaysTo1601">DaysTo1601</a></li>
<li><a href="#Core_Time_DaysTo1899">DaysTo1899</a></li>
<li><a href="#Core_Time_DaysTo1970">DaysTo1970</a></li>
<li><a href="#Core_Time_DaysToMonth365">DaysToMonth365</a></li>
<li><a href="#Core_Time_DaysToMonth366">DaysToMonth366</a></li>
<li><a href="#Core_Time_MaxMilliSeconds">MaxMilliSeconds</a></li>
<li><a href="#Core_Time_MaxMillis">MaxMillis</a></li>
<li><a href="#Core_Time_MaxTicks">MaxTicks</a></li>
<li><a href="#Core_Time_MillisPerDay">MillisPerDay</a></li>
<li><a href="#Core_Time_MillisPerHour">MillisPerHour</a></li>
<li><a href="#Core_Time_MillisPerMinute">MillisPerMinute</a></li>
<li><a href="#Core_Time_MillisPerSecond">MillisPerSecond</a></li>
<li><a href="#Core_Time_MonthNames">MonthNames</a></li>
<li><a href="#Core_Time_TicksPerDay">TicksPerDay</a></li>
<li><a href="#Core_Time_TicksPerHour">TicksPerHour</a></li>
<li><a href="#Core_Time_TicksPerMilliSecond">TicksPerMilliSecond</a></li>
<li><a href="#Core_Time_TicksPerMinute">TicksPerMinute</a></li>
<li><a href="#Core_Time_TicksPerSecond">TicksPerSecond</a></li>
</ul>
<h3>Type Aliases</h3>
<h4>input</h4>
<ul>
<li><a href="#Core_Input_VirtualKey">VirtualKey</a></li>
</ul>
<h4>io</h4>
<ul>
<li><a href="#Core_File_FileHandle">FileHandle</a></li>
</ul>
<h4>math</h4>
<ul>
<li><a href="#Core_Math_ConstF32">ConstF32</a></li>
<li><a href="#Core_Math_ConstF64">ConstF64</a></li>
</ul>
<h4>system</h4>
<ul>
<li><a href="#Core_Env_ProcessHandle">ProcessHandle</a></li>
</ul>
<h4>thread</h4>
<ul>
<li><a href="#Core_Threading_ThreadHandle">ThreadHandle</a></li>
</ul>
<h4>time</h4>
<ul>
<li><a href="#Core_Time_Ticks">Ticks</a></li>
<li><a href="#Core_Time_TimerHandle">TimerHandle</a></li>
</ul>
<h3>Attributes</h3>
<h4>serialization</h4>
<ul>
<li><a href="#Core_Serialization_Alias">Alias</a></li>
<li><a href="#Core_Serialization_Final">Final</a></li>
<li><a href="#Core_Serialization_NoSerialize">NoSerialize</a></li>
<li><a href="#Core_Serialization_PodFinal">PodFinal</a></li>
<li><a href="#Core_Serialization_Version">Version</a></li>
</ul>
<h4>system</h4>
<ul>
<li><a href="#Core_CommandLine_ArgParams">ArgParams</a></li>
</ul>
<h3>Functions</h3>
<h4>algorithms</h4>
<ul>
<li><a href="#Core_swap">Core.swap</a></li>
</ul>
<h4>collections</h4>
<ul>
<li><a href="#Core_Array_add">Array.add</a></li>
<li><a href="#Core_Array_addOnce">Array.addOnce</a></li>
<li><a href="#Core_Array_back">Array.back</a></li>
<li><a href="#Core_Array_backPtr">Array.backPtr</a></li>
<li><a href="#Core_Array_clear">Array.clear</a></li>
<li><a href="#Core_Array_contains">Array.contains</a></li>
<li><a href="#Core_Array_createBuffer">Array.createBuffer</a></li>
<li><a href="#Core_Array_createTemp">Array.createTemp</a></li>
<li><a href="#Core_Array_emplaceAddress">Array.emplaceAddress</a></li>
<li><a href="#Core_Array_emplaceAt">Array.emplaceAt</a></li>
<li><a href="#Core_Array_emplaceInitAddress">Array.emplaceInitAddress</a></li>
<li><a href="#Core_Array_free">Array.free</a></li>
<li><a href="#Core_Array_front">Array.front</a></li>
<li><a href="#Core_Array_frontPtr">Array.frontPtr</a></li>
<li><a href="#Core_Array_grow">Array.grow</a></li>
<li><a href="#Core_Array_insertAt">Array.insertAt</a></li>
<li><a href="#Core_Array_isEmpty">Array.isEmpty</a></li>
<li><a href="#Core_Array_opAffect">Array.opAffect</a></li>
<li><a href="#Core_Array_opCast">Array.opCast</a></li>
<li><a href="#Core_Array_opCount">Array.opCount</a></li>
<li><a href="#Core_Array_opData">Array.opData</a></li>
<li><a href="#Core_Array_opDrop">Array.opDrop</a></li>
<li><a href="#Core_Array_opIndex">Array.opIndex</a></li>
<li><a href="#Core_Array_opIndexAffect">Array.opIndexAffect</a></li>
<li><a href="#Core_Array_opIndexAssign">Array.opIndexAssign</a></li>
<li><a href="#Core_Array_opPostCopy">Array.opPostCopy</a></li>
<li><a href="#Core_Array_opSlice">Array.opSlice</a></li>
<li><a href="#Core_Array_opVisit">Array.opVisit</a></li>
<li><a href="#Core_Array_popBack">Array.popBack</a></li>
<li><a href="#Core_Array_realloc">Array.realloc</a></li>
<li><a href="#Core_Array_remove">Array.remove</a></li>
<li><a href="#Core_Array_removeAt">Array.removeAt</a></li>
<li><a href="#Core_Array_removeAtOrdered">Array.removeAtOrdered</a></li>
<li><a href="#Core_Array_removeBack">Array.removeBack</a></li>
<li><a href="#Core_Array_removeOrdered">Array.removeOrdered</a></li>
<li><a href="#Core_Array_reserve">Array.reserve</a></li>
<li><a href="#Core_Array_resize">Array.resize</a></li>
<li><a href="#Core_Array_sort">Array.sort</a></li>
<li><a href="#Core_Array_sortReverse">Array.sortReverse</a></li>
<li><a href="#Core_Array_swap">Array.swap</a></li>
<li><a href="#Core_Array_toSlice">Array.toSlice</a></li>
<li><a href="#Core_ArrayPtr_addNewPtr">ArrayPtr.addNewPtr</a></li>
<li><a href="#Core_ArrayPtr_clear">ArrayPtr.clear</a></li>
<li><a href="#Core_ArrayPtr_deletePtr">ArrayPtr.deletePtr</a></li>
<li><a href="#Core_ArrayPtr_newPtr">ArrayPtr.newPtr</a></li>
<li><a href="#Core_ArrayPtr_opDrop">ArrayPtr.opDrop</a></li>
<li><a href="#Core_BitArray_andWith">BitArray.andWith</a></li>
<li><a href="#Core_BitArray_get">BitArray.get</a></li>
<li><a href="#Core_BitArray_invert">BitArray.invert</a></li>
<li><a href="#Core_BitArray_opAffect">BitArray.opAffect</a></li>
<li><a href="#Core_BitArray_opCount">BitArray.opCount</a></li>
<li><a href="#Core_BitArray_opEquals">BitArray.opEquals</a></li>
<li><a href="#Core_BitArray_opIndex">BitArray.opIndex</a></li>
<li><a href="#Core_BitArray_opIndexAffect">BitArray.opIndexAffect</a></li>
<li><a href="#Core_BitArray_opVisit">BitArray.opVisit</a></li>
<li><a href="#Core_BitArray_orWith">BitArray.orWith</a></li>
<li><a href="#Core_BitArray_reserve">BitArray.reserve</a></li>
<li><a href="#Core_BitArray_set">BitArray.set</a></li>
<li><a href="#Core_BitArray_setAll">BitArray.setAll</a></li>
<li><a href="#Core_BitArray_xorWith">BitArray.xorWith</a></li>
<li><a href="#Core_ConcatBuffer_addBytes">ConcatBuffer.addBytes</a></li>
<li><a href="#Core_ConcatBuffer_addNative">ConcatBuffer.addNative</a></li>
<li><a href="#Core_ConcatBuffer_addStruct">ConcatBuffer.addStruct</a></li>
<li><a href="#Core_ConcatBuffer_clear">ConcatBuffer.clear</a></li>
<li><a href="#Core_ConcatBuffer_count">ConcatBuffer.count</a></li>
<li><a href="#Core_ConcatBuffer_eatBuffer">ConcatBuffer.eatBuffer</a></li>
<li><a href="#Core_ConcatBuffer_getOffset">ConcatBuffer.getOffset</a></li>
<li><a href="#Core_ConcatBuffer_getSeek">ConcatBuffer.getSeek</a></li>
<li><a href="#Core_ConcatBuffer_grow">ConcatBuffer.grow</a></li>
<li><a href="#Core_ConcatBuffer_makeLinear">ConcatBuffer.makeLinear</a></li>
<li><a href="#Core_ConcatBuffer_moveSeek">ConcatBuffer.moveSeek</a></li>
<li><a href="#Core_ConcatBuffer_moveToString">ConcatBuffer.moveToString</a></li>
<li><a href="#Core_ConcatBuffer_opCount">ConcatBuffer.opCount</a></li>
<li><a href="#Core_ConcatBuffer_opVisit">ConcatBuffer.opVisit</a></li>
<li><a href="#Core_ConcatBuffer_release">ConcatBuffer.release</a></li>
<li><a href="#Core_ConcatBuffer_setAllocator">ConcatBuffer.setAllocator</a></li>
<li><a href="#Core_ConcatBuffer_setBucketSize">ConcatBuffer.setBucketSize</a></li>
<li><a href="#Core_ConcatBuffer_setEndSeek">ConcatBuffer.setEndSeek</a></li>
<li><a href="#Core_ConcatBuffer_setFirstBucket">ConcatBuffer.setFirstBucket</a></li>
<li><a href="#Core_ConcatBuffer_setSeek">ConcatBuffer.setSeek</a></li>
<li><a href="#Core_ConcatBuffer_toSlice">ConcatBuffer.toSlice</a></li>
<li><a href="#Core_ConcatBuffer_toString">ConcatBuffer.toString</a></li>
<li><a href="#Core_HashSet_add">HashSet.add</a></li>
<li><a href="#Core_HashSet_clear">HashSet.clear</a></li>
<li><a href="#Core_HashSet_contains">HashSet.contains</a></li>
<li><a href="#Core_HashSet_emplaceInternal">HashSet.emplaceInternal</a></li>
<li><a href="#Core_HashSet_free">HashSet.free</a></li>
<li><a href="#Core_HashSet_grow">HashSet.grow</a></li>
<li><a href="#Core_HashSet_hashKey">HashSet.hashKey</a></li>
<li><a href="#Core_HashSet_opCount">HashSet.opCount</a></li>
<li><a href="#Core_HashSet_opDrop">HashSet.opDrop</a></li>
<li><a href="#Core_HashSet_opPostCopy">HashSet.opPostCopy</a></li>
<li><a href="#Core_HashSet_opVisit">HashSet.opVisit</a></li>
<li><a href="#Core_HashSet_remove">HashSet.remove</a></li>
<li><a href="#Core_HashSet_reserve">HashSet.reserve</a></li>
<li><a href="#Core_HashTable_add">HashTable.add</a></li>
<li><a href="#Core_HashTable_clear">HashTable.clear</a></li>
<li><a href="#Core_HashTable_contains">HashTable.contains</a></li>
<li><a href="#Core_HashTable_emplaceInternal">HashTable.emplaceInternal</a></li>
<li><a href="#Core_HashTable_find">HashTable.find</a></li>
<li><a href="#Core_HashTable_free">HashTable.free</a></li>
<li><a href="#Core_HashTable_grow">HashTable.grow</a></li>
<li><a href="#Core_HashTable_hashKey">HashTable.hashKey</a></li>
<li><a href="#Core_HashTable_opCount">HashTable.opCount</a></li>
<li><a href="#Core_HashTable_opDrop">HashTable.opDrop</a></li>
<li><a href="#Core_HashTable_opPostCopy">HashTable.opPostCopy</a></li>
<li><a href="#Core_HashTable_opVisit">HashTable.opVisit</a></li>
<li><a href="#Core_HashTable_remove">HashTable.remove</a></li>
<li><a href="#Core_HashTable_reserve">HashTable.reserve</a></li>
<li><a href="#Core_List_addBack">List.addBack</a></li>
<li><a href="#Core_List_addFront">List.addFront</a></li>
<li><a href="#Core_List_clear">List.clear</a></li>
<li><a href="#Core_List_insertAfter">List.insertAfter</a></li>
<li><a href="#Core_List_insertBefore">List.insertBefore</a></li>
<li><a href="#Core_List_opDrop">List.opDrop</a></li>
<li><a href="#Core_List_opVisit">List.opVisit</a></li>
<li><a href="#Core_StaticArray_add">StaticArray.add</a></li>
<li><a href="#Core_StaticArray_addOnce">StaticArray.addOnce</a></li>
<li><a href="#Core_StaticArray_back">StaticArray.back</a></li>
<li><a href="#Core_StaticArray_backPtr">StaticArray.backPtr</a></li>
<li><a href="#Core_StaticArray_clear">StaticArray.clear</a></li>
<li><a href="#Core_StaticArray_contains">StaticArray.contains</a></li>
<li><a href="#Core_StaticArray_emplaceAddress">StaticArray.emplaceAddress</a></li>
<li><a href="#Core_StaticArray_emplaceAt">StaticArray.emplaceAt</a></li>
<li><a href="#Core_StaticArray_emplaceInitAddress">StaticArray.emplaceInitAddress</a></li>
<li><a href="#Core_StaticArray_free">StaticArray.free</a></li>
<li><a href="#Core_StaticArray_front">StaticArray.front</a></li>
<li><a href="#Core_StaticArray_frontPtr">StaticArray.frontPtr</a></li>
<li><a href="#Core_StaticArray_insertAt">StaticArray.insertAt</a></li>
<li><a href="#Core_StaticArray_isEmpty">StaticArray.isEmpty</a></li>
<li><a href="#Core_StaticArray_opAffect">StaticArray.opAffect</a></li>
<li><a href="#Core_StaticArray_opCast">StaticArray.opCast</a></li>
<li><a href="#Core_StaticArray_opCount">StaticArray.opCount</a></li>
<li><a href="#Core_StaticArray_opData">StaticArray.opData</a></li>
<li><a href="#Core_StaticArray_opDrop">StaticArray.opDrop</a></li>
<li><a href="#Core_StaticArray_opIndex">StaticArray.opIndex</a></li>
<li><a href="#Core_StaticArray_opIndexAffect">StaticArray.opIndexAffect</a></li>
<li><a href="#Core_StaticArray_opIndexAssign">StaticArray.opIndexAssign</a></li>
<li><a href="#Core_StaticArray_opSlice">StaticArray.opSlice</a></li>
<li><a href="#Core_StaticArray_opVisit">StaticArray.opVisit</a></li>
<li><a href="#Core_StaticArray_popBack">StaticArray.popBack</a></li>
<li><a href="#Core_StaticArray_remove">StaticArray.remove</a></li>
<li><a href="#Core_StaticArray_removeAt">StaticArray.removeAt</a></li>
<li><a href="#Core_StaticArray_removeAtOrdered">StaticArray.removeAtOrdered</a></li>
<li><a href="#Core_StaticArray_removeBack">StaticArray.removeBack</a></li>
<li><a href="#Core_StaticArray_removeOrdered">StaticArray.removeOrdered</a></li>
<li><a href="#Core_StaticArray_resize">StaticArray.resize</a></li>
<li><a href="#Core_StaticArray_sort">StaticArray.sort</a></li>
<li><a href="#Core_StaticArray_sortReverse">StaticArray.sortReverse</a></li>
<li><a href="#Core_StaticArray_toSlice">StaticArray.toSlice</a></li>
</ul>
<h4>compress</h4>
<ul>
<li><a href="#Core_Compress_BitStream_consumeBits">BitStream.consumeBits</a></li>
<li><a href="#Core_Compress_BitStream_curPtr">BitStream.curPtr</a></li>
<li><a href="#Core_Compress_BitStream_discardToNextByte">BitStream.discardToNextByte</a></li>
<li><a href="#Core_Compress_BitStream_init">BitStream.init</a></li>
<li><a href="#Core_Compress_BitStream_peek32">BitStream.peek32</a></li>
<li><a href="#Core_Compress_BitStream_peek32Be">BitStream.peek32Be</a></li>
<li><a href="#Core_Compress_BitStream_peekBits">BitStream.peekBits</a></li>
<li><a href="#Core_Compress_BitStream_peekBitsNoRefill">BitStream.peekBitsNoRefill</a></li>
<li><a href="#Core_Compress_BitStream_peekBytes">BitStream.peekBytes</a></li>
<li><a href="#Core_Compress_BitStream_readBits">BitStream.readBits</a></li>
<li><a href="#Core_Compress_BitStream_readBitsNoRefill">BitStream.readBitsNoRefill</a></li>
<li><a href="#Core_Compress_BitStream_refill">BitStream.refill</a></li>
<li><a href="#Core_Compress_BitStream_revert">BitStream.revert</a></li>
<li><a href="#Core_Compress_BitStream_size">BitStream.size</a></li>
<li><a href="#Core_Compress_BitStream_startPtr">BitStream.startPtr</a></li>
<li><a href="#Core_Compress_Deflate_compress">Deflate.compress</a></li>
<li><a href="#Core_Compress_Deflate_init">Deflate.init</a></li>
<li><a href="#Core_Compress_Inflate_decompress">Inflate.decompress</a></li>
<li><a href="#Core_Compress_ZLib_compress">ZLib.compress</a></li>
<li><a href="#Core_Compress_ZLib_decompress">ZLib.decompress</a></li>
</ul>
<h4>crypto</h4>
<ul>
<li><a href="#Core_Hash_Adler32_compute">Adler32.compute</a></li>
<li><a href="#Core_Hash_Adler32_init">Adler32.init</a></li>
<li><a href="#Core_Hash_Adler32_update">Adler32.update</a></li>
<li><a href="#Core_Hash_Crc32_compute">Crc32.compute</a></li>
<li><a href="#Core_Hash_Crc32_init">Crc32.init</a></li>
<li><a href="#Core_Hash_Crc32_update">Crc32.update</a></li>
<li><a href="#Core_Hash_hash32">Hash.hash32</a></li>
<li><a href="#Core_Hash_Md5_compute">Md5.compute</a></li>
<li><a href="#Core_Hash_Md5_final">Md5.final</a></li>
<li><a href="#Core_Hash_Md5_init">Md5.init</a></li>
<li><a href="#Core_Hash_Md5_update">Md5.update</a></li>
<li><a href="#Core_Hash_Sha256_compute">Sha256.compute</a></li>
<li><a href="#Core_Hash_Sha256_final">Sha256.final</a></li>
<li><a href="#Core_Hash_Sha256_init">Sha256.init</a></li>
<li><a href="#Core_Hash_Sha256_update">Sha256.update</a></li>
</ul>
<h4>diagnostics</h4>
<ul>
<li><a href="#Core_Console_fatal">Console.fatal</a></li>
<li><a href="#Core_Console_lock">Console.lock</a></li>
<li><a href="#Core_Console_print">Console.print</a></li>
<li><a href="#Core_Console_printf">Console.printf</a></li>
<li><a href="#Core_Console_println">Console.println</a></li>
<li><a href="#Core_Console_prompt">Console.prompt</a></li>
<li><a href="#Core_Console_resetColor">Console.resetColor</a></li>
<li><a href="#Core_Console_setBackColor">Console.setBackColor</a></li>
<li><a href="#Core_Console_setTextColor">Console.setTextColor</a></li>
<li><a href="#Core_Console_silent">Console.silent</a></li>
<li><a href="#Core_Console_unlock">Console.unlock</a></li>
<li><a href="#Core_Debug_assert">Debug.assert</a></li>
<li><a href="#Core_Debug_breakPanic">Debug.breakPanic</a></li>
<li><a href="#Core_Debug_safety">Debug.safety</a></li>
<li><a href="#Core_Debug_safetyBoundCheck">Debug.safetyBoundCheck</a></li>
<li><a href="#Core_Debugger_attach">Debugger.attach</a></li>
<li><a href="#Core_Debugger_debugBreak">Debugger.debugBreak</a></li>
<li><a href="#Core_Debugger_isAttached">Debugger.isAttached</a></li>
<li><a href="#Core_Debugger_log">Debugger.log</a></li>
<li><a href="#Core_Log_addWriter">Log.addWriter</a></li>
<li><a href="#Core_Log_clearWriters">Log.clearWriters</a></li>
<li><a href="#Core_Log_create">Log.create</a></li>
<li><a href="#Core_Log_getFlags">Log.getFlags</a></li>
<li><a href="#Core_Log_getPrefix">Log.getPrefix</a></li>
<li><a href="#Core_Log_print">Log.print</a></li>
<li><a href="#Core_Log_setFlags">Log.setFlags</a></li>
<li><a href="#Core_Log_setPrefix">Log.setPrefix</a></li>
</ul>
<h4>globalization</h4>
<ul>
<li><a href="#Core_Globalization_getCultureInfo">Globalization.getCultureInfo</a></li>
</ul>
<h4>input</h4>
<ul>
<li><a href="#Core_Input_GamePad_clear">GamePad.clear</a></li>
<li><a href="#Core_Input_GamePad_getPosition">GamePad.getPosition</a></li>
<li><a href="#Core_Input_GamePad_isButtonJustPressed">GamePad.isButtonJustPressed</a></li>
<li><a href="#Core_Input_GamePad_isButtonJustReleased">GamePad.isButtonJustReleased</a></li>
<li><a href="#Core_Input_GamePad_isButtonPressed">GamePad.isButtonPressed</a></li>
<li><a href="#Core_Input_GamePad_isButtonReleased">GamePad.isButtonReleased</a></li>
<li><a href="#Core_Input_GamePad_isConnected">GamePad.isConnected</a></li>
<li><a href="#Core_Input_GamePad_setVibration">GamePad.setVibration</a></li>
<li><a href="#Core_Input_GamePad_update">GamePad.update</a></li>
<li><a href="#Core_Input_GamePadState_clear">GamePadState.clear</a></li>
<li><a href="#Core_Input_GamePadState_update">GamePadState.update</a></li>
<li><a href="#Core_Input_getKeyName">Input.getKeyName</a></li>
<li><a href="#Core_Input_getMousePos">Input.getMousePos</a></li>
<li><a href="#Core_Input_setMousePos">Input.setMousePos</a></li>
<li><a href="#Core_Input_showMouseCursor">Input.showMouseCursor</a></li>
<li><a href="#Core_Input_Keyboard_clear">Keyboard.clear</a></li>
<li><a href="#Core_Input_Keyboard_getPressedModifiers">Keyboard.getPressedModifiers</a></li>
<li><a href="#Core_Input_Keyboard_isKeyJustPressed">Keyboard.isKeyJustPressed</a></li>
<li><a href="#Core_Input_Keyboard_isKeyJustReleased">Keyboard.isKeyJustReleased</a></li>
<li><a href="#Core_Input_Keyboard_isKeyPressed">Keyboard.isKeyPressed</a></li>
<li><a href="#Core_Input_Keyboard_isKeyReleased">Keyboard.isKeyReleased</a></li>
<li><a href="#Core_Input_Keyboard_keyToRune">Keyboard.keyToRune</a></li>
<li><a href="#Core_Input_Keyboard_keyToVirtualKey">Keyboard.keyToVirtualKey</a></li>
<li><a href="#Core_Input_Keyboard_update">Keyboard.update</a></li>
<li><a href="#Core_Input_Keyboard_virtualKeyToKey">Keyboard.virtualKeyToKey</a></li>
<li><a href="#Core_Input_KeyboardState_clear">KeyboardState.clear</a></li>
<li><a href="#Core_Input_KeyboardState_update">KeyboardState.update</a></li>
<li><a href="#Core_Input_Mouse_clear">Mouse.clear</a></li>
<li><a href="#Core_Input_Mouse_getMove">Mouse.getMove</a></li>
<li><a href="#Core_Input_Mouse_getPosition">Mouse.getPosition</a></li>
<li><a href="#Core_Input_Mouse_getPreviousPos">Mouse.getPreviousPos</a></li>
<li><a href="#Core_Input_Mouse_isButtonDoubleClick">Mouse.isButtonDoubleClick</a></li>
<li><a href="#Core_Input_Mouse_isButtonJustPressed">Mouse.isButtonJustPressed</a></li>
<li><a href="#Core_Input_Mouse_isButtonJustReleased">Mouse.isButtonJustReleased</a></li>
<li><a href="#Core_Input_Mouse_isButtonPressed">Mouse.isButtonPressed</a></li>
<li><a href="#Core_Input_Mouse_isButtonReleased">Mouse.isButtonReleased</a></li>
<li><a href="#Core_Input_Mouse_update">Mouse.update</a></li>
<li><a href="#Core_Input_MouseState_clear">MouseState.clear</a></li>
<li><a href="#Core_Input_MouseState_update">MouseState.update</a></li>
</ul>
<h4>io</h4>
<ul>
<li><a href="#Core_ByteStream_getSeek">ByteStream.getSeek</a></li>
<li><a href="#Core_ByteStream_isEof">ByteStream.isEof</a></li>
<li><a href="#Core_ByteStream_length">ByteStream.length</a></li>
<li><a href="#Core_ByteStream_moveSeek">ByteStream.moveSeek</a></li>
<li><a href="#Core_ByteStream_openRead">ByteStream.openRead</a></li>
<li><a href="#Core_ByteStream_openWrite">ByteStream.openWrite</a></li>
<li><a href="#Core_ByteStream_peekU8">ByteStream.peekU8</a></li>
<li><a href="#Core_ByteStream_readBytes">ByteStream.readBytes</a></li>
<li><a href="#Core_ByteStream_readData">ByteStream.readData</a></li>
<li><a href="#Core_ByteStream_readNative">ByteStream.readNative</a></li>
<li><a href="#Core_ByteStream_readU8">ByteStream.readU8</a></li>
<li><a href="#Core_ByteStream_remainReadToSlice">ByteStream.remainReadToSlice</a></li>
<li><a href="#Core_ByteStream_remainReadToString">ByteStream.remainReadToString</a></li>
<li><a href="#Core_ByteStream_setSeek">ByteStream.setSeek</a></li>
<li><a href="#Core_ByteStream_writeBytes">ByteStream.writeBytes</a></li>
<li><a href="#Core_ByteStream_writeNative">ByteStream.writeNative</a></li>
<li><a href="#Core_Directory_create">Directory.create</a></li>
<li><a href="#Core_Directory_enumerate">Directory.enumerate</a></li>
<li><a href="#Core_Directory_enumerateDirectories">Directory.enumerateDirectories</a></li>
<li><a href="#Core_Directory_enumerateFiles">Directory.enumerateFiles</a></li>
<li><a href="#Core_Directory_exists">Directory.exists</a></li>
<li><a href="#Core_Directory_getCurrent">Directory.getCurrent</a></li>
<li><a href="#Core_Directory_getDrives">Directory.getDrives</a></li>
<li><a href="#Core_Directory_setCurrent">Directory.setCurrent</a></li>
<li><a href="#Core_File_delete">File.delete</a></li>
<li><a href="#Core_File_duplicate">File.duplicate</a></li>
<li><a href="#Core_File_exists">File.exists</a></li>
<li><a href="#Core_File_getAttributes">File.getAttributes</a></li>
<li><a href="#Core_File_getFileInfo">File.getFileInfo</a></li>
<li><a href="#Core_File_getInfo">File.getInfo</a></li>
<li><a href="#Core_File_locateInExplorer">File.locateInExplorer</a></li>
<li><a href="#Core_File_open">File.open</a></li>
<li><a href="#Core_File_openRead">File.openRead</a></li>
<li><a href="#Core_File_openWrite">File.openWrite</a></li>
<li><a href="#Core_File_readAllBytes">File.readAllBytes</a></li>
<li><a href="#Core_File_readAllLines">File.readAllLines</a></li>
<li><a href="#Core_File_readAllText">File.readAllText</a></li>
<li><a href="#Core_File_readEachLines">File.readEachLines</a></li>
<li><a href="#Core_File_touch">File.touch</a></li>
<li><a href="#Core_File_writeAllBytes">File.writeAllBytes</a></li>
<li><a href="#Core_File_writeAllLines">File.writeAllLines</a></li>
<li><a href="#Core_File_FileInfo_isDirectory">FileInfo.isDirectory</a></li>
<li><a href="#Core_File_FileStream_close">FileStream.close</a></li>
<li><a href="#Core_File_FileStream_getPosition">FileStream.getPosition</a></li>
<li><a href="#Core_File_FileStream_getSize">FileStream.getSize</a></li>
<li><a href="#Core_File_FileStream_isOpen">FileStream.isOpen</a></li>
<li><a href="#Core_File_FileStream_read">FileStream.read</a></li>
<li><a href="#Core_File_FileStream_readValue">FileStream.readValue</a></li>
<li><a href="#Core_File_FileStream_setPosition">FileStream.setPosition</a></li>
<li><a href="#Core_File_FileStream_skipPosition">FileStream.skipPosition</a></li>
<li><a href="#Core_File_FileStream_write">FileStream.write</a></li>
<li><a href="#Core_Path_combine">Path.combine</a></li>
<li><a href="#Core_Path_equals">Path.equals</a></li>
<li><a href="#Core_Path_getAbsolute">Path.getAbsolute</a></li>
<li><a href="#Core_Path_getDirectoryName">Path.getDirectoryName</a></li>
<li><a href="#Core_Path_getExtension">Path.getExtension</a></li>
<li><a href="#Core_Path_getExtensionLowerCase">Path.getExtensionLowerCase</a></li>
<li><a href="#Core_Path_getFileName">Path.getFileName</a></li>
<li><a href="#Core_Path_getFileNameWithoutExtension">Path.getFileNameWithoutExtension</a></li>
<li><a href="#Core_Path_getRootLength">Path.getRootLength</a></li>
<li><a href="#Core_Path_getRootName">Path.getRootName</a></li>
<li><a href="#Core_Path_hasExtension">Path.hasExtension</a></li>
<li><a href="#Core_Path_isDirectorySeparator">Path.isDirectorySeparator</a></li>
<li><a href="#Core_Path_isExtension">Path.isExtension</a></li>
<li><a href="#Core_Path_isRooted">Path.isRooted</a></li>
<li><a href="#Core_Path_isValidFileName">Path.isValidFileName</a></li>
<li><a href="#Core_Path_isValidPathName">Path.isValidPathName</a></li>
<li><a href="#Core_Path_normalize">Path.normalize</a></li>
<li><a href="#Core_File_TextReader_close">TextReader.close</a></li>
<li><a href="#Core_File_TextReader_open">TextReader.open</a></li>
<li><a href="#Core_File_TextReader_readLine">TextReader.readLine</a></li>
<li><a href="#Core_File_TextReader_readToEnd">TextReader.readToEnd</a></li>
<li><a href="#Core_File_TweakFile_parse">TweakFile.parse</a></li>
<li><a href="#Core_File_TweakFile_parseFile">TweakFile.parseFile</a></li>
<li><a href="#Core_File_TweakFile_registerFolder">TweakFile.registerFolder</a></li>
</ul>
<h4>math</h4>
<ul>
<li><a href="#Core_Math_Angle_opAffect">Angle.opAffect</a></li>
<li><a href="#Core_Math_Angle_opAffectSuffix">Angle.opAffectSuffix</a></li>
<li><a href="#Core_Math_Angle_toDegrees">Angle.toDegrees</a></li>
<li><a href="#Core_Math_Int128_mul">Int128.mul</a></li>
<li><a href="#Core_Math_Int128_opCast">Int128.opCast</a></li>
<li><a href="#Core_Math_Int128_opCmp">Int128.opCmp</a></li>
<li><a href="#Core_Math_Int128_opEquals">Int128.opEquals</a></li>
<li><a href="#Core_Math_abs">Math.abs</a></li>
<li><a href="#Core_Math_acos">Math.acos</a></li>
<li><a href="#Core_Math_asin">Math.asin</a></li>
<li><a href="#Core_Math_atan">Math.atan</a></li>
<li><a href="#Core_Math_atan2">Math.atan2</a></li>
<li><a href="#Core_Math_bigEndianToNative">Math.bigEndianToNative</a></li>
<li><a href="#Core_Math_ceil">Math.ceil</a></li>
<li><a href="#Core_Math_clamp">Math.clamp</a></li>
<li><a href="#Core_Math_cos">Math.cos</a></li>
<li><a href="#Core_Math_cosh">Math.cosh</a></li>
<li><a href="#Core_Math_countOnes">Math.countOnes</a></li>
<li><a href="#Core_Math_exp">Math.exp</a></li>
<li><a href="#Core_Math_exp2">Math.exp2</a></li>
<li><a href="#Core_Math_floor">Math.floor</a></li>
<li><a href="#Core_Math_hasByte">Math.hasByte</a></li>
<li><a href="#Core_Math_hasZeroByte">Math.hasZeroByte</a></li>
<li><a href="#Core_Math_isEqualEpsilon">Math.isEqualEpsilon</a></li>
<li><a href="#Core_Math_isNan">Math.isNan</a></li>
<li><a href="#Core_Math_isPowerOf2">Math.isPowerOf2</a></li>
<li><a href="#Core_Math_isZeroEpsilon">Math.isZeroEpsilon</a></li>
<li><a href="#Core_Math_leadingZeros">Math.leadingZeros</a></li>
<li><a href="#Core_Math_lerp">Math.lerp</a></li>
<li><a href="#Core_Math_littleEndianToNative">Math.littleEndianToNative</a></li>
<li><a href="#Core_Math_log">Math.log</a></li>
<li><a href="#Core_Math_log10">Math.log10</a></li>
<li><a href="#Core_Math_log2">Math.log2</a></li>
<li><a href="#Core_Math_makeRepeat16">Math.makeRepeat16</a></li>
<li><a href="#Core_Math_makeRepeat32">Math.makeRepeat32</a></li>
<li><a href="#Core_Math_makeRepeat64">Math.makeRepeat64</a></li>
<li><a href="#Core_Math_map">Math.map</a></li>
<li><a href="#Core_Math_max">Math.max</a></li>
<li><a href="#Core_Math_min">Math.min</a></li>
<li><a href="#Core_Math_mulAdd">Math.mulAdd</a></li>
<li><a href="#Core_Math_mulU64">Math.mulU64</a></li>
<li><a href="#Core_Math_nativeToBigEndian">Math.nativeToBigEndian</a></li>
<li><a href="#Core_Math_pow">Math.pow</a></li>
<li><a href="#Core_Math_reverse">Math.reverse</a></li>
<li><a href="#Core_Math_round">Math.round</a></li>
<li><a href="#Core_Math_roundDownToPowerOf2">Math.roundDownToPowerOf2</a></li>
<li><a href="#Core_Math_roundUpToPowerOf2">Math.roundUpToPowerOf2</a></li>
<li><a href="#Core_Math_saturate">Math.saturate</a></li>
<li><a href="#Core_Math_sign">Math.sign</a></li>
<li><a href="#Core_Math_sin">Math.sin</a></li>
<li><a href="#Core_Math_sinh">Math.sinh</a></li>
<li><a href="#Core_Math_smoothstep">Math.smoothstep</a></li>
<li><a href="#Core_Math_sqrt">Math.sqrt</a></li>
<li><a href="#Core_Math_tan">Math.tan</a></li>
<li><a href="#Core_Math_tanh">Math.tanh</a></li>
<li><a href="#Core_Math_toDegrees">Math.toDegrees</a></li>
<li><a href="#Core_Math_toRadians">Math.toRadians</a></li>
<li><a href="#Core_Math_trailingZeros">Math.trailingZeros</a></li>
<li><a href="#Core_Math_trunc">Math.trunc</a></li>
<li><a href="#Core_Math_Matrix3x3_setIdentity">Matrix3x3.setIdentity</a></li>
<li><a href="#Core_Math_Matrix4x4_setIdentity">Matrix4x4.setIdentity</a></li>
<li><a href="#Core_Math_NumericArray_from">NumericArray.from</a></li>
<li><a href="#Core_Math_NumericArray_mulAdd">NumericArray.mulAdd</a></li>
<li><a href="#Core_Math_NumericArray_opAffect">NumericArray.opAffect</a></li>
<li><a href="#Core_Math_NumericArray_opAssign">NumericArray.opAssign</a></li>
<li><a href="#Core_Math_NumericArray_opBinary">NumericArray.opBinary</a></li>
<li><a href="#Core_Math_NumericArray_opEquals">NumericArray.opEquals</a></li>
<li><a href="#Core_Math_NumericArray_opIndex">NumericArray.opIndex</a></li>
<li><a href="#Core_Math_NumericArray_set">NumericArray.set</a></li>
<li><a href="#Core_Math_Point_ceil">Point.ceil</a></li>
<li><a href="#Core_Math_Point_clear">Point.clear</a></li>
<li><a href="#Core_Math_Point_isEqualEpsilon">Point.isEqualEpsilon</a></li>
<li><a href="#Core_Math_Point_isZero">Point.isZero</a></li>
<li><a href="#Core_Math_Point_isZeroEpsilon">Point.isZeroEpsilon</a></li>
<li><a href="#Core_Math_Point_offset">Point.offset</a></li>
<li><a href="#Core_Math_Point_opAffect">Point.opAffect</a></li>
<li><a href="#Core_Math_Point_opAssign">Point.opAssign</a></li>
<li><a href="#Core_Math_Point_opBinary">Point.opBinary</a></li>
<li><a href="#Core_Math_Point_opEquals">Point.opEquals</a></li>
<li><a href="#Core_Math_Point_opUnary">Point.opUnary</a></li>
<li><a href="#Core_Math_Point_round">Point.round</a></li>
<li><a href="#Core_Math_Point_trunc">Point.trunc</a></li>
<li><a href="#Core_Math_Rectangle_applyPadding">Rectangle.applyPadding</a></li>
<li><a href="#Core_Math_Rectangle_bottom">Rectangle.bottom</a></li>
<li><a href="#Core_Math_Rectangle_ceil">Rectangle.ceil</a></li>
<li><a href="#Core_Math_Rectangle_center">Rectangle.center</a></li>
<li><a href="#Core_Math_Rectangle_clear">Rectangle.clear</a></li>
<li><a href="#Core_Math_Rectangle_constrainIn">Rectangle.constrainIn</a></li>
<li><a href="#Core_Math_Rectangle_contains">Rectangle.contains</a></li>
<li><a href="#Core_Math_Rectangle_getUnion">Rectangle.getUnion</a></li>
<li><a href="#Core_Math_Rectangle_horzCenter">Rectangle.horzCenter</a></li>
<li><a href="#Core_Math_Rectangle_inflate">Rectangle.inflate</a></li>
<li><a href="#Core_Math_Rectangle_intersect">Rectangle.intersect</a></li>
<li><a href="#Core_Math_Rectangle_intersectWith">Rectangle.intersectWith</a></li>
<li><a href="#Core_Math_Rectangle_isEmpty">Rectangle.isEmpty</a></li>
<li><a href="#Core_Math_Rectangle_isEmptyEpsilon">Rectangle.isEmptyEpsilon</a></li>
<li><a href="#Core_Math_Rectangle_isNormalized">Rectangle.isNormalized</a></li>
<li><a href="#Core_Math_Rectangle_isZero">Rectangle.isZero</a></li>
<li><a href="#Core_Math_Rectangle_isZeroEpsilon">Rectangle.isZeroEpsilon</a></li>
<li><a href="#Core_Math_Rectangle_moveBottom">Rectangle.moveBottom</a></li>
<li><a href="#Core_Math_Rectangle_moveLeft">Rectangle.moveLeft</a></li>
<li><a href="#Core_Math_Rectangle_moveRight">Rectangle.moveRight</a></li>
<li><a href="#Core_Math_Rectangle_moveTop">Rectangle.moveTop</a></li>
<li><a href="#Core_Math_Rectangle_offset">Rectangle.offset</a></li>
<li><a href="#Core_Math_Rectangle_opEquals">Rectangle.opEquals</a></li>
<li><a href="#Core_Math_Rectangle_right">Rectangle.right</a></li>
<li><a href="#Core_Math_Rectangle_round">Rectangle.round</a></li>
<li><a href="#Core_Math_Rectangle_scale">Rectangle.scale</a></li>
<li><a href="#Core_Math_Rectangle_set">Rectangle.set</a></li>
<li><a href="#Core_Math_Rectangle_setBottom">Rectangle.setBottom</a></li>
<li><a href="#Core_Math_Rectangle_setRight">Rectangle.setRight</a></li>
<li><a href="#Core_Math_Rectangle_setUnion">Rectangle.setUnion</a></li>
<li><a href="#Core_Math_Rectangle_trunc">Rectangle.trunc</a></li>
<li><a href="#Core_Math_Rectangle_vertCenter">Rectangle.vertCenter</a></li>
<li><a href="#Core_Math_Transform2_createRotation">Transform2.createRotation</a></li>
<li><a href="#Core_Math_Transform2_createScale">Transform2.createScale</a></li>
<li><a href="#Core_Math_Transform2_createTranslation">Transform2.createTranslation</a></li>
<li><a href="#Core_Math_Transform2_multiply">Transform2.multiply</a></li>
<li><a href="#Core_Math_Transform2_setIdentity">Transform2.setIdentity</a></li>
<li><a href="#Core_Math_Variant_checkValidType">Variant.checkValidType</a></li>
<li><a href="#Core_Math_Variant_drop">Variant.drop</a></li>
<li><a href="#Core_Math_Variant_get">Variant.get</a></li>
<li><a href="#Core_Math_Variant_opAffect">Variant.opAffect</a></li>
<li><a href="#Core_Math_Variant_opCmp">Variant.opCmp</a></li>
<li><a href="#Core_Math_Variant_opDrop">Variant.opDrop</a></li>
<li><a href="#Core_Math_Variant_opEquals">Variant.opEquals</a></li>
<li><a href="#Core_Math_Variant_opPostCopy">Variant.opPostCopy</a></li>
<li><a href="#Core_Math_Variant_opPostMove">Variant.opPostMove</a></li>
<li><a href="#Core_Math_Variant_set">Variant.set</a></li>
<li><a href="#Core_Math_Vector2_angle">Vector2.angle</a></li>
<li><a href="#Core_Math_Vector2_ceil">Vector2.ceil</a></li>
<li><a href="#Core_Math_Vector2_clear">Vector2.clear</a></li>
<li><a href="#Core_Math_Vector2_cosAngle">Vector2.cosAngle</a></li>
<li><a href="#Core_Math_Vector2_cross">Vector2.cross</a></li>
<li><a href="#Core_Math_Vector2_distance">Vector2.distance</a></li>
<li><a href="#Core_Math_Vector2_distanceSquared">Vector2.distanceSquared</a></li>
<li><a href="#Core_Math_Vector2_distanceToLine">Vector2.distanceToLine</a></li>
<li><a href="#Core_Math_Vector2_distanceToSegment">Vector2.distanceToSegment</a></li>
<li><a href="#Core_Math_Vector2_dot">Vector2.dot</a></li>
<li><a href="#Core_Math_Vector2_floor">Vector2.floor</a></li>
<li><a href="#Core_Math_Vector2_isEqualEpsilon">Vector2.isEqualEpsilon</a></li>
<li><a href="#Core_Math_Vector2_isInEllipse">Vector2.isInEllipse</a></li>
<li><a href="#Core_Math_Vector2_isInTriangle">Vector2.isInTriangle</a></li>
<li><a href="#Core_Math_Vector2_isZero">Vector2.isZero</a></li>
<li><a href="#Core_Math_Vector2_isZeroEpsilon">Vector2.isZeroEpsilon</a></li>
<li><a href="#Core_Math_Vector2_length">Vector2.length</a></li>
<li><a href="#Core_Math_Vector2_lengthSquared">Vector2.lengthSquared</a></li>
<li><a href="#Core_Math_Vector2_lerp">Vector2.lerp</a></li>
<li><a href="#Core_Math_Vector2_lineLineIntersect">Vector2.lineLineIntersect</a></li>
<li><a href="#Core_Math_Vector2_max">Vector2.max</a></li>
<li><a href="#Core_Math_Vector2_min">Vector2.min</a></li>
<li><a href="#Core_Math_Vector2_nearestPointsSegSeg">Vector2.nearestPointsSegSeg</a></li>
<li><a href="#Core_Math_Vector2_negate">Vector2.negate</a></li>
<li><a href="#Core_Math_Vector2_normalize">Vector2.normalize</a></li>
<li><a href="#Core_Math_Vector2_normalizeSafe">Vector2.normalizeSafe</a></li>
<li><a href="#Core_Math_Vector2_opAffect">Vector2.opAffect</a></li>
<li><a href="#Core_Math_Vector2_opAssign">Vector2.opAssign</a></li>
<li><a href="#Core_Math_Vector2_opBinary">Vector2.opBinary</a></li>
<li><a href="#Core_Math_Vector2_opEquals">Vector2.opEquals</a></li>
<li><a href="#Core_Math_Vector2_opUnary">Vector2.opUnary</a></li>
<li><a href="#Core_Math_Vector2_polyContains">Vector2.polyContains</a></li>
<li><a href="#Core_Math_Vector2_rotate">Vector2.rotate</a></li>
<li><a href="#Core_Math_Vector2_round">Vector2.round</a></li>
<li><a href="#Core_Math_Vector2_segSegIntersect">Vector2.segSegIntersect</a></li>
<li><a href="#Core_Math_Vector2_set">Vector2.set</a></li>
<li><a href="#Core_Math_Vector2_setLength">Vector2.setLength</a></li>
<li><a href="#Core_Math_Vector2_setLengthSafe">Vector2.setLengthSafe</a></li>
<li><a href="#Core_Math_Vector2_toNormalize">Vector2.toNormalize</a></li>
<li><a href="#Core_Math_Vector2_toNormalizeSafe">Vector2.toNormalizeSafe</a></li>
<li><a href="#Core_Math_Vector3_clear">Vector3.clear</a></li>
<li><a href="#Core_Math_Vector3_distance">Vector3.distance</a></li>
<li><a href="#Core_Math_Vector3_distanceSquared">Vector3.distanceSquared</a></li>
<li><a href="#Core_Math_Vector3_dot">Vector3.dot</a></li>
<li><a href="#Core_Math_Vector3_isEqualEpsilon">Vector3.isEqualEpsilon</a></li>
<li><a href="#Core_Math_Vector3_isZero">Vector3.isZero</a></li>
<li><a href="#Core_Math_Vector3_isZeroEpsilon">Vector3.isZeroEpsilon</a></li>
<li><a href="#Core_Math_Vector3_length">Vector3.length</a></li>
<li><a href="#Core_Math_Vector3_lengthSquared">Vector3.lengthSquared</a></li>
<li><a href="#Core_Math_Vector3_lerp">Vector3.lerp</a></li>
<li><a href="#Core_Math_Vector3_max">Vector3.max</a></li>
<li><a href="#Core_Math_Vector3_min">Vector3.min</a></li>
<li><a href="#Core_Math_Vector3_negate">Vector3.negate</a></li>
<li><a href="#Core_Math_Vector3_normalize">Vector3.normalize</a></li>
<li><a href="#Core_Math_Vector3_normalizeSafe">Vector3.normalizeSafe</a></li>
<li><a href="#Core_Math_Vector3_opAffect">Vector3.opAffect</a></li>
<li><a href="#Core_Math_Vector3_opAssign">Vector3.opAssign</a></li>
<li><a href="#Core_Math_Vector3_opBinary">Vector3.opBinary</a></li>
<li><a href="#Core_Math_Vector3_opEquals">Vector3.opEquals</a></li>
<li><a href="#Core_Math_Vector3_opUnary">Vector3.opUnary</a></li>
<li><a href="#Core_Math_Vector3_set">Vector3.set</a></li>
<li><a href="#Core_Math_Vector3_setLength">Vector3.setLength</a></li>
<li><a href="#Core_Math_Vector3_setLengthSafe">Vector3.setLengthSafe</a></li>
<li><a href="#Core_Math_Vector3_toNormalize">Vector3.toNormalize</a></li>
<li><a href="#Core_Math_Vector3_toNormalizeSafe">Vector3.toNormalizeSafe</a></li>
<li><a href="#Core_Math_Vector4_clear">Vector4.clear</a></li>
<li><a href="#Core_Math_Vector4_lerp">Vector4.lerp</a></li>
<li><a href="#Core_Math_Vector4_opAffect">Vector4.opAffect</a></li>
<li><a href="#Core_Math_Vector4_opEquals">Vector4.opEquals</a></li>
<li><a href="#Core_Math_Vector4_opUnary">Vector4.opUnary</a></li>
</ul>
<h4>memory</h4>
<ul>
<li><a href="#Core_Memory_align">Memory.align</a></li>
<li><a href="#Core_Memory_alloc">Memory.alloc</a></li>
<li><a href="#Core_Memory_assertIsAllocated">Memory.assertIsAllocated</a></li>
<li><a href="#Core_Memory_clear">Memory.clear</a></li>
<li><a href="#Core_Memory_compare">Memory.compare</a></li>
<li><a href="#Core_Memory_copy">Memory.copy</a></li>
<li><a href="#Core_Memory_copyOver">Memory.copyOver</a></li>
<li><a href="#Core_Memory_delete">Memory.delete</a></li>
<li><a href="#Core_Memory_equals">Memory.equals</a></li>
<li><a href="#Core_Memory_free">Memory.free</a></li>
<li><a href="#Core_Memory_freeAll">Memory.freeAll</a></li>
<li><a href="#Core_Memory_freeTemp">Memory.freeTemp</a></li>
<li><a href="#Core_Memory_new">Memory.new</a></li>
<li><a href="#Core_Memory_pushAllocator">Memory.pushAllocator</a></li>
<li><a href="#Core_Memory_pushTempAllocator">Memory.pushTempAllocator</a></li>
<li><a href="#Core_Memory_realloc">Memory.realloc</a></li>
<li><a href="#Core_Memory_set">Memory.set</a></li>
<li><a href="#Core_Memory_tempAlloc">Memory.tempAlloc</a></li>
</ul>
<h4>rand</h4>
<ul>
<li><a href="#Core_Random_CMWC4096_nextU32">CMWC4096.nextU32</a></li>
<li><a href="#Core_Random_CMWC4096_seedU32">CMWC4096.seedU32</a></li>
<li><a href="#Core_Random_MWC_nextU32">MWC.nextU32</a></li>
<li><a href="#Core_Random_MWC_seedU32">MWC.seedU32</a></li>
<li><a href="#Core_Random_Mt64_nextU64">Mt64.nextU64</a></li>
<li><a href="#Core_Random_Mt64_seedU64">Mt64.seedU64</a></li>
<li><a href="#Core_Noise_perlin">Noise.perlin</a></li>
<li><a href="#Core_Random_shared">Random.shared</a></li>
<li><a href="#Core_Random_Rng_nextBool">Rng.nextBool</a></li>
<li><a href="#Core_Random_Rng_nextF32">Rng.nextF32</a></li>
<li><a href="#Core_Random_Rng_nextF64">Rng.nextF64</a></li>
<li><a href="#Core_Random_Rng_nextS32">Rng.nextS32</a></li>
<li><a href="#Core_Random_Rng_nextS64">Rng.nextS64</a></li>
<li><a href="#Core_Random_Rng_nextU32">Rng.nextU32</a></li>
<li><a href="#Core_Random_Rng_nextU64">Rng.nextU64</a></li>
<li><a href="#Core_Random_Rng_seedNow">Rng.seedNow</a></li>
<li><a href="#Core_Random_Rng_seedU32">Rng.seedU32</a></li>
<li><a href="#Core_Random_Rng_seedU64">Rng.seedU64</a></li>
<li><a href="#Core_Random_Rng_shuffle">Rng.shuffle</a></li>
</ul>
<h4>serialization</h4>
<ul>
<li><a href="#Core_Serialization_ISerialize_postSerialize">ISerialize.postSerialize</a></li>
<li><a href="#Core_Serialization_ISerialize_read">ISerialize.read</a></li>
<li><a href="#Core_Serialization_ISerialize_readElement">ISerialize.readElement</a></li>
<li><a href="#Core_Serialization_ISerialize_write">ISerialize.write</a></li>
<li><a href="#Core_Serialization_ISerialize_writeElement">ISerialize.writeElement</a></li>
<li><a href="#Core_Serialization_isPodFinal">Serialization.isPodFinal</a></li>
<li><a href="#Core_Serialization_Serializer_beginSection">Serializer.beginSection</a></li>
<li><a href="#Core_Serialization_Serializer_end">Serializer.end</a></li>
<li><a href="#Core_Serialization_Serializer_endSection">Serializer.endSection</a></li>
<li><a href="#Core_Serialization_Serializer_isReading">Serializer.isReading</a></li>
<li><a href="#Core_Serialization_Serializer_isWriting">Serializer.isWriting</a></li>
<li><a href="#Core_Serialization_Serializer_serialize">Serializer.serialize</a></li>
<li><a href="#Core_Serialization_Serializer_startRead">Serializer.startRead</a></li>
<li><a href="#Core_Serialization_Serializer_startWrite">Serializer.startWrite</a></li>
</ul>
<h4>serialization/read</h4>
<ul>
<li><a href="#Core_Serialization_Decoder_IDecoder_beginField">Decoder.IDecoder.beginField</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_beginSection">Decoder.IDecoder.beginSection</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_end">Decoder.IDecoder.end</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_endField">Decoder.IDecoder.endField</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_endSection">Decoder.IDecoder.endSection</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_getVersion">Decoder.IDecoder.getVersion</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_read">Decoder.IDecoder.read</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readBool">Decoder.IDecoder.readBool</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readBufferU8">Decoder.IDecoder.readBufferU8</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readF32">Decoder.IDecoder.readF32</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readF64">Decoder.IDecoder.readF64</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readS16">Decoder.IDecoder.readS16</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readS32">Decoder.IDecoder.readS32</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readS64">Decoder.IDecoder.readS64</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readS8">Decoder.IDecoder.readS8</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readU16">Decoder.IDecoder.readU16</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readU32">Decoder.IDecoder.readU32</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readU64">Decoder.IDecoder.readU64</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_readU8">Decoder.IDecoder.readU8</a></li>
<li><a href="#Core_Serialization_Decoder_IDecoder_start">Decoder.IDecoder.start</a></li>
<li><a href="#Core_Serialization_Decoder_end">Decoder.end</a></li>
<li><a href="#Core_Serialization_Decoder_readAll">Decoder.readAll</a></li>
<li><a href="#Core_Serialization_Decoder_readTypeValue">Decoder.readTypeValue</a></li>
<li><a href="#Core_Serialization_Decoder_readValue">Decoder.readValue</a></li>
<li><a href="#Core_Serialization_Decoder_start">Decoder.start</a></li>
<li><a href="#Core_Serialization_Read_JSon_beginElement">JSon.beginElement</a></li>
<li><a href="#Core_Serialization_Read_JSon_beginRoot">JSon.beginRoot</a></li>
<li><a href="#Core_Serialization_Read_JSon_beginSection">JSon.beginSection</a></li>
<li><a href="#Core_Serialization_Read_JSon_beginSequence">JSon.beginSequence</a></li>
<li><a href="#Core_Serialization_Read_JSon_beginStruct">JSon.beginStruct</a></li>
<li><a href="#Core_Serialization_Read_JSon_beginValue">JSon.beginValue</a></li>
<li><a href="#Core_Serialization_Read_JSon_endElement">JSon.endElement</a></li>
<li><a href="#Core_Serialization_Read_JSon_endRoot">JSon.endRoot</a></li>
<li><a href="#Core_Serialization_Read_JSon_endSection">JSon.endSection</a></li>
<li><a href="#Core_Serialization_Read_JSon_endSequence">JSon.endSequence</a></li>
<li><a href="#Core_Serialization_Read_JSon_endStruct">JSon.endStruct</a></li>
<li><a href="#Core_Serialization_Read_JSon_endValue">JSon.endValue</a></li>
<li><a href="#Core_Serialization_Read_JSon_getVersion">JSon.getVersion</a></li>
<li><a href="#Core_Serialization_Read_JSon_readNative">JSon.readNative</a></li>
<li><a href="#Core_Serialization_Read_JSon_startRead">JSon.startRead</a></li>
<li><a href="#Core_Serialization_Read_JSon_toNextSequenceElement">JSon.toNextSequenceElement</a></li>
<li><a href="#Core_Serialization_Read_JSon_zapBlanks">JSon.zapBlanks</a></li>
<li><a href="#Core_Serialization_IDecoder_beginField">Serialization.IDecoder.beginField</a></li>
<li><a href="#Core_Serialization_IDecoder_beginSection">Serialization.IDecoder.beginSection</a></li>
<li><a href="#Core_Serialization_IDecoder_end">Serialization.IDecoder.end</a></li>
<li><a href="#Core_Serialization_IDecoder_endField">Serialization.IDecoder.endField</a></li>
<li><a href="#Core_Serialization_IDecoder_endSection">Serialization.IDecoder.endSection</a></li>
<li><a href="#Core_Serialization_IDecoder_getVersion">Serialization.IDecoder.getVersion</a></li>
<li><a href="#Core_Serialization_IDecoder_read">Serialization.IDecoder.read</a></li>
<li><a href="#Core_Serialization_IDecoder_readBool">Serialization.IDecoder.readBool</a></li>
<li><a href="#Core_Serialization_IDecoder_readBufferU8">Serialization.IDecoder.readBufferU8</a></li>
<li><a href="#Core_Serialization_IDecoder_readF32">Serialization.IDecoder.readF32</a></li>
<li><a href="#Core_Serialization_IDecoder_readF64">Serialization.IDecoder.readF64</a></li>
<li><a href="#Core_Serialization_IDecoder_readS16">Serialization.IDecoder.readS16</a></li>
<li><a href="#Core_Serialization_IDecoder_readS32">Serialization.IDecoder.readS32</a></li>
<li><a href="#Core_Serialization_IDecoder_readS64">Serialization.IDecoder.readS64</a></li>
<li><a href="#Core_Serialization_IDecoder_readS8">Serialization.IDecoder.readS8</a></li>
<li><a href="#Core_Serialization_IDecoder_readU16">Serialization.IDecoder.readU16</a></li>
<li><a href="#Core_Serialization_IDecoder_readU32">Serialization.IDecoder.readU32</a></li>
<li><a href="#Core_Serialization_IDecoder_readU64">Serialization.IDecoder.readU64</a></li>
<li><a href="#Core_Serialization_IDecoder_readU8">Serialization.IDecoder.readU8</a></li>
<li><a href="#Core_Serialization_IDecoder_start">Serialization.IDecoder.start</a></li>
<li><a href="#Core_Serialization_Read_TagBin_beginElement">TagBin.beginElement</a></li>
<li><a href="#Core_Serialization_Read_TagBin_beginRoot">TagBin.beginRoot</a></li>
<li><a href="#Core_Serialization_Read_TagBin_beginSection">TagBin.beginSection</a></li>
<li><a href="#Core_Serialization_Read_TagBin_beginSequence">TagBin.beginSequence</a></li>
<li><a href="#Core_Serialization_Read_TagBin_beginStruct">TagBin.beginStruct</a></li>
<li><a href="#Core_Serialization_Read_TagBin_beginValue">TagBin.beginValue</a></li>
<li><a href="#Core_Serialization_Read_TagBin_endElement">TagBin.endElement</a></li>
<li><a href="#Core_Serialization_Read_TagBin_endRoot">TagBin.endRoot</a></li>
<li><a href="#Core_Serialization_Read_TagBin_endSection">TagBin.endSection</a></li>
<li><a href="#Core_Serialization_Read_TagBin_endSequence">TagBin.endSequence</a></li>
<li><a href="#Core_Serialization_Read_TagBin_endStruct">TagBin.endStruct</a></li>
<li><a href="#Core_Serialization_Read_TagBin_endValue">TagBin.endValue</a></li>
<li><a href="#Core_Serialization_Read_TagBin_getVersion">TagBin.getVersion</a></li>
<li><a href="#Core_Serialization_Read_TagBin_readNative">TagBin.readNative</a></li>
<li><a href="#Core_Serialization_Read_TagBin_startRead">TagBin.startRead</a></li>
<li><a href="#Core_Serialization_Read_TagBin_toNextSequenceElement">TagBin.toNextSequenceElement</a></li>
</ul>
<h4>serialization/write</h4>
<ul>
<li><a href="#Core_Serialization_Encoder_IEncoder_beginField">Encoder.IEncoder.beginField</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_beginSection">Encoder.IEncoder.beginSection</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_end">Encoder.IEncoder.end</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_endField">Encoder.IEncoder.endField</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_endSection">Encoder.IEncoder.endSection</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_start">Encoder.IEncoder.start</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_write">Encoder.IEncoder.write</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeBool">Encoder.IEncoder.writeBool</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeBufferU8">Encoder.IEncoder.writeBufferU8</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeF32">Encoder.IEncoder.writeF32</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeF64">Encoder.IEncoder.writeF64</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeS16">Encoder.IEncoder.writeS16</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeS32">Encoder.IEncoder.writeS32</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeS64">Encoder.IEncoder.writeS64</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeS8">Encoder.IEncoder.writeS8</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeU16">Encoder.IEncoder.writeU16</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeU32">Encoder.IEncoder.writeU32</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeU64">Encoder.IEncoder.writeU64</a></li>
<li><a href="#Core_Serialization_Encoder_IEncoder_writeU8">Encoder.IEncoder.writeU8</a></li>
<li><a href="#Core_Serialization_Encoder_end">Encoder.end</a></li>
<li><a href="#Core_Serialization_Encoder_start">Encoder.start</a></li>
<li><a href="#Core_Serialization_Encoder_writeAll">Encoder.writeAll</a></li>
<li><a href="#Core_Serialization_Encoder_writeTypeValue">Encoder.writeTypeValue</a></li>
<li><a href="#Core_Serialization_Encoder_writeValue">Encoder.writeValue</a></li>
<li><a href="#Core_Serialization_Write_JSon_beginElement">JSon.beginElement</a></li>
<li><a href="#Core_Serialization_Write_JSon_beginRoot">JSon.beginRoot</a></li>
<li><a href="#Core_Serialization_Write_JSon_beginSection">JSon.beginSection</a></li>
<li><a href="#Core_Serialization_Write_JSon_beginSequence">JSon.beginSequence</a></li>
<li><a href="#Core_Serialization_Write_JSon_beginStruct">JSon.beginStruct</a></li>
<li><a href="#Core_Serialization_Write_JSon_beginValue">JSon.beginValue</a></li>
<li><a href="#Core_Serialization_Write_JSon_endElement">JSon.endElement</a></li>
<li><a href="#Core_Serialization_Write_JSon_endRoot">JSon.endRoot</a></li>
<li><a href="#Core_Serialization_Write_JSon_endSection">JSon.endSection</a></li>
<li><a href="#Core_Serialization_Write_JSon_endSequence">JSon.endSequence</a></li>
<li><a href="#Core_Serialization_Write_JSon_endStruct">JSon.endStruct</a></li>
<li><a href="#Core_Serialization_Write_JSon_endValue">JSon.endValue</a></li>
<li><a href="#Core_Serialization_Write_JSon_startWrite">JSon.startWrite</a></li>
<li><a href="#Core_Serialization_Write_JSon_writeIndent">JSon.writeIndent</a></li>
<li><a href="#Core_Serialization_Write_JSon_writeNative">JSon.writeNative</a></li>
<li><a href="#Core_Serialization_IEncoder_beginField">Serialization.IEncoder.beginField</a></li>
<li><a href="#Core_Serialization_IEncoder_beginSection">Serialization.IEncoder.beginSection</a></li>
<li><a href="#Core_Serialization_IEncoder_end">Serialization.IEncoder.end</a></li>
<li><a href="#Core_Serialization_IEncoder_endField">Serialization.IEncoder.endField</a></li>
<li><a href="#Core_Serialization_IEncoder_endSection">Serialization.IEncoder.endSection</a></li>
<li><a href="#Core_Serialization_IEncoder_start">Serialization.IEncoder.start</a></li>
<li><a href="#Core_Serialization_IEncoder_write">Serialization.IEncoder.write</a></li>
<li><a href="#Core_Serialization_IEncoder_writeBool">Serialization.IEncoder.writeBool</a></li>
<li><a href="#Core_Serialization_IEncoder_writeBufferU8">Serialization.IEncoder.writeBufferU8</a></li>
<li><a href="#Core_Serialization_IEncoder_writeF32">Serialization.IEncoder.writeF32</a></li>
<li><a href="#Core_Serialization_IEncoder_writeF64">Serialization.IEncoder.writeF64</a></li>
<li><a href="#Core_Serialization_IEncoder_writeS16">Serialization.IEncoder.writeS16</a></li>
<li><a href="#Core_Serialization_IEncoder_writeS32">Serialization.IEncoder.writeS32</a></li>
<li><a href="#Core_Serialization_IEncoder_writeS64">Serialization.IEncoder.writeS64</a></li>
<li><a href="#Core_Serialization_IEncoder_writeS8">Serialization.IEncoder.writeS8</a></li>
<li><a href="#Core_Serialization_IEncoder_writeU16">Serialization.IEncoder.writeU16</a></li>
<li><a href="#Core_Serialization_IEncoder_writeU32">Serialization.IEncoder.writeU32</a></li>
<li><a href="#Core_Serialization_IEncoder_writeU64">Serialization.IEncoder.writeU64</a></li>
<li><a href="#Core_Serialization_IEncoder_writeU8">Serialization.IEncoder.writeU8</a></li>
<li><a href="#Core_Serialization_Write_TagBin_beginElement">TagBin.beginElement</a></li>
<li><a href="#Core_Serialization_Write_TagBin_beginRoot">TagBin.beginRoot</a></li>
<li><a href="#Core_Serialization_Write_TagBin_beginSection">TagBin.beginSection</a></li>
<li><a href="#Core_Serialization_Write_TagBin_beginSequence">TagBin.beginSequence</a></li>
<li><a href="#Core_Serialization_Write_TagBin_beginStruct">TagBin.beginStruct</a></li>
<li><a href="#Core_Serialization_Write_TagBin_beginValue">TagBin.beginValue</a></li>
<li><a href="#Core_Serialization_Write_TagBin_endElement">TagBin.endElement</a></li>
<li><a href="#Core_Serialization_Write_TagBin_endRoot">TagBin.endRoot</a></li>
<li><a href="#Core_Serialization_Write_TagBin_endSection">TagBin.endSection</a></li>
<li><a href="#Core_Serialization_Write_TagBin_endSequence">TagBin.endSequence</a></li>
<li><a href="#Core_Serialization_Write_TagBin_endStruct">TagBin.endStruct</a></li>
<li><a href="#Core_Serialization_Write_TagBin_endValue">TagBin.endValue</a></li>
<li><a href="#Core_Serialization_Write_TagBin_startWrite">TagBin.startWrite</a></li>
<li><a href="#Core_Serialization_Write_TagBin_writeNative">TagBin.writeNative</a></li>
</ul>
<h4>slice</h4>
<ul>
<li><a href="#Core_Slice_contains">Slice.contains</a></li>
<li><a href="#Core_Slice_equals">Slice.equals</a></li>
<li><a href="#Core_Slice_findLinear">Slice.findLinear</a></li>
<li><a href="#Core_Slice_findSorted">Slice.findSorted</a></li>
<li><a href="#Core_Slice_insertionSort">Slice.insertionSort</a></li>
<li><a href="#Core_Slice_isSorted">Slice.isSorted</a></li>
<li><a href="#Core_Slice_modifyInPlace">Slice.modifyInPlace</a></li>
<li><a href="#Core_Slice_quickSort">Slice.quickSort</a></li>
<li><a href="#Core_Slice_reverse">Slice.reverse</a></li>
<li><a href="#Core_Slice_sort">Slice.sort</a></li>
</ul>
<h4>system</h4>
<ul>
<li><a href="#Core_CommandLine_getField">CommandLine.getField</a></li>
<li><a href="#Core_CommandLine_isOption">CommandLine.isOption</a></li>
<li><a href="#Core_CommandLine_parse">CommandLine.parse</a></li>
<li><a href="#Core_CommandLine_splitArguments">CommandLine.splitArguments</a></li>
<li><a href="#Core_add">Core.add</a></li>
<li><a href="#Core_equals">Core.equals</a></li>
<li><a href="#Core_has">Core.has</a></li>
<li><a href="#Core_remove">Core.remove</a></li>
<li><a href="#Core_set">Core.set</a></li>
<li><a href="#Core_Env_doSyncProcess">Env.doSyncProcess</a></li>
<li><a href="#Core_Env_exit">Env.exit</a></li>
<li><a href="#Core_Env_getArg">Env.getArg</a></li>
<li><a href="#Core_Env_getArgs">Env.getArgs</a></li>
<li><a href="#Core_Env_getMonitors">Env.getMonitors</a></li>
<li><a href="#Core_Env_getSpecialDirectory">Env.getSpecialDirectory</a></li>
<li><a href="#Core_Env_hasArg">Env.hasArg</a></li>
<li><a href="#Core_Env_startProcess">Env.startProcess</a></li>
<li><a href="#Core_Hardware_getMacAddress">Hardware.getMacAddress</a></li>
<li><a href="#Core_Hardware_getProcessorCount">Hardware.getProcessorCount</a></li>
<li><a href="#Core_UUID_IConvert_convert">IConvert.convert</a></li>
<li><a href="#Core_UUID_IHash32_compute">IHash32.compute</a></li>
<li><a href="#Core_Env_Process_waitForExit">Process.waitForExit</a></li>
<li><a href="#Core_Reflection_canCopy">Reflection.canCopy</a></li>
<li><a href="#Core_Reflection_copy">Reflection.copy</a></li>
<li><a href="#Core_Reflection_crcToType">Reflection.crcToType</a></li>
<li><a href="#Core_Reflection_getAttribute">Reflection.getAttribute</a></li>
<li><a href="#Core_Reflection_getAttributeValue">Reflection.getAttributeValue</a></li>
<li><a href="#Core_Reflection_getAttributes">Reflection.getAttributes</a></li>
<li><a href="#Core_Reflection_getEnumName">Reflection.getEnumName</a></li>
<li><a href="#Core_Reflection_getEnumValue">Reflection.getEnumValue</a></li>
<li><a href="#Core_Reflection_getField">Reflection.getField</a></li>
<li><a href="#Core_Reflection_getFieldValue">Reflection.getFieldValue</a></li>
<li><a href="#Core_Reflection_getMethod">Reflection.getMethod</a></li>
<li><a href="#Core_Reflection_hasAttribute">Reflection.hasAttribute</a></li>
<li><a href="#Core_Reflection_hasDrop">Reflection.hasDrop</a></li>
<li><a href="#Core_Reflection_hasInterface">Reflection.hasInterface</a></li>
<li><a href="#Core_Reflection_hasMethod">Reflection.hasMethod</a></li>
<li><a href="#Core_Reflection_hasPostCopy">Reflection.hasPostCopy</a></li>
<li><a href="#Core_Reflection_hasPostMove">Reflection.hasPostMove</a></li>
<li><a href="#Core_Reflection_isAny">Reflection.isAny</a></li>
<li><a href="#Core_Reflection_isArray">Reflection.isArray</a></li>
<li><a href="#Core_Reflection_isBool">Reflection.isBool</a></li>
<li><a href="#Core_Reflection_isEnum">Reflection.isEnum</a></li>
<li><a href="#Core_Reflection_isEnumFlags">Reflection.isEnumFlags</a></li>
<li><a href="#Core_Reflection_isFloat">Reflection.isFloat</a></li>
<li><a href="#Core_Reflection_isGeneric">Reflection.isGeneric</a></li>
<li><a href="#Core_Reflection_isInteger">Reflection.isInteger</a></li>
<li><a href="#Core_Reflection_isInterface">Reflection.isInterface</a></li>
<li><a href="#Core_Reflection_isNative">Reflection.isNative</a></li>
<li><a href="#Core_Reflection_isPointer">Reflection.isPointer</a></li>
<li><a href="#Core_Reflection_isPointerArithmetic">Reflection.isPointerArithmetic</a></li>
<li><a href="#Core_Reflection_isPointerRef">Reflection.isPointerRef</a></li>
<li><a href="#Core_Reflection_isRune">Reflection.isRune</a></li>
<li><a href="#Core_Reflection_isSimpleNative">Reflection.isSimpleNative</a></li>
<li><a href="#Core_Reflection_isSlice">Reflection.isSlice</a></li>
<li><a href="#Core_Reflection_isString">Reflection.isString</a></li>
<li><a href="#Core_Reflection_isStruct">Reflection.isStruct</a></li>
<li><a href="#Core_Reflection_isStructOfName">Reflection.isStructOfName</a></li>
<li><a href="#Core_Reflection_isTuple">Reflection.isTuple</a></li>
<li><a href="#Core_Reflection_isType">Reflection.isType</a></li>
<li><a href="#Core_Reflection_isTypeAlias">Reflection.isTypeAlias</a></li>
<li><a href="#Core_Reflection_makeConcreteAlias">Reflection.makeConcreteAlias</a></li>
<li><a href="#Core_Reflection_makeConcreteEnum">Reflection.makeConcreteEnum</a></li>
<li><a href="#Core_Reflection_maxSizeOf">Reflection.maxSizeOf</a></li>
<li><a href="#Core_Reflection_nameToType">Reflection.nameToType</a></li>
<li><a href="#Core_Reflection_orFlags">Reflection.orFlags</a></li>
<li><a href="#Core_Reflection_roomInArray">Reflection.roomInArray</a></li>
<li><a href="#Core_Reflection_setFieldValue">Reflection.setFieldValue</a></li>
<li><a href="#Core_System_pushContext">System.pushContext</a></li>
<li><a href="#Core_UUID_clear">UUID.clear</a></li>
<li><a href="#Core_UUID_getRandom">UUID.getRandom</a></li>
<li><a href="#Core_UUID_opEquals">UUID.opEquals</a></li>
<li><a href="#Core_UUID_toString">UUID.toString</a></li>
<li><a href="#Core_CommandLine_parse_parse_checkNext">parse.checkNext</a></li>
</ul>
<h4>text</h4>
<ul>
<li><a href="#Core_StrConv_Atod_parse">Atod.parse</a></li>
<li><a href="#Core_StrConv_ConvertFormatFloat_setFormat">ConvertFormatFloat.setFormat</a></li>
<li><a href="#Core_StrConv_ConvertFormatInt_setFormat">ConvertFormatInt.setFormat</a></li>
<li><a href="#Core_StrConv_Dtoa_parse">Dtoa.parse</a></li>
<li><a href="#Core_Format_append">Format.append</a></li>
<li><a href="#Core_Format_checkFormat">Format.checkFormat</a></li>
<li><a href="#Core_Format_countPercent">Format.countPercent</a></li>
<li><a href="#Core_Format_replaceString">Format.replaceString</a></li>
<li><a href="#Core_Format_toInterp">Format.toInterp</a></li>
<li><a href="#Core_Format_toString">Format.toString</a></li>
<li><a href="#Core_String_IHash32_compute">IHash32.compute</a></li>
<li><a href="#Core_Latin1_compare">Latin1.compare</a></li>
<li><a href="#Core_Latin1_compareNatural">Latin1.compareNatural</a></li>
<li><a href="#Core_Latin1_isAscii">Latin1.isAscii</a></li>
<li><a href="#Core_Latin1_isBinDigit">Latin1.isBinDigit</a></li>
<li><a href="#Core_Latin1_isControl">Latin1.isControl</a></li>
<li><a href="#Core_Latin1_isDigit">Latin1.isDigit</a></li>
<li><a href="#Core_Latin1_isHexDigit">Latin1.isHexDigit</a></li>
<li><a href="#Core_Latin1_isLetter">Latin1.isLetter</a></li>
<li><a href="#Core_Latin1_isLetterOrDigit">Latin1.isLetterOrDigit</a></li>
<li><a href="#Core_Latin1_isLower">Latin1.isLower</a></li>
<li><a href="#Core_Latin1_isNumber">Latin1.isNumber</a></li>
<li><a href="#Core_Latin1_isPunctuation">Latin1.isPunctuation</a></li>
<li><a href="#Core_Latin1_isSpace">Latin1.isSpace</a></li>
<li><a href="#Core_Latin1_isSymbol">Latin1.isSymbol</a></li>
<li><a href="#Core_Latin1_isUpper">Latin1.isUpper</a></li>
<li><a href="#Core_Latin1_makeLower">Latin1.makeLower</a></li>
<li><a href="#Core_Latin1_makeUpper">Latin1.makeUpper</a></li>
<li><a href="#Core_Latin1_toLower">Latin1.toLower</a></li>
<li><a href="#Core_Latin1_toUpper">Latin1.toUpper</a></li>
<li><a href="#Core_Parser_RegExp_clear">RegExp.clear</a></li>
<li><a href="#Core_Parser_RegExp_compile">RegExp.compile</a></li>
<li><a href="#Core_Parser_RegExp_grep">RegExp.grep</a></li>
<li><a href="#Core_Parser_RegExp_grepAll">RegExp.grepAll</a></li>
<li><a href="#Core_Parser_RegExp_match">RegExp.match</a></li>
<li><a href="#Core_StrConv_convert">StrConv.convert</a></li>
<li><a href="#Core_StrConv_convertAny">StrConv.convertAny</a></li>
<li><a href="#Core_StrConv_convertBool">StrConv.convertBool</a></li>
<li><a href="#Core_StrConv_convertFloat">StrConv.convertFloat</a></li>
<li><a href="#Core_StrConv_convertInt">StrConv.convertInt</a></li>
<li><a href="#Core_StrConv_convertRune">StrConv.convertRune</a></li>
<li><a href="#Core_StrConv_convertStruct">StrConv.convertStruct</a></li>
<li><a href="#Core_StrConv_parseB64">StrConv.parseB64</a></li>
<li><a href="#Core_StrConv_parseBool">StrConv.parseBool</a></li>
<li><a href="#Core_StrConv_parseF32">StrConv.parseF32</a></li>
<li><a href="#Core_StrConv_parseF64">StrConv.parseF64</a></li>
<li><a href="#Core_StrConv_parseIdentifier">StrConv.parseIdentifier</a></li>
<li><a href="#Core_StrConv_parseRune">StrConv.parseRune</a></li>
<li><a href="#Core_StrConv_parseS16">StrConv.parseS16</a></li>
<li><a href="#Core_StrConv_parseS32">StrConv.parseS32</a></li>
<li><a href="#Core_StrConv_parseS64">StrConv.parseS64</a></li>
<li><a href="#Core_StrConv_parseS8">StrConv.parseS8</a></li>
<li><a href="#Core_StrConv_parseString">StrConv.parseString</a></li>
<li><a href="#Core_StrConv_parseU16">StrConv.parseU16</a></li>
<li><a href="#Core_StrConv_parseU32">StrConv.parseU32</a></li>
<li><a href="#Core_StrConv_parseU64">StrConv.parseU64</a></li>
<li><a href="#Core_StrConv_parseU8">StrConv.parseU8</a></li>
<li><a href="#Core_StrConv_parseX64">StrConv.parseX64</a></li>
<li><a href="#Core_StrConv_pokeValue">StrConv.pokeValue</a></li>
<li><a href="#Core_StrConv_toDisplaySize">StrConv.toDisplaySize</a></li>
<li><a href="#Core_StrConv_toF32">StrConv.toF32</a></li>
<li><a href="#Core_StrConv_toF64">StrConv.toF64</a></li>
<li><a href="#Core_StrConv_toNum">StrConv.toNum</a></li>
<li><a href="#Core_StrConv_toS16">StrConv.toS16</a></li>
<li><a href="#Core_StrConv_toS32">StrConv.toS32</a></li>
<li><a href="#Core_StrConv_toS64">StrConv.toS64</a></li>
<li><a href="#Core_StrConv_toS8">StrConv.toS8</a></li>
<li><a href="#Core_StrConv_toU16">StrConv.toU16</a></li>
<li><a href="#Core_StrConv_toU32">StrConv.toU32</a></li>
<li><a href="#Core_StrConv_toU64">StrConv.toU64</a></li>
<li><a href="#Core_StrConv_toU8">StrConv.toU8</a></li>
<li><a href="#Core_String_append">String.append</a></li>
<li><a href="#Core_String_appendFormat">String.appendFormat</a></li>
<li><a href="#Core_String_back">String.back</a></li>
<li><a href="#Core_String_clear">String.clear</a></li>
<li><a href="#Core_String_ensureNotNull">String.ensureNotNull</a></li>
<li><a href="#Core_String_from">String.from</a></li>
<li><a href="#Core_String_grow">String.grow</a></li>
<li><a href="#Core_String_insert">String.insert</a></li>
<li><a href="#Core_String_isEmpty">String.isEmpty</a></li>
<li><a href="#Core_String_isNull">String.isNull</a></li>
<li><a href="#Core_String_isNullOrEmpty">String.isNullOrEmpty</a></li>
<li><a href="#Core_String_join">String.join</a></li>
<li><a href="#Core_String_joinWith">String.joinWith</a></li>
<li><a href="#Core_String_makeLower">String.makeLower</a></li>
<li><a href="#Core_String_makeUpper">String.makeUpper</a></li>
<li><a href="#Core_String_opAffect">String.opAffect</a></li>
<li><a href="#Core_String_opAssign">String.opAssign</a></li>
<li><a href="#Core_String_opCast">String.opCast</a></li>
<li><a href="#Core_String_opCmp">String.opCmp</a></li>
<li><a href="#Core_String_opCount">String.opCount</a></li>
<li><a href="#Core_String_opData">String.opData</a></li>
<li><a href="#Core_String_opEquals">String.opEquals</a></li>
<li><a href="#Core_String_opIndex">String.opIndex</a></li>
<li><a href="#Core_String_opIndexAffect">String.opIndexAffect</a></li>
<li><a href="#Core_String_opIndexAssign">String.opIndexAssign</a></li>
<li><a href="#Core_String_opSlice">String.opSlice</a></li>
<li><a href="#Core_String_opVisitBytes">String.opVisitBytes</a></li>
<li><a href="#Core_String_opVisitRunes">String.opVisitRunes</a></li>
<li><a href="#Core_String_remove">String.remove</a></li>
<li><a href="#Core_String_removeBack">String.removeBack</a></li>
<li><a href="#Core_String_replace">String.replace</a></li>
<li><a href="#Core_String_reserve">String.reserve</a></li>
<li><a href="#Core_String_toCharArray">String.toCharArray</a></li>
<li><a href="#Core_String_toLower">String.toLower</a></li>
<li><a href="#Core_String_toSlice">String.toSlice</a></li>
<li><a href="#Core_String_toString">String.toString</a></li>
<li><a href="#Core_String_toUpper">String.toUpper</a></li>
<li><a href="#Core_String_trim">String.trim</a></li>
<li><a href="#Core_String_trimEnd">String.trimEnd</a></li>
<li><a href="#Core_String_trimStart">String.trimStart</a></li>
<li><a href="#Core_StrConv_StringBuilder_appendAny">StringBuilder.appendAny</a></li>
<li><a href="#Core_StrConv_StringBuilder_appendEOL">StringBuilder.appendEOL</a></li>
<li><a href="#Core_StrConv_StringBuilder_appendFormat">StringBuilder.appendFormat</a></li>
<li><a href="#Core_StrConv_StringBuilder_appendRune">StringBuilder.appendRune</a></li>
<li><a href="#Core_StrConv_StringBuilder_appendString">StringBuilder.appendString</a></li>
<li><a href="#Core_StrConv_StringBuilder_clear">StringBuilder.clear</a></li>
<li><a href="#Core_StrConv_StringBuilder_count">StringBuilder.count</a></li>
<li><a href="#Core_StrConv_StringBuilder_moveToString">StringBuilder.moveToString</a></li>
<li><a href="#Core_StrConv_StringBuilder_setBucketSize">StringBuilder.setBucketSize</a></li>
<li><a href="#Core_StrConv_StringBuilder_toString">StringBuilder.toString</a></li>
<li><a href="#Core_StrConv_StringBuilder_zeroTerminated">StringBuilder.zeroTerminated</a></li>
<li><a href="#Core_Tokenize_eatCount">Tokenize.eatCount</a></li>
<li><a href="#Core_Tokenize_eatQuotes">Tokenize.eatQuotes</a></li>
<li><a href="#Core_Tokenize_eatSpaces">Tokenize.eatSpaces</a></li>
<li><a href="#Core_Tokenize_getTo">Tokenize.getTo</a></li>
<li><a href="#Core_Tokenize_getToSpace">Tokenize.getToSpace</a></li>
<li><a href="#Core_Tokenize_getWhileAlnum">Tokenize.getWhileAlnum</a></li>
<li><a href="#Core_Tokenize_split">Tokenize.split</a></li>
<li><a href="#Core_Tokenize_splitLines">Tokenize.splitLines</a></li>
<li><a href="#Core_Unicode_fromUtf8">Unicode.fromUtf8</a></li>
<li><a href="#Core_Unicode_isAscii">Unicode.isAscii</a></li>
<li><a href="#Core_Unicode_isControl">Unicode.isControl</a></li>
<li><a href="#Core_Unicode_isDigit">Unicode.isDigit</a></li>
<li><a href="#Core_Unicode_isLatin1">Unicode.isLatin1</a></li>
<li><a href="#Core_Unicode_isLetter">Unicode.isLetter</a></li>
<li><a href="#Core_Unicode_isLetterOrDigit">Unicode.isLetterOrDigit</a></li>
<li><a href="#Core_Unicode_isLower">Unicode.isLower</a></li>
<li><a href="#Core_Unicode_isNumber">Unicode.isNumber</a></li>
<li><a href="#Core_Unicode_isSpace">Unicode.isSpace</a></li>
<li><a href="#Core_Unicode_isSymbol">Unicode.isSymbol</a></li>
<li><a href="#Core_Unicode_isSymbolMath">Unicode.isSymbolMath</a></li>
<li><a href="#Core_Unicode_isTitle">Unicode.isTitle</a></li>
<li><a href="#Core_Unicode_isUpper">Unicode.isUpper</a></li>
<li><a href="#Core_Unicode_makeLower">Unicode.makeLower</a></li>
<li><a href="#Core_Unicode_makeUpper">Unicode.makeUpper</a></li>
<li><a href="#Core_Unicode_toLower">Unicode.toLower</a></li>
<li><a href="#Core_Unicode_toTitle">Unicode.toTitle</a></li>
<li><a href="#Core_Unicode_toUpper">Unicode.toUpper</a></li>
<li><a href="#Core_Utf16_decodeRune">Utf16.decodeRune</a></li>
<li><a href="#Core_Utf16_encodeRune">Utf16.encodeRune</a></li>
<li><a href="#Core_Utf16_fromUnicode">Utf16.fromUnicode</a></li>
<li><a href="#Core_Utf16_fromUtf8">Utf16.fromUtf8</a></li>
<li><a href="#Core_Utf16_lengthZeroTerminated">Utf16.lengthZeroTerminated</a></li>
<li><a href="#Core_Utf16_toZeroTerminated">Utf16.toZeroTerminated</a></li>
<li><a href="#Core_Utf8_byteIndex">Utf8.byteIndex</a></li>
<li><a href="#Core_Utf8_compare">Utf8.compare</a></li>
<li><a href="#Core_Utf8_contains">Utf8.contains</a></li>
<li><a href="#Core_Utf8_countBytesAt">Utf8.countBytesAt</a></li>
<li><a href="#Core_Utf8_countRunes">Utf8.countRunes</a></li>
<li><a href="#Core_Utf8_decodeLastRune">Utf8.decodeLastRune</a></li>
<li><a href="#Core_Utf8_decodeRune">Utf8.decodeRune</a></li>
<li><a href="#Core_Utf8_encodeRune">Utf8.encodeRune</a></li>
<li><a href="#Core_Utf8_endsWith">Utf8.endsWith</a></li>
<li><a href="#Core_Utf8_firstRune">Utf8.firstRune</a></li>
<li><a href="#Core_Utf8_fromUnicode">Utf8.fromUnicode</a></li>
<li><a href="#Core_Utf8_fromUtf16">Utf8.fromUtf16</a></li>
<li><a href="#Core_Utf8_indexOf">Utf8.indexOf</a></li>
<li><a href="#Core_Utf8_isValid">Utf8.isValid</a></li>
<li><a href="#Core_Utf8_isValidRune">Utf8.isValidRune</a></li>
<li><a href="#Core_Utf8_lastIndexOf">Utf8.lastIndexOf</a></li>
<li><a href="#Core_Utf8_lastRune">Utf8.lastRune</a></li>
<li><a href="#Core_Utf8_startsWith">Utf8.startsWith</a></li>
<li><a href="#Core_Utf8_visitRunes">Utf8.visitRunes</a></li>
</ul>
<h4>thread</h4>
<ul>
<li><a href="#Core_Atomic_add">Atomic.add</a></li>
<li><a href="#Core_Atomic_compareExchange">Atomic.compareExchange</a></li>
<li><a href="#Core_Atomic_exchange">Atomic.exchange</a></li>
<li><a href="#Core_Atomic_get">Atomic.get</a></li>
<li><a href="#Core_Atomic_logicAnd">Atomic.logicAnd</a></li>
<li><a href="#Core_Atomic_logicOr">Atomic.logicOr</a></li>
<li><a href="#Core_Atomic_logicXor">Atomic.logicXor</a></li>
<li><a href="#Core_Sync_Event_create">Event.create</a></li>
<li><a href="#Core_Sync_Event_init">Event.init</a></li>
<li><a href="#Core_Sync_Event_isValid">Event.isValid</a></li>
<li><a href="#Core_Sync_Event_release">Event.release</a></li>
<li><a href="#Core_Sync_Event_reset">Event.reset</a></li>
<li><a href="#Core_Sync_Event_signal">Event.signal</a></li>
<li><a href="#Core_Sync_Event_wait">Event.wait</a></li>
<li><a href="#Core_Jobs_getNumWorkers">Jobs.getNumWorkers</a></li>
<li><a href="#Core_Jobs_isSynchrone">Jobs.isSynchrone</a></li>
<li><a href="#Core_Jobs_parallelFor">Jobs.parallelFor</a></li>
<li><a href="#Core_Jobs_parallelVisit">Jobs.parallelVisit</a></li>
<li><a href="#Core_Jobs_scheduleJob">Jobs.scheduleJob</a></li>
<li><a href="#Core_Jobs_setNumWorkers">Jobs.setNumWorkers</a></li>
<li><a href="#Core_Jobs_waitDone">Jobs.waitDone</a></li>
<li><a href="#Core_Jobs_waitJob">Jobs.waitJob</a></li>
<li><a href="#Core_Sync_Mutex_lock">Mutex.lock</a></li>
<li><a href="#Core_Sync_Mutex_tryLock">Mutex.tryLock</a></li>
<li><a href="#Core_Sync_Mutex_unlock">Mutex.unlock</a></li>
<li><a href="#Core_Sync_RWLock_lock">RWLock.lock</a></li>
<li><a href="#Core_Sync_RWLock_lockExclusive">RWLock.lockExclusive</a></li>
<li><a href="#Core_Sync_RWLock_lockShared">RWLock.lockShared</a></li>
<li><a href="#Core_Sync_RWLock_tryLockExclusive">RWLock.tryLockExclusive</a></li>
<li><a href="#Core_Sync_RWLock_tryLockShared">RWLock.tryLockShared</a></li>
<li><a href="#Core_Sync_RWLock_unlock">RWLock.unlock</a></li>
<li><a href="#Core_Sync_RWLock_unlockExclusive">RWLock.unlockExclusive</a></li>
<li><a href="#Core_Sync_RWLock_unlockShared">RWLock.unlockShared</a></li>
<li><a href="#Core_Sync_scopedLock">Sync.scopedLock</a></li>
<li><a href="#Core_Sync_sharedLock">Sync.sharedLock</a></li>
<li><a href="#Core_Threading_Thread_init">Thread.init</a></li>
<li><a href="#Core_Threading_Thread_isDone">Thread.isDone</a></li>
<li><a href="#Core_Threading_Thread_isValid">Thread.isValid</a></li>
<li><a href="#Core_Threading_Thread_safeForceEnd">Thread.safeForceEnd</a></li>
<li><a href="#Core_Threading_Thread_setPriority">Thread.setPriority</a></li>
<li><a href="#Core_Threading_Thread_sleep">Thread.sleep</a></li>
<li><a href="#Core_Threading_Thread_start">Thread.start</a></li>
<li><a href="#Core_Threading_Thread_wait">Thread.wait</a></li>
<li><a href="#Core_Threading_Thread_yield">Thread.yield</a></li>
<li><a href="#Core_Threading_wait">Threading.wait</a></li>
</ul>
<h4>time</h4>
<ul>
<li><a href="#Core_Time_DateTime_dayOfWeek">DateTime.dayOfWeek</a></li>
<li><a href="#Core_Time_DateTime_dayOfWeekName">DateTime.dayOfWeekName</a></li>
<li><a href="#Core_Time_DateTime_isValid">DateTime.isValid</a></li>
<li><a href="#Core_Time_DateTime_monthName">DateTime.monthName</a></li>
<li><a href="#Core_Time_DateTime_now">DateTime.now</a></li>
<li><a href="#Core_Time_DateTime_opCmp">DateTime.opCmp</a></li>
<li><a href="#Core_Time_DateTime_opEquals">DateTime.opEquals</a></li>
<li><a href="#Core_Time_DateTime_parse">DateTime.parse</a></li>
<li><a href="#Core_Time_DateTime_setNow">DateTime.setNow</a></li>
<li><a href="#Core_Time_DateTime_toString">DateTime.toString</a></li>
<li><a href="#Core_Time_Duration_fromMs">Duration.fromMs</a></li>
<li><a href="#Core_Time_Duration_opAffect">Duration.opAffect</a></li>
<li><a href="#Core_Time_Duration_opAffectSuffix">Duration.opAffectSuffix</a></li>
<li><a href="#Core_Time_Duration_toMs">Duration.toMs</a></li>
<li><a href="#Core_Time_FrameTiming_pause">FrameTiming.pause</a></li>
<li><a href="#Core_Time_FrameTiming_unpause">FrameTiming.unpause</a></li>
<li><a href="#Core_Time_FrameTiming_update">FrameTiming.update</a></li>
<li><a href="#Core_Time_DateTime_IConvert_convert">IConvert.convert</a></li>
<li><a href="#Core_Time_Stopwatch_elapsedMicroseconds">Stopwatch.elapsedMicroseconds</a></li>
<li><a href="#Core_Time_Stopwatch_elapsedMicrosecondsNow">Stopwatch.elapsedMicrosecondsNow</a></li>
<li><a href="#Core_Time_Stopwatch_elapsedMilliseconds">Stopwatch.elapsedMilliseconds</a></li>
<li><a href="#Core_Time_Stopwatch_elapsedMillisecondsNow">Stopwatch.elapsedMillisecondsNow</a></li>
<li><a href="#Core_Time_Stopwatch_reset">Stopwatch.reset</a></li>
<li><a href="#Core_Time_Stopwatch_restart">Stopwatch.restart</a></li>
<li><a href="#Core_Time_Stopwatch_scopeMeasure">Stopwatch.scopeMeasure</a></li>
<li><a href="#Core_Time_Stopwatch_start">Stopwatch.start</a></li>
<li><a href="#Core_Time_Stopwatch_stop">Stopwatch.stop</a></li>
<li><a href="#Core_Time_dateToTicks">Time.dateToTicks</a></li>
<li><a href="#Core_Time_daysInMonth">Time.daysInMonth</a></li>
<li><a href="#Core_Time_isLeapYear">Time.isLeapYear</a></li>
<li><a href="#Core_Time_nowMicroseconds">Time.nowMicroseconds</a></li>
<li><a href="#Core_Time_nowMilliseconds">Time.nowMilliseconds</a></li>
<li><a href="#Core_Time_nowPrecise">Time.nowPrecise</a></li>
<li><a href="#Core_Time_preciseFrequency">Time.preciseFrequency</a></li>
<li><a href="#Core_Time_ticksToDate">Time.ticksToDate</a></li>
<li><a href="#Core_Time_ticksToTime">Time.ticksToTime</a></li>
<li><a href="#Core_Time_timeToTicks">Time.timeToTicks</a></li>
<li><a href="#Core_Time_TimeSpan_addDays">TimeSpan.addDays</a></li>
<li><a href="#Core_Time_TimeSpan_addHours">TimeSpan.addHours</a></li>
<li><a href="#Core_Time_TimeSpan_addMilliSeconds">TimeSpan.addMilliSeconds</a></li>
<li><a href="#Core_Time_TimeSpan_addMinutes">TimeSpan.addMinutes</a></li>
<li><a href="#Core_Time_TimeSpan_addMonths">TimeSpan.addMonths</a></li>
<li><a href="#Core_Time_TimeSpan_addSeconds">TimeSpan.addSeconds</a></li>
<li><a href="#Core_Time_TimeSpan_addYears">TimeSpan.addYears</a></li>
<li><a href="#Core_Time_TimeSpan_from">TimeSpan.from</a></li>
<li><a href="#Core_Time_TimeSpan_now">TimeSpan.now</a></li>
<li><a href="#Core_Time_TimeSpan_opCmp">TimeSpan.opCmp</a></li>
<li><a href="#Core_Time_TimeSpan_setNow">TimeSpan.setNow</a></li>
<li><a href="#Core_Time_TimeSpan_toDateTime">TimeSpan.toDateTime</a></li>
<li><a href="#Core_Time_TimeSpan_totalDays">TimeSpan.totalDays</a></li>
<li><a href="#Core_Time_TimeSpan_totalHours">TimeSpan.totalHours</a></li>
<li><a href="#Core_Time_TimeSpan_totalMilliSeconds">TimeSpan.totalMilliSeconds</a></li>
<li><a href="#Core_Time_TimeSpan_totalMinutes">TimeSpan.totalMinutes</a></li>
<li><a href="#Core_Time_TimeSpan_totalSeconds">TimeSpan.totalSeconds</a></li>
<li><a href="#Core_Time_Timer_create">Timer.create</a></li>
<li><a href="#Core_Time_Timer_init">Timer.init</a></li>
<li><a href="#Core_Time_Timer_release">Timer.release</a></li>
</ul>
</div>
</div>
<div class="right">
<div class="right-page">
<blockquote>
<b>Work in progress</b>. Generated documentation (swag doc 0.24.0)</blockquote>
<h1>Swag Std.Core</h1>
<p> The <code class="inline-code">Std.core</code> module contains basic types and algorithms.  It is the base of all other modules of the standard <code class="inline-code">Std</code> workspace. </p>
<p> You will find collections like <a href="#Core_Array">Array</a> or <a href="#Core_HashTable">HashTable</a>, a dynamic <a href="#Core_String">String</a> and so on. </p>
<h1>Content</h1>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ASSERT"><span class="api-item-title-kind">const</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">Constants</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\config.swg#L3" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td id="Core_ASSERT" class="code-type"><span class="SCst">ASSERT</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
<tr>
<td id="Core_BIG_ENDIAN" class="code-type"><span class="SCst">BIG_ENDIAN</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Env_EndLine" class="code-type"><span class="SCst">EndLine</span></td>
<td class="code-type"><span class="STpe">string</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Latin1_CharProperties" class="code-type"><span class="SCst">CharProperties</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> [<span class="SNum">256</span>] <span class="SCst">Core</span>.<span class="SCst">Latin1</span>.<span class="SCst"><a href="#Core_Latin1_CharAttribute">CharAttribute</a></span></span></td>
<td></td>
</tr>
<tr>
<td id="Core_Path_AltDirectorySeparatorChar" class="code-type"><span class="SCst">AltDirectorySeparatorChar</span></td>
<td class="code-type"><span class="STpe">u8</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Path_DirectorySeparatorChar" class="code-type"><span class="SCst">DirectorySeparatorChar</span></td>
<td class="code-type"><span class="STpe">u8</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Path_VolumeSeparatorChar" class="code-type"><span class="SCst">VolumeSeparatorChar</span></td>
<td class="code-type"><span class="STpe">u8</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Random_NN" class="code-type"><span class="SCst">NN</span></td>
<td class="code-type"><span class="STpe">s32</span></td>
<td></td>
</tr>
<tr>
<td id="Core_StrConv_ParseErrorIncomplete" class="code-type"><span class="SCst">ParseErrorIncomplete</span></td>
<td class="code-type"><span class="STpe">string</span></td>
<td></td>
</tr>
<tr>
<td id="Core_StrConv_ParseErrorInvalid" class="code-type"><span class="SCst">ParseErrorInvalid</span></td>
<td class="code-type"><span class="STpe">string</span></td>
<td></td>
</tr>
<tr>
<td id="Core_StrConv_ParseErrorOverflow" class="code-type"><span class="SCst">ParseErrorOverflow</span></td>
<td class="code-type"><span class="STpe">string</span></td>
<td></td>
</tr>
<tr>
<td id="Core_StringSmallSize" class="code-type"><span class="SCst">StringSmallSize</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_DayOfWeekNames" class="code-type"><span class="SCst">DayOfWeekNames</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> [<span class="SNum">7</span>] <span class="STpe">string</span></span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_DaysPer100Years" class="code-type"><span class="SCst">DaysPer100Years</span></td>
<td class="code-type"><span class="STpe">s32</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_DaysPer400Years" class="code-type"><span class="SCst">DaysPer400Years</span></td>
<td class="code-type"><span class="STpe">s32</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_DaysPer4Years" class="code-type"><span class="SCst">DaysPer4Years</span></td>
<td class="code-type"><span class="STpe">s32</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_DaysPerYear" class="code-type"><span class="SCst">DaysPerYear</span></td>
<td class="code-type"><span class="STpe">s32</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_DaysTo10000" class="code-type"><span class="SCst">DaysTo10000</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td>Number of days from 1/1/0001 to 12/31/9999. </td>
</tr>
<tr>
<td id="Core_Time_DaysTo1601" class="code-type"><span class="SCst">DaysTo1601</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td>Number of days from 1/1/0001 to 12/31/1600. </td>
</tr>
<tr>
<td id="Core_Time_DaysTo1899" class="code-type"><span class="SCst">DaysTo1899</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td>Number of days from 1/1/0001 to 12/30/1899. </td>
</tr>
<tr>
<td id="Core_Time_DaysTo1970" class="code-type"><span class="SCst">DaysTo1970</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td>Number of days from 1/1/0001 to 12/31/1969. </td>
</tr>
<tr>
<td id="Core_Time_DaysToMonth365" class="code-type"><span class="SCst">DaysToMonth365</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> [<span class="SNum">13</span>] <span class="STpe">u16</span></span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_DaysToMonth366" class="code-type"><span class="SCst">DaysToMonth366</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> [<span class="SNum">13</span>] <span class="STpe">u16</span></span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_MaxMilliSeconds" class="code-type"><span class="SCst">MaxMilliSeconds</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_MaxMillis" class="code-type"><span class="SCst">MaxMillis</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_MaxTicks" class="code-type"><span class="SCst">MaxTicks</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_MillisPerDay" class="code-type"><span class="SCst">MillisPerDay</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_MillisPerHour" class="code-type"><span class="SCst">MillisPerHour</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_MillisPerMinute" class="code-type"><span class="SCst">MillisPerMinute</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_MillisPerSecond" class="code-type"><span class="SCst">MillisPerSecond</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_MonthNames" class="code-type"><span class="SCst">MonthNames</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> [<span class="SNum">12</span>] <span class="STpe">string</span></span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_TicksPerDay" class="code-type"><span class="SCst">TicksPerDay</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_TicksPerHour" class="code-type"><span class="SCst">TicksPerHour</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_TicksPerMilliSecond" class="code-type"><span class="SCst">TicksPerMilliSecond</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_TicksPerMinute" class="code-type"><span class="SCst">TicksPerMinute</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_TicksPerSecond" class="code-type"><span class="SCst">TicksPerSecond</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Utf16_RuneError" class="code-type"><span class="SCst">RuneError</span></td>
<td class="code-type"><span class="STpe">rune</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Utf16_Surr1" class="code-type"><span class="SCst">Surr1</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Utf16_Surr2" class="code-type"><span class="SCst">Surr2</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Utf16_Surr3" class="code-type"><span class="SCst">Surr3</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Utf16_SurrSelf" class="code-type"><span class="SCst">SurrSelf</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Utf8_MaxRunes" class="code-type"><span class="SCst">MaxRunes</span></td>
<td class="code-type"><span class="STpe">rune</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Utf8_RuneError" class="code-type"><span class="SCst">RuneError</span></td>
<td class="code-type"><span class="STpe">rune</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Utf8_SurrogateMax" class="code-type"><span class="SCst">SurrogateMax</span></td>
<td class="code-type"><span class="STpe">rune</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Utf8_SurrogateMin" class="code-type"><span class="SCst">SurrogateMin</span></td>
<td class="code-type"><span class="STpe">rune</span></td>
<td></td>
</tr>
<tr>
<td id="Core_WINDOWS" class="code-type"><span class="SCst">WINDOWS</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Env_ProcessHandle"><span class="api-item-title-kind">type alias</span> <span class="api-item-title-light">Env.</span><span class="api-item-title-strong">Type Aliases</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\process.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td id="Core_Env_ProcessHandle" class="code-type"><span class="SCst">ProcessHandle</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> *<span class="STpe">void</span></span></td>
<td></td>
</tr>
<tr>
<td id="Core_File_FileHandle" class="code-type"><span class="SCst">FileHandle</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> *<span class="STpe">void</span></span></td>
<td></td>
</tr>
<tr>
<td id="Core_Input_VirtualKey" class="code-type"><span class="SCst">VirtualKey</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Math_ConstF32" class="code-type"><span class="SCst">ConstF32</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Const">Const</a></span>'(<span class="STpe">f32</span>)</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Math_ConstF64" class="code-type"><span class="SCst">ConstF64</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Const">Const</a></span>'(<span class="STpe">f64</span>)</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Threading_ThreadHandle" class="code-type"><span class="SCst">ThreadHandle</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> *<span class="STpe">void</span></span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_Ticks" class="code-type"><span class="SCst">Ticks</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td id="Core_Time_TimerHandle" class="code-type"><span class="SCst">TimerHandle</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> *<span class="STpe">void</span></span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">Array</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>This is a generic dynamic array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_Array">Array</a></span>(<span class="SCst">T</span>)</span></code>
</div>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">allocator</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Swag</span>.<span class="SCst">IAllocator</span></span></td>
<td>Associated allocator. </td>
</tr>
<tr>
<td class="code-type"><span class="SCde">buffer</span></td>
<td class="code-type"><span class="SCde">^<span class="SCst">T</span></span></td>
<td>Memory block of all datas. </td>
</tr>
<tr>
<td class="code-type"><span class="SCde">count</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td>Number of valid datas. </td>
</tr>
<tr>
<td class="code-type"><span class="SCde">capacity</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td>Number of elements that can be stored in the buffer. </td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Array_add"><span class="SCde"><span class="SFct">add</span>(<span class="SKwd">self</span>, <span class="SCst">T</span>)</span></a></td>
<td>Add a copy of one element at the end of the array. </td>
</tr>
<tr>
<td><a href="#Core_Array_add"><span class="SCde"><span class="SFct">add</span>(<span class="SKwd">self</span>, <span class="SKwd">const</span> [..] <span class="SCst">T</span>)</span></a></td>
<td>Append a slice to the end of this instance. </td>
</tr>
<tr>
<td><a href="#Core_Array_add"><span class="SCde"><span class="SFct">add</span>(<span class="SKwd">self</span>, <span class="SKwd">moveref</span> <span class="SCst">T</span>)</span></a></td>
<td>Move one element at the end of the array. </td>
</tr>
<tr>
<td><a href="#Core_Array_addOnce"><span class="SCde"><span class="SFct">addOnce</span>()</spa</a></td>
<td>Add a copy of one element at the end of the array. </td>
</tr>
<tr>
<td><a href="#Core_Array_back"><span class="SCde"><span class="SFct">back</span>()</spa</a></td>
<td>Returns a copy of the last element. </td>
</tr>
<tr>
<td><a href="#Core_Array_backPtr"><span class="SCde"><span class="SFct">backPtr</span>()</spa</a></td>
<td>Returns the address of the last element. </td>
</tr>
<tr>
<td><a href="#Core_Array_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Set the number of elements to 0. </td>
</tr>
<tr>
<td><a href="#Core_Array_contains"><span class="SCde"><span class="SFct">contains</span>()</spa</a></td>
<td>Returns true if the given <code class="inline-code">value</code> is in the array. </td>
</tr>
<tr>
<td><a href="#Core_Array_createBuffer"><span class="SCde"><span class="SFct">createBuffer</span>()</spa</a></td>
<td>Create a working buffer. </td>
</tr>
<tr>
<td><a href="#Core_Array_createTemp"><span class="SCde"><span class="SFct">createTemp</span>()</spa</a></td>
<td>Create a temporary array. </td>
</tr>
<tr>
<td><a href="#Core_Array_emplaceAddress"><span class="SCde"><span class="SFct">emplaceAddress</span>()</spa</a></td>
<td>Reserve room at the end of the array for <code class="inline-code">num</code> elements, but does not  initialize them. Returns the address of the first element. </td>
</tr>
<tr>
<td><a href="#Core_Array_emplaceAt"><span class="SCde"><span class="SFct">emplaceAt</span>()</spa</a></td>
<td>Move some values at the given index. If <code class="inline-code">index</code> is equal to <code class="inline-code">count</code>, then  the values are moved at the end of the array.  Order is preserved. </td>
</tr>
<tr>
<td><a href="#Core_Array_emplaceInitAddress"><span class="SCde"><span class="SFct">emplaceInitAddress</span>()</spa</a></td>
<td>Reserve room at the end of the array for <code class="inline-code">num</code> elements. </td>
</tr>
<tr>
<td><a href="#Core_Array_free"><span class="SCde"><span class="SFct">free</span>()</spa</a></td>
<td>Free the array content. </td>
</tr>
<tr>
<td><a href="#Core_Array_front"><span class="SCde"><span class="SFct">front</span>()</spa</a></td>
<td>Returns a copy of the first element. </td>
</tr>
<tr>
<td><a href="#Core_Array_frontPtr"><span class="SCde"><span class="SFct">frontPtr</span>()</spa</a></td>
<td>Returns the address of the first element. </td>
</tr>
<tr>
<td><a href="#Core_Array_grow"><span class="SCde"><span class="SFct">grow</span>()</spa</a></td>
<td>Ensure the Array is big enough to store at least <code class="inline-code">newCount</code> elements  Number of valid elements does not change. </td>
</tr>
<tr>
<td><a href="#Core_Array_insertAt"><span class="SCde"><span class="SFct">insertAt</span>(<span class="SKwd">self</span>, <span class="STpe">u64</span>, <span class="SCst">T</span>)</span></a></td>
<td>Insert a value at the given index. If <code class="inline-code">index</code> is equal to <code class="inline-code">count</code>, then  the value is added at the end of the array.  Order is preserved. </td>
</tr>
<tr>
<td><a href="#Core_Array_insertAt"><span class="SCde"><span class="SFct">insertAt</span>(<span class="SKwd">self</span>, <span class="STpe">u64</span>, <span class="SKwd">const</span> [..] <span class="SCst">T</span>)</span></a></td>
<td>Insert some values at the given index. If <code class="inline-code">index</code> is equal to <code class="inline-code">count</code>, then  the values are added at the end of the array.  Order is preserved. </td>
</tr>
<tr>
<td><a href="#Core_Array_insertAt"><span class="SCde"><span class="SFct">insertAt</span>(<span class="SKwd">self</span>, <span class="STpe">u64</span>, <span class="SKwd">moveref</span> <span class="SCst">T</span>)</span></a></td>
<td>Move a value at the given index. If <code class="inline-code">index</code> is equal to <code class="inline-code">count</code>, then  the value is added at the end of the array.  Order is preserved. </td>
</tr>
<tr>
<td><a href="#Core_Array_isEmpty"><span class="SCde"><span class="SFct">isEmpty</span>()</spa</a></td>
<td>Returns true if the array is empty. </td>
</tr>
<tr>
<td><a href="#Core_Array_popBack"><span class="SCde"><span class="SFct">popBack</span>()</spa</a></td>
<td>Returns a copy of the last element, and remove it from the array. </td>
</tr>
<tr>
<td><a href="#Core_Array_realloc"><span class="SCde"><span class="SFct">realloc</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_remove"><span class="SCde"><span class="SFct">remove</span>(<span class="SKwd">self</span>, <span class="SCst">V</span>)</span></a></td>
<td>Remove the given <code class="inline-code">value</code>  If not found, does nothing. </td>
</tr>
<tr>
<td><a href="#Core_Array_remove"><span class="SCde"><span class="SFct">remove</span>(<span class="SKwd">self</span>, <span class="STpe">u64</span>, <span class="STpe">u64</span>)</span></a></td>
<td>Remove <code class="inline-code">num</code> elements starting at <code class="inline-code">index</code>. </td>
</tr>
<tr>
<td><a href="#Core_Array_removeAt"><span class="SCde"><span class="SFct">removeAt</span>()</spa</a></td>
<td>Remove an element at <code class="inline-code">index</code> by replacing it with the last element. </td>
</tr>
<tr>
<td><a href="#Core_Array_removeAtOrdered"><span class="SCde"><span class="SFct">removeAtOrdered</span>()</spa</a></td>
<td>Remove <code class="inline-code">numValues</code> elements at <code class="inline-code">index</code> by shifting all others. </td>
</tr>
<tr>
<td><a href="#Core_Array_removeBack"><span class="SCde"><span class="SFct">removeBack</span>()</spa</a></td>
<td>Remove the last element. </td>
</tr>
<tr>
<td><a href="#Core_Array_removeOrdered"><span class="SCde"><span class="SFct">removeOrdered</span>()</spa</a></td>
<td>Remove the given <code class="inline-code">value</code>  If not found, does nothing. </td>
</tr>
<tr>
<td><a href="#Core_Array_reserve"><span class="SCde"><span class="SFct">reserve</span>()</spa</a></td>
<td>Reserve room for <code class="inline-code">newCapacity</code> elements without changing the array count  Number of valid elements does not change. </td>
</tr>
<tr>
<td><a href="#Core_Array_resize"><span class="SCde"><span class="SFct">resize</span>()</spa</a></td>
<td>Change the number of valid elements in the array. </td>
</tr>
<tr>
<td><a href="#Core_Array_sort"><span class="SCde"><span class="SFct">sort</span>(<span class="SKwd">self</span>)</span></a></td>
<td>Sort array. </td>
</tr>
<tr>
<td><a href="#Core_Array_sort"><span class="SCde"><span class="SFct">sort</span>(<span class="SKwd">self</span>, <span class="SKwd">func</span>(*<span class="STpe">void</span>, <span class="SCst">T</span>, <span class="SCst">T</span>)-><span class="STpe">s32</span>)</span></a></td>
<td>Sort array. </td>
</tr>
<tr>
<td><a href="#Core_Array_sortReverse"><span class="SCde"><span class="SFct">sortReverse</span>()</spa</a></td>
<td>Sort array in reverse order (from biggest to lowest value). </td>
</tr>
<tr>
<td><a href="#Core_Array_swap"><span class="SCde"><span class="SFct">swap</span>()</spa</a></td>
<td>Swap two elements. </td>
</tr>
<tr>
<td><a href="#Core_Array_toSlice"><span class="SCde"><span class="SFct">toSlice</span>()</spa</a></td>
<td>Returns a slice. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Array_opAffect"><span class="SCde"><span class="SFct">opAffect</span>()</spa</a></td>
<td>Initializes an Array that contains values copied from the specified array. </td>
</tr>
<tr>
<td><a href="#Core_Array_opCast"><span class="SCde"><span class="SFct">opCast</span>(<span class="SKwd">self</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opCast"><span class="SCde"><span class="SFct">opCast</span>(<span class="SKwd">self</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opCount"><span class="SCde"><span class="SFct">opCount</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opData"><span class="SCde"><span class="SFct">opData</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opDrop"><span class="SCde"><span class="SFct">opDrop</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opIndex"><span class="SCde"><span class="SFct">opIndex</span>(<span class="SKwd">self</span>, <span class="STpe">u64</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opIndex"><span class="SCde"><span class="SFct">opIndex</span>(<span class="SKwd">self</span>, <span class="STpe">u64</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opIndexAffect"><span class="SCde"><span class="SFct">opIndexAffect</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opIndexAssign"><span class="SCde"><span class="SFct">opIndexAssign</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opPostCopy"><span class="SCde"><span class="SFct">opPostCopy</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opSlice"><span class="SCde"><span class="SFct">opSlice</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Array_opVisit"><span class="SCde"><span class="SFct">opVisit</span>()</spa</a></td>
<td>Visit every elements of the array. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_add"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">add</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L307" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a copy of one element at the end of the array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">add</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SCst">T</span>)</span></code>
</div>
<p>Append a slice to the end of this instance. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">add</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, values: <span class="SKwd">const</span> [..] <span class="SCst">T</span>)</span></code>
</div>
<p>Move one element at the end of the array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">add</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SKwd">moveref</span> <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_addOnce"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">addOnce</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L296" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a copy of one element at the end of the array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">addOnce</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_back"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">back</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L633" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a copy of the last element. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">back</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_backPtr"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">backPtr</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L641" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the address of the last element. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">backPtr</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;*<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L284" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the number of elements to 0. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_contains"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">contains</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L592" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given <code class="inline-code">value</code> is in the array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">V</span>) <span class="SFct">contains</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SCst">V</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_createBuffer"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">createBuffer</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L219" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Create a working buffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">createBuffer</span>(size: <span class="STpe">u64</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_createTemp"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">createTemp</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L210" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Create a temporary array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">TA</span>) <span class="SFct">createTemp</span>()-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="SCst">TA</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_emplaceAddress"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">emplaceAddress</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L325" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve room at the end of the array for <code class="inline-code">num</code> elements, but does not  initialize them. Returns the address of the first element. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">emplaceAddress</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, num: <span class="STpe">u32</span> = <span class="SNum">1</span>)-&gt;^<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_emplaceAt"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">emplaceAt</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L432" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Move some values at the given index. If <code class="inline-code">index</code> is equal to <code class="inline-code">count</code>, then  the values are moved at the end of the array.  Order is preserved. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">emplaceAt</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, values: [..] <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_emplaceInitAddress"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">emplaceInitAddress</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L334" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve room at the end of the array for <code class="inline-code">num</code> elements. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">emplaceInitAddress</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, num: <span class="STpe">u32</span> = <span class="SNum">1</span>)-&gt;^<span class="SCst">T</span></span></code>
</div>
<p> Returns the address of the first element </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_free"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">free</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L192" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Free the array content. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">free</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_front"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">front</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L618" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a copy of the first element. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">front</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_frontPtr"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">frontPtr</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L626" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the address of the first element. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">frontPtr</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;*<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_grow"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">grow</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L239" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Ensure the Array is big enough to store at least <code class="inline-code">newCount</code> elements  Number of valid elements does not change. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">grow</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, newCount: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_insertAt"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">insertAt</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L346" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Insert a value at the given index. If <code class="inline-code">index</code> is equal to <code class="inline-code">count</code>, then  the value is added at the end of the array.  Order is preserved. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">insertAt</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, value: <span class="SCst">T</span>)</span></code>
</div>
<p>Insert some values at the given index. If <code class="inline-code">index</code> is equal to <code class="inline-code">count</code>, then  the values are added at the end of the array.  Order is preserved. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">insertAt</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, values: <span class="SKwd">const</span> [..] <span class="SCst">T</span>)</span></code>
</div>
<p>Move a value at the given index. If <code class="inline-code">index</code> is equal to <code class="inline-code">count</code>, then  the value is added at the end of the array.  Order is preserved. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">insertAt</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, value: <span class="SKwd">moveref</span> <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_isEmpty"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">isEmpty</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L228" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the array is empty. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isEmpty</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_opAffect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">opAffect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L105" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initializes an Array that contains values copied from the specified array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opAffect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, arr: <span class="SKwd">const</span> [..] <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_opCast"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">opCast</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L53" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opCast</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;[..] <span class="SCst">T</span>
<span class="SKwd">func</span> <span class="SFct">opCast</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SKwd">const</span> [..] <span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_opCount"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">opCount</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opCount</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_opData"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">opData</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opData</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SKwd">const</span> *<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_opDrop"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">opDrop</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opDrop</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_opIndex"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">opIndex</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L82" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opIndex</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>)-&gt;<span class="SCst">T</span>
<span class="SKwd">func</span> <span class="SFct">opIndex</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>)-&gt;<span class="SKwd">ref</span> <span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_opIndexAffect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">opIndexAffect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L90" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opIndexAffect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, value: <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_opIndexAssign"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">opIndexAssign</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L98" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opIndexAssign</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, value: <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_opPostCopy"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">opPostCopy</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L32" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opPostCopy</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_opSlice"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">opSlice</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L65" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opSlice</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, lower: <span class="STpe">u64</span>, upper: <span class="STpe">u64</span>)-&gt;[..] <span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_opVisit"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">opVisit</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L130" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Visit every elements of the array. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span>(ptr: <span class="STpe">bool</span>, back: <span class="STpe">bool</span>) <span class="SFct">opVisit</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, stmt: <span class="STpe">code</span>)</span></code>
</div>
<p> Visiting by address and in reverse order is supported. </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_popBack"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">popBack</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L648" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a copy of the last element, and remove it from the array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">popBack</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_realloc"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">realloc</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L162" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">realloc</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, newCapacity: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_remove"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">remove</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L575" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove the given <code class="inline-code">value</code>  If not found, does nothing. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">V</span>) <span class="SFct">remove</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SCst">V</span>)</span></code>
</div>
<p>Remove <code class="inline-code">num</code> elements starting at <code class="inline-code">index</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">remove</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, num: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_removeAt"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">removeAt</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L530" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove an element at <code class="inline-code">index</code> by replacing it with the last element. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">removeAt</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>)</span></code>
</div>
<p> Order is <b>not preserved</b> </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_removeAtOrdered"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">removeAtOrdered</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L542" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove <code class="inline-code">numValues</code> elements at <code class="inline-code">index</code> by shifting all others. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">removeAtOrdered</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, numValues: <span class="STpe">u64</span> = <span class="SNum">1</span>)</span></code>
</div>
<p> Order is preserved </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_removeBack"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">removeBack</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L658" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove the last element. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">removeBack</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_removeOrdered"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">removeOrdered</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L584" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove the given <code class="inline-code">value</code>  If not found, does nothing. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">V</span>) <span class="SFct">removeOrdered</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SCst">V</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_reserve"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">reserve</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L249" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve room for <code class="inline-code">newCapacity</code> elements without changing the array count  Number of valid elements does not change. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">reserve</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, newCapacity: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_resize"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">resize</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L266" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Change the number of valid elements in the array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">resize</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, newCount: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_sort"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">sort</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L599" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sort array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">sort</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>Sort array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">sort</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, cb: <span class="SKwd">closure</span>(<span class="SCst">T</span>, <span class="SCst">T</span>)-&gt;<span class="STpe">s32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_sortReverse"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">sortReverse</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L605" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sort array in reverse order (from biggest to lowest value). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">sortReverse</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_swap"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">swap</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L498" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Swap two elements. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">swap</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, idx0: <span class="STpe">u64</span>, idx1: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Array_toSlice"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Array.</span><span class="api-item-title-strong">toSlice</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\array.swg#L232" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a slice. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toSlice</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;[..] <span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ArrayPtr"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">ArrayPtr</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\arrayptr.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_ArrayPtr">ArrayPtr</a></span>(<span class="SCst">T</span>)</span></code>
</div>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde"><span class="SKwd">using</span> base</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(*<span class="SCst">T</span>)</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_ArrayPtr_addNewPtr"><span class="SCde"><span class="SFct">addNewPtr</span>()</spa</a></td>
<td>Allocate a new pointer, and add it to the array. </td>
</tr>
<tr>
<td><a href="#Core_ArrayPtr_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Release content. </td>
</tr>
<tr>
<td><a href="#Core_ArrayPtr_deletePtr"><span class="SCde"><span class="SFct">deletePtr</span>()</spa</a></td>
<td>Delete one pointer allocated here. </td>
</tr>
<tr>
<td><a href="#Core_ArrayPtr_newPtr"><span class="SCde"><span class="SFct">newPtr</span>()</spa</a></td>
<td>Allocate a new pointer by using the contextual allocator. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_ArrayPtr_opDrop"><span class="SCde"><span class="SFct">opDrop</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ArrayPtr_addNewPtr"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ArrayPtr.</span><span class="api-item-title-strong">addNewPtr</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\arrayptr.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Allocate a new pointer, and add it to the array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">addNewPtr</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;*<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ArrayPtr_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ArrayPtr.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\arrayptr.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Release content. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ArrayPtr_deletePtr"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ArrayPtr.</span><span class="api-item-title-strong">deletePtr</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\arrayptr.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Delete one pointer allocated here. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">deletePtr</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, item: *<span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ArrayPtr_newPtr"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ArrayPtr.</span><span class="api-item-title-strong">newPtr</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\arrayptr.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Allocate a new pointer by using the contextual allocator. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">newPtr</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;*<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ArrayPtr_opDrop"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ArrayPtr.</span><span class="api-item-title-strong">opDrop</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\arrayptr.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opDrop</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Atomic_add"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Atomic.</span><span class="api-item-title-strong">add</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\atomic.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">add</span>(addr: *<span class="STpe">s16</span>, value: <span class="STpe">s16</span>)-&gt;<span class="STpe">s16</span>
<span class="SKwd">func</span> <span class="SFct">add</span>(addr: *<span class="STpe">s32</span>, value: <span class="STpe">s32</span>)-&gt;<span class="STpe">s32</span>
<span class="SKwd">func</span> <span class="SFct">add</span>(addr: *<span class="STpe">s64</span>, value: <span class="STpe">s64</span>)-&gt;<span class="STpe">s64</span>
<span class="SKwd">func</span> <span class="SFct">add</span>(addr: *<span class="STpe">s8</span>, value: <span class="STpe">s8</span>)-&gt;<span class="STpe">s8</span>
<span class="SKwd">func</span> <span class="SFct">add</span>(addr: *<span class="STpe">u16</span>, value: <span class="STpe">u16</span>)-&gt;<span class="STpe">u16</span>
<span class="SKwd">func</span> <span class="SFct">add</span>(addr: *<span class="STpe">u32</span>, value: <span class="STpe">u32</span>)-&gt;<span class="STpe">u32</span>
<span class="SKwd">func</span> <span class="SFct">add</span>(addr: *<span class="STpe">u64</span>, value: <span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span>
<span class="SKwd">func</span> <span class="SFct">add</span>(addr: *<span class="STpe">u8</span>, value: <span class="STpe">u8</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Atomic_compareExchange"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Atomic.</span><span class="api-item-title-strong">compareExchange</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\atomic.swg#L52" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">compareExchange</span>(addr: *<span class="STpe">s16</span>, compareTo: <span class="STpe">s16</span>, exchangeWith: <span class="STpe">s16</span>)-&gt;<span class="STpe">s16</span>
<span class="SKwd">func</span> <span class="SFct">compareExchange</span>(addr: *<span class="STpe">s32</span>, compareTo: <span class="STpe">s32</span>, exchangeWith: <span class="STpe">s32</span>)-&gt;<span class="STpe">s32</span>
<span class="SKwd">func</span> <span class="SFct">compareExchange</span>(addr: *<span class="STpe">s64</span>, compareTo: <span class="STpe">s64</span>, exchangeWith: <span class="STpe">s64</span>)-&gt;<span class="STpe">s64</span>
<span class="SKwd">func</span> <span class="SFct">compareExchange</span>(addr: *<span class="STpe">s8</span>, compareTo: <span class="STpe">s8</span>, exchangeWith: <span class="STpe">s8</span>)-&gt;<span class="STpe">s8</span>
<span class="SKwd">func</span> <span class="SFct">compareExchange</span>(addr: *<span class="STpe">u16</span>, compareTo: <span class="STpe">u16</span>, exchangeWith: <span class="STpe">u16</span>)-&gt;<span class="STpe">u16</span>
<span class="SKwd">func</span> <span class="SFct">compareExchange</span>(addr: *<span class="STpe">u32</span>, compareTo: <span class="STpe">u32</span>, exchangeWith: <span class="STpe">u32</span>)-&gt;<span class="STpe">u32</span>
<span class="SKwd">func</span> <span class="SFct">compareExchange</span>(addr: *<span class="STpe">u64</span>, compareTo: <span class="STpe">u64</span>, exchangeWith: <span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span>
<span class="SKwd">func</span> <span class="SFct">compareExchange</span>(addr: *<span class="STpe">u8</span>, compareTo: <span class="STpe">u8</span>, exchangeWith: <span class="STpe">u8</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Atomic_exchange"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Atomic.</span><span class="api-item-title-strong">exchange</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\atomic.swg#L43" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">exchange</span>(addr: *<span class="STpe">s16</span>, exchangeWith: <span class="STpe">s16</span>)-&gt;<span class="STpe">s16</span>
<span class="SKwd">func</span> <span class="SFct">exchange</span>(addr: *<span class="STpe">s32</span>, exchangeWith: <span class="STpe">s32</span>)-&gt;<span class="STpe">s32</span>
<span class="SKwd">func</span> <span class="SFct">exchange</span>(addr: *<span class="STpe">s64</span>, exchangeWith: <span class="STpe">s64</span>)-&gt;<span class="STpe">s64</span>
<span class="SKwd">func</span> <span class="SFct">exchange</span>(addr: *<span class="STpe">s8</span>, exchangeWith: <span class="STpe">s8</span>)-&gt;<span class="STpe">s8</span>
<span class="SKwd">func</span> <span class="SFct">exchange</span>(addr: *<span class="STpe">u16</span>, exchangeWith: <span class="STpe">u16</span>)-&gt;<span class="STpe">u16</span>
<span class="SKwd">func</span> <span class="SFct">exchange</span>(addr: *<span class="STpe">u32</span>, exchangeWith: <span class="STpe">u32</span>)-&gt;<span class="STpe">u32</span>
<span class="SKwd">func</span> <span class="SFct">exchange</span>(addr: *<span class="STpe">u64</span>, exchangeWith: <span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span>
<span class="SKwd">func</span> <span class="SFct">exchange</span>(addr: *<span class="STpe">u8</span>, exchangeWith: <span class="STpe">u8</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Atomic_get"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Atomic.</span><span class="api-item-title-strong">get</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\atomic.swg#L61" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">get</span>(addr: *<span class="STpe">s16</span>)-&gt;<span class="STpe">s16</span>
<span class="SKwd">func</span> <span class="SFct">get</span>(addr: *<span class="STpe">s32</span>)-&gt;<span class="STpe">s32</span>
<span class="SKwd">func</span> <span class="SFct">get</span>(addr: *<span class="STpe">s64</span>)-&gt;<span class="STpe">s64</span>
<span class="SKwd">func</span> <span class="SFct">get</span>(addr: *<span class="STpe">s8</span>)-&gt;<span class="STpe">s8</span>
<span class="SKwd">func</span> <span class="SFct">get</span>(addr: *<span class="STpe">u16</span>)-&gt;<span class="STpe">u16</span>
<span class="SKwd">func</span> <span class="SFct">get</span>(addr: *<span class="STpe">u32</span>)-&gt;<span class="STpe">u32</span>
<span class="SKwd">func</span> <span class="SFct">get</span>(addr: *<span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span>
<span class="SKwd">func</span> <span class="SFct">get</span>(addr: *<span class="STpe">u8</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Atomic_logicAnd"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Atomic.</span><span class="api-item-title-strong">logicAnd</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\atomic.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">logicAnd</span>(addr: *<span class="STpe">s16</span>, value: <span class="STpe">s16</span>)-&gt;<span class="STpe">s16</span>
<span class="SKwd">func</span> <span class="SFct">logicAnd</span>(addr: *<span class="STpe">s32</span>, value: <span class="STpe">s32</span>)-&gt;<span class="STpe">s32</span>
<span class="SKwd">func</span> <span class="SFct">logicAnd</span>(addr: *<span class="STpe">s64</span>, value: <span class="STpe">s64</span>)-&gt;<span class="STpe">s64</span>
<span class="SKwd">func</span> <span class="SFct">logicAnd</span>(addr: *<span class="STpe">s8</span>, value: <span class="STpe">s8</span>)-&gt;<span class="STpe">s8</span>
<span class="SKwd">func</span> <span class="SFct">logicAnd</span>(addr: *<span class="STpe">u16</span>, value: <span class="STpe">u16</span>)-&gt;<span class="STpe">u16</span>
<span class="SKwd">func</span> <span class="SFct">logicAnd</span>(addr: *<span class="STpe">u32</span>, value: <span class="STpe">u32</span>)-&gt;<span class="STpe">u32</span>
<span class="SKwd">func</span> <span class="SFct">logicAnd</span>(addr: *<span class="STpe">u64</span>, value: <span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span>
<span class="SKwd">func</span> <span class="SFct">logicAnd</span>(addr: *<span class="STpe">u8</span>, value: <span class="STpe">u8</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Atomic_logicOr"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Atomic.</span><span class="api-item-title-strong">logicOr</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\atomic.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">logicOr</span>(addr: *<span class="STpe">s16</span>, value: <span class="STpe">s16</span>)-&gt;<span class="STpe">s16</span>
<span class="SKwd">func</span> <span class="SFct">logicOr</span>(addr: *<span class="STpe">s32</span>, value: <span class="STpe">s32</span>)-&gt;<span class="STpe">s32</span>
<span class="SKwd">func</span> <span class="SFct">logicOr</span>(addr: *<span class="STpe">s64</span>, value: <span class="STpe">s64</span>)-&gt;<span class="STpe">s64</span>
<span class="SKwd">func</span> <span class="SFct">logicOr</span>(addr: *<span class="STpe">s8</span>, value: <span class="STpe">s8</span>)-&gt;<span class="STpe">s8</span>
<span class="SKwd">func</span> <span class="SFct">logicOr</span>(addr: *<span class="STpe">u16</span>, value: <span class="STpe">u16</span>)-&gt;<span class="STpe">u16</span>
<span class="SKwd">func</span> <span class="SFct">logicOr</span>(addr: *<span class="STpe">u32</span>, value: <span class="STpe">u32</span>)-&gt;<span class="STpe">u32</span>
<span class="SKwd">func</span> <span class="SFct">logicOr</span>(addr: *<span class="STpe">u64</span>, value: <span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span>
<span class="SKwd">func</span> <span class="SFct">logicOr</span>(addr: *<span class="STpe">u8</span>, value: <span class="STpe">u8</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Atomic_logicXor"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Atomic.</span><span class="api-item-title-strong">logicXor</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\atomic.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">logicXor</span>(addr: *<span class="STpe">s16</span>, value: <span class="STpe">s16</span>)-&gt;<span class="STpe">s16</span>
<span class="SKwd">func</span> <span class="SFct">logicXor</span>(addr: *<span class="STpe">s32</span>, value: <span class="STpe">s32</span>)-&gt;<span class="STpe">s32</span>
<span class="SKwd">func</span> <span class="SFct">logicXor</span>(addr: *<span class="STpe">s64</span>, value: <span class="STpe">s64</span>)-&gt;<span class="STpe">s64</span>
<span class="SKwd">func</span> <span class="SFct">logicXor</span>(addr: *<span class="STpe">s8</span>, value: <span class="STpe">s8</span>)-&gt;<span class="STpe">s8</span>
<span class="SKwd">func</span> <span class="SFct">logicXor</span>(addr: *<span class="STpe">u16</span>, value: <span class="STpe">u16</span>)-&gt;<span class="STpe">u16</span>
<span class="SKwd">func</span> <span class="SFct">logicXor</span>(addr: *<span class="STpe">u32</span>, value: <span class="STpe">u32</span>)-&gt;<span class="STpe">u32</span>
<span class="SKwd">func</span> <span class="SFct">logicXor</span>(addr: *<span class="STpe">u64</span>, value: <span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span>
<span class="SKwd">func</span> <span class="SFct">logicXor</span>(addr: *<span class="STpe">u8</span>, value: <span class="STpe">u8</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_BitArray"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">BitArray</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Manages a compact array of bit values, which are represented as booleans, where <code class="inline-code">true</code> indicates that  the bit is on (1) and <code class="inline-code">false</code> indicates the bit is off (0). </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">buffer</span></td>
<td class="code-type"><span class="SCde">^<span class="STpe">u32</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">allocator</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Swag</span>.<span class="SCst">IAllocator</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">count</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">capacity</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_BitArray_andWith"><span class="SCde"><span class="SFct">andWith</span>()</spa</a></td>
<td>Performs the bitwise AND operation between the elements of the current <code class="inline-code">BitArray</code> and the corresponding elements in the specified array. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_get"><span class="SCde"><span class="SFct">get</span>()</spa</a></td>
<td>Gets the value of the bit at a specific position. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_invert"><span class="SCde"><span class="SFct">invert</span>(<span class="SKwd">self</span>)</span></a></td>
<td>Inverts all the bit values, so that elements set to <code class="inline-code">true</code> are changed to <code class="inline-code">false</code>, and elements set to <code class="inline-code">false</code> are changed to <code class="inline-code">true</code>. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_invert"><span class="SCde"><span class="SFct">invert</span>(<span class="SKwd">self</span>, <span class="STpe">u64</span>)</span></a></td>
<td>Inverts the value of the bit at a specific position. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_orWith"><span class="SCde"><span class="SFct">orWith</span>()</spa</a></td>
<td>Performs the bitwise OR operation between the elements of the current <code class="inline-code">BitArray</code> and the corresponding elements in the specified array. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_reserve"><span class="SCde"><span class="SFct">reserve</span>(<span class="SKwd">self</span>, <span class="STpe">u64</span>)</span></a></td>
<td>Reserve the given amount of bits. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_reserve"><span class="SCde"><span class="SFct">reserve</span>(<span class="SKwd">self</span>, <span class="STpe">u64</span>, <span class="STpe">bool</span>)</span></a></td>
<td>Reserve the given amount of bits and set an initial value to all bits. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_set"><span class="SCde"><span class="SFct">set</span>()</spa</a></td>
<td>Sets the bit at a specific position to the specified value. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_setAll"><span class="SCde"><span class="SFct">setAll</span>()</spa</a></td>
<td>Sets all bits to the specified value. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_xorWith"><span class="SCde"><span class="SFct">xorWith</span>()</spa</a></td>
<td>Performs the bitwise XOR operation between the elements of the current <code class="inline-code">BitArray</code> and the corresponding elements in the specified array. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_BitArray_opAffect"><span class="SCde"><span class="SFct">opAffect</span>()</spa</a></td>
<td>Initializes a <code class="inline-code">BitArray</code> that contains bit values copied from the specified array of booleans. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_opCount"><span class="SCde"><span class="SFct">opCount</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_BitArray_opEquals"><span class="SCde"><span class="SFct">opEquals</span>()</spa</a></td>
<td>Compares two arrays, and returns <code class="inline-code">true</code> if they are equal. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_opIndex"><span class="SCde"><span class="SFct">opIndex</span>()</spa</a></td>
<td>Gets the value of the bit at a specific position. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_opIndexAffect"><span class="SCde"><span class="SFct">opIndexAffect</span>()</spa</a></td>
<td>Sets the value of the bit at a specific position. </td>
</tr>
<tr>
<td><a href="#Core_BitArray_opVisit"><span class="SCde"><span class="SFct">opVisit</span>()</spa</a></td>
<td>Visit all the booleans. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_BitArray_andWith"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitArray.</span><span class="api-item-title-strong">andWith</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L202" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Performs the bitwise AND operation between the elements of the current <code class="inline-code">BitArray</code> and the corresponding elements in the specified array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">andWith</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_BitArray">BitArray</a></span>)</span></code>
</div>
<p> The current <code class="inline-code">BitArray</code> will be modified to store the result of the bitwise AND operation. </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_BitArray_get"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitArray.</span><span class="api-item-title-strong">get</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L169" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Gets the value of the bit at a specific position. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">get</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_BitArray_invert"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitArray.</span><span class="api-item-title-strong">invert</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L192" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Inverts all the bit values, so that elements set to <code class="inline-code">true</code> are changed to <code class="inline-code">false</code>, and elements set to <code class="inline-code">false</code> are changed to <code class="inline-code">true</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">invert</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>Inverts the value of the bit at a specific position. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">invert</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_BitArray_opAffect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitArray.</span><span class="api-item-title-strong">opAffect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L66" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initializes a <code class="inline-code">BitArray</code> that contains bit values copied from the specified array of booleans. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opAffect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, what: <span class="SKwd">const</span> [..] <span class="STpe">bool</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_BitArray_opCount"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitArray.</span><span class="api-item-title-strong">opCount</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L32" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opCount</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_BitArray_opEquals"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitArray.</span><span class="api-item-title-strong">opEquals</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L76" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compares two arrays, and returns <code class="inline-code">true</code> if they are equal. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opEquals</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_BitArray">BitArray</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_BitArray_opIndex"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitArray.</span><span class="api-item-title-strong">opIndex</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L54" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Gets the value of the bit at a specific position. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opIndex</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_BitArray_opIndexAffect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitArray.</span><span class="api-item-title-strong">opIndexAffect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L60" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sets the value of the bit at a specific position. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opIndexAffect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, value: <span class="STpe">bool</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_BitArray_opVisit"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitArray.</span><span class="api-item-title-strong">opVisit</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L92" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Visit all the booleans. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span>(ptr: <span class="STpe">bool</span>, back: <span class="STpe">bool</span>) <span class="SFct">opVisit</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, stmt: <span class="STpe">code</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_BitArray_orWith"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitArray.</span><span class="api-item-title-strong">orWith</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L213" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Performs the bitwise OR operation between the elements of the current <code class="inline-code">BitArray</code> and the corresponding elements in the specified array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">orWith</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_BitArray">BitArray</a></span>)</span></code>
</div>
<p> The current BitArray will be modified to store the result of the bitwise OR operation. </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_BitArray_reserve"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitArray.</span><span class="api-item-title-strong">reserve</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L123" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve the given amount of bits. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">reserve</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, maxBits: <span class="STpe">u64</span>)</span></code>
</div>
<p>Reserve the given amount of bits and set an initial value to all bits. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">reserve</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, maxBits: <span class="STpe">u64</span>, initialValue: <span class="STpe">bool</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_BitArray_set"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitArray.</span><span class="api-item-title-strong">set</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L156" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sets the bit at a specific position to the specified value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">set</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, value: <span class="STpe">bool</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_BitArray_setAll"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitArray.</span><span class="api-item-title-strong">setAll</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L150" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sets all bits to the specified value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setAll</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">bool</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_BitArray_xorWith"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitArray.</span><span class="api-item-title-strong">xorWith</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\bitarray.swg#L224" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Performs the bitwise XOR operation between the elements of the current <code class="inline-code">BitArray</code> and the corresponding elements in the specified array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">xorWith</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_BitArray">BitArray</a></span>)</span></code>
</div>
<p> The current BitArray will be modified to store the result of the bitwise XOR operation. </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ByteStream"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">ByteStream</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L1" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">readBuffer</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> [..] <span class="STpe">u8</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">writeBuffer</span></td>
<td class="code-type"><span class="SCde">*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">u8</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">seek</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">eof</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_ByteStream_getSeek"><span class="SCde"><span class="SFct">getSeek</span>()</spa</a></td>
<td>Returns the seek value. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_isEof"><span class="SCde"><span class="SFct">isEof</span>()</spa</a></td>
<td>Returns true if end has been reached. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_length"><span class="SCde"><span class="SFct">length</span>()</spa</a></td>
<td>Returns length of associated slice. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_moveSeek"><span class="SCde"><span class="SFct">moveSeek</span>()</spa</a></td>
<td>Seek to the next byte. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_openRead"><span class="SCde"><span class="SFct">openRead</span>()</spa</a></td>
<td>Creates a byte stream to read from a slice. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_openWrite"><span class="SCde"><span class="SFct">openWrite</span>()</spa</a></td>
<td>Creates a byte stream to write to an array. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_peekU8"><span class="SCde"><span class="SFct">peekU8</span>()</spa</a></td>
<td>Read one byte and seek. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_readBytes"><span class="SCde"><span class="SFct">readBytes</span>()</spa</a></td>
<td>Read the given amount of bytes. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_readData"><span class="SCde"><span class="SFct">readData</span>()</spa</a></td>
<td>Get the buffer of datas to read. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_readNative"><span class="SCde"><span class="SFct">readNative</span>()</spa</a></td>
<td>Read a <code class="inline-code">native</code> type value. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_readU8"><span class="SCde"><span class="SFct">readU8</span>()</spa</a></td>
<td>Read one byte and seek. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_remainReadToSlice"><span class="SCde"><span class="SFct">remainReadToSlice</span>()</spa</a></td>
<td>Returns a slice of the remaing bytes to read. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_remainReadToString"><span class="SCde"><span class="SFct">remainReadToString</span>()</spa</a></td>
<td>Returns a string of the remaing bytes to read. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_setSeek"><span class="SCde"><span class="SFct">setSeek</span>()</spa</a></td>
<td>Seek to the given position. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_writeBytes"><span class="SCde"><span class="SFct">writeBytes</span>()</spa</a></td>
<td>Write the given amount of bytes. </td>
</tr>
<tr>
<td><a href="#Core_ByteStream_writeNative"><span class="SCde"><span class="SFct">writeNative</span>()</spa</a></td>
<td>Write a <code class="inline-code">native</code> type value. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ByteStream_getSeek"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ByteStream.</span><span class="api-item-title-strong">getSeek</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L145" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the seek value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getSeek</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ByteStream_isEof"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ByteStream.</span><span class="api-item-title-strong">isEof</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L52" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if end has been reached. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isEof</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ByteStream_length"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ByteStream.</span><span class="api-item-title-strong">length</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L40" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns length of associated slice. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">length</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ByteStream_moveSeek"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ByteStream.</span><span class="api-item-title-strong">moveSeek</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L123" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Seek to the next byte. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">moveSeek</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, offset: <span class="STpe">u64</span> = <span class="SNum">1</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ByteStream_openRead"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ByteStream.</span><span class="api-item-title-strong">openRead</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a byte stream to read from a slice. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">openRead</span>(readBuffer: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ByteStream">ByteStream</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ByteStream_openWrite"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ByteStream.</span><span class="api-item-title-strong">openWrite</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a byte stream to write to an array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">openWrite</span>(writeBuffer: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">u8</span>))-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ByteStream">ByteStream</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ByteStream_peekU8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ByteStream.</span><span class="api-item-title-strong">peekU8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L115" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read one byte and seek. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">peekU8</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ByteStream_readBytes"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ByteStream.</span><span class="api-item-title-strong">readBytes</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L98" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read the given amount of bytes. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readBytes</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, dest: *<span class="STpe">u8</span>, count: <span class="STpe">u64</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ByteStream_readData"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ByteStream.</span><span class="api-item-title-strong">readData</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L46" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the buffer of datas to read. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readData</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SKwd">const</span> ^<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ByteStream_readNative"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ByteStream.</span><span class="api-item-title-strong">readNative</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L88" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read a <code class="inline-code">native</code> type value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">readNative</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">T</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ByteStream_readU8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ByteStream.</span><span class="api-item-title-strong">readU8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L107" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read one byte and seek. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readU8</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ByteStream_remainReadToSlice"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ByteStream.</span><span class="api-item-title-strong">remainReadToSlice</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a slice of the remaing bytes to read. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">remainReadToSlice</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SKwd">const</span> [..] <span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ByteStream_remainReadToString"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ByteStream.</span><span class="api-item-title-strong">remainReadToString</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a string of the remaing bytes to read. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">remainReadToString</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ByteStream_setSeek"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ByteStream.</span><span class="api-item-title-strong">setSeek</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L136" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Seek to the given position. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setSeek</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, offset: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ByteStream_writeBytes"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ByteStream.</span><span class="api-item-title-strong">writeBytes</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L71" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write the given amount of bytes. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeBytes</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, slice: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ByteStream_writeNative"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ByteStream.</span><span class="api-item-title-strong">writeNative</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\bytestream.swg#L58" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write a <code class="inline-code">native</code> type value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">writeNative</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, val: <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_CharacterSet"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">CharacterSet</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Latin1</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Unicode</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_CommandLine"><span class="api-item-title-kind">namespace</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">CommandLine</span></span>
</td>
</tr>
</table>
</p>
<h3>Structs</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_CommandLine_IsSet"><span class="SCst">IsSet</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_CommandLine_ParseOptions"><span class="SCst">ParseOptions</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_CommandLine_Result"><span class="SCst">Result</span></a></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_CommandLine_getField"><span class="SCde"><span class="SFct">getField</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_CommandLine_isOption"><span class="SCde"><span class="SFct">isOption</span>()</spa</a></td>
<td>Returns true if <code class="inline-code">oneArg</code> is a valid option (starting with a delimiter). </td>
</tr>
<tr>
<td><a href="#Core_CommandLine_parse"><span class="SCde"><span class="SFct">parse</span>()</spa</a></td>
<td>Parse all the arguments and fill the result. </td>
</tr>
<tr>
<td><a href="#Core_CommandLine_splitArguments"><span class="SCde"><span class="SFct">splitArguments</span>()</spa</a></td>
<td>Clean and split a list of arguments  -option:value or -option=value =&gt; -option value. </td>
</tr>
</table>
<h3>Attributes</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_CommandLine_ArgParams"><span class="SCst">ArgParams</span></a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_CommandLine_ArgParams"><span class="api-item-title-kind">attr</span> <span class="api-item-title-light">CommandLine.</span><span class="api-item-title-strong">ArgParams</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="addinfos"><b>Usage</b>: all 
</div>
<div class="code-block"><code><span class="SCde"><span class="SKwd">attr</span> <span class="SCst"><a href="#Core_CommandLine_ArgParams">ArgParams</a></span>(nameAlias: <span class="STpe">string</span> = <span class="SKwd">null</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_CommandLine_IsSet"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">CommandLine.</span><span class="api-item-title-strong">IsSet</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L10" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_CommandLine_IsSet">IsSet</a></span>(<span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_CommandLine_ParseOptions"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">CommandLine.</span><span class="api-item-title-strong">ParseOptions</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_CommandLine_Result"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">CommandLine.</span><span class="api-item-title-strong">Result</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_CommandLine_Result">Result</a></span>(<span class="SCst">T</span>)</span></code>
</div>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">isSet</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_CommandLine">CommandLine</a></span>.<span class="SCst"><a href="#Core_CommandLine_IsSet">IsSet</a></span>'(<span class="SCst">T</span>)</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_CommandLine_getField"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">CommandLine.</span><span class="api-item-title-strong">getField</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L71" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getField</span>(typeStruct: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfoStruct</span>, name: <span class="STpe">string</span>)-&gt;<span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeValue</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_CommandLine_isOption"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">CommandLine.</span><span class="api-item-title-strong">isOption</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if <code class="inline-code">oneArg</code> is a valid option (starting with a delimiter). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isOption</span>(oneArg: <span class="STpe">string</span>, _options: <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_CommandLine">CommandLine</a></span>.<span class="SCst"><a href="#Core_CommandLine_ParseOptions">ParseOptions</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_CommandLine_parse"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">CommandLine.</span><span class="api-item-title-strong">parse</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L89" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Parse all the arguments and fill the result. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">parse</span>(st: *<span class="SCst">T</span>, args: <span class="SKwd">const</span> [..] <span class="STpe">string</span>, options = <span class="SCst"><a href="#Core_CommandLine">CommandLine</a></span>.<span class="SCst"><a href="#Core_CommandLine_ParseOptions">ParseOptions</a></span>{})-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_CommandLine">CommandLine</a></span>.<span class="SCst"><a href="#Core_CommandLine_Result">Result</a></span>'(<span class="SCst">T</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_CommandLine_parse_parse_checkNext"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">parse.</span><span class="api-item-title-strong">checkNext</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L92" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">checkNext</span>() <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_CommandLine_splitArguments"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">CommandLine.</span><span class="api-item-title-strong">splitArguments</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\commandline.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Clean and split a list of arguments  -option:value or -option=value =&gt; -option value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">splitArguments</span>(args: <span class="SKwd">const</span> [..] <span class="STpe">string</span>, options: <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_CommandLine">CommandLine</a></span>.<span class="SCst"><a href="#Core_CommandLine_ParseOptions">ParseOptions</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">string</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_BitStream"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Compress.</span><span class="api-item-title-strong">BitStream</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">stream</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> [..] <span class="STpe">u8</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">curByte</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">codeBuffer</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">numBits</span></td>
<td class="code-type"><span class="STpe">u8</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">eof</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Compress_BitStream_consumeBits"><span class="SCde"><span class="SFct">consumeBits</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_curPtr"><span class="SCde"><span class="SFct">curPtr</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_discardToNextByte"><span class="SCde"><span class="SFct">discardToNextByte</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_init"><span class="SCde"><span class="SFct">init</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_peek32"><span class="SCde"><span class="SFct">peek32</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_peek32Be"><span class="SCde"><span class="SFct">peek32Be</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_peekBits"><span class="SCde"><span class="SFct">peekBits</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_peekBitsNoRefill"><span class="SCde"><span class="SFct">peekBitsNoRefill</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_peekBytes"><span class="SCde"><span class="SFct">peekBytes</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_readBits"><span class="SCde"><span class="SFct">readBits</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_readBitsNoRefill"><span class="SCde"><span class="SFct">readBitsNoRefill</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_refill"><span class="SCde"><span class="SFct">refill</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_revert"><span class="SCde"><span class="SFct">revert</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_size"><span class="SCde"><span class="SFct">size</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Compress_BitStream_startPtr"><span class="SCde"><span class="SFct">startPtr</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_BitStream_consumeBits"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitStream.</span><span class="api-item-title-strong">consumeBits</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L81" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">consumeBits</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, width: <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_BitStream_curPtr"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitStream.</span><span class="api-item-title-strong">curPtr</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">curPtr</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SKwd">const</span> ^<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_BitStream_discardToNextByte"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitStream.</span><span class="api-item-title-strong">discardToNextByte</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L88" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">discardToNextByte</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_BitStream_init"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitStream.</span><span class="api-item-title-strong">init</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">init</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, buf: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_BitStream_peek32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitStream.</span><span class="api-item-title-strong">peek32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L111" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">peek32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, dest: ^<span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_BitStream_peek32Be"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitStream.</span><span class="api-item-title-strong">peek32Be</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L123" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">peek32Be</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, dest: ^<span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_BitStream_peekBits"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitStream.</span><span class="api-item-title-strong">peekBits</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L53" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">peekBits</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, width: <span class="STpe">u8</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_BitStream_peekBitsNoRefill"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitStream.</span><span class="api-item-title-strong">peekBitsNoRefill</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L59" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">peekBitsNoRefill</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, width: <span class="STpe">u8</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_BitStream_peekBytes"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitStream.</span><span class="api-item-title-strong">peekBytes</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L101" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">peekBytes</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, width: <span class="STpe">u8</span>, dest: ^<span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_BitStream_readBits"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitStream.</span><span class="api-item-title-strong">readBits</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L66" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readBits</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, width: <span class="STpe">u8</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_BitStream_readBitsNoRefill"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitStream.</span><span class="api-item-title-strong">readBitsNoRefill</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L73" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readBitsNoRefill</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, width: <span class="STpe">u8</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_BitStream_refill"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitStream.</span><span class="api-item-title-strong">refill</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">refill</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, width = <span class="SNum">24</span>'<span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_BitStream_revert"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitStream.</span><span class="api-item-title-strong">revert</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L93" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">revert</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_BitStream_size"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitStream.</span><span class="api-item-title-strong">size</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">size</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_BitStream_startPtr"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">BitStream.</span><span class="api-item-title-strong">startPtr</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\bitstream.swg#L21" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">startPtr</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SKwd">const</span> ^<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_Deflate"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Compress.</span><span class="api-item-title-strong">Deflate</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\deflate.swg#L158" class="src">[src]</a></td>
</tr>
</table>
</p>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Compress_Deflate_compress"><span class="SCde"><span class="SFct">compress</span>()</spa</a></td>
<td>Compress the source buffer. </td>
</tr>
<tr>
<td><a href="#Core_Compress_Deflate_init"><span class="SCde"><span class="SFct">init</span>()</spa</a></td>
<td>Initialize the compressor  Can be called multiple times. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_Deflate_CompressionFlags"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Deflate.</span><span class="api-item-title-strong">CompressionFlags</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\deflate.swg#L1105" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Zero</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">ComputeAdler32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Default</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_Deflate_CompressionLevel"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Deflate.</span><span class="api-item-title-strong">CompressionLevel</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\deflate.swg#L1113" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">NoCompression</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">BestSpeed</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Default</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">BestCompression</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">UberCompression</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_Deflate_CompressionStrategy"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Deflate.</span><span class="api-item-title-strong">CompressionStrategy</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\deflate.swg#L1122" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Default</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Filtered</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">HuffmanOnly</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Rle</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Fixed</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_Deflate_compress"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Deflate.</span><span class="api-item-title-strong">compress</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\deflate.swg#L1149" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compress the source buffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">compress</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, result: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">u8</span>), src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_Deflate_init"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Deflate.</span><span class="api-item-title-strong">init</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\deflate.swg#L1138" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize the compressor  Can be called multiple times. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">init</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, level = <span class="SCst"><a href="#Core_Compress_Deflate_CompressionLevel">CompressionLevel</a></span>.<span class="SCst">Default</span>, strategy = <span class="SCst"><a href="#Core_Compress_Deflate_CompressionStrategy">CompressionStrategy</a></span>.<span class="SCst">Default</span>, flags = <span class="SCst"><a href="#Core_Compress_Deflate_CompressionFlags">CompressionFlags</a></span>.<span class="SCst">Default</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_Inflate"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Compress.</span><span class="api-item-title-strong">Inflate</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\inflate.swg#L142" class="src">[src]</a></td>
</tr>
</table>
</p>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Compress_Inflate_decompress"><span class="SCde"><span class="SFct">decompress</span>()</spa</a></td>
<td>Decompress the associated stream. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_Inflate_decompress"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Inflate.</span><span class="api-item-title-strong">decompress</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\inflate.swg#L250" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Decompress the associated stream. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">decompress</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, buf: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, winSize: <span class="STpe">u32</span> = <span class="SCst">InflateMaxDistance</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">u8</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_ZLib"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Compress.</span><span class="api-item-title-strong">ZLib</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\zlib.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Compress_ZLib_compress"><span class="SCde"><span class="SFct">compress</span>()</spa</a></td>
<td>Decompress stream. </td>
</tr>
<tr>
<td><a href="#Core_Compress_ZLib_decompress"><span class="SCde"><span class="SFct">decompress</span>()</spa</a></td>
<td>Decompress stream. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_ZLib_compress"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ZLib.</span><span class="api-item-title-strong">compress</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\zlib.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Decompress stream. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">compress</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, buffer: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, level = <span class="SCst"><a href="#Core_Compress_Deflate">Deflate</a></span>.<span class="SCst"><a href="#Core_Compress_Deflate_CompressionLevel">CompressionLevel</a></span>.<span class="SCst">Default</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">u8</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Compress_ZLib_decompress"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ZLib.</span><span class="api-item-title-strong">decompress</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\compress\zlib.swg#L33" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Decompress stream. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">decompress</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, buffer: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">u8</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">ConcatBuffer</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Represents a growable buffer, which is divided in buckets to avoid a copy/realloc when  the buffer needs to increase its size. This is the main difference with Array. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">allocator</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Swag</span>.<span class="SCst">IAllocator</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">firstBucket</span></td>
<td class="code-type"><span class="SCde">*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBufferBucket">ConcatBufferBucket</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">curBucket</span></td>
<td class="code-type"><span class="SCde">*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBufferBucket">ConcatBufferBucket</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">lastBucket</span></td>
<td class="code-type"><span class="SCde">*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBufferBucket">ConcatBufferBucket</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">currentSP</span></td>
<td class="code-type"><span class="SCde">^<span class="STpe">u8</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">granularity</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">isAtEnd</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">viewFirstBucket</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBufferBucket">ConcatBufferBucket</a></span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_ConcatBuffer_addBytes"><span class="SCde"><span class="SFct">addBytes</span>()</spa</a></td>
<td>Append a slice of bytes to the buffer  If <code class="inline-code">contiguous</code> is false, the slice will be divided in chunks if necessary. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_addNative"><span class="SCde"><span class="SFct">addNative</span>()</spa</a></td>
<td>Append one byte to the buffer. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_addStruct"><span class="SCde"><span class="SFct">addStruct</span>()</spa</a></td>
<td>Append the content of a struct. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Clear the content without freing the buffers. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_count"><span class="SCde"><span class="SFct">count</span>()</spa</a></td>
<td>Returns the number of bytes. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_eatBuffer"><span class="SCde"><span class="SFct">eatBuffer</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_getOffset"><span class="SCde"><span class="SFct">getOffset</span>()</spa</a></td>
<td>Get the linearized seek offset. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_getSeek"><span class="SCde"><span class="SFct">getSeek</span>()</spa</a></td>
<td>Returns the current <code class="inline-code">seek</code> in the buffer. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_grow"><span class="SCde"><span class="SFct">grow</span>()</spa</a></td>
<td>Be sure that there is enough room to store at least <code class="inline-code">numBytes</code> bytes. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_makeLinear"><span class="SCde"><span class="SFct">makeLinear</span>()</spa</a></td>
<td>linearize all buckets in one single big bucket. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_moveSeek"><span class="SCde"><span class="SFct">moveSeek</span>()</spa</a></td>
<td>Seek current write pointer. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_moveToString"><span class="SCde"><span class="SFct">moveToString</span>()</spa</a></td>
<td>Move the content. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_release"><span class="SCde"><span class="SFct">release</span>()</spa</a></td>
<td>Release all allocated buffers. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_setAllocator"><span class="SCde"><span class="SFct">setAllocator</span>()</spa</a></td>
<td>Associate an allocator with the buffer. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_setBucketSize"><span class="SCde"><span class="SFct">setBucketSize</span>()</spa</a></td>
<td>Set the granularity of datas when allocated new buckets. Minimum size is 4. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_setEndSeek"><span class="SCde"><span class="SFct">setEndSeek</span>()</spa</a></td>
<td>Set the end <code class="inline-code">seek</code>. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_setFirstBucket"><span class="SCde"><span class="SFct">setFirstBucket</span>()</spa</a></td>
<td>Share <code class="inline-code">data</code> with the firstBucket. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_setSeek"><span class="SCde"><span class="SFct">setSeek</span>()</spa</a></td>
<td>Set the current <code class="inline-code">seek</code>. </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_toSlice"><span class="SCde"><span class="SFct">toSlice</span>()</spa</a></td>
<td>Convert to a slice <i>only</i> if the buffer is linear (see <code class="inline-code">makeLinear</code>). </td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_toString"><span class="SCde"><span class="SFct">toString</span>()</spa</a></td>
<td>Convert buffer to a String. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_ConcatBuffer_opCount"><span class="SCde"><span class="SFct">opCount</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_ConcatBuffer_opVisit"><span class="SCde"><span class="SFct">opVisit</span>()</spa</a></td>
<td>Visit all valid buckets. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_addBytes"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">addBytes</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L205" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append a slice of bytes to the buffer  If <code class="inline-code">contiguous</code> is false, the slice will be divided in chunks if necessary. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">addBytes</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, bytes: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, contiguous = <span class="SKwd">true</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_addNative"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">addNative</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L170" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append one byte to the buffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">addNative</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, val: <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_addStruct"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">addStruct</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L198" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append the content of a struct. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">addStruct</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, val: <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L158" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Clear the content without freing the buffers. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_count"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">count</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L65" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the number of bytes. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">count</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_eatBuffer"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">eatBuffer</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L415" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">eatBuffer</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;{data: ^<span class="STpe">u8</span>, size: <span class="STpe">u64</span>, capacity: <span class="STpe">u64</span>}</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_getOffset"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">getOffset</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L287" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the linearized seek offset. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getOffset</span>(seek: <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBufferSeek">ConcatBufferSeek</a></span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_getSeek"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">getSeek</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L293" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the current <code class="inline-code">seek</code> in the buffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getSeek</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBufferSeek">ConcatBufferSeek</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_grow"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">grow</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L71" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Be sure that there is enough room to store at least <code class="inline-code">numBytes</code> bytes. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">grow</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, numBytes: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_makeLinear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">makeLinear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L452" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>linearize all buckets in one single big bucket. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">makeLinear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_moveSeek"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">moveSeek</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L302" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Seek current write pointer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">moveSeek</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, num: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_moveToString"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">moveToString</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L432" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Move the content. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">moveToString</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_opCount"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">opCount</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opCount</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_opVisit"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">opVisit</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L47" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Visit all valid buckets. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span>(ptr: <span class="STpe">bool</span>, back: <span class="STpe">bool</span>) <span class="SFct">opVisit</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, stmt: <span class="STpe">code</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_release"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">release</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L138" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Release all allocated buffers. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">release</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_setAllocator"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">setAllocator</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L124" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Associate an allocator with the buffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setAllocator</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, alloc: <span class="SCst">Swag</span>.<span class="SCst">IAllocator</span>)</span></code>
</div>
<p> The allocator can only be changed if the buffer has no pending buckets. </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_setBucketSize"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">setBucketSize</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L131" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the granularity of datas when allocated new buckets. Minimum size is 4. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setBucketSize</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, size: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_setEndSeek"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">setEndSeek</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L358" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the end <code class="inline-code">seek</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setEndSeek</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, seek: <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBufferSeek">ConcatBufferSeek</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_setFirstBucket"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">setFirstBucket</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L386" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Share <code class="inline-code">data</code> with the firstBucket. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setFirstBucket</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, data: [..] <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_setSeek"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">setSeek</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L341" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the current <code class="inline-code">seek</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setSeek</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, seek: <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBufferSeek">ConcatBufferSeek</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_toSlice"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">toSlice</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L378" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert to a slice <i>only</i> if the buffer is linear (see <code class="inline-code">makeLinear</code>). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toSlice</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;[..] <span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBuffer_toString"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConcatBuffer.</span><span class="api-item-title-strong">toString</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L397" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert buffer to a String. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toString</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBufferBucket"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">ConcatBufferBucket</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L3" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">datas</span></td>
<td class="code-type"><span class="SCde">^<span class="STpe">u8</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">next</span></td>
<td class="code-type"><span class="SCde">*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBufferBucket">ConcatBufferBucket</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">count</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">size</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">countBefore</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ConcatBufferSeek"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">ConcatBufferSeek</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\concatbuffer.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">bucket</span></td>
<td class="code-type"><span class="SCde">*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBufferBucket">ConcatBufferBucket</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">sp</span></td>
<td class="code-type"><span class="SCde">^<span class="STpe">u8</span></span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Console_Color"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Console.</span><span class="api-item-title-strong">Color</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Black</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">White</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Gray</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Red</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Blue</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Green</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Cyan</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Yellow</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Magenta</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">DarkRed</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">DarkBlue</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">DarkGreen</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">DarkCyan</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">DarkYellow</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">DarkMagenta</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Console_fatal"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Console.</span><span class="api-item-title-strong">fatal</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\error.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Fatal error  Exit the process with code -1. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">fatal</span>(msg: <span class="STpe">string</span>, args: ...)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Console_lock"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Console.</span><span class="api-item-title-strong">lock</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Use to access console with multiple threads. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">lock</span>()</span></code>
</div>
<p> No console function is thread safe, so it is the user responsability  to lock the console when necessary </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Console_print"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Console.</span><span class="api-item-title-strong">print</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.swg#L44" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write a bunch of parameters to the console. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">print</span>(params: ...)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Console_printf"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Console.</span><span class="api-item-title-strong">printf</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.win32.swg#L77" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write a formatted message to the console. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">printf</span>(message: <span class="STpe">string</span>, params: ...)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Console_println"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Console.</span><span class="api-item-title-strong">println</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.swg#L53" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write a line to the console. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">println</span>(params: ...)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Console_prompt"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Console.</span><span class="api-item-title-strong">prompt</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.win32.swg#L102" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Wait for using input, and returns the corresponding string. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">prompt</span>()-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Console_resetColor"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Console.</span><span class="api-item-title-strong">resetColor</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.win32.swg#L71" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Restore the console colors to their default values. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">resetColor</span>()</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Console_setBackColor"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Console.</span><span class="api-item-title-strong">setBackColor</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.win32.swg#L62" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the console background color. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setBackColor</span>(color: <span class="SCst">Core</span>.<span class="SCst">Console</span>.<span class="SCst"><a href="#Core_Console_Color">Color</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Console_setTextColor"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Console.</span><span class="api-item-title-strong">setTextColor</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.win32.swg#L53" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the console foreground color. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setTextColor</span>(color: <span class="SCst">Core</span>.<span class="SCst">Console</span>.<span class="SCst"><a href="#Core_Console_Color">Color</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Console_silent"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Console.</span><span class="api-item-title-strong">silent</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Disable console output. This is a counter, so can be called  multiple times with the same <code class="inline-code">value</code>  Like any other console functions, this is not thread-safe  =&gt; call <code class="inline-code">lock</code> before if necessary, and <code class="inline-code">unlock</code> after. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">silent</span>(value: <span class="STpe">bool</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Console_unlock"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Console.</span><span class="api-item-title-strong">unlock</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\console.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">unlock</span>()</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Debug_assert"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Debug.</span><span class="api-item-title-strong">assert</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\assert.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">assert</span>(expr: <span class="STpe">bool</span>, message: <span class="STpe">string</span> = <span class="SKwd">null</span>, loc = <span class="SCmp">#callerlocation</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Debug_breakPanic"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Debug.</span><span class="api-item-title-strong">breakPanic</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\assert.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">breakPanic</span>(message: <span class="STpe">string</span>, loc = <span class="SCmp">#callerlocation</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Debug_safety"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Debug.</span><span class="api-item-title-strong">safety</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\assert.swg#L24" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(what: <span class="STpe">string</span>) <span class="SFct">safety</span>(expr: <span class="STpe">bool</span>, message: <span class="STpe">string</span> = <span class="SKwd">null</span>, loc = <span class="SCmp">#callerlocation</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Debug_safetyBoundCheck"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Debug.</span><span class="api-item-title-strong">safetyBoundCheck</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\assert.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">safetyBoundCheck</span>(expr: <span class="STpe">bool</span>, message: <span class="STpe">string</span> = <span class="SKwd">null</span>, loc = <span class="SCmp">#callerlocation</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Debugger_attach"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Debugger.</span><span class="api-item-title-strong">attach</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\debugger.win32.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Try to attach to a debugger by calling "vsjitdebugger.exe"  If it works, it will open a dialog box to pickup a visual studio instance. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">attach</span>() <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Debugger_debugBreak"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Debugger.</span><span class="api-item-title-strong">debugBreak</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\debugger.win32.swg#L10" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Trigger a breakpoint. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">debugBreak</span>()</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Debugger_isAttached"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Debugger.</span><span class="api-item-title-strong">isAttached</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\debugger.win32.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if a debugger is attached to the current process. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isAttached</span>()-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Debugger_log"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Debugger.</span><span class="api-item-title-strong">log</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\debugger.win32.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Debug log. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">log</span>(msg: <span class="STpe">string</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Directory_EnumerationOptions"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Directory.</span><span class="api-item-title-strong">EnumerationOptions</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">matchExtension</span></td>
<td class="code-type"><span class="STpe">string</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">skipAttributes</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_FileAttributes">FileAttributes</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">recurse</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">wantFiles</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">wantDirectories</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">wantSpecialDirectories</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">filterLambda</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_FileInfo">FileInfo</a></span>)-&gt;<span class="STpe">bool</span></span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Directory_create"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Directory.</span><span class="api-item-title-strong">create</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.win32.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">create</span>(dirname: <span class="STpe">string</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Directory_enumerate"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Directory.</span><span class="api-item-title-strong">enumerate</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.win32.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Enumerate a directory. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">enumerate</span>(dirName: <span class="STpe">string</span>, options: <span class="SCst">Core</span>.<span class="SCst">Directory</span>.<span class="SCst"><a href="#Core_Directory_EnumerationOptions">EnumerationOptions</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_FileInfo">FileInfo</a></span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Directory_enumerateDirectories"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Directory.</span><span class="api-item-title-strong">enumerateDirectories</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get all the directories in the given directory. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">enumerateDirectories</span>(dirName: <span class="STpe">string</span>, matchExtension: <span class="STpe">string</span> = <span class="SKwd">null</span>, recurse = <span class="SKwd">false</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_FileInfo">FileInfo</a></span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Directory_enumerateFiles"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Directory.</span><span class="api-item-title-strong">enumerateFiles</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get all the files of the given directory. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">enumerateFiles</span>(dirName: <span class="STpe">string</span>, matchExtension: <span class="STpe">string</span> = <span class="SKwd">null</span>, recurse = <span class="SKwd">false</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_FileInfo">FileInfo</a></span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Directory_exists"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Directory.</span><span class="api-item-title-strong">exists</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.win32.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given directory exists. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">exists</span>(dirName: <span class="STpe">string</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Directory_getCurrent"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Directory.</span><span class="api-item-title-strong">getCurrent</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.win32.swg#L116" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the current directory. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getCurrent</span>()-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Directory_getDrives"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Directory.</span><span class="api-item-title-strong">getDrives</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.win32.swg#L140" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the list of logical drives. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getDrives</span>()-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Directory_setCurrent"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Directory.</span><span class="api-item-title-strong">setCurrent</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\directory.win32.swg#L133" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the current directory. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setCurrent</span>(dirname: <span class="STpe">string</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Env_Monitor"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Env.</span><span class="api-item-title-strong">Monitor</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\environment.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">rect</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Rectangle">Rectangle</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">work</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Rectangle">Rectangle</a></span></span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Env_Process"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Env.</span><span class="api-item-title-strong">Process</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\process.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">handle</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> *<span class="STpe">void</span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Env_Process_waitForExit"><span class="SCde"><span class="SFct">waitForExit</span>()</spa</a></td>
<td>Wait for the process to be done. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Env_Process_waitForExit"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Process.</span><span class="api-item-title-strong">waitForExit</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\process.win32.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Wait for the process to be done. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">waitForExit</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Env_SpecialDirectory"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Env.</span><span class="api-item-title-strong">SpecialDirectory</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\environment.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Font</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">UserAppData</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">UserDocuments</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">CommonAppData</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Desktop</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">UserPictures</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">UserVideos</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">UserMusic</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">CommonPictures</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">CommonVideos</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">CommonMusic</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Env_StartInfo"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Env.</span><span class="api-item-title-strong">StartInfo</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\process.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">fileName</span></td>
<td class="code-type"><span class="STpe">string</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">arguments</span></td>
<td class="code-type"><span class="STpe">string</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Env_doSyncProcess"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Env.</span><span class="api-item-title-strong">doSyncProcess</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\process.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Starts a new process with arguments, and wait for it to be done. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">doSyncProcess</span>(fileName: <span class="STpe">string</span>, arguments: <span class="STpe">string</span> = <span class="SKwd">null</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Env_exit"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Env.</span><span class="api-item-title-strong">exit</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\process.win32.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Exit the current process. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">exit</span>(exitCode: <span class="STpe">u32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Env_getArg"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Env.</span><span class="api-item-title-strong">getArg</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\environment.swg#L8" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get a given argument, or null. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getArg</span>(idx: <span class="STpe">u32</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Env_getArgs"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Env.</span><span class="api-item-title-strong">getArgs</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\environment.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the program command line arguments as a [..] string. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getArgs</span>()-&gt;<span class="SKwd">const</span> [..] <span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Env_getMonitors"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Env.</span><span class="api-item-title-strong">getMonitors</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\environment.win32.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the list of all monitors. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getMonitors</span>()-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="SCst">Core</span>.<span class="SCst">Env</span>.<span class="SCst"><a href="#Core_Env_Monitor">Monitor</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Env_getSpecialDirectory"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Env.</span><span class="api-item-title-strong">getSpecialDirectory</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\environment.win32.swg#L8" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>The system font directory. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getSpecialDirectory</span>(what: <span class="SCst">Core</span>.<span class="SCst">Env</span>.<span class="SCst"><a href="#Core_Env_SpecialDirectory">SpecialDirectory</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Env_hasArg"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Env.</span><span class="api-item-title-strong">hasArg</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\environment.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get a given argument, or null. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">hasArg</span>(arg: <span class="STpe">string</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Env_startProcess"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Env.</span><span class="api-item-title-strong">startProcess</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\process.win32.swg#L10" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Starts a new process with arguments. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">startProcess</span>(info: <span class="SCst">Core</span>.<span class="SCst">Env</span>.<span class="SCst"><a href="#Core_Env_StartInfo">StartInfo</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Env</span>.<span class="SCst"><a href="#Core_Env_Process">Process</a></span> <span class="SKwd">throw</span></span></code>
</div>
<p>Starts a new process with arguments. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">startProcess</span>(fileName: <span class="STpe">string</span>, arguments: <span class="STpe">string</span> = <span class="SKwd">null</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Env</span>.<span class="SCst"><a href="#Core_Env_Process">Process</a></span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_FileAccess"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">FileAccess</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Read</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Write</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">ReadWrite</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_FileAttributes"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">FileAttributes</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\fileattributes.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Zero</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">ReadOnly</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Hidden</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">System</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Directory</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Archive</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Device</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Normal</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Temporary</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">SparseFile</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">ReparsePoint</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Compressed</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Offline</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">NotContentIndexed</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Encrypted</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_FileInfo"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">FileInfo</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\fileinfo.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">fullname</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">attributes</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_FileAttributes">FileAttributes</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">creationTime</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_DateTime">DateTime</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">lastAccessTime</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_DateTime">DateTime</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">lastWriteTime</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_DateTime">DateTime</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">size</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_File_FileInfo_isDirectory"><span class="SCde"><span class="SFct">isDirectory</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_FileInfo_isDirectory"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">FileInfo.</span><span class="api-item-title-strong">isDirectory</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\fileinfo.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isDirectory</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_FileMode"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">FileMode</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Append</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Create</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">CreateNew</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Open</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">OpenOrCreate</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Truncate</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_FileShare"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">FileShare</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Zero</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Delete</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Inheritable</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Read</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Write</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">ReadWrite</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_FileStream"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">FileStream</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">name</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">handle</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> *<span class="STpe">void</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">canRead</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">canSeek</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">canWrite</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_File_FileStream_close"><span class="SCde"><span class="SFct">close</span>()</spa</a></td>
<td>Close the given file stream. </td>
</tr>
<tr>
<td><a href="#Core_File_FileStream_getPosition"><span class="SCde"><span class="SFct">getPosition</span>()</spa</a></td>
<td>Returns the current seek position of the given file stream. </td>
</tr>
<tr>
<td><a href="#Core_File_FileStream_getSize"><span class="SCde"><span class="SFct">getSize</span>()</spa</a></td>
<td>Returns the given file stream length on disk. </td>
</tr>
<tr>
<td><a href="#Core_File_FileStream_isOpen"><span class="SCde"><span class="SFct">isOpen</span>()</spa</a></td>
<td>Returns true if the stream is valid. </td>
</tr>
<tr>
<td><a href="#Core_File_FileStream_read"><span class="SCde"><span class="SFct">read</span>()</spa</a></td>
<td>Read from the given file stream, and returns the number of bytes. </td>
</tr>
<tr>
<td><a href="#Core_File_FileStream_readValue"><span class="SCde"><span class="SFct">readValue</span>()</spa</a></td>
<td>Read from the given file stream, and returns <code class="inline-code">true</code> if all bytes have been read. </td>
</tr>
<tr>
<td><a href="#Core_File_FileStream_setPosition"><span class="SCde"><span class="SFct">setPosition</span>()</spa</a></td>
<td>Set the current seek position of the given file stream. </td>
</tr>
<tr>
<td><a href="#Core_File_FileStream_skipPosition"><span class="SCde"><span class="SFct">skipPosition</span>()</spa</a></td>
<td>Skip <code class="inline-code">bytes</code> from current position. </td>
</tr>
<tr>
<td><a href="#Core_File_FileStream_write"><span class="SCde"><span class="SFct">write</span>()</spa</a></td>
<td>Write to the given file stream, and returns the number of written bytes. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_FileStream_close"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">FileStream.</span><span class="api-item-title-strong">close</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.win32.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Close the given file stream. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">close</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_FileStream_getPosition"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">FileStream.</span><span class="api-item-title-strong">getPosition</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.win32.swg#L59" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the current seek position of the given file stream. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getPosition</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_FileStream_getSize"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">FileStream.</span><span class="api-item-title-strong">getSize</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.win32.swg#L47" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the given file stream length on disk. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getSize</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_FileStream_isOpen"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">FileStream.</span><span class="api-item-title-strong">isOpen</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the stream is valid. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isOpen</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_FileStream_read"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">FileStream.</span><span class="api-item-title-strong">read</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.win32.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read from the given file stream, and returns the number of bytes. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">read</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, buffer: *<span class="STpe">void</span>, length: <span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_FileStream_readValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">FileStream.</span><span class="api-item-title-strong">readValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read from the given file stream, and returns <code class="inline-code">true</code> if all bytes have been read. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">readValue</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, buffer: *<span class="SCst">T</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_FileStream_setPosition"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">FileStream.</span><span class="api-item-title-strong">setPosition</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.win32.swg#L71" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the current seek position of the given file stream. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setPosition</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, origin: <span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_SeekOrigin">SeekOrigin</a></span>, seek: <span class="STpe">u64</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_FileStream_skipPosition"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">FileStream.</span><span class="api-item-title-strong">skipPosition</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.win32.swg#L92" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Skip <code class="inline-code">bytes</code> from current position. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">skipPosition</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, bytes: <span class="STpe">u64</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_FileStream_write"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">FileStream.</span><span class="api-item-title-strong">write</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\filestream.win32.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write to the given file stream, and returns the number of written bytes. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">write</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, buffer: <span class="SKwd">const</span> *<span class="STpe">void</span>, length: <span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_Folder"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">Folder</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\tweakfile.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">type</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">data</span></td>
<td class="code-type"><span class="SCde">^<span class="STpe">void</span></span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_SeekOrigin"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">SeekOrigin</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Begin</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Current</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">End</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_TextEncoding"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">TextEncoding</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\textreader.swg#L3" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Ascii</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Utf8</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_TextReader"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">TextReader</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\textreader.swg#L9" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">stream</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_FileStream">FileStream</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">buffer</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">u8</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">encodingType</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_TextEncoding">TextEncoding</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">byteSeek</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">bufferSize</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">checkPreamble</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_File_TextReader_close"><span class="SCde"><span class="SFct">close</span>()</spa</a></td>
<td>Close the reader. </td>
</tr>
<tr>
<td><a href="#Core_File_TextReader_open"><span class="SCde"><span class="SFct">open</span>()</spa</a></td>
<td>Open the reader. </td>
</tr>
<tr>
<td><a href="#Core_File_TextReader_readLine"><span class="SCde"><span class="SFct">readLine</span>()</spa</a></td>
<td>Read one line of text. </td>
</tr>
<tr>
<td><a href="#Core_File_TextReader_readToEnd"><span class="SCde"><span class="SFct">readToEnd</span>()</spa</a></td>
<td>Read from the current position to the end, and returns the corresponding  utf8 string. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_TextReader_close"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TextReader.</span><span class="api-item-title-strong">close</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\textreader.swg#L67" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Close the reader. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">close</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_TextReader_open"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TextReader.</span><span class="api-item-title-strong">open</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\textreader.swg#L52" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Open the reader. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">open</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, fullname: <span class="STpe">string</span>, encoding = <span class="SCst"><a href="#Core_File_TextEncoding">TextEncoding</a></span>.<span class="SCst">Utf8</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_TextReader_readLine"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TextReader.</span><span class="api-item-title-strong">readLine</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\textreader.swg#L75" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read one line of text. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readLine</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, result: <span class="SKwd">ref</span> <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p> Returns false at the end </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_TextReader_readToEnd"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TextReader.</span><span class="api-item-title-strong">readToEnd</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\textreader.swg#L138" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read from the current position to the end, and returns the corresponding  utf8 string. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readToEnd</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_TweakFile"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">TweakFile</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\tweakfile.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">folders</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_Folder">Folder</a></span>)</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_File_TweakFile_parse"><span class="SCde"><span class="SFct">parse</span>(<span class="SKwd">self</span>, <span class="SKwd">const</span> <span class="SKwd">ref</span> <span class="SCst">Array</span>'(<span class="STpe">string</span>))</span></a></td>
<td>Parse a list of lines. </td>
</tr>
<tr>
<td><a href="#Core_File_TweakFile_parse"><span class="SCde"><span class="SFct">parse</span>(<span class="SKwd">self</span>, <span class="STpe">string</span>)</span></a></td>
<td>Parse a list of lines. </td>
</tr>
<tr>
<td><a href="#Core_File_TweakFile_parseFile"><span class="SCde"><span class="SFct">parseFile</span>()</spa</a></td>
<td>Read and parse a file. </td>
</tr>
<tr>
<td><a href="#Core_File_TweakFile_registerFolder"><span class="SCde"><span class="SFct">registerFolder</span>()</spa</a></td>
<td>Register a new structure to be parsed. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_TweakFile_parse"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TweakFile.</span><span class="api-item-title-strong">parse</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\tweakfile.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Parse a list of lines. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parse</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, lines: <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">string</span>)) <span class="SKwd">throw</span></span></code>
</div>
<p>Parse a list of lines. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parse</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, content: <span class="STpe">string</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_TweakFile_parseFile"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TweakFile.</span><span class="api-item-title-strong">parseFile</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\tweakfile.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read and parse a file. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parseFile</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, fileName: <span class="STpe">string</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_TweakFile_registerFolder"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TweakFile.</span><span class="api-item-title-strong">registerFolder</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\tweakfile.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Register a new structure to be parsed. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">registerFolder</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, folder: *<span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_delete"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">delete</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.win32.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Delete the specified file. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">delete</span>(fullname: <span class="STpe">string</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_duplicate"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">duplicate</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L129" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Duplicate a file. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">duplicate</span>(newName: <span class="STpe">string</span>, oldName: <span class="STpe">string</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_exists"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">exists</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.win32.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given file exists. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">exists</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_getAttributes"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">getAttributes</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\fileattributes.win32.swg#L48" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns attributes associated to the given filename. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getAttributes</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_FileAttributes">FileAttributes</a></span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_getFileInfo"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">getFileInfo</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L136" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get informations about a file. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getFileInfo</span>(fullName: <span class="STpe">string</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_FileInfo">FileInfo</a></span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_getInfo"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">getInfo</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\fileinfo.win32.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns various file informations. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getInfo</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_FileInfo">FileInfo</a></span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_locateInExplorer"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">locateInExplorer</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.win32.swg#L103" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Locate file in the file explorer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">locateInExplorer</span>(name: <span class="STpe">string</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_open"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">open</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.win32.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Open a new file stream. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">open</span>(fullname: <span class="STpe">string</span>, mode: <span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_FileMode">FileMode</a></span>, access: <span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_FileAccess">FileAccess</a></span>, share: <span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_FileShare">FileShare</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_FileStream">FileStream</a></span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_openRead"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">openRead</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.win32.swg#L91" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a new file stream for reading. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">openRead</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_FileStream">FileStream</a></span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_openWrite"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">openWrite</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.win32.swg#L97" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a new file stream for writing. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">openWrite</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">File</span>.<span class="SCst"><a href="#Core_File_FileStream">FileStream</a></span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_readAllBytes"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">readAllBytes</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L80" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read a file, and store the result in an array of bytes. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readAllBytes</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">u8</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_readAllLines"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">readAllLines</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L49" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read all the lines of a file. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readAllLines</span>(fullname: <span class="STpe">string</span>, encoding = <span class="SCst"><a href="#Core_File_TextEncoding">TextEncoding</a></span>.<span class="SCst">Utf8</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_readAllText"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">readAllText</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read a file, and store the result in an utf8 string. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readAllText</span>(fullname: <span class="STpe">string</span>, encoding = <span class="SCst"><a href="#Core_File_TextEncoding">TextEncoding</a></span>.<span class="SCst">Utf8</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_readEachLines"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">readEachLines</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L63" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Call user code for each line. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span> <span class="SFct">readEachLines</span>(fullname: <span class="STpe">string</span>, encoding = <span class="SCst"><a href="#Core_File_TextEncoding">TextEncoding</a></span>.<span class="SCst">Utf8</span>, stmt: <span class="STpe">code</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_touch"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">touch</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.win32.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Change the file write date/time. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">touch</span>(fullname: <span class="STpe">string</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_writeAllBytes"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">writeAllBytes</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L93" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write a file with the content of a slice of bytes. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeAllBytes</span>(fullname: <span class="STpe">string</span>, buffer: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;<span class="STpe">u64</span> <span class="SKwd">throw</span></span></code>
</div>
<p>Write a file with the content of a <code class="inline-code">ConcatBuffer</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeAllBytes</span>(fullname: <span class="STpe">string</span>, buffer: <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>)-&gt;<span class="STpe">u64</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_File_writeAllLines"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">File.</span><span class="api-item-title-strong">writeAllLines</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\file.swg#L114" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write a file with the content of an array of string, one per line. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeAllLines</span>(fullname: <span class="STpe">string</span>, lines: <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">string</span>))-&gt;<span class="STpe">u64</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Format_append"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Format.</span><span class="api-item-title-strong">append</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\format.swg#L80" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Format a string and put the result in a ConcatBuffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">append</span>(buf: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>, fmt: <span class="STpe">string</span>, values: ...)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Format_checkFormat"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Format.</span><span class="api-item-title-strong">checkFormat</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\format.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Check if this is a valid <code class="inline-code">fmt</code> <code class="inline-code">values</code> pair, coherent with <code class="inline-code">format</code> specification. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">checkFormat</span>(fct: <span class="STpe">string</span>, fmt: <span class="STpe">string</span>, values: ...)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Format_countPercent"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Format.</span><span class="api-item-title-strong">countPercent</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\format.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Count the number of valid <code class="inline-code">%</code> placeholders in the string format  Note that %% will not be counted, as this represents the <code class="inline-code">%</code> character. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">countPercent</span>(fmt: <span class="STpe">string</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Format_replaceString"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Format.</span><span class="api-item-title-strong">replaceString</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\format.swg#L39" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Format a string in <code class="inline-code">dest</code>  Can be lot faster than the convenient version which returns a string. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">replaceString</span>(dest: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span>, fmt: <span class="STpe">string</span>, values: ...)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Format_toInterp"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Format.</span><span class="api-item-title-strong">toInterp</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\format.swg#L152" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>String interolation  Format is "my {&lt;value to interpolate&gt;:format}. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span> <span class="SFct">toInterp</span>(buf: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>, exp: <span class="STpe">string</span>)</span></code>
</div>
<p>String interolation  Format is "my {&lt;value to interpolate&gt;:format}. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span> <span class="SFct">toInterp</span>(exp: <span class="STpe">string</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Format_toString"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Format.</span><span class="api-item-title-strong">toString</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\format.swg#L63" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Format a string and returns the result as a String. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toString</span>(fmt: <span class="STpe">string</span>, values: ...)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Globalization_CultureInfo"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Globalization.</span><span class="api-item-title-strong">CultureInfo</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\globalization\cultureinfo.swg#L3" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">numberFormat</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Globalization</span>.<span class="SCst"><a href="#Core_Globalization_NumberFormatInfo">NumberFormatInfo</a></span></span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Globalization_NumberFormatInfo"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Globalization.</span><span class="api-item-title-strong">NumberFormatInfo</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\globalization\numberformatinfo.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Provides culture-specific information for formatting and parsing numeric values. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">negativeSign</span></td>
<td class="code-type"><span class="STpe">u8</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">positiveSign</span></td>
<td class="code-type"><span class="STpe">u8</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">decimalSeparator</span></td>
<td class="code-type"><span class="STpe">u8</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Globalization_getCultureInfo"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Globalization.</span><span class="api-item-title-strong">getCultureInfo</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\globalization\cultureinfo.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the global culture info structure. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getCultureInfo</span>()-&gt;*<span class="SCst">Core</span>.<span class="SCst">Globalization</span>.<span class="SCst"><a href="#Core_Globalization_CultureInfo">CultureInfo</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hardware_getMacAddress"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Hardware.</span><span class="api-item-title-strong">getMacAddress</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\hardware.win32.swg#L9" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Max address. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getMacAddress</span>()-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hardware_getProcessorCount"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Hardware.</span><span class="api-item-title-strong">getProcessorCount</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\hardware.win32.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Number of processors. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getProcessorCount</span>()-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Adler32"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Hash.</span><span class="api-item-title-strong">Adler32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\adler32.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">adler</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Hash_Adler32_compute"><span class="SCde"><span class="SFct">compute</span>()</spa</a></td>
<td>Returns the adler32 hash value for the given buffer. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Adler32_init"><span class="SCde"><span class="SFct">init</span>()</spa</a></td>
<td>Initialize the hashing sequence. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Adler32_update"><span class="SCde"><span class="SFct">update</span>()</spa</a></td>
<td>Update the hash value with <code class="inline-code">buffer</code> content. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Adler32_compute"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Adler32.</span><span class="api-item-title-strong">compute</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\adler32.swg#L105" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the adler32 hash value for the given buffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">compute</span>(buffer: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Adler32_init"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Adler32.</span><span class="api-item-title-strong">init</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\adler32.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize the hashing sequence. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">init</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Adler32_update"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Adler32.</span><span class="api-item-title-strong">update</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\adler32.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Update the hash value with <code class="inline-code">buffer</code> content. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">update</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, buffer: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Crc32"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Hash.</span><span class="api-item-title-strong">Crc32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\crc32.swg#L3" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">crc</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Hash_Crc32_compute"><span class="SCde"><span class="SFct">compute</span>()</spa</a></td>
<td>Returns the crc32 hash value for the given buffer. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Crc32_init"><span class="SCde"><span class="SFct">init</span>()</spa</a></td>
<td>Initialize the hashing sequence. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Crc32_update"><span class="SCde"><span class="SFct">update</span>()</spa</a></td>
<td>Update the hash value with <code class="inline-code">buffer</code> content. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Crc32_compute"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Crc32.</span><span class="api-item-title-strong">compute</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\crc32.swg#L587" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the crc32 hash value for the given buffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">compute</span>(buffer: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Crc32_init"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Crc32.</span><span class="api-item-title-strong">init</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\crc32.swg#L513" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize the hashing sequence. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">init</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Crc32_update"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Crc32.</span><span class="api-item-title-strong">update</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\crc32.swg#L519" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Update the hash value with <code class="inline-code">buffer</code> content. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">update</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, data: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_IHash32"><span class="api-item-title-kind">interface</span> <span class="api-item-title-light">Hash.</span><span class="api-item-title-strong">IHash32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\hash32.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">compute</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(<span class="SKwd">const</span> *<span class="SCst">Core</span>.<span class="SCst">Hash</span>.<span class="SCst"><a href="#Core_Hash_IHash32">IHash32</a></span>)-&gt;<span class="STpe">u32</span></span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Md5"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Hash.</span><span class="api-item-title-strong">Md5</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\md5.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">padding</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">64</span>] <span class="STpe">u8</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">state</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">4</span>] <span class="STpe">u32</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">count</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">2</span>] <span class="STpe">u32</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">buffer</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">64</span>] <span class="STpe">u8</span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Hash_Md5_compute"><span class="SCde"><span class="SFct">compute</span>()</spa</a></td>
<td>Returns the md5 value for the given buffer. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Md5_final"><span class="SCde"><span class="SFct">final</span>()</spa</a></td>
<td>Finalize the computation. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Md5_init"><span class="SCde"><span class="SFct">init</span>()</spa</a></td>
<td>Initialize the hashing sequence. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Md5_update"><span class="SCde"><span class="SFct">update</span>()</spa</a></td>
<td>Update the hash value with <code class="inline-code">buffer</code> content. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Md5_compute"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Md5.</span><span class="api-item-title-strong">compute</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\md5.swg#L75" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the md5 value for the given buffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">compute</span>(buffer: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Hash</span>.<span class="SCst"><a href="#Core_Hash_Md5">Md5</a></span>.<span class="SCst">Digest</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Md5_final"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Md5.</span><span class="api-item-title-strong">final</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\md5.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Finalize the computation. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">final</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, digest: <span class="SCst">Core</span>.<span class="SCst">Hash</span>.<span class="SCst"><a href="#Core_Hash_Md5">Md5</a></span>.<span class="SCst">Digest</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Md5_init"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Md5.</span><span class="api-item-title-strong">init</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\md5.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize the hashing sequence. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">init</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Md5_update"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Md5.</span><span class="api-item-title-strong">update</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\md5.swg#L42" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Update the hash value with <code class="inline-code">buffer</code> content. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">update</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, data: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Sha256"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Hash.</span><span class="api-item-title-strong">Sha256</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\sha256.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">data</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">64</span>] <span class="STpe">u8</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">state</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">8</span>] <span class="STpe">u32</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">datalen</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">bitlen</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Hash_Sha256_compute"><span class="SCde"><span class="SFct">compute</span>()</spa</a></td>
<td>Returns the sha256 value for the given buffer. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Sha256_final"><span class="SCde"><span class="SFct">final</span>()</spa</a></td>
<td>Finalize the computation. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Sha256_init"><span class="SCde"><span class="SFct">init</span>()</spa</a></td>
<td>Initialize the hashing sequence. </td>
</tr>
<tr>
<td><a href="#Core_Hash_Sha256_update"><span class="SCde"><span class="SFct">update</span>()</spa</a></td>
<td>Update the hash value with <code class="inline-code">buffer</code> content. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Sha256_compute"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Sha256.</span><span class="api-item-title-strong">compute</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\sha256.swg#L171" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the sha256 value for the given buffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">compute</span>(buffer: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Hash</span>.<span class="SCst"><a href="#Core_Hash_Sha256">Sha256</a></span>.<span class="SCst">Digest</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Sha256_final"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Sha256.</span><span class="api-item-title-strong">final</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\sha256.swg#L96" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Finalize the computation. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">final</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, result: <span class="SCst">Core</span>.<span class="SCst">Hash</span>.<span class="SCst"><a href="#Core_Hash_Sha256">Sha256</a></span>.<span class="SCst">Digest</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Sha256_init"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Sha256.</span><span class="api-item-title-strong">init</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\sha256.swg#L137" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize the hashing sequence. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">init</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_Sha256_update"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Sha256.</span><span class="api-item-title-strong">update</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\sha256.swg#L151" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Update the hash value with <code class="inline-code">buffer</code> content. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">update</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, buffer: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Hash_hash32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Hash.</span><span class="api-item-title-strong">hash32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\crypto\hash32.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Hash the given value and returns the corresponding u32. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">hash32</span>(value: <span class="SCst">T</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashSet"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">HashSet</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L10" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_HashSet">HashSet</a></span>(<span class="SCst">K</span>)</span></code>
</div>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">HASH_FREE</span></td>
<td class="code-type"><span class="STpe">s32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">HASH_DELETED</span></td>
<td class="code-type"><span class="STpe">s32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">HASH_FIRST</span></td>
<td class="code-type"><span class="STpe">s32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">HASH_MASK</span></td>
<td class="code-type"><span class="STpe">s32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">allocator</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Swag</span>.<span class="SCst">IAllocator</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">table</span></td>
<td class="code-type"><span class="SCde">^<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_HashSetEntry">HashSetEntry</a></span>'(<span class="SCst">K</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">count</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td>Number of valid entries. </td>
</tr>
<tr>
<td class="code-type"><span class="SCde">capacity</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td>Number of total entries the table can hold. </td>
</tr>
<tr>
<td class="code-type"><span class="SCde">deleted</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td>Number of deleted entries. </td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_HashSet_add"><span class="SCde"><span class="SFct">add</span>(<span class="SKwd">self</span>, <span class="SCst">K</span>)</span></a></td>
<td>Add a new key. </td>
</tr>
<tr>
<td><a href="#Core_HashSet_add"><span class="SCde"><span class="SFct">add</span>(<span class="SKwd">self</span>, <span class="SKwd">moveref</span> <span class="SCst">K</span>)</span></a></td>
<td>Add a new key. </td>
</tr>
<tr>
<td><a href="#Core_HashSet_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Remove all elements. </td>
</tr>
<tr>
<td><a href="#Core_HashSet_contains"><span class="SCde"><span class="SFct">contains</span>()</spa</a></td>
<td>Returns true if the table contains the given key. </td>
</tr>
<tr>
<td><a href="#Core_HashSet_emplaceInternal"><span class="SCde"><span class="SFct">emplaceInternal</span>()</spa</a></td>
<td>Add a new key. </td>
</tr>
<tr>
<td><a href="#Core_HashSet_free"><span class="SCde"><span class="SFct">free</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashSet_grow"><span class="SCde"><span class="SFct">grow</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashSet_hashKey"><span class="SCde"><span class="SFct">hashKey</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashSet_remove"><span class="SCde"><span class="SFct">remove</span>()</spa</a></td>
<td>Remove the given key if it exists. </td>
</tr>
<tr>
<td><a href="#Core_HashSet_reserve"><span class="SCde"><span class="SFct">reserve</span>()</spa</a></td>
<td>Reserve <code class="inline-code">newCapacity</code> elements in the table. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_HashSet_opCount"><span class="SCde"><span class="SFct">opCount</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashSet_opDrop"><span class="SCde"><span class="SFct">opDrop</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashSet_opPostCopy"><span class="SCde"><span class="SFct">opPostCopy</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashSet_opVisit"><span class="SCde"><span class="SFct">opVisit</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashSet_add"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashSet.</span><span class="api-item-title-strong">add</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L171" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a new key. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">add</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, key: <span class="SCst">K</span>)-&gt;*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_HashSetEntry">HashSetEntry</a></span>'(<span class="SCst">K</span>)</span></code>
</div>
<p>Add a new key. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">add</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, key: <span class="SKwd">moveref</span> <span class="SCst">K</span>)-&gt;*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_HashSetEntry">HashSetEntry</a></span>'(<span class="SCst">K</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashSet_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashSet.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L309" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove all elements. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashSet_contains"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashSet.</span><span class="api-item-title-strong">contains</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L290" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the table contains the given key. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">contains</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, key: <span class="SCst">K</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashSet_emplaceInternal"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashSet.</span><span class="api-item-title-strong">emplaceInternal</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L236" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a new key. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">emplaceInternal</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, hashVal: <span class="STpe">u32</span>, key: <span class="SKwd">ref</span> <span class="SCst">K</span>)-&gt;*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_HashSetEntry">HashSetEntry</a></span>'(<span class="SCst">K</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashSet_free"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashSet.</span><span class="api-item-title-strong">free</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L103" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">free</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashSet_grow"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashSet.</span><span class="api-item-title-strong">grow</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L121" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">grow</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashSet_hashKey"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashSet.</span><span class="api-item-title-strong">hashKey</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L98" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">hashKey</span>(key: <span class="SCst">K</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashSet_opCount"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashSet.</span><span class="api-item-title-strong">opCount</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opCount</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashSet_opDrop"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashSet.</span><span class="api-item-title-strong">opDrop</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L32" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opDrop</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashSet_opPostCopy"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashSet.</span><span class="api-item-title-strong">opPostCopy</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opPostCopy</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashSet_opVisit"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashSet.</span><span class="api-item-title-strong">opVisit</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L60" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span>(ptr: <span class="STpe">bool</span>, back: <span class="STpe">bool</span>) <span class="SFct">opVisit</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, stmt: <span class="STpe">code</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashSet_remove"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashSet.</span><span class="api-item-title-strong">remove</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L267" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove the given key if it exists. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">remove</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, key: <span class="SCst">K</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashSet_reserve"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashSet.</span><span class="api-item-title-strong">reserve</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L132" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve <code class="inline-code">newCapacity</code> elements in the table. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">reserve</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, newCapacity: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashSetEntry"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">HashSetEntry</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashset.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_HashSetEntry">HashSetEntry</a></span>(<span class="SCst">K</span>)</span></code>
</div>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">hash</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">key</span></td>
<td class="code-type"><span class="SCst">K</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashTable"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">HashTable</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_HashTable">HashTable</a></span>(<span class="SCst">K</span>, <span class="SCst">V</span>)</span></code>
</div>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">HASH_FREE</span></td>
<td class="code-type"><span class="STpe">s32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">HASH_DELETED</span></td>
<td class="code-type"><span class="STpe">s32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">HASH_FIRST</span></td>
<td class="code-type"><span class="STpe">s32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">HASH_MASK</span></td>
<td class="code-type"><span class="STpe">s32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">allocator</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Swag</span>.<span class="SCst">IAllocator</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">table</span></td>
<td class="code-type"><span class="SCde">^<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_HashTableEntry">HashTableEntry</a></span>'(<span class="SCst">K</span>, <span class="SCst">V</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">count</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td>Number of valid entries. </td>
</tr>
<tr>
<td class="code-type"><span class="SCde">capacity</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td>Number of total entries the table can hold. </td>
</tr>
<tr>
<td class="code-type"><span class="SCde">deleted</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td>Number of deleted entries. </td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_HashTable_add"><span class="SCde"><span class="SFct">add</span>(<span class="SKwd">self</span>, <span class="SCst">K</span>, <span class="SCst">V</span>)</span></a></td>
<td>Add a new key value pair. If the key already exists, then the value will be replaced. </td>
</tr>
<tr>
<td><a href="#Core_HashTable_add"><span class="SCde"><span class="SFct">add</span>(<span class="SKwd">self</span>, <span class="SCst">K</span>, <span class="SKwd">moveref</span> <span class="SCst">V</span>)</span></a></td>
<td>Add a new key value pair. If the key already exists, then the value will be replaced. </td>
</tr>
<tr>
<td><a href="#Core_HashTable_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Remove all elements. </td>
</tr>
<tr>
<td><a href="#Core_HashTable_contains"><span class="SCde"><span class="SFct">contains</span>()</spa</a></td>
<td>Returns true if the table contains the given key. </td>
</tr>
<tr>
<td><a href="#Core_HashTable_emplaceInternal"><span class="SCde"><span class="SFct">emplaceInternal</span>()</spa</a></td>
<td>Use with care !. </td>
</tr>
<tr>
<td><a href="#Core_HashTable_find"><span class="SCde"><span class="SFct">find</span>()</spa</a></td>
<td>Find the given key, and returns the corresponding entry. </td>
</tr>
<tr>
<td><a href="#Core_HashTable_free"><span class="SCde"><span class="SFct">free</span>()</spa</a></td>
<td>Free the hashtable content. </td>
</tr>
<tr>
<td><a href="#Core_HashTable_grow"><span class="SCde"><span class="SFct">grow</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashTable_hashKey"><span class="SCde"><span class="SFct">hashKey</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashTable_remove"><span class="SCde"><span class="SFct">remove</span>()</spa</a></td>
<td>Remove the given key if it exists. </td>
</tr>
<tr>
<td><a href="#Core_HashTable_reserve"><span class="SCde"><span class="SFct">reserve</span>()</spa</a></td>
<td>Reserve <code class="inline-code">newCapacity</code> elements in the table. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_HashTable_opCount"><span class="SCde"><span class="SFct">opCount</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashTable_opDrop"><span class="SCde"><span class="SFct">opDrop</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashTable_opPostCopy"><span class="SCde"><span class="SFct">opPostCopy</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_HashTable_opVisit"><span class="SCde"><span class="SFct">opVisit</span>()</spa</a></td>
<td>alias0 is the key, and alias1 is the value. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashTable_add"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashTable.</span><span class="api-item-title-strong">add</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L184" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a new key value pair. If the key already exists, then the value will be replaced. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">add</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, key: <span class="SCst">K</span>, value: <span class="SCst">V</span>)-&gt;*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_HashTableEntry">HashTableEntry</a></span>'(<span class="SCst">K</span>, <span class="SCst">V</span>)</span></code>
</div>
<p>Add a new key value pair. If the key already exists, then the value will be replaced. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">add</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, key: <span class="SCst">K</span>, value: <span class="SKwd">moveref</span> <span class="SCst">V</span>)-&gt;*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_HashTableEntry">HashTableEntry</a></span>'(<span class="SCst">K</span>, <span class="SCst">V</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashTable_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashTable.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L361" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove all elements. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashTable_contains"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashTable.</span><span class="api-item-title-strong">contains</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L322" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the table contains the given key. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">contains</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, key: <span class="SCst">K</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashTable_emplaceInternal"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashTable.</span><span class="api-item-title-strong">emplaceInternal</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L262" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Use with care !. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">emplaceInternal</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, hashVal: <span class="STpe">u32</span>, key: <span class="SKwd">ref</span> <span class="SCst">K</span>, value: <span class="SKwd">ref</span> <span class="SCst">V</span>)-&gt;*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_HashTableEntry">HashTableEntry</a></span>'(<span class="SCst">K</span>, <span class="SCst">V</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashTable_find"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashTable.</span><span class="api-item-title-strong">find</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L342" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Find the given key, and returns the corresponding entry. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">find</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, key: <span class="SCst">K</span>)-&gt;*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_HashTableEntry">HashTableEntry</a></span>'(<span class="SCst">K</span>, <span class="SCst">V</span>)</span></code>
</div>
<p> Returns null if the key is not there. </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashTable_free"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashTable.</span><span class="api-item-title-strong">free</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L120" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Free the hashtable content. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">free</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashTable_grow"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashTable.</span><span class="api-item-title-strong">grow</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L109" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">grow</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashTable_hashKey"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashTable.</span><span class="api-item-title-strong">hashKey</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L104" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">hashKey</span>(key: <span class="SCst">K</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashTable_opCount"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashTable.</span><span class="api-item-title-strong">opCount</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opCount</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashTable_opDrop"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashTable.</span><span class="api-item-title-strong">opDrop</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L33" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opDrop</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashTable_opPostCopy"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashTable.</span><span class="api-item-title-strong">opPostCopy</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L38" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opPostCopy</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashTable_opVisit"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashTable.</span><span class="api-item-title-strong">opVisit</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L63" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>alias0 is the key, and alias1 is the value. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span>(ptr: <span class="STpe">bool</span>, back: <span class="STpe">bool</span>) <span class="SFct">opVisit</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, stmt: <span class="STpe">code</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashTable_remove"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashTable.</span><span class="api-item-title-strong">remove</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L299" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove the given key if it exists. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">remove</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, key: <span class="SCst">K</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashTable_reserve"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">HashTable.</span><span class="api-item-title-strong">reserve</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L144" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve <code class="inline-code">newCapacity</code> elements in the table. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">reserve</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, newCapacity: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_HashTableEntry"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">HashTableEntry</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\hashtable.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_HashTableEntry">HashTableEntry</a></span>(<span class="SCst">K</span>, <span class="SCst">V</span>)</span></code>
</div>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">hash</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">key</span></td>
<td class="code-type"><span class="SCst">K</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">value</span></td>
<td class="code-type"><span class="SCst">V</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ILogWriter"><span class="api-item-title-kind">interface</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">ILogWriter</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">print</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ILogWriter">ILogWriter</a></span>, <span class="STpe">string</span>)</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_GamePad"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Input.</span><span class="api-item-title-strong">GamePad</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Represents a gamepad. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">previousState</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_GamePadState">GamePadState</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">currentState</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_GamePadState">GamePadState</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">padIndex</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">connected</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Input_GamePad_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Reset the previous and current state. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_getPosition"><span class="SCde"><span class="SFct">getPosition</span>()</spa</a></td>
<td>Get the analog position of the given button. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_isButtonJustPressed"><span class="SCde"><span class="SFct">isButtonJustPressed</span>()</spa</a></td>
<td>Determines whether specified input device button has just been pressed. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_isButtonJustReleased"><span class="SCde"><span class="SFct">isButtonJustReleased</span>()</spa</a></td>
<td>Determines whether specified input device button has just been released. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_isButtonPressed"><span class="SCde"><span class="SFct">isButtonPressed</span>()</spa</a></td>
<td>Determines whether specified input device button is pressed. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_isButtonReleased"><span class="SCde"><span class="SFct">isButtonReleased</span>()</spa</a></td>
<td>Determines whether specified input device button is released (not pressed). </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_isConnected"><span class="SCde"><span class="SFct">isConnected</span>()</spa</a></td>
<td>Returns true if the corresponding <code class="inline-code">padIndex</code> is connected. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_setVibration"><span class="SCde"><span class="SFct">setVibration</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>, <span class="STpe">f32</span>)</span></a></td>
<td>Set the vibration motor speeds. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_setVibration"><span class="SCde"><span class="SFct">setVibration</span>(<span class="STpe">u32</span>, <span class="STpe">f32</span>, <span class="STpe">f32</span>)</span></a></td>
<td>Set the left and right vibration of the given <code class="inline-code">padIndex</code>. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePad_update"><span class="SCde"><span class="SFct">update</span>()</spa</a></td>
<td>Update the GamePad current state. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_GamePad_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">GamePad.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L43" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reset the previous and current state. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_GamePad_getPosition"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">GamePad.</span><span class="api-item-title-strong">getPosition</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L74" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the analog position of the given button. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getPosition</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, button: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_GamePadButton">GamePadButton</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_GamePad_isButtonJustPressed"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">GamePad.</span><span class="api-item-title-strong">isButtonJustPressed</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L56" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether specified input device button has just been pressed. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isButtonJustPressed</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, button: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_GamePadButton">GamePadButton</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_GamePad_isButtonJustReleased"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">GamePad.</span><span class="api-item-title-strong">isButtonJustReleased</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L68" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether specified input device button has just been released. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isButtonJustReleased</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, button: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_GamePadButton">GamePadButton</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_GamePad_isButtonPressed"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">GamePad.</span><span class="api-item-title-strong">isButtonPressed</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L50" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether specified input device button is pressed. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isButtonPressed</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, button: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_GamePadButton">GamePadButton</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_GamePad_isButtonReleased"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">GamePad.</span><span class="api-item-title-strong">isButtonReleased</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L62" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether specified input device button is released (not pressed). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isButtonReleased</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, button: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_GamePadButton">GamePadButton</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_GamePad_isConnected"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">GamePad.</span><span class="api-item-title-strong">isConnected</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.xinput.swg#L8" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the corresponding <code class="inline-code">padIndex</code> is connected. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isConnected</span>(padIndex: <span class="STpe">u32</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_GamePad_setVibration"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">GamePad.</span><span class="api-item-title-strong">setVibration</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L80" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the vibration motor speeds. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setVibration</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, left: <span class="STpe">f32</span>, right: <span class="STpe">f32</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>Set the left and right vibration of the given <code class="inline-code">padIndex</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setVibration</span>(padIndex: <span class="STpe">u32</span>, left: <span class="STpe">f32</span>, right: <span class="STpe">f32</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_GamePad_update"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">GamePad.</span><span class="api-item-title-strong">update</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Update the GamePad current state. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">update</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_GamePadButton"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Input.</span><span class="api-item-title-strong">GamePadButton</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepadbutton.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Enumerates gamepad buttons. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">A</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">B</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Back</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">BigButton</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">DPadDown</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">DPadLeft</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">DPadRight</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">DPadUp</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LeftShoulder</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LeftStick</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LeftThumbstickDown</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LeftThumbstickLeft</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LeftThumbstickRight</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LeftThumbstickUp</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LeftTrigger</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">RightShoulder</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">RightStick</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">RightThumbstickDown</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">RightThumbstickLeft</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">RightThumbstickRight</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">RightThumbstickUp</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">RightTrigger</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Start</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">X</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Y</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_GamePadError"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Input.</span><span class="api-item-title-strong">GamePadError</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepad.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">DeviceNotConnected</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_GamePadState"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Input.</span><span class="api-item-title-strong">GamePadState</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepadstate.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Represents specific information about the state of the controller,  including the current state of buttons and sticks. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">pressed</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">25</span>] <span class="STpe">bool</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">position</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">25</span>] <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Input_GamePadState_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Reset state to its default value. </td>
</tr>
<tr>
<td><a href="#Core_Input_GamePadState_update"><span class="SCde"><span class="SFct">update</span>()</spa</a></td>
<td>Compute the current state of the given pad index. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_GamePadState_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">GamePadState.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepadstate.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reset state to its default value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_GamePadState_update"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">GamePadState.</span><span class="api-item-title-strong">update</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\gamepadstate.xinput.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compute the current state of the given pad index. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">update</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, padIndex: <span class="STpe">u32</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Key"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Input.</span><span class="api-item-title-strong">Key</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\key.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Defines the keys on a keyboard. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">None</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">A</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Add</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Apps</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Attn</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">B</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Back</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">BrowserBack</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">BrowserFavorites</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">BrowserForward</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">BrowserHome</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">BrowserRefresh</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">BrowserSearch</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">BrowserStop</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">C</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Cancel</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Capital</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">CapsLock</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Clear</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Control</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Crsel</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">D</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">D0</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">D1</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">D2</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">D3</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">D4</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">D5</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">D6</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">D7</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">D8</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">D9</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Decimal</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Delete</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Divide</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Down</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">E</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">End</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Enter</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">EraseEof</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Escape</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Execute</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Exsel</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F1</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F10</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F11</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F12</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F13</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F14</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F15</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F16</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F17</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F18</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F19</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F2</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F20</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F21</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F22</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F23</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F24</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F3</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F4</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F5</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F6</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F7</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F8</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">F9</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">FinalMode</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">G</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">H</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">HanguelMode</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">HangulMode</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">HanjaMode</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Help</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Home</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">I</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">IMEAccept</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">IMEAceept</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">IMEConvert</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">IMEModeChange</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">IMENonConvert</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Insert</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">J</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">JunjaMode</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">K</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">KanaMode</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">KanjiMode</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">L</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LButton</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LControl</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LMenu</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LShift</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LWin</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LaunchApplication1</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LaunchApplication2</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LaunchMail</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Left</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LineFeed</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">M</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">MButton</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">MediaNextTrack</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">MediaPlayPause</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">MediaPreviousTrack</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">MediaStop</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">MenuCtrl</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Multiply</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">N</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Next</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">NoName</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">NumLock</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">NumPad0</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">NumPad1</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">NumPad2</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">NumPad3</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">NumPad4</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">NumPad5</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">NumPad6</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">NumPad7</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">NumPad8</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">NumPad9</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">O</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Oem1</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Oem102</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Oem2</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Oem3</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Oem4</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Oem5</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Oem6</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Oem7</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Oem8</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">OemBackslash</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">OemClear</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">OemCloseBrackets</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">OemComma</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">OemMinus</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">OemOpenBrackets</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">OemPeriod</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">OemPipe</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">OemPlus</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">OemQuestion</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">OemQuotes</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">OemSemicolon</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">OemTilde</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">P</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Pa1</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Packet</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">PageDown</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">PageUp</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Pause</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Play</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Print</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">PrintScreen</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Prior</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Process</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Q</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">R</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">RButton</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">RControl</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">RMenu</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">RShift</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">RWin</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Return</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Right</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">S</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Scroll</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Select</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">SelectMedia</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Separator</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Shift</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Sleep</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Space</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Subtract</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Tab</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">U</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Up</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">V</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">VolumeDown</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">VolumeMute</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">VolumeUp</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">W</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">X</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">XButton1</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">XButton2</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Y</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Z</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Zoom</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_KeyModifiers"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Input.</span><span class="api-item-title-strong">KeyModifiers</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\key.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Zero</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Shift</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Control</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Alt</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">CtrlShift</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Keyboard"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Input.</span><span class="api-item-title-strong">Keyboard</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Allows getting keystrokes from keyboard. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">previousState</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_KeyboardState">KeyboardState</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">currentState</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_KeyboardState">KeyboardState</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">pressedRepeat</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">188</span>] <span class="STpe">bool</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">pressedTime</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">188</span>] <span class="STpe">u32</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">pressedRepeatStartTimeMs</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">pressedRepeatTimeMs</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">canRepeat</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Input_Keyboard_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Reset the keyboard state. </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_getPressedModifiers"><span class="SCde"><span class="SFct">getPressedModifiers</span>()</spa</a></td>
<td>Returns the currently pressed key modifiers. </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_isKeyJustPressed"><span class="SCde"><span class="SFct">isKeyJustPressed</span>()</spa</a></td>
<td>Determines whether given key has just been pressed. </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_isKeyJustReleased"><span class="SCde"><span class="SFct">isKeyJustReleased</span>()</spa</a></td>
<td>Determines whether given key has just been released. </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_isKeyPressed"><span class="SCde"><span class="SFct">isKeyPressed</span>(<span class="SKwd">self</span>, <span class="SCst">Key</span>)</span></a></td>
<td>Determines whether given key is currently being pressed. </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_isKeyPressed"><span class="SCde"><span class="SFct">isKeyPressed</span>(<span class="SCst">Key</span>)</span></a></td>
<td>Returns true if the given key is pressed. </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_isKeyReleased"><span class="SCde"><span class="SFct">isKeyReleased</span>()</spa</a></td>
<td>Determines whether given key is currently being released. </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_keyToRune"><span class="SCde"><span class="SFct">keyToRune</span>()</spa</a></td>
<td>Try to transform the given key to the corresponding rune. </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_keyToVirtualKey"><span class="SCde"><span class="SFct">keyToVirtualKey</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_update"><span class="SCde"><span class="SFct">update</span>()</spa</a></td>
<td>Compute current state of the keyboard (all keys). </td>
</tr>
<tr>
<td><a href="#Core_Input_Keyboard_virtualKeyToKey"><span class="SCde"><span class="SFct">virtualKeyToKey</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Keyboard_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Keyboard.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.swg#L63" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reset the keyboard state. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Keyboard_getPressedModifiers"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Keyboard.</span><span class="api-item-title-strong">getPressedModifiers</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.swg#L96" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the currently pressed key modifiers. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getPressedModifiers</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_KeyModifiers">KeyModifiers</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Keyboard_isKeyJustPressed"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Keyboard.</span><span class="api-item-title-strong">isKeyJustPressed</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.swg#L78" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether given key has just been pressed. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isKeyJustPressed</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, key: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_Key">Key</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Keyboard_isKeyJustReleased"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Keyboard.</span><span class="api-item-title-strong">isKeyJustReleased</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.swg#L90" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether given key has just been released. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isKeyJustReleased</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, key: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_Key">Key</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Keyboard_isKeyPressed"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Keyboard.</span><span class="api-item-title-strong">isKeyPressed</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.swg#L72" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether given key is currently being pressed. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isKeyPressed</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, key: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_Key">Key</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>Returns true if the given key is pressed. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isKeyPressed</span>(key: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_Key">Key</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Keyboard_isKeyReleased"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Keyboard.</span><span class="api-item-title-strong">isKeyReleased</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.swg#L84" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether given key is currently being released. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isKeyReleased</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, key: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_Key">Key</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Keyboard_keyToRune"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Keyboard.</span><span class="api-item-title-strong">keyToRune</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.win32.swg#L234" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Try to transform the given key to the corresponding rune. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">keyToRune</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, key: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_Key">Key</a></span>)-&gt;<span class="STpe">rune</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Keyboard_keyToVirtualKey"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Keyboard.</span><span class="api-item-title-strong">keyToVirtualKey</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.win32.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">keyToVirtualKey</span>(key: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_Key">Key</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_VirtualKey">VirtualKey</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Keyboard_update"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Keyboard.</span><span class="api-item-title-strong">update</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compute current state of the keyboard (all keys). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">update</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Keyboard_virtualKeyToKey"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Keyboard.</span><span class="api-item-title-strong">virtualKeyToKey</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboard.win32.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">virtualKeyToKey</span>(vkey: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_VirtualKey">VirtualKey</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_Key">Key</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_KeyboardState"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Input.</span><span class="api-item-title-strong">KeyboardState</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboardstate.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Represents one keyboard state. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde"><span class="SKwd">using</span> native</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_KeyboardStateNative">KeyboardStateNative</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">pressed</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">188</span>] <span class="STpe">bool</span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Input_KeyboardState_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Reset keyboard state. </td>
</tr>
<tr>
<td><a href="#Core_Input_KeyboardState_update"><span class="SCde"><span class="SFct">update</span>()</spa</a></td>
<td>Compute current keyboard state. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_KeyboardState_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">KeyboardState.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboardstate.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reset keyboard state. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_KeyboardState_update"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">KeyboardState.</span><span class="api-item-title-strong">update</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboardstate.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compute current keyboard state. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">update</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_KeyboardStateNative"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Input.</span><span class="api-item-title-strong">KeyboardStateNative</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\keyboardstate.win32.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">nativeState</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">256</span>] <span class="SCst">Win32</span>.<span class="SCst">BYTE</span></span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Mouse"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Input.</span><span class="api-item-title-strong">Mouse</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Allows reading position and button click information from mouse. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">previousState</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_MouseState">MouseState</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">currentState</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_MouseState">MouseState</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">dblClk</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">5</span>] <span class="STpe">bool</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">dblClkTimeMs</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Input_Mouse_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Reset the mouse state to its default value. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_getMove"><span class="SCde"><span class="SFct">getMove</span>()</spa</a></td>
<td>Returns the move between the current position and the previous one. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_getPosition"><span class="SCde"><span class="SFct">getPosition</span>()</spa</a></td>
<td>Returns the mouse position. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_getPreviousPos"><span class="SCde"><span class="SFct">getPreviousPos</span>()</spa</a></td>
<td>Returns the previous mouse position, before the last update. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_isButtonDoubleClick"><span class="SCde"><span class="SFct">isButtonDoubleClick</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_isButtonJustPressed"><span class="SCde"><span class="SFct">isButtonJustPressed</span>()</spa</a></td>
<td>Determines whether the specified mouse button has just been pressed. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_isButtonJustReleased"><span class="SCde"><span class="SFct">isButtonJustReleased</span>()</spa</a></td>
<td>Determines whether the specified mouse button has just been released. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_isButtonPressed"><span class="SCde"><span class="SFct">isButtonPressed</span>(<span class="SKwd">self</span>, <span class="SCst">MouseButton</span>)</span></a></td>
<td>Determines whether the specified mouse button is pressed. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_isButtonPressed"><span class="SCde"><span class="SFct">isButtonPressed</span>(<span class="SCst">MouseButton</span>)</span></a></td>
<td>Determins if one given mouse button is pressed or not. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_isButtonReleased"><span class="SCde"><span class="SFct">isButtonReleased</span>()</spa</a></td>
<td>Determines whether the specified mouse button is released. </td>
</tr>
<tr>
<td><a href="#Core_Input_Mouse_update"><span class="SCde"><span class="SFct">update</span>()</spa</a></td>
<td>Compute the current state of the mouse. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Mouse_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Mouse.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L38" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reset the mouse state to its default value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Mouse_getMove"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Mouse.</span><span class="api-item-title-strong">getMove</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L102" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the move between the current position and the previous one. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getMove</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Mouse_getPosition"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Mouse.</span><span class="api-item-title-strong">getPosition</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L96" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the mouse position. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getPosition</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Mouse_getPreviousPos"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Mouse.</span><span class="api-item-title-strong">getPreviousPos</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L90" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the previous mouse position, before the last update. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getPreviousPos</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Mouse_isButtonDoubleClick"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Mouse.</span><span class="api-item-title-strong">isButtonDoubleClick</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L44" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isButtonDoubleClick</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, button: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_MouseButton">MouseButton</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Mouse_isButtonJustPressed"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Mouse.</span><span class="api-item-title-strong">isButtonJustPressed</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L72" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether the specified mouse button has just been pressed. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isButtonJustPressed</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, button: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_MouseButton">MouseButton</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Mouse_isButtonJustReleased"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Mouse.</span><span class="api-item-title-strong">isButtonJustReleased</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L84" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether the specified mouse button has just been released. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isButtonJustReleased</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, button: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_MouseButton">MouseButton</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Mouse_isButtonPressed"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Mouse.</span><span class="api-item-title-strong">isButtonPressed</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L66" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether the specified mouse button is pressed. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isButtonPressed</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, button: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_MouseButton">MouseButton</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>Determins if one given mouse button is pressed or not. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isButtonPressed</span>(button: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_MouseButton">MouseButton</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Mouse_isButtonReleased"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Mouse.</span><span class="api-item-title-strong">isButtonReleased</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L78" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines whether the specified mouse button is released. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isButtonReleased</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, button: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_MouseButton">MouseButton</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_Mouse_update"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Mouse.</span><span class="api-item-title-strong">update</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compute the current state of the mouse. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">update</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_MouseButton"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Input.</span><span class="api-item-title-strong">MouseButton</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mousebutton.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Left</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Middle</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Right</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">XButton1</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">XButton2</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_MouseState"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Input.</span><span class="api-item-title-strong">MouseState</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mousestate.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Represents one mouse state. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">pressed</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">5</span>] <span class="STpe">bool</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">pressedTime</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">5</span>] <span class="STpe">u32</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">pressedPos</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">5</span>] <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">position</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Input_MouseState_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Reset the state to its default value. </td>
</tr>
<tr>
<td><a href="#Core_Input_MouseState_update"><span class="SCde"><span class="SFct">update</span>()</spa</a></td>
<td>Compute the actual state of the mouse. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_MouseState_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">MouseState.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mousestate.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reset the state to its default value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_MouseState_update"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">MouseState.</span><span class="api-item-title-strong">update</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mousestate.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compute the actual state of the mouse. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">update</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_getKeyName"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Input.</span><span class="api-item-title-strong">getKeyName</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\key.swg#L211" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a "shortcut" display name. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getKeyName</span>(mdf: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_KeyModifiers">KeyModifiers</a></span>, key: <span class="SCst">Core</span>.<span class="SCst">Input</span>.<span class="SCst"><a href="#Core_Input_Key">Key</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_getMousePos"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Input.</span><span class="api-item-title-strong">getMousePos</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.win32.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the current mouse position. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getMousePos</span>()-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_setMousePos"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Input.</span><span class="api-item-title-strong">setMousePos</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.win32.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the current mouse position. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setMousePos</span>(x: <span class="STpe">s32</span>, y: <span class="STpe">s32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Input_showMouseCursor"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Input.</span><span class="api-item-title-strong">showMouseCursor</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\input\mouse.win32.swg#L21" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Shoud or hide the mouse cursor. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">showMouseCursor</span>(show: <span class="STpe">bool</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Jobs_ForJob"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Jobs.</span><span class="api-item-title-strong">ForJob</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde"><span class="SKwd">using</span> base</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Jobs</span>.<span class="SCst"><a href="#Core_Jobs_Job">Job</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">startIndex</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">endIndex</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">userData</span></td>
<td class="code-type"><span class="SCde">*<span class="STpe">void</span></span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Jobs_Job"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Jobs.</span><span class="api-item-title-strong">Job</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">lambda</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="STpe">void</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">data</span></td>
<td class="code-type"><span class="SCde">*<span class="STpe">void</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">state</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Jobs</span>.<span class="SCst"><a href="#Core_Jobs_JobState">JobState</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">pendingIndex</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Jobs_JobState"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Jobs.</span><span class="api-item-title-strong">JobState</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Zero</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">InPending</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Done</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Jobs_SliceJob"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Jobs.</span><span class="api-item-title-strong">SliceJob</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_Jobs_SliceJob">SliceJob</a></span>(<span class="SCst">T</span>)</span></code>
</div>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde"><span class="SKwd">using</span> base</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Jobs</span>.<span class="SCst"><a href="#Core_Jobs_Job">Job</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">buffer</span></td>
<td class="code-type"><span class="SCde">[..] <span class="SCst">T</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">offset</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">userData</span></td>
<td class="code-type"><span class="SCde">*<span class="STpe">void</span></span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Jobs_getNumWorkers"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Jobs.</span><span class="api-item-title-strong">getNumWorkers</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L125" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns number of threads in the job system. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getNumWorkers</span>()-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Jobs_isSynchrone"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Jobs.</span><span class="api-item-title-strong">isSynchrone</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L122" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true is the job system has been initialized. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isSynchrone</span>()-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Jobs_parallelFor"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Jobs.</span><span class="api-item-title-strong">parallelFor</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L278" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Do a for loop in parallel chunks  Exposed variables:  - @alias0: current loop index  - @alias1: userData as passed to the macro. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span> <span class="SFct">parallelFor</span>(count: <span class="STpe">u32</span>, userData: *<span class="STpe">void</span> = <span class="SKwd">null</span>, stmt: <span class="STpe">code</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Jobs_parallelVisit"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Jobs.</span><span class="api-item-title-strong">parallelVisit</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L206" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Operate on a range in parallel chunks  Exposed variables:  - buffer: address of the element of the range to process  - data:   userData as passed to the macro. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">parallelVisit</span>(range: [..] <span class="SCst">T</span>, offset: <span class="STpe">u32</span> = <span class="SNum">1</span>, userData: *<span class="STpe">void</span> = <span class="SKwd">null</span>, stmt: <span class="STpe">code</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Jobs_scheduleJob"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Jobs.</span><span class="api-item-title-strong">scheduleJob</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L148" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Schedule a job to execute. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">scheduleJob</span>(job: *<span class="SCst">Core</span>.<span class="SCst">Jobs</span>.<span class="SCst"><a href="#Core_Jobs_Job">Job</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Jobs_setNumWorkers"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Jobs.</span><span class="api-item-title-strong">setNumWorkers</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L128" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the number of worker threads. Must be done once. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setNumWorkers</span>(numWorkers: <span class="STpe">u32</span> = <span class="SNum">0</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Jobs_waitDone"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Jobs.</span><span class="api-item-title-strong">waitDone</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L160" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Wait for all registered jobs to be finished. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">waitDone</span>()</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Jobs_waitJob"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Jobs.</span><span class="api-item-title-strong">waitJob</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\job.swg#L167" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Wait for a given job to be finished. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">waitJob</span>(job: *<span class="SCst">Core</span>.<span class="SCst">Jobs</span>.<span class="SCst"><a href="#Core_Jobs_Job">Job</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_CharAttribute"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">CharAttribute</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1tables.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Zero</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Control</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Punctuation</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">BinDigit</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">HexDigit</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Digit</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Symbol</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Spacing</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Upper</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Lower</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Printable</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LowerUtf8</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">UpperUtf8</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Graphical</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Letter</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_compare"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">compare</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L62" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compare two utf8 strings, dealing only with latin1 table  Returns -1, 0 or 1. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">compare</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, dst: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, ignoreCase = <span class="SKwd">false</span>)-&gt;<span class="STpe">s32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_compareNatural"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">compareNatural</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L102" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compare two utf8 strings in a natural way, dealing only with latin1 table  Returns -1, 0 or 1. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">compareNatural</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, dst: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, ignoreCase = <span class="SKwd">false</span>)-&gt;<span class="STpe">s32</span></span></code>
</div>
<p> :LICENCE  This code is based on <code class="inline-code">natsort</code> by Martin Pool (https://github.com/sourcefrog/natsort)  The original code has been modified for Swag  See LICENCE.md for the corresponding licence. </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_isAscii"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">isAscii</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isAscii</span>(c: <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_isBinDigit"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">isBinDigit</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L10" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isBinDigit</span>(c: <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_isControl"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">isControl</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isControl</span>(c: <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_isDigit"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">isDigit</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L8" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isDigit</span>(c: <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_isHexDigit"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">isHexDigit</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isHexDigit</span>(c: <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_isLetter"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">isLetter</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isLetter</span>(c: <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_isLetterOrDigit"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">isLetterOrDigit</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isLetterOrDigit</span>(c: <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_isLower"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">isLower</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isLower</span>(c: <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_isNumber"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">isNumber</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L9" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isNumber</span>(c: <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_isPunctuation"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">isPunctuation</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isPunctuation</span>(c: <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_isSpace"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">isSpace</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isSpace</span>(c: <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_isSymbol"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">isSymbol</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isSymbol</span>(c: <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_isUpper"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">isUpper</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isUpper</span>(c: <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_makeLower"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">makeLower</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L51" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Make an utf8 buffer lower case, dealing only with latin1 table. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">makeLower</span>(buffer: [..] <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_makeUpper"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">makeUpper</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Make an utf8 buffer upper case, dealing only with latin1 table. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">makeUpper</span>(buffer: [..] <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_toLower"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">toLower</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toLower</span>(c: <span class="STpe">u8</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Latin1_toUpper"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Latin1.</span><span class="api-item-title-strong">toUpper</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\latin1.swg#L21" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toUpper</span>(c: <span class="STpe">u8</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_List"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">List</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_List">List</a></span>(<span class="SCst">T</span>)</span></code>
</div>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">head</span></td>
<td class="code-type"><span class="SCde">*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ListNode">ListNode</a></span>'(<span class="SCst">T</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">tail</span></td>
<td class="code-type"><span class="SCde">*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ListNode">ListNode</a></span>'(<span class="SCst">T</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">count</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_List_addBack"><span class="SCde"><span class="SFct">addBack</span>(<span class="SKwd">self</span>, <span class="SCst">T</span>)</span></a></td>
<td>Add a new element on front. </td>
</tr>
<tr>
<td><a href="#Core_List_addBack"><span class="SCde"><span class="SFct">addBack</span>(<span class="SKwd">self</span>, <span class="SKwd">moveref</span> <span class="SCst">T</span>)</span></a></td>
<td>Add a new element on front. </td>
</tr>
<tr>
<td><a href="#Core_List_addFront"><span class="SCde"><span class="SFct">addFront</span>(<span class="SKwd">self</span>, <span class="SCst">T</span>)</span></a></td>
<td>Add a new element on front. </td>
</tr>
<tr>
<td><a href="#Core_List_addFront"><span class="SCde"><span class="SFct">addFront</span>(<span class="SKwd">self</span>, <span class="SKwd">moveref</span> <span class="SCst">T</span>)</span></a></td>
<td>Add a new element on front. </td>
</tr>
<tr>
<td><a href="#Core_List_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Clear all elements. </td>
</tr>
<tr>
<td><a href="#Core_List_insertAfter"><span class="SCde"><span class="SFct">insertAfter</span>(<span class="SKwd">self</span>, *<span class="SCst">ListNode</span>'(<span class="SCst">T</span>), <span class="SCst">T</span>)</span></a></td>
<td>Insert a node before the reference. </td>
</tr>
<tr>
<td><a href="#Core_List_insertAfter"><span class="SCde"><span class="SFct">insertAfter</span>(<span class="SKwd">self</span>, *<span class="SCst">ListNode</span>'(<span class="SCst">T</span>), <span class="SKwd">moveref</span> <span class="SCst">T</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_List_insertBefore"><span class="SCde"><span class="SFct">insertBefore</span>(<span class="SKwd">self</span>, *<span class="SCst">ListNode</span>'(<span class="SCst">T</span>), <span class="SCst">T</span>)</span></a></td>
<td>Insert a node before the reference. </td>
</tr>
<tr>
<td><a href="#Core_List_insertBefore"><span class="SCde"><span class="SFct">insertBefore</span>(<span class="SKwd">self</span>, *<span class="SCst">ListNode</span>'(<span class="SCst">T</span>), <span class="SKwd">moveref</span> <span class="SCst">T</span>)</span></a></td>
<td></td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_List_opDrop"><span class="SCde"><span class="SFct">opDrop</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_List_opVisit"><span class="SCde"><span class="SFct">opVisit</span>()</spa</a></td>
<td>Visit every elements of the list. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_List_addBack"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">List.</span><span class="api-item-title-strong">addBack</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L121" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a new element on front. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">addBack</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SCst">T</span>)-&gt;*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ListNode">ListNode</a></span>'(<span class="SCst">T</span>)</span></code>
</div>
<p>Add a new element on front. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">addBack</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SKwd">moveref</span> <span class="SCst">T</span>)-&gt;*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ListNode">ListNode</a></span>'(<span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_List_addFront"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">List.</span><span class="api-item-title-strong">addFront</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L79" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a new element on front. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">addFront</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SCst">T</span>)-&gt;*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ListNode">ListNode</a></span>'(<span class="SCst">T</span>)</span></code>
</div>
<p>Add a new element on front. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">addFront</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SKwd">moveref</span> <span class="SCst">T</span>)-&gt;*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ListNode">ListNode</a></span>'(<span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_List_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">List.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L63" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Clear all elements. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_List_insertAfter"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">List.</span><span class="api-item-title-strong">insertAfter</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L202" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Insert a node before the reference. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">insertAfter</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, node: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ListNode">ListNode</a></span>'(<span class="SCst">T</span>), value: <span class="SCst">T</span>)-&gt;*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ListNode">ListNode</a></span>'(<span class="SCst">T</span>)</span></code>
</div>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">insertAfter</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, node: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ListNode">ListNode</a></span>'(<span class="SCst">T</span>), value: <span class="SKwd">moveref</span> <span class="SCst">T</span>)-&gt;*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ListNode">ListNode</a></span>'(<span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_List_insertBefore"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">List.</span><span class="api-item-title-strong">insertBefore</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L163" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Insert a node before the reference. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">insertBefore</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, node: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ListNode">ListNode</a></span>'(<span class="SCst">T</span>), value: <span class="SCst">T</span>)-&gt;*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ListNode">ListNode</a></span>'(<span class="SCst">T</span>)</span></code>
</div>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">insertBefore</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, node: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ListNode">ListNode</a></span>'(<span class="SCst">T</span>), value: <span class="SKwd">moveref</span> <span class="SCst">T</span>)-&gt;*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ListNode">ListNode</a></span>'(<span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_List_opDrop"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">List.</span><span class="api-item-title-strong">opDrop</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opDrop</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_List_opVisit"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">List.</span><span class="api-item-title-strong">opVisit</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Visit every elements of the list. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span>(ptr: <span class="STpe">bool</span>, back: <span class="STpe">bool</span>) <span class="SFct">opVisit</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, stmt: <span class="STpe">code</span>)</span></code>
</div>
<ul>
<li><code class="inline-code">@alias0</code> is the value</li>
<li><code class="inline-code">@alias1</code> is the node</li>
<li><code class="inline-code">@alias2</code> is the index</li>
</ul>
<p> Visiting by pointer and in reverse order is supported </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_ListNode"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">ListNode</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\list.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_ListNode">ListNode</a></span>(<span class="SCst">T</span>)</span></code>
</div>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">prev</span></td>
<td class="code-type"><span class="SCde">*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ListNode">ListNode</a></span>'(<span class="SCst">T</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">next</span></td>
<td class="code-type"><span class="SCde">*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ListNode">ListNode</a></span>'(<span class="SCst">T</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">value</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Log"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">Log</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L24" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">lock</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Sync</span>.<span class="SCst"><a href="#Core_Sync_Mutex">Mutex</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">buf</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">StrConv</span>.<span class="SCst"><a href="#Core_StrConv_StringBuilder">StringBuilder</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">dt</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_DateTime">DateTime</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">writers</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ILogWriter">ILogWriter</a></span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">prefix</span></td>
<td class="code-type"><span class="STpe">string</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">flags</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_LogFlags">LogFlags</a></span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Log_addWriter"><span class="SCde"><span class="SFct">addWriter</span>()</spa</a></td>
<td>Register a new writer interface. </td>
</tr>
<tr>
<td><a href="#Core_Log_clearWriters"><span class="SCde"><span class="SFct">clearWriters</span>()</spa</a></td>
<td>Remove all writers. </td>
</tr>
<tr>
<td><a href="#Core_Log_create"><span class="SCde"><span class="SFct">create</span>()</spa</a></td>
<td>Create a new log. </td>
</tr>
<tr>
<td><a href="#Core_Log_getFlags"><span class="SCde"><span class="SFct">getFlags</span>()</spa</a></td>
<td>Get the logger prefix. </td>
</tr>
<tr>
<td><a href="#Core_Log_getPrefix"><span class="SCde"><span class="SFct">getPrefix</span>()</spa</a></td>
<td>Get the logger prefix. </td>
</tr>
<tr>
<td><a href="#Core_Log_print"><span class="SCde"><span class="SFct">print</span>()</spa</a></td>
<td>Main print function. </td>
</tr>
<tr>
<td><a href="#Core_Log_setFlags"><span class="SCde"><span class="SFct">setFlags</span>()</spa</a></td>
<td>Set the logger flags. </td>
</tr>
<tr>
<td><a href="#Core_Log_setPrefix"><span class="SCde"><span class="SFct">setPrefix</span>()</spa</a></td>
<td>Set the logger prefix. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Log_addWriter"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Log.</span><span class="api-item-title-strong">addWriter</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L112" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Register a new writer interface. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">addWriter</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, writer: <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ILogWriter">ILogWriter</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Log_clearWriters"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Log.</span><span class="api-item-title-strong">clearWriters</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L119" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove all writers. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clearWriters</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Log_create"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Log.</span><span class="api-item-title-strong">create</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L77" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Create a new log. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">create</span>()-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Log">Log</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Log_getFlags"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Log.</span><span class="api-item-title-strong">getFlags</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L105" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the logger prefix. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getFlags</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_LogFlags">LogFlags</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Log_getPrefix"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Log.</span><span class="api-item-title-strong">getPrefix</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L91" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the logger prefix. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getPrefix</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Log_print"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Log.</span><span class="api-item-title-strong">print</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L126" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Main print function. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">print</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, text: <span class="STpe">string</span>, loc = <span class="SCmp">#callerlocation</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Log_setFlags"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Log.</span><span class="api-item-title-strong">setFlags</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L98" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the logger flags. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setFlags</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, flags: <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_LogFlags">LogFlags</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Log_setPrefix"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Log.</span><span class="api-item-title-strong">setPrefix</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L84" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the logger prefix. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setPrefix</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, prefix: <span class="STpe">string</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_LogFlags"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">LogFlags</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\diagnostics\log.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Zero</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Prefix</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Date</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Time</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">ShortFileName</span></td>
<td>Exclusive with LongFileName. </td>
</tr>
<tr>
<td class="code-type"><span class="SCst">LongFileName</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Line</span></td>
<td>Exclusive with FullLoc. </td>
</tr>
<tr>
<td class="code-type"><span class="SCst">FullLoc</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Default</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Angle"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">Angle</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\angle.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">rad</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Angle_toDegrees"><span class="SCde"><span class="SFct">toDegrees</span>()</spa</a></td>
<td></td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Angle_opAffect"><span class="SCde"><span class="SFct">opAffect</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Angle_opAffectSuffix"><span class="SCde"><span class="SFct">opAffectSuffix</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Angle_opAffect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Angle.</span><span class="api-item-title-strong">opAffect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\angle.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opAffect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, valueRad: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Angle_opAffectSuffix"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Angle.</span><span class="api-item-title-strong">opAffectSuffix</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\angle.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(suffix: <span class="STpe">string</span>) <span class="SFct">opAffectSuffix</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Angle_toDegrees"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Angle.</span><span class="api-item-title-strong">toDegrees</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\angle.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toDegrees</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Const"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">Const</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_Math_Const">Const</a></span>(<span class="SCst">T</span>)</span></code>
</div>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Pi</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">E</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">TwoPi</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">PiBy2</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">PiBy3</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">PiBy4</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">PiBy6</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">PiBy8</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">ThreePiBy4</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">OneByPi</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">TwoByPi</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Sqrt2</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">OneBySqrt2</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Ln2</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Ln10</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Log2E</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Log10E</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Epsilon</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Int128"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">Int128</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer64.swg#L32" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">lo</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">hi</span></td>
<td class="code-type"><span class="STpe">s64</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Int128_mul"><span class="SCde"><span class="SFct">mul</span>()</spa</a></td>
<td></td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Int128_opCast"><span class="SCde"><span class="SFct">opCast</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Int128_opCmp"><span class="SCde"><span class="SFct">opCmp</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Int128_opEquals"><span class="SCde"><span class="SFct">opEquals</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Int128_mul"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Int128.</span><span class="api-item-title-strong">mul</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer64.swg#L65" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">mul</span>(x: <span class="STpe">s64</span>, y: <span class="STpe">s64</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Int128">Int128</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Int128_opCast"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Int128.</span><span class="api-item-title-strong">opCast</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer64.swg#L51" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opCast</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Int128_opCmp"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Int128.</span><span class="api-item-title-strong">opCmp</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer64.swg#L45" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opCmp</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Int128">Int128</a></span>)-&gt;<span class="STpe">s32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Int128_opEquals"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Int128.</span><span class="api-item-title-strong">opEquals</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer64.swg#L40" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opEquals</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Int128">Int128</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Matrix3x3"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">Matrix3x3</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\Matrix3x3.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">m</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">3</span>,<span class="SNum">3</span>] <span class="STpe">f32</span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Matrix3x3_setIdentity"><span class="SCde"><span class="SFct">setIdentity</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Matrix3x3_setIdentity"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Matrix3x3.</span><span class="api-item-title-strong">setIdentity</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\Matrix3x3.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setIdentity</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Matrix4x4"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">Matrix4x4</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\matrix4x4.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">m</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">4</span>,<span class="SNum">4</span>] <span class="STpe">f32</span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Matrix4x4_setIdentity"><span class="SCde"><span class="SFct">setIdentity</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Matrix4x4_setIdentity"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Matrix4x4.</span><span class="api-item-title-strong">setIdentity</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\matrix4x4.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setIdentity</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_NumericArray"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">NumericArray</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_Math_NumericArray">NumericArray</a></span>(<span class="SCst">T</span>, <span class="SCst">N</span>: <span class="STpe">u32</span>)</span></code>
</div>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">buf</span></td>
<td class="code-type"><span class="SCde">[?] <span class="SCst">T</span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_NumericArray_from"><span class="SCde"><span class="SFct">from</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_mulAdd"><span class="SCde"><span class="SFct">mulAdd</span>(<span class="SKwd">self</span>, <span class="SCst">NumericArray</span>'(<span class="SCst">T</span>, <span class="SCst">N</span>), <span class="SCst">NumericArray</span>'(<span class="SCst">T</span>, <span class="SCst">N</span>))</span></a></td>
<td>Multiply & Add. </td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_mulAdd"><span class="SCde"><span class="SFct">mulAdd</span>(<span class="SKwd">self</span>, <span class="SCst">T</span>, <span class="SCst">T</span>)</span></a></td>
<td>Multiply & add. </td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_set"><span class="SCde"><span class="SFct">set</span>()</spa</a></td>
<td>Set all values. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_NumericArray_opAffect"><span class="SCde"><span class="SFct">opAffect</span>(<span class="SKwd">self</span>, <span class="SCst">T</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_opAffect"><span class="SCde"><span class="SFct">opAffect</span>(<span class="SKwd">self</span>, <span class="SKwd">const</span> [..] <span class="SCst">T</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_opAssign"><span class="SCde"><span class="SFct">opAssign</span>(<span class="SKwd">self</span>, <span class="SCst">NumericArray</span>'(<span class="SCst">T</span>, <span class="SCst">N</span>))</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_opAssign"><span class="SCde"><span class="SFct">opAssign</span>(<span class="SKwd">self</span>, <span class="SCst">T</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_opBinary"><span class="SCde"><span class="SFct">opBinary</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_opEquals"><span class="SCde"><span class="SFct">opEquals</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_NumericArray_opIndex"><span class="SCde"><span class="SFct">opIndex</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_NumericArray_from"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">NumericArray.</span><span class="api-item-title-strong">from</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L98" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">from</span>(values: <span class="SCst">T</span>...)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_NumericArray">NumericArray</a></span>'(<span class="SCst">T</span>, <span class="SCst">N</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_NumericArray_mulAdd"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">NumericArray.</span><span class="api-item-title-strong">mulAdd</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L126" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Multiply & Add. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">mulAdd</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value1: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_NumericArray">NumericArray</a></span>'(<span class="SCst">T</span>, <span class="SCst">N</span>), value2: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_NumericArray">NumericArray</a></span>'(<span class="SCst">T</span>, <span class="SCst">N</span>))</span></code>
</div>
<p>Multiply & add. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">mulAdd</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value1: <span class="SCst">T</span>, value2: <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_NumericArray_opAffect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">NumericArray.</span><span class="api-item-title-strong">opAffect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L83" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opAffect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, what: <span class="SCst">T</span>)
<span class="SKwd">func</span> <span class="SFct">opAffect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, what: <span class="SKwd">const</span> [..] <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_NumericArray_opAssign"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">NumericArray.</span><span class="api-item-title-strong">opAssign</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L65" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opAssign</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_NumericArray">NumericArray</a></span>'(<span class="SCst">T</span>, <span class="SCst">N</span>))
<span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opAssign</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_NumericArray_opBinary"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">NumericArray.</span><span class="api-item-title-strong">opBinary</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opBinary</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_NumericArray">NumericArray</a></span>'(<span class="SCst">T</span>, <span class="SCst">N</span>))-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_NumericArray">NumericArray</a></span>'(<span class="SCst">T</span>, <span class="SCst">N</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_NumericArray_opEquals"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">NumericArray.</span><span class="api-item-title-strong">opEquals</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opEquals</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_NumericArray">NumericArray</a></span>'(<span class="SCst">T</span>, <span class="SCst">N</span>))-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_NumericArray_opIndex"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">NumericArray.</span><span class="api-item-title-strong">opIndex</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opIndex</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, idx: <span class="STpe">u64</span>)-&gt;<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_NumericArray_set"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">NumericArray.</span><span class="api-item-title-strong">set</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\numericarray.swg#L109" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set all values. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">set</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, values: <span class="SCst">T</span>...)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Point"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">Point</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>A simple Point with 2 coordinates X and Y. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">x</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">y</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Point_ceil"><span class="SCde"><span class="SFct">ceil</span>()</spa</a></td>
<td>Perform a Math.ceil operation on all the coordinates. </td>
</tr>
<tr>
<td><a href="#Core_Math_Point_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Set Point to (0, 0). </td>
</tr>
<tr>
<td><a href="#Core_Math_Point_isEqualEpsilon"><span class="SCde"><span class="SFct">isEqualEpsilon</span>()</spa</a></td>
<td>Check if two points are equal with an epsilon. </td>
</tr>
<tr>
<td><a href="#Core_Math_Point_isZero"><span class="SCde"><span class="SFct">isZero</span>()</spa</a></td>
<td>Returns <code class="inline-code">true</code> if the Point is null. </td>
</tr>
<tr>
<td><a href="#Core_Math_Point_isZeroEpsilon"><span class="SCde"><span class="SFct">isZeroEpsilon</span>()</spa</a></td>
<td>Check for zero with an epsilon. </td>
</tr>
<tr>
<td><a href="#Core_Math_Point_offset"><span class="SCde"><span class="SFct">offset</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>)</span></a></td>
<td>Offset this Point by a given value. </td>
</tr>
<tr>
<td><a href="#Core_Math_Point_offset"><span class="SCde"><span class="SFct">offset</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>, <span class="STpe">f32</span>)</span></a></td>
<td>Offset this Point by a given value. </td>
</tr>
<tr>
<td><a href="#Core_Math_Point_round"><span class="SCde"><span class="SFct">round</span>()</spa</a></td>
<td>Perform a Math.round operation on all the coordinates. </td>
</tr>
<tr>
<td><a href="#Core_Math_Point_trunc"><span class="SCde"><span class="SFct">trunc</span>()</spa</a></td>
<td>Perform a Math.trunc operation on all the coordinates. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Point_opAffect"><span class="SCde"><span class="SFct">opAffect</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Point_opAssign"><span class="SCde"><span class="SFct">opAssign</span>(<span class="SKwd">self</span>, <span class="SKwd">const</span> <span class="SKwd">ref</span> <span class="SCst">Point</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Point_opAssign"><span class="SCde"><span class="SFct">opAssign</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Point_opBinary"><span class="SCde"><span class="SFct">opBinary</span>(<span class="SKwd">self</span>, <span class="SKwd">const</span> <span class="SKwd">ref</span> <span class="SCst">Point</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Point_opBinary"><span class="SCde"><span class="SFct">opBinary</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Point_opEquals"><span class="SCde"><span class="SFct">opEquals</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Point_opUnary"><span class="SCde"><span class="SFct">opUnary</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Point_ceil"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Point.</span><span class="api-item-title-strong">ceil</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L133" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Perform a Math.ceil operation on all the coordinates. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">ceil</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Point_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Point.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L82" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set Point to (0, 0). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Point_isEqualEpsilon"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Point.</span><span class="api-item-title-strong">isEqualEpsilon</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L100" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Check if two points are equal with an epsilon. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isEqualEpsilon</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span>, eps = <span class="SCst"><a href="#Core_Math_ConstF32">ConstF32</a></span>.<span class="SCst">Epsilon</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Point_isZero"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Point.</span><span class="api-item-title-strong">isZero</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L88" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns <code class="inline-code">true</code> if the Point is null. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isZero</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Point_isZeroEpsilon"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Point.</span><span class="api-item-title-strong">isZeroEpsilon</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L94" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Check for zero with an epsilon. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isZeroEpsilon</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, eps = <span class="SCst"><a href="#Core_Math_ConstF32">ConstF32</a></span>.<span class="SCst">Epsilon</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Point_offset"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Point.</span><span class="api-item-title-strong">offset</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L106" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Offset this Point by a given value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">offset</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>Offset this Point by a given value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">offset</span>(<span class="SKwd">self</span>, x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Point_opAffect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Point.</span><span class="api-item-title-strong">opAffect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opAffect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Point_opAssign"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Point.</span><span class="api-item-title-strong">opAssign</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opAssign</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span>)
<span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opAssign</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Point_opBinary"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Point.</span><span class="api-item-title-strong">opBinary</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L48" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opBinary</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span>
<span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opBinary</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Point_opEquals"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Point.</span><span class="api-item-title-strong">opEquals</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opEquals</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Point_opUnary"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Point.</span><span class="api-item-title-strong">opUnary</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L66" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opUnary</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Point_round"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Point.</span><span class="api-item-title-strong">round</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L119" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Perform a Math.round operation on all the coordinates. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">round</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Point_trunc"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Point.</span><span class="api-item-title-strong">trunc</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\point.swg#L126" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Perform a Math.trunc operation on all the coordinates. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">trunc</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">Rectangle</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>A simple rectangle with 4 coordinates. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">x</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td>Left position. </td>
</tr>
<tr>
<td class="code-type"><span class="SCde">y</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td>Top position. </td>
</tr>
<tr>
<td class="code-type"><span class="SCde">width</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td>Rectangle width. </td>
</tr>
<tr>
<td class="code-type"><span class="SCde">height</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td>Rectangle height. </td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Rectangle_applyPadding"><span class="SCde"><span class="SFct">applyPadding</span>()</spa</a></td>
<td>Add a padding (offset to each side). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_bottom"><span class="SCde"><span class="SFct">bottom</span>()</spa</a></td>
<td>Bottom coordinate (y + height). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_ceil"><span class="SCde"><span class="SFct">ceil</span>()</spa</a></td>
<td>Perform a Math.ceil operation on all the coordinates. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_center"><span class="SCde"><span class="SFct">center</span>()</spa</a></td>
<td>Central point. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Set rectangle to (0, 0, 0, 0). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_constrainIn"><span class="SCde"><span class="SFct">constrainIn</span>()</spa</a></td>
<td>Constrain the rectangle to be inside another one, without changing its size  (so the other rectangle must be bigger). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_contains"><span class="SCde"><span class="SFct">contains</span>(<span class="SKwd">self</span>, <span class="SKwd">const</span> <span class="SKwd">ref</span> <span class="SCst">Point</span>)</span></a></td>
<td>Determines if the specfied point is contained within the rectangular region. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_contains"><span class="SCde"><span class="SFct">contains</span>(<span class="SKwd">self</span>, <span class="SKwd">const</span> <span class="SKwd">ref</span> <span class="SCst">Rectangle</span>)</span></a></td>
<td>Determines if the specfied rectangle is contained within the rectangular region. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_contains"><span class="SCde"><span class="SFct">contains</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>, <span class="STpe">f32</span>)</span></a></td>
<td>Determines if the specfied point is contained within the rectangular region. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_getUnion"><span class="SCde"><span class="SFct">getUnion</span>()</spa</a></td>
<td>Creates a rectangle that represents the union between <code class="inline-code">a</code> and <code class="inline-code">b</code>. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_horzCenter"><span class="SCde"><span class="SFct">horzCenter</span>()</spa</a></td>
<td>Horizontal center coordinate (x + width / 2). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_inflate"><span class="SCde"><span class="SFct">inflate</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>)</span></a></td>
<td>Inflates the rectangle by the given <code class="inline-code">value</code>. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_inflate"><span class="SCde"><span class="SFct">inflate</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>, <span class="STpe">f32</span>)</span></a></td>
<td>Inflates the rectangle by the given amount in <code class="inline-code">x</code> and <code class="inline-code">y</code> directions. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_intersect"><span class="SCde"><span class="SFct">intersect</span>(<span class="SKwd">self</span>, <span class="SKwd">const</span> <span class="SKwd">ref</span> <span class="SCst">Rectangle</span>)</span></a></td>
<td>Intersect this rectangle with another one. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_intersect"><span class="SCde"><span class="SFct">intersect</span>(<span class="SKwd">const</span> <span class="SKwd">ref</span> <span class="SCst">Rectangle</span>, <span class="SKwd">const</span> <span class="SKwd">ref</span> <span class="SCst">Rectangle</span>)</span></a></td>
<td>Creates a rectangle that represents the intersetion between <code class="inline-code">a</code> and <code class="inline-code">b</code>. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_intersectWith"><span class="SCde"><span class="SFct">intersectWith</span>()</spa</a></td>
<td>Determines if this rectangle intersets with <code class="inline-code">rect</code>. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_isEmpty"><span class="SCde"><span class="SFct">isEmpty</span>()</spa</a></td>
<td>Returns true if this instance has a surface of zero (width or height are null). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_isEmptyEpsilon"><span class="SCde"><span class="SFct">isEmptyEpsilon</span>()</spa</a></td>
<td>Returns true if this instance has a surface of zero (width and height are null). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_isNormalized"><span class="SCde"><span class="SFct">isNormalized</span>()</spa</a></td>
<td>Returns true if this instance has a positive or null surface (width and height greater or equal than zero). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_isZero"><span class="SCde"><span class="SFct">isZero</span>()</spa</a></td>
<td>Returns true if this instance is null. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_isZeroEpsilon"><span class="SCde"><span class="SFct">isZeroEpsilon</span>()</spa</a></td>
<td>Returns true if this instance is null with an epsilon. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_moveBottom"><span class="SCde"><span class="SFct">moveBottom</span>()</spa</a></td>
<td>Move the left coordinate, reducing the width. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_moveLeft"><span class="SCde"><span class="SFct">moveLeft</span>()</spa</a></td>
<td>Move the left coordinate, reducing the width. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_moveRight"><span class="SCde"><span class="SFct">moveRight</span>()</spa</a></td>
<td>Move the left coordinate, reducing the width. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_moveTop"><span class="SCde"><span class="SFct">moveTop</span>()</spa</a></td>
<td>Move the left coordinate, reducing the width. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_offset"><span class="SCde"><span class="SFct">offset</span>(<span class="SKwd">self</span>, <span class="SKwd">const</span> <span class="SKwd">ref</span> <span class="SCst">Point</span>)</span></a></td>
<td>Offset the rectangle position by a given value. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_offset"><span class="SCde"><span class="SFct">offset</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>)</span></a></td>
<td>Offset the rectangle position by a given value. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_offset"><span class="SCde"><span class="SFct">offset</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>, <span class="STpe">f32</span>)</span></a></td>
<td>Offset the rectangle position by a x and y values. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_right"><span class="SCde"><span class="SFct">right</span>()</spa</a></td>
<td>Right coordinate (x + width). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_round"><span class="SCde"><span class="SFct">round</span>()</spa</a></td>
<td>Perform a Math.round operation on all the coordinates. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_scale"><span class="SCde"><span class="SFct">scale</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>)</span></a></td>
<td>Multiply the width and height of the rectangle by a given <code class="inline-code">value</code>. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_scale"><span class="SCde"><span class="SFct">scale</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>, <span class="STpe">f32</span>)</span></a></td>
<td>Multiply the width by <code class="inline-code">x</code> and the height by <code class="inline-code">y</code>. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_set"><span class="SCde"><span class="SFct">set</span>()</spa</a></td>
<td>Initialize the rectangle with two position. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_setBottom"><span class="SCde"><span class="SFct">setBottom</span>()</spa</a></td>
<td>Bottom coordinate (y + height). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_setRight"><span class="SCde"><span class="SFct">setRight</span>()</spa</a></td>
<td>Right coordinate (x + width). </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_setUnion"><span class="SCde"><span class="SFct">setUnion</span>()</spa</a></td>
<td>Creates a rectangle that represents the union. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_trunc"><span class="SCde"><span class="SFct">trunc</span>()</spa</a></td>
<td>Perform a Math.trunc operation on all the coordinates. </td>
</tr>
<tr>
<td><a href="#Core_Math_Rectangle_vertCenter"><span class="SCde"><span class="SFct">vertCenter</span>()</spa</a></td>
<td>Vertical center coordinate (y + height / 2). </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Rectangle_opEquals"><span class="SCde"><span class="SFct">opEquals</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_applyPadding"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">applyPadding</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L152" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a padding (offset to each side). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">applyPadding</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, padding: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector4">Vector4</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_bottom"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">bottom</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L69" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Bottom coordinate (y + height). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">bottom</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_ceil"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">ceil</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L222" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Perform a Math.ceil operation on all the coordinates. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">ceil</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_center"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">center</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L48" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Central point. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">center</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L108" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set rectangle to (0, 0, 0, 0). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_constrainIn"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">constrainIn</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L291" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Constrain the rectangle to be inside another one, without changing its size  (so the other rectangle must be bigger). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">constrainIn</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Rectangle">Rectangle</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_contains"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">contains</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L237" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines if the specfied point is contained within the rectangular region. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">contains</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, pt: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>Determines if the specfied rectangle is contained within the rectangular region. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">contains</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, rect: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Rectangle">Rectangle</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>Determines if the specfied point is contained within the rectangular region. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">contains</span>(<span class="SKwd">const</span> <span class="SKwd">self</span>, x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_getUnion"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">getUnion</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L280" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a rectangle that represents the union between <code class="inline-code">a</code> and <code class="inline-code">b</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getUnion</span>(a: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Rectangle">Rectangle</a></span>, b: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Rectangle">Rectangle</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Rectangle">Rectangle</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_horzCenter"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">horzCenter</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Horizontal center coordinate (x + width / 2). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">horzCenter</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_inflate"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">inflate</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L174" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Inflates the rectangle by the given <code class="inline-code">value</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">inflate</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>Inflates the rectangle by the given amount in <code class="inline-code">x</code> and <code class="inline-code">y</code> directions. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">inflate</span>(<span class="SKwd">self</span>, x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_intersect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">intersect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L249" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Intersect this rectangle with another one. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">intersect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Rectangle">Rectangle</a></span>)</span></code>
</div>
<p>Creates a rectangle that represents the intersetion between <code class="inline-code">a</code> and <code class="inline-code">b</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">intersect</span>(a: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Rectangle">Rectangle</a></span>, b: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Rectangle">Rectangle</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Rectangle">Rectangle</a></span></span></code>
</div>
<p> If there is no intersection, Zero is returned. </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_intersectWith"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">intersectWith</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L268" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determines if this rectangle intersets with <code class="inline-code">rect</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">intersectWith</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, rect: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Rectangle">Rectangle</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_isEmpty"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">isEmpty</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L120" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this instance has a surface of zero (width or height are null). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isEmpty</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_isEmptyEpsilon"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">isEmptyEpsilon</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L198" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this instance has a surface of zero (width and height are null). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isEmptyEpsilon</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, eps = <span class="SCst"><a href="#Core_Math_ConstF32">ConstF32</a></span>.<span class="SCst">Epsilon</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_isNormalized"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">isNormalized</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L126" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this instance has a positive or null surface (width and height greater or equal than zero). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isNormalized</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_isZero"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">isZero</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L114" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this instance is null. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isZero</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_isZeroEpsilon"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">isZeroEpsilon</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L192" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this instance is null with an epsilon. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isZeroEpsilon</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, eps = <span class="SCst"><a href="#Core_Math_ConstF32">ConstF32</a></span>.<span class="SCst">Epsilon</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_moveBottom"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">moveBottom</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L102" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Move the left coordinate, reducing the width. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">moveBottom</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_moveLeft"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">moveLeft</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L82" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Move the left coordinate, reducing the width. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">moveLeft</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_moveRight"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">moveRight</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L89" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Move the left coordinate, reducing the width. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">moveRight</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_moveTop"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">moveTop</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L95" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Move the left coordinate, reducing the width. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">moveTop</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_offset"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">offset</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L145" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Offset the rectangle position by a given value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">offset</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, offset: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span>)</span></code>
</div>
<p>Offset the rectangle position by a given value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">offset</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, offsetXY: <span class="STpe">f32</span>)</span></code>
</div>
<p>Offset the rectangle position by a x and y values. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">offset</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, offsetX: <span class="STpe">f32</span>, offsetY: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_opEquals"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">opEquals</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opEquals</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Rectangle">Rectangle</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_right"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">right</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L55" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Right coordinate (x + width). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">right</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_round"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">round</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L204" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Perform a Math.round operation on all the coordinates. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">round</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_scale"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">scale</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L161" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Multiply the width and height of the rectangle by a given <code class="inline-code">value</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">scale</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>Multiply the width by <code class="inline-code">x</code> and the height by <code class="inline-code">y</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">scale</span>(<span class="SKwd">self</span>, x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_set"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">set</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize the rectangle with two position. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">set</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, topLeft: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span>, bottomRight: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Point">Point</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_setBottom"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">setBottom</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L76" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Bottom coordinate (y + height). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setBottom</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_setRight"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">setRight</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L62" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Right coordinate (x + width). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setRight</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_setUnion"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">setUnion</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L274" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a rectangle that represents the union. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setUnion</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Rectangle">Rectangle</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_trunc"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">trunc</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L213" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Perform a Math.trunc operation on all the coordinates. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">trunc</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Rectangle_vertCenter"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rectangle.</span><span class="api-item-title-strong">vertCenter</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\rectangle.swg#L42" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Vertical center coordinate (y + height / 2). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">vertCenter</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Transform2"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">Transform2</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\transform2.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">m11</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">m12</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">m21</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">m22</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">m31</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">m32</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">m</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">2</span>,<span class="SNum">2</span>] <span class="STpe">f32</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">tx</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">ty</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Transform2_createRotation"><span class="SCde"><span class="SFct">createRotation</span>()</spa</a></td>
<td>Creates a rotation matix, with a given center of rotation. </td>
</tr>
<tr>
<td><a href="#Core_Math_Transform2_createScale"><span class="SCde"><span class="SFct">createScale</span>()</spa</a></td>
<td>Creates a scale matix, with a given center. </td>
</tr>
<tr>
<td><a href="#Core_Math_Transform2_createTranslation"><span class="SCde"><span class="SFct">createTranslation</span>()</spa</a></td>
<td>Creates a translation matix. </td>
</tr>
<tr>
<td><a href="#Core_Math_Transform2_multiply"><span class="SCde"><span class="SFct">multiply</span>()</spa</a></td>
<td>Multiply two matricies. </td>
</tr>
<tr>
<td><a href="#Core_Math_Transform2_setIdentity"><span class="SCde"><span class="SFct">setIdentity</span>()</spa</a></td>
<td>Set transform to identity. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Transform2_createRotation"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Transform2.</span><span class="api-item-title-strong">createRotation</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\transform2.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a rotation matix, with a given center of rotation. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">createRotation</span>(angle: <span class="STpe">f32</span>, centerX: <span class="STpe">f32</span>, centerY: <span class="STpe">f32</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Transform2">Transform2</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Transform2_createScale"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Transform2.</span><span class="api-item-title-strong">createScale</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\transform2.swg#L52" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a scale matix, with a given center. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">createScale</span>(scaleX: <span class="STpe">f32</span>, scaleY: <span class="STpe">f32</span>, centerX: <span class="STpe">f32</span>, centerY: <span class="STpe">f32</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Transform2">Transform2</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Transform2_createTranslation"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Transform2.</span><span class="api-item-title-strong">createTranslation</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\transform2.swg#L68" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a translation matix. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">createTranslation</span>(x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Transform2">Transform2</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Transform2_multiply"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Transform2.</span><span class="api-item-title-strong">multiply</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\transform2.swg#L84" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Multiply two matricies. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">multiply</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, matrix2: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Transform2">Transform2</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Transform2_setIdentity"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Transform2.</span><span class="api-item-title-strong">setIdentity</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\transform2.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set transform to identity. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setIdentity</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Variant"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">Variant</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_Math_Variant">Variant</a></span>(<span class="SCst">T</span>: <span class="SKwd">const</span> [..] <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)</span></code>
</div>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">type</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">buffer</span></td>
<td class="code-type"><span class="SCde">[?] <span class="STpe">u8</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">AllFlags</span></td>
<td class="code-type"><span class="STpe">s32</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Variant_checkValidType"><span class="SCde"><span class="SFct">checkValidType</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Variant_drop"><span class="SCde"><span class="SFct">drop</span>()</spa</a></td>
<td>Drop the variant content (if necessary). </td>
</tr>
<tr>
<td><a href="#Core_Math_Variant_get"><span class="SCde"><span class="SFct">get</span>()</spa</a></td>
<td>Get the variant value of the given type  Will assert if the current type does not match. </td>
</tr>
<tr>
<td><a href="#Core_Math_Variant_set"><span class="SCde"><span class="SFct">set</span>()</spa</a></td>
<td>Set the variant value. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Variant_opAffect"><span class="SCde"><span class="SFct">opAffect</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Variant_opCmp"><span class="SCde"><span class="SFct">opCmp</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Variant_opDrop"><span class="SCde"><span class="SFct">opDrop</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Variant_opEquals"><span class="SCde"><span class="SFct">opEquals</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Variant_opPostCopy"><span class="SCde"><span class="SFct">opPostCopy</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Variant_opPostMove"><span class="SCde"><span class="SFct">opPostMove</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Variant_checkValidType"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Variant.</span><span class="api-item-title-strong">checkValidType</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">checkValidType</span>(t: <span class="SKwd">const</span> [..] <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, tn: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Variant_drop"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Variant.</span><span class="api-item-title-strong">drop</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L72" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Drop the variant content (if necessary). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">drop</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Variant_get"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Variant.</span><span class="api-item-title-strong">get</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L98" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the variant value of the given type  Will assert if the current type does not match. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">TN</span>) <span class="SFct">get</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">TN</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Variant_opAffect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Variant.</span><span class="api-item-title-strong">opAffect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">TN</span>) <span class="SFct">opAffect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">TN</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Variant_opCmp"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Variant.</span><span class="api-item-title-strong">opCmp</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L40" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">TN</span>) <span class="SFct">opCmp</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">TN</span>)-&gt;<span class="STpe">s32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Variant_opDrop"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Variant.</span><span class="api-item-title-strong">opDrop</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opDrop</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Variant_opEquals"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Variant.</span><span class="api-item-title-strong">opEquals</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L33" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">TN</span>) <span class="SFct">opEquals</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">TN</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Variant_opPostCopy"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Variant.</span><span class="api-item-title-strong">opPostCopy</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L47" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opPostCopy</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Variant_opPostMove"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Variant.</span><span class="api-item-title-strong">opPostMove</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L59" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opPostMove</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Variant_set"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Variant.</span><span class="api-item-title-strong">set</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\variant.swg#L86" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the variant value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">TN</span>) <span class="SFct">set</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SCst">TN</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">Vector2</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">x</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">y</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Vector2_angle"><span class="SCde"><span class="SFct">angle</span>()</spa</a></td>
<td>Returns the angle with another vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_ceil"><span class="SCde"><span class="SFct">ceil</span>()</spa</a></td>
<td>Math.ceil. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Set the vector to zero. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_cosAngle"><span class="SCde"><span class="SFct">cosAngle</span>()</spa</a></td>
<td>Returns the cosine angle with another vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_cross"><span class="SCde"><span class="SFct">cross</span>(<span class="SKwd">self</span>, <span class="SKwd">const</span> <span class="SKwd">ref</span> <span class="SCst">Vector2</span>)</span></a></td>
<td>Returns the Z signed length of the perpendicular vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_cross"><span class="SCde"><span class="SFct">cross</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>)</span></a></td>
<td>Returns the perpendicular vector in the 2D plane. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_distance"><span class="SCde"><span class="SFct">distance</span>()</spa</a></td>
<td>Returns the distance between two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_distanceSquared"><span class="SCde"><span class="SFct">distanceSquared</span>()</spa</a></td>
<td>Returns the square distance between two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_distanceToLine"><span class="SCde"><span class="SFct">distanceToLine</span>()</spa</a></td>
<td>Returns the distance of the point to the given line. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_distanceToSegment"><span class="SCde"><span class="SFct">distanceToSegment</span>()</spa</a></td>
<td>Returns the distance of the point to the given segment. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_dot"><span class="SCde"><span class="SFct">dot</span>()</spa</a></td>
<td>Returns the dot product between two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_floor"><span class="SCde"><span class="SFct">floor</span>()</spa</a></td>
<td>Math.floor. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_isEqualEpsilon"><span class="SCde"><span class="SFct">isEqualEpsilon</span>()</spa</a></td>
<td>Returns true if this vector is equals to another with an epsilon. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_isInEllipse"><span class="SCde"><span class="SFct">isInEllipse</span>()</spa</a></td>
<td>Returns true if the point <code class="inline-code">pt</code> is inside an ellipse. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_isInTriangle"><span class="SCde"><span class="SFct">isInTriangle</span>()</spa</a></td>
<td>Returns true if the point <code class="inline-code">pt</code> is inside the triangle defined with 'a, b, c'. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_isZero"><span class="SCde"><span class="SFct">isZero</span>()</spa</a></td>
<td>Returns true if this vector is null. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_isZeroEpsilon"><span class="SCde"><span class="SFct">isZeroEpsilon</span>()</spa</a></td>
<td>Returns true if this vector is null with an epsilon. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_length"><span class="SCde"><span class="SFct">length</span>()</spa</a></td>
<td>Return sthe length of the vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_lengthSquared"><span class="SCde"><span class="SFct">lengthSquared</span>()</spa</a></td>
<td>Returns the squared length of the vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_lerp"><span class="SCde"><span class="SFct">lerp</span>()</spa</a></td>
<td>Lerp one vector with another. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_lineLineIntersect"><span class="SCde"><span class="SFct">lineLineIntersect</span>()</spa</a></td>
<td>Compute the intersection point of two lines. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_max"><span class="SCde"><span class="SFct">max</span>()</spa</a></td>
<td>Returns a vector which is the <code class="inline-code">min</code> of two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_min"><span class="SCde"><span class="SFct">min</span>()</spa</a></td>
<td>Returns a vector which is the <code class="inline-code">min</code> of two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_nearestPointsSegSeg"><span class="SCde"><span class="SFct">nearestPointsSegSeg</span>()</spa</a></td>
<td>Returns the minimal segment between two segments (and the minimal distance). </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_negate"><span class="SCde"><span class="SFct">negate</span>()</spa</a></td>
<td>Negate the vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_normalize"><span class="SCde"><span class="SFct">normalize</span>()</spa</a></td>
<td>Normalize this vector (set its length to 1). </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_normalizeSafe"><span class="SCde"><span class="SFct">normalizeSafe</span>()</spa</a></td>
<td>Normalize this vector (set its length to 1) even if its length is almost null. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_polyContains"><span class="SCde"><span class="SFct">polyContains</span>()</spa</a></td>
<td>Returns true if the given point is inside the polygon  PNPoly by W. Randolph Franklin. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_rotate"><span class="SCde"><span class="SFct">rotate</span>()</spa</a></td>
<td>Rotate the vector by a given angle. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_round"><span class="SCde"><span class="SFct">round</span>()</spa</a></td>
<td>Math.round. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_segSegIntersect"><span class="SCde"><span class="SFct">segSegIntersect</span>()</spa</a></td>
<td>Compute the intersection point of two segments. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_set"><span class="SCde"><span class="SFct">set</span>()</spa</a></td>
<td>Set content. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_setLength"><span class="SCde"><span class="SFct">setLength</span>()</spa</a></td>
<td>Set the vector length. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_setLengthSafe"><span class="SCde"><span class="SFct">setLengthSafe</span>()</spa</a></td>
<td>Set the vector length. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_toNormalize"><span class="SCde"><span class="SFct">toNormalize</span>()</spa</a></td>
<td>Returns this vector normalized. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_toNormalizeSafe"><span class="SCde"><span class="SFct">toNormalizeSafe</span>()</spa</a></td>
<td>Returns this vector normalized even if its length is almost null. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Vector2_opAffect"><span class="SCde"><span class="SFct">opAffect</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_opAssign"><span class="SCde"><span class="SFct">opAssign</span>(<span class="SKwd">self</span>, <span class="SKwd">const</span> <span class="SKwd">ref</span> <span class="SCst">Vector2</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_opAssign"><span class="SCde"><span class="SFct">opAssign</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_opBinary"><span class="SCde"><span class="SFct">opBinary</span>(<span class="SKwd">self</span>, <span class="SKwd">const</span> <span class="SKwd">ref</span> <span class="SCst">Vector2</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_opBinary"><span class="SCde"><span class="SFct">opBinary</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_opEquals"><span class="SCde"><span class="SFct">opEquals</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector2_opUnary"><span class="SCde"><span class="SFct">opUnary</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_angle"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">angle</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L271" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the angle with another vector. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">angle</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_ceil"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">ceil</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L238" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Math.ceil. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">ceil</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L106" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the vector to zero. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_cosAngle"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">cosAngle</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L263" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the cosine angle with another vector. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">cosAngle</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_cross"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">cross</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L100" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the Z signed length of the perpendicular vector. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">cross</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>Returns the perpendicular vector in the 2D plane. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">cross</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, axis: <span class="STpe">f32</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span></span></code>
</div>
<p> <code class="inline-code">axis</code> will give the sign of the result </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_distance"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">distance</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L137" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the distance between two vectors. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">distance</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, dest: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_distanceSquared"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">distanceSquared</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L145" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the square distance between two vectors. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">distanceSquared</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, dest: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_distanceToLine"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">distanceToLine</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2utils.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the distance of the point to the given line. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">distanceToLine</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, a: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, b: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_distanceToSegment"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">distanceToSegment</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2utils.swg#L48" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the distance of the point to the given segment. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">distanceToSegment</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, a: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, b: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_dot"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">dot</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L90" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the dot product between two vectors. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">dot</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_floor"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">floor</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L231" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Math.floor. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">floor</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_isEqualEpsilon"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">isEqualEpsilon</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L131" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this vector is equals to another with an epsilon. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isEqualEpsilon</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, eps = <span class="SKwd">cast</span>(<span class="STpe">f32</span>) <span class="SCst"><a href="#Core_Math_ConstF64">ConstF64</a></span>.<span class="SCst">Epsilon</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_isInEllipse"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">isInEllipse</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2utils.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the point <code class="inline-code">pt</code> is inside an ellipse. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isInEllipse</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, center: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, radiusX: <span class="STpe">f32</span>, radiusY: <span class="STpe">f32</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_isInTriangle"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">isInTriangle</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2utils.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the point <code class="inline-code">pt</code> is inside the triangle defined with 'a, b, c'. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isInTriangle</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, a: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, b: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, c: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_isZero"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">isZero</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L119" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this vector is null. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isZero</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_isZeroEpsilon"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">isZeroEpsilon</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L125" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this vector is null with an epsilon. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isZeroEpsilon</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, eps = <span class="SKwd">cast</span>(<span class="STpe">f32</span>) <span class="SCst"><a href="#Core_Math_ConstF64">ConstF64</a></span>.<span class="SCst">Epsilon</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_length"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">length</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L84" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Return sthe length of the vector. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">length</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_lengthSquared"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">lengthSquared</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L87" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the squared length of the vector. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">lengthSquared</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_lerp"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">lerp</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L280" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Lerp one vector with another. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">lerp</span>(src: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, dst: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, factor: <span class="STpe">f32</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_lineLineIntersect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">lineLineIntersect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2utils.swg#L252" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compute the intersection point of two lines. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">lineLineIntersect</span>(start0: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, end0: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, start1: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, end1: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, epsilon: <span class="STpe">f32</span> = <span class="SCst"><a href="#Core_Math_ConstF32">ConstF32</a></span>.<span class="SCst">Epsilon</span>)-&gt;{yes: <span class="STpe">bool</span>, pos: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>}</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_max"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">max</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L222" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a vector which is the <code class="inline-code">min</code> of two vectors. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">max</span>(a: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, b: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_min"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">min</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L213" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a vector which is the <code class="inline-code">min</code> of two vectors. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">min</span>(a: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, b: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_nearestPointsSegSeg"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">nearestPointsSegSeg</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2utils.swg#L80" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the minimal segment between two segments (and the minimal distance). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nearestPointsSegSeg</span>(p0: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, p1: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, q0: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, q1: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>)-&gt;{a: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, b: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, dist: <span class="STpe">f32</span>}</span></code>
</div>
<p style="white-space: break-spaces"> David Eberly, Geometric Tools, Redmond WA 98052
 Copyright (c) 1998-2022
 Distributed under the Boost Software License, Version 1.0.
 https://www.boost.org/LICENSE_1_0.txt
 https://www.geometrictools.com/License/Boost/LICENSE_1_0.txt
 https://www.geometrictools.com/GTE/Mathematics/DistSegmentSegment.h</p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_negate"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">negate</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L112" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Negate the vector. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">negate</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_normalize"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">normalize</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L153" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Normalize this vector (set its length to 1). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">normalize</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_normalizeSafe"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">normalizeSafe</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L188" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Normalize this vector (set its length to 1) even if its length is almost null. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">normalizeSafe</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_opAffect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">opAffect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opAffect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_opAssign"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">opAssign</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L33" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opAssign</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>)
<span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opAssign</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_opBinary"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">opBinary</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L51" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opBinary</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>
<span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opBinary</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_opEquals"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">opEquals</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opEquals</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_opUnary"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">opUnary</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L69" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opUnary</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_polyContains"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">polyContains</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2utils.swg#L286" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given point is inside the polygon  PNPoly by W. Randolph Franklin. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">polyContains</span>(poly: <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>), pt: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_rotate"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">rotate</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L252" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Rotate the vector by a given angle. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">rotate</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, angle: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Angle">Angle</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_round"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">round</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L245" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Math.round. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">round</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_segSegIntersect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">segSegIntersect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2utils.swg#L267" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compute the intersection point of two segments. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">segSegIntersect</span>(start0: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, end0: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, start1: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, end1: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>, epsilon: <span class="STpe">f32</span> = <span class="SCst"><a href="#Core_Math_ConstF32">ConstF32</a></span>.<span class="SCst">Epsilon</span>)-&gt;{yes: <span class="STpe">bool</span>, pos: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span>}</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_set"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">set</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L77" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set content. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">set</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_setLength"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">setLength</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L180" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the vector length. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setLength</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, newLength: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_setLengthSafe"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">setLengthSafe</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L172" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the vector length. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setLengthSafe</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, newLength: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_toNormalize"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">toNormalize</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L163" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns this vector normalized. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toNormalize</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector2_toNormalizeSafe"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector2.</span><span class="api-item-title-strong">toNormalizeSafe</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector2.swg#L203" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns this vector normalized even if its length is almost null. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toNormalizeSafe</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector2">Vector2</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">Vector3</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">x</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">y</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">z</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Vector3_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Set the vector to zero. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_distance"><span class="SCde"><span class="SFct">distance</span>()</spa</a></td>
<td>Returns the distance between two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_distanceSquared"><span class="SCde"><span class="SFct">distanceSquared</span>()</spa</a></td>
<td>Returns the square distance between two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_dot"><span class="SCde"><span class="SFct">dot</span>()</spa</a></td>
<td>Returns the dot product between two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_isEqualEpsilon"><span class="SCde"><span class="SFct">isEqualEpsilon</span>()</spa</a></td>
<td>Returns true if this vector is equals to another with an epsilon. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_isZero"><span class="SCde"><span class="SFct">isZero</span>()</spa</a></td>
<td>Returns true if this vector is null. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_isZeroEpsilon"><span class="SCde"><span class="SFct">isZeroEpsilon</span>()</spa</a></td>
<td>Returns true if this vector is null with an epsilon. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_length"><span class="SCde"><span class="SFct">length</span>()</spa</a></td>
<td>Return sthe length of the vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_lengthSquared"><span class="SCde"><span class="SFct">lengthSquared</span>()</spa</a></td>
<td>Returns the squared length of the vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_lerp"><span class="SCde"><span class="SFct">lerp</span>()</spa</a></td>
<td>Lerp one vector with another. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_max"><span class="SCde"><span class="SFct">max</span>()</spa</a></td>
<td>Returns a vector which is the <code class="inline-code">min</code> of two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_min"><span class="SCde"><span class="SFct">min</span>()</spa</a></td>
<td>Returns a vector which is the <code class="inline-code">min</code> of two vectors. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_negate"><span class="SCde"><span class="SFct">negate</span>()</spa</a></td>
<td>Negate the vector. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_normalize"><span class="SCde"><span class="SFct">normalize</span>()</spa</a></td>
<td>Normalize this vector (set its length to 1). </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_normalizeSafe"><span class="SCde"><span class="SFct">normalizeSafe</span>()</spa</a></td>
<td>Normalize this vector (set its length to 1) even if its length is almost null. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_set"><span class="SCde"><span class="SFct">set</span>()</spa</a></td>
<td>Set content. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_setLength"><span class="SCde"><span class="SFct">setLength</span>()</spa</a></td>
<td>Set the vector length. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_setLengthSafe"><span class="SCde"><span class="SFct">setLengthSafe</span>()</spa</a></td>
<td>Set the vector length. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_toNormalize"><span class="SCde"><span class="SFct">toNormalize</span>()</spa</a></td>
<td>Returns this vector normalized. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_toNormalizeSafe"><span class="SCde"><span class="SFct">toNormalizeSafe</span>()</spa</a></td>
<td>Returns this vector normalized even if its length is almost null. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Vector3_opAffect"><span class="SCde"><span class="SFct">opAffect</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_opAssign"><span class="SCde"><span class="SFct">opAssign</span>(<span class="SKwd">self</span>, <span class="SKwd">const</span> <span class="SKwd">ref</span> <span class="SCst">Vector3</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_opAssign"><span class="SCde"><span class="SFct">opAssign</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_opBinary"><span class="SCde"><span class="SFct">opBinary</span>(<span class="SKwd">self</span>, <span class="SKwd">const</span> <span class="SKwd">ref</span> <span class="SCst">Vector3</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_opBinary"><span class="SCde"><span class="SFct">opBinary</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_opEquals"><span class="SCde"><span class="SFct">opEquals</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector3_opUnary"><span class="SCde"><span class="SFct">opUnary</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L96" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the vector to zero. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_distance"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">distance</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L128" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the distance between two vectors. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">distance</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, dest: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_distanceSquared"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">distanceSquared</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L137" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the square distance between two vectors. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">distanceSquared</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, dest: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_dot"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">dot</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L93" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the dot product between two vectors. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">dot</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_isEqualEpsilon"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">isEqualEpsilon</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L122" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this vector is equals to another with an epsilon. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isEqualEpsilon</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span>, eps = <span class="SKwd">cast</span>(<span class="STpe">f32</span>) <span class="SCst"><a href="#Core_Math_ConstF64">ConstF64</a></span>.<span class="SCst">Epsilon</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_isZero"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">isZero</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L110" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this vector is null. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isZero</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_isZeroEpsilon"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">isZeroEpsilon</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L116" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this vector is null with an epsilon. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isZeroEpsilon</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, eps = <span class="SKwd">cast</span>(<span class="STpe">f32</span>) <span class="SCst"><a href="#Core_Math_ConstF64">ConstF64</a></span>.<span class="SCst">Epsilon</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_length"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">length</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L87" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Return sthe length of the vector. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">length</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_lengthSquared"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">lengthSquared</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L90" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the squared length of the vector. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">lengthSquared</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_lerp"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">lerp</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L230" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Lerp one vector with another. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">lerp</span>(src: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span>, dst: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span>, factor: <span class="STpe">f32</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_max"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">max</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L220" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a vector which is the <code class="inline-code">min</code> of two vectors. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">max</span>(a: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span>, b: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_min"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">min</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L210" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a vector which is the <code class="inline-code">min</code> of two vectors. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">min</span>(a: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span>, b: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_negate"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">negate</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L102" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Negate the vector. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">negate</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_normalize"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">normalize</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L146" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Normalize this vector (set its length to 1). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">normalize</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_normalizeSafe"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">normalizeSafe</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L184" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Normalize this vector (set its length to 1) even if its length is almost null. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">normalizeSafe</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_opAffect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">opAffect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opAffect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_opAssign"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">opAssign</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opAssign</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span>)
<span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opAssign</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_opBinary"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">opBinary</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L53" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opBinary</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span>
<span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opBinary</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_opEquals"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">opEquals</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opEquals</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_opUnary"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">opUnary</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L71" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opUnary</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_set"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">set</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L79" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set content. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">set</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>, z: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_setLength"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">setLength</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L175" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the vector length. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setLength</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, newLength: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_setLengthSafe"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">setLengthSafe</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L166" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the vector length. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setLengthSafe</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, newLength: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_toNormalize"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">toNormalize</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L157" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns this vector normalized. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toNormalize</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector3_toNormalizeSafe"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector3.</span><span class="api-item-title-strong">toNormalizeSafe</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector3.swg#L200" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns this vector normalized even if its length is almost null. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toNormalizeSafe</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector3">Vector3</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector4"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">Vector4</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector4.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">x</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">y</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">z</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">w</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Vector4_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Set the vector to zero. </td>
</tr>
<tr>
<td><a href="#Core_Math_Vector4_lerp"><span class="SCde"><span class="SFct">lerp</span>()</spa</a></td>
<td>Lerp one vector with another. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Math_Vector4_opAffect"><span class="SCde"><span class="SFct">opAffect</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector4_opEquals"><span class="SCde"><span class="SFct">opEquals</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Math_Vector4_opUnary"><span class="SCde"><span class="SFct">opUnary</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector4_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector4.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector4.swg#L33" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the vector to zero. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector4_lerp"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector4.</span><span class="api-item-title-strong">lerp</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector4.swg#L39" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Lerp one vector with another. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">lerp</span>(src: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector4">Vector4</a></span>, dst: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector4">Vector4</a></span>, factor: <span class="STpe">f32</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector4">Vector4</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector4_opAffect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector4.</span><span class="api-item-title-strong">opAffect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector4.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opAffect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector4_opEquals"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector4.</span><span class="api-item-title-strong">opEquals</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector4.swg#L21" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opEquals</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector4">Vector4</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_Vector4_opUnary"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Vector4.</span><span class="api-item-title-strong">opUnary</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\vector4.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opUnary</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Math</span>.<span class="SCst"><a href="#Core_Math_Vector4">Vector4</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_abs"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">abs</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L137" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">abs</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">abs</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span>
<span class="SKwd">func</span> <span class="SFct">abs</span>(x: <span class="STpe">s16</span>)-&gt;<span class="STpe">s16</span>
<span class="SKwd">func</span> <span class="SFct">abs</span>(x: <span class="STpe">s32</span>)-&gt;<span class="STpe">s32</span>
<span class="SKwd">func</span> <span class="SFct">abs</span>(x: <span class="STpe">s64</span>)-&gt;<span class="STpe">s64</span>
<span class="SKwd">func</span> <span class="SFct">abs</span>(x: <span class="STpe">s8</span>)-&gt;<span class="STpe">s8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_acos"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">acos</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L116" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">acos</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">acos</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_asin"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">asin</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L114" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">asin</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">asin</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_atan"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">atan</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L118" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">atan</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">atan</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_atan2"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">atan2</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L94" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">atan2</span>(x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">atan2</span>(x: <span class="STpe">f64</span>, y: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_bigEndianToNative"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">bigEndianToNative</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\helpers.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a big endian integer to current arch native format. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">bigEndianToNative</span>(x: <span class="SCst">T</span>)-&gt;<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_ceil"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">ceil</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L130" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">ceil</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">ceil</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_clamp"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">clamp</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\helpers.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">clamp</span>(x: <span class="SCst">T</span>, low: <span class="SCst">T</span>, up: <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_cos"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">cos</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L102" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">cos</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">cos</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_cosh"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">cosh</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L109" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">cosh</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">cosh</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_countOnes"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">countOnes</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\bits.swg#L40" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the number of bits set to 1. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">countOnes</span>(x: <span class="STpe">u16</span>)-&gt;<span class="STpe">u16</span>
<span class="SKwd">func</span> <span class="SFct">countOnes</span>(x: <span class="STpe">u32</span>)-&gt;<span class="STpe">u32</span>
<span class="SKwd">func</span> <span class="SFct">countOnes</span>(x: <span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span>
<span class="SKwd">func</span> <span class="SFct">countOnes</span>(x: <span class="STpe">u8</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_exp"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">exp</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L140" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">exp</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">exp</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_exp2"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">exp2</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L142" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">exp2</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">exp2</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_floor"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">floor</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L128" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">floor</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">floor</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_hasByte"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">hasByte</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer.swg#L80" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determin if an integer has a given byte. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">hasByte</span>(value: <span class="STpe">u16</span>, byte: <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">hasByte</span>(value: <span class="STpe">u32</span>, byte: <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span>
<span class="SKwd">func</span> <span class="SFct">hasByte</span>(value: <span class="STpe">u64</span>, byte: <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_hasZeroByte"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">hasZeroByte</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determin if any of the bytes is zero. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">hasZeroByte</span>(v: <span class="STpe">u16</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">hasZeroByte</span>(v: <span class="STpe">u32</span>)-&gt;<span class="STpe">bool</span>
<span class="SKwd">func</span> <span class="SFct">hasZeroByte</span>(v: <span class="STpe">u64</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_isEqualEpsilon"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">isEqualEpsilon</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L46" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isEqualEpsilon</span>(x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>, eps = <span class="SCst"><a href="#Core_Math_ConstF32">ConstF32</a></span>.<span class="SCst">Epsilon</span>)-&gt;<span class="STpe">bool</span>
<span class="SKwd">func</span> <span class="SFct">isEqualEpsilon</span>(x: <span class="STpe">f64</span>, y: <span class="STpe">f64</span>, eps = <span class="SCst"><a href="#Core_Math_ConstF64">ConstF64</a></span>.<span class="SCst">Epsilon</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_isNan"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">isNan</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L49" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isNan</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">bool</span>
<span class="SKwd">func</span> <span class="SFct">isNan</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_isPowerOf2"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">isPowerOf2</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isPowerOf2</span>(x: <span class="STpe">u32</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_isZeroEpsilon"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">isZeroEpsilon</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L44" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isZeroEpsilon</span>(x: <span class="STpe">f32</span>, eps = <span class="SCst"><a href="#Core_Math_ConstF32">ConstF32</a></span>.<span class="SCst">Epsilon</span>)-&gt;<span class="STpe">bool</span>
<span class="SKwd">func</span> <span class="SFct">isZeroEpsilon</span>(x: <span class="STpe">f64</span>, eps = <span class="SCst"><a href="#Core_Math_ConstF64">ConstF64</a></span>.<span class="SCst">Epsilon</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_leadingZeros"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">leadingZeros</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\bits.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the number of bits set to 0 from the left. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">leadingZeros</span>(x: <span class="STpe">u16</span>)-&gt;<span class="STpe">u16</span>
<span class="SKwd">func</span> <span class="SFct">leadingZeros</span>(x: <span class="STpe">u32</span>)-&gt;<span class="STpe">u32</span>
<span class="SKwd">func</span> <span class="SFct">leadingZeros</span>(x: <span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span>
<span class="SKwd">func</span> <span class="SFct">leadingZeros</span>(x: <span class="STpe">u8</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_lerp"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">lerp</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">lerp</span>(x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>, factor: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">lerp</span>(x: <span class="STpe">f64</span>, y: <span class="STpe">f64</span>, factor: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_littleEndianToNative"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">littleEndianToNative</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\helpers.swg#L33" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a little endian integer to current arch native format. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">littleEndianToNative</span>(x: <span class="SCst">T</span>)-&gt;<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_log"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">log</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L121" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">log</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">log</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_log10"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">log10</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L125" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">log10</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">log10</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_log2"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">log2</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L123" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">log2</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">log2</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_makeRepeat16"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">makeRepeat16</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer.swg#L57" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Make a 16 bits by repeating a given byte  0x20 =&gt; 0x2020. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">makeRepeat16</span>(v: <span class="STpe">u8</span>)-&gt;<span class="STpe">u16</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_makeRepeat32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">makeRepeat32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer.swg#L65" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Make a 32 bits by repeating a given byte  0x20 =&gt; 0x20202020. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">makeRepeat32</span>(v: <span class="STpe">u8</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_makeRepeat64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">makeRepeat64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer.swg#L73" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Make a 64 bits by repeating a given byte  0x20 =&gt; 0x20202020_20202020. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">makeRepeat64</span>(v: <span class="STpe">u8</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_map"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">map</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L64" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">map</span>(val: <span class="STpe">f32</span>, minSrc: <span class="STpe">f32</span>, maxSrc: <span class="STpe">f32</span>, minDst: <span class="STpe">f32</span>, maxDst: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">map</span>(val: <span class="STpe">f64</span>, minSrc: <span class="STpe">f64</span>, maxSrc: <span class="STpe">f64</span>, minDst: <span class="STpe">f64</span>, maxDst: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_max"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">max</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\helpers.swg#L8" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">max</span>(x: <span class="SCst">T</span>, y: <span class="SCst">T</span>, z: <span class="SCst">T</span>)-&gt;<span class="SCst">T</span>
<span class="SKwd">func</span> <span class="SFct">max</span>(x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">max</span>(x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>, z: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">max</span>(x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>, z: <span class="STpe">f32</span>, w: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">max</span>(x: <span class="STpe">f64</span>, y: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span>
<span class="SKwd">func</span> <span class="SFct">max</span>(x: <span class="STpe">f64</span>, y: <span class="STpe">f64</span>, z: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span>
<span class="SKwd">func</span> <span class="SFct">max</span>(x: <span class="STpe">f64</span>, y: <span class="STpe">f64</span>, z: <span class="STpe">f64</span>, w: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span>
<span class="SKwd">func</span> <span class="SFct">max</span>(x: <span class="STpe">s16</span>, y: <span class="STpe">s16</span>)-&gt;<span class="STpe">s16</span>
<span class="SKwd">func</span> <span class="SFct">max</span>(x: <span class="STpe">s32</span>, y: <span class="STpe">s32</span>)-&gt;<span class="STpe">s32</span>
<span class="SKwd">func</span> <span class="SFct">max</span>(x: <span class="STpe">s64</span>, y: <span class="STpe">s64</span>)-&gt;<span class="STpe">s64</span>
<span class="SKwd">func</span> <span class="SFct">max</span>(x: <span class="STpe">s8</span>, y: <span class="STpe">s8</span>)-&gt;<span class="STpe">s8</span>
<span class="SKwd">func</span> <span class="SFct">max</span>(x: <span class="STpe">u16</span>, y: <span class="STpe">u16</span>)-&gt;<span class="STpe">u16</span>
<span class="SKwd">func</span> <span class="SFct">max</span>(x: <span class="STpe">u32</span>, y: <span class="STpe">u32</span>)-&gt;<span class="STpe">u32</span>
<span class="SKwd">func</span> <span class="SFct">max</span>(x: <span class="STpe">u64</span>, y: <span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span>
<span class="SKwd">func</span> <span class="SFct">max</span>(x: <span class="STpe">u8</span>, y: <span class="STpe">u8</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_min"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">min</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\helpers.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">min</span>(x: <span class="SCst">T</span>, y: <span class="SCst">T</span>, z: <span class="SCst">T</span>)-&gt;<span class="SCst">T</span>
<span class="SKwd">func</span> <span class="SFct">min</span>(x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">min</span>(x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>, z: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">min</span>(x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>, z: <span class="STpe">f32</span>, w: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">min</span>(x: <span class="STpe">f64</span>, y: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span>
<span class="SKwd">func</span> <span class="SFct">min</span>(x: <span class="STpe">f64</span>, y: <span class="STpe">f64</span>, z: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span>
<span class="SKwd">func</span> <span class="SFct">min</span>(x: <span class="STpe">f64</span>, y: <span class="STpe">f64</span>, z: <span class="STpe">f64</span>, w: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span>
<span class="SKwd">func</span> <span class="SFct">min</span>(x: <span class="STpe">s16</span>, y: <span class="STpe">s16</span>)-&gt;<span class="STpe">s16</span>
<span class="SKwd">func</span> <span class="SFct">min</span>(x: <span class="STpe">s32</span>, y: <span class="STpe">s32</span>)-&gt;<span class="STpe">s32</span>
<span class="SKwd">func</span> <span class="SFct">min</span>(x: <span class="STpe">s64</span>, y: <span class="STpe">s64</span>)-&gt;<span class="STpe">s64</span>
<span class="SKwd">func</span> <span class="SFct">min</span>(x: <span class="STpe">s8</span>, y: <span class="STpe">s8</span>)-&gt;<span class="STpe">s8</span>
<span class="SKwd">func</span> <span class="SFct">min</span>(x: <span class="STpe">u16</span>, y: <span class="STpe">u16</span>)-&gt;<span class="STpe">u16</span>
<span class="SKwd">func</span> <span class="SFct">min</span>(x: <span class="STpe">u32</span>, y: <span class="STpe">u32</span>)-&gt;<span class="STpe">u32</span>
<span class="SKwd">func</span> <span class="SFct">min</span>(x: <span class="STpe">u64</span>, y: <span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span>
<span class="SKwd">func</span> <span class="SFct">min</span>(x: <span class="STpe">u8</span>, y: <span class="STpe">u8</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_mulAdd"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">mulAdd</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L147" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">mulAdd</span>(x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>, z: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">mulAdd</span>(x: <span class="STpe">f64</span>, y: <span class="STpe">f64</span>, z: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_mulU64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">mulU64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer64.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">mulU64</span>(x: <span class="STpe">u64</span>, y: <span class="STpe">u64</span>)-&gt;{hi: <span class="STpe">u64</span>, lo: <span class="STpe">u64</span>}</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_nativeToBigEndian"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">nativeToBigEndian</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\helpers.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a native arch integer to a big endian. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">nativeToBigEndian</span>(x: <span class="SCst">T</span>)-&gt;<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_pow"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">pow</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L144" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">pow</span>(x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">pow</span>(x: <span class="STpe">f64</span>, y: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_reverse"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">reverse</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\bits.swg#L53" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reverse all bits. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">reverse</span>(x: <span class="STpe">u16</span>)-&gt;<span class="STpe">u16</span>
<span class="SKwd">func</span> <span class="SFct">reverse</span>(x: <span class="STpe">u32</span>)-&gt;<span class="STpe">u32</span>
<span class="SKwd">func</span> <span class="SFct">reverse</span>(x: <span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span>
<span class="SKwd">func</span> <span class="SFct">reverse</span>(x: <span class="STpe">u8</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_round"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">round</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L134" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">round</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">round</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_roundDownToPowerOf2"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">roundDownToPowerOf2</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">roundDownToPowerOf2</span>(x: <span class="STpe">u32</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_roundUpToPowerOf2"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">roundUpToPowerOf2</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\integer.swg#L8" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">roundUpToPowerOf2</span>(x: <span class="STpe">u32</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_saturate"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">saturate</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">saturate</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">saturate</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_sign"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">sign</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">sign</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">s32</span>
<span class="SKwd">func</span> <span class="SFct">sign</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">s32</span>
<span class="SKwd">func</span> <span class="SFct">sign</span>(x: <span class="STpe">s16</span>)-&gt;<span class="STpe">s32</span>
<span class="SKwd">func</span> <span class="SFct">sign</span>(x: <span class="STpe">s32</span>)-&gt;<span class="STpe">s32</span>
<span class="SKwd">func</span> <span class="SFct">sign</span>(x: <span class="STpe">s64</span>)-&gt;<span class="STpe">s32</span>
<span class="SKwd">func</span> <span class="SFct">sign</span>(x: <span class="STpe">s8</span>)-&gt;<span class="STpe">s32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_sin"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">sin</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L100" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">sin</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">sin</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_sinh"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">sinh</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L107" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">sinh</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">sinh</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_smoothstep"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">smoothstep</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L52" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">smoothstep</span>(edge0: <span class="STpe">f32</span>, edge1: <span class="STpe">f32</span>, x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">smoothstep</span>(edge0: <span class="STpe">f64</span>, edge1: <span class="STpe">f64</span>, x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_sqrt"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">sqrt</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L97" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">sqrt</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">sqrt</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_tan"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">tan</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L104" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">tan</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">tan</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_tanh"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">tanh</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L111" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">tanh</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">tanh</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_toDegrees"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">toDegrees</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L39" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toDegrees</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">toDegrees</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_toRadians"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">toRadians</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L40" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toRadians</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">toRadians</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_trailingZeros"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">trailingZeros</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\bits.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the number of bits set to 0 from the right. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">trailingZeros</span>(x: <span class="STpe">u16</span>)-&gt;<span class="STpe">u16</span>
<span class="SKwd">func</span> <span class="SFct">trailingZeros</span>(x: <span class="STpe">u32</span>)-&gt;<span class="STpe">u32</span>
<span class="SKwd">func</span> <span class="SFct">trailingZeros</span>(x: <span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span>
<span class="SKwd">func</span> <span class="SFct">trailingZeros</span>(x: <span class="STpe">u8</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Math_trunc"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Math.</span><span class="api-item-title-strong">trunc</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\math\float.swg#L132" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">trunc</span>(x: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">trunc</span>(x: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_align"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">align</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L50" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Align a pointer to the given amount. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">align</span>(value: <span class="SKwd">const</span> ^<span class="STpe">void</span>, alignement: <span class="STpe">u32</span>)-&gt;<span class="SKwd">const</span> ^<span class="STpe">void</span></span></code>
</div>
<p>Align a value to the given amount. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">align</span>(value: <span class="STpe">u64</span>, alignement: <span class="STpe">u32</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_alloc"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">alloc</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\alloc.swg#L68" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Allocate a given amount of bytes. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">alloc</span>(size: <span class="STpe">u64</span>, allocator: <span class="SCst">Swag</span>.<span class="SCst">IAllocator</span> = <span class="SKwd">null</span>, alignement: <span class="STpe">u32</span> = <span class="SNum">0</span>, hint: <span class="STpe">string</span> = <span class="SKwd">null</span>, loc = <span class="SCmp">#callerlocation</span>)-&gt;^<span class="STpe">void</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_assertIsAllocated"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">assertIsAllocated</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\alloc.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Check if a given pointer is allocated. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">assertIsAllocated</span>(buffer: ^<span class="STpe">void</span>, size: <span class="STpe">u64</span>, allocator: <span class="SCst">Swag</span>.<span class="SCst">IAllocator</span> = <span class="SKwd">null</span>, hint: <span class="STpe">string</span> = <span class="SKwd">null</span>, loc = <span class="SCmp">#callerlocation</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Clear one block of memory. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(dest: ^<span class="STpe">void</span>, size: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_compare"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">compare</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compare two blocks of memory. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">compare</span>(dest: <span class="SKwd">const</span> ^<span class="STpe">void</span>, src: <span class="SKwd">const</span> ^<span class="STpe">void</span>, size: <span class="STpe">u64</span>)-&gt;<span class="STpe">s32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_copy"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">copy</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Copy one block of memory to a given address. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">copy</span>(dest: ^<span class="STpe">void</span>, src: <span class="SKwd">const</span> ^<span class="STpe">void</span>, size: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_copyOver"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">copyOver</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Move one block of memory to a given address. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">copyOver</span>(dest: ^<span class="STpe">void</span>, src: <span class="SKwd">const</span> ^<span class="STpe">void</span>, size: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_delete"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">delete</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\alloc.swg#L121" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Drop and release memory of the given type. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">delete</span>(ptr: *<span class="SCst">T</span>, allocator: <span class="SCst">Swag</span>.<span class="SCst">IAllocator</span> = <span class="SKwd">null</span>, hint: <span class="STpe">string</span> = <span class="SKwd">null</span>, loc = <span class="SCmp">#callerlocation</span>)</span></code>
</div>
<p>Drop and release memory of an array of the given type. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">delete</span>(ptr: ^<span class="SCst">T</span>, num: <span class="STpe">u64</span>, allocator: <span class="SCst">Swag</span>.<span class="SCst">IAllocator</span> = <span class="SKwd">null</span>, hint: <span class="STpe">string</span> = <span class="SKwd">null</span>, loc = <span class="SCmp">#callerlocation</span>)</span></code>
</div>
<p>Drop and release memory of the given type. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">delete</span>(ptr: *<span class="STpe">void</span>, type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, allocator: <span class="SCst">Swag</span>.<span class="SCst">IAllocator</span> = <span class="SKwd">null</span>, hint: <span class="STpe">string</span> = <span class="SKwd">null</span>, loc = <span class="SCmp">#callerlocation</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_equals"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">equals</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compare two blocks of memory. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">equals</span>(dest: <span class="SKwd">const</span> *<span class="SCst">T</span>, src: <span class="SKwd">const</span> *<span class="SCst">T</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_free"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">free</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\alloc.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Free the specified memory block. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">free</span>(buffer: ^<span class="STpe">void</span>, size: <span class="STpe">u64</span>, allocator: <span class="SCst">Swag</span>.<span class="SCst">IAllocator</span> = <span class="SKwd">null</span>, hint: <span class="STpe">string</span> = <span class="SKwd">null</span>, loc = <span class="SCmp">#callerlocation</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_freeAll"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">freeAll</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\alloc.swg#L38" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Free all allocated memory of the given allocator if possible. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">freeAll</span>(allocator: <span class="SCst">Swag</span>.<span class="SCst">IAllocator</span>, hint: <span class="STpe">string</span> = <span class="SKwd">null</span>, loc = <span class="SCmp">#callerlocation</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_freeTemp"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">freeTemp</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L56" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Clear the temporary allocator. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">freeTemp</span>()</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_new"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">new</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\alloc.swg#L112" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Allocate and initialize the given type. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">new</span>(allocator: <span class="SCst">Swag</span>.<span class="SCst">IAllocator</span> = <span class="SKwd">null</span>, alignement: <span class="STpe">u32</span> = <span class="SNum">0</span>, hint: <span class="STpe">string</span> = <span class="SKwd">null</span>, loc = <span class="SCmp">#callerlocation</span>)-&gt;*<span class="SCst">T</span></span></code>
</div>
<p>Allocate and initialize an array of the given type. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">new</span>(num: <span class="STpe">u64</span>, allocator: <span class="SCst">Swag</span>.<span class="SCst">IAllocator</span> = <span class="SKwd">null</span>, alignement: <span class="STpe">u32</span> = <span class="SNum">0</span>, hint: <span class="STpe">string</span> = <span class="SKwd">null</span>, loc = <span class="SCmp">#callerlocation</span>)-&gt;^<span class="SCst">T</span></span></code>
</div>
<p>Allocate and initialize the given type. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">new</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, allocator: <span class="SCst">Swag</span>.<span class="SCst">IAllocator</span> = <span class="SKwd">null</span>, alignement: <span class="STpe">u32</span> = <span class="SNum">0</span>, hint: <span class="STpe">string</span> = <span class="SKwd">null</span>, loc = <span class="SCmp">#callerlocation</span>)-&gt;*<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_pushAllocator"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">pushAllocator</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L63" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Push a new allocator for the given block of code. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span> <span class="SFct">pushAllocator</span>(allocator: <span class="SCst">Swag</span>.<span class="SCst">IAllocator</span>, stmt: <span class="STpe">code</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_pushTempAllocator"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">pushTempAllocator</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L80" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Push the temporary allocator for the given block of code. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span> <span class="SFct">pushTempAllocator</span>(stmt: <span class="STpe">code</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_realloc"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">realloc</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\alloc.swg#L50" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reallocate/allocate a given amount of bytes. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">realloc</span>(buffer: ^<span class="STpe">void</span>, newSize: <span class="STpe">u64</span>, oldSize: <span class="STpe">u64</span>, allocator: <span class="SCst">Swag</span>.<span class="SCst">IAllocator</span> = <span class="SKwd">null</span>, alignement: <span class="STpe">u16</span> = <span class="SNum">0</span>, hint: <span class="STpe">string</span> = <span class="SKwd">null</span>, loc = <span class="SCmp">#callerlocation</span>)-&gt;^<span class="STpe">void</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_set"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">set</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\memory.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the content of one block of memory to a specific byte value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">set</span>(dest: ^<span class="STpe">void</span>, value: <span class="STpe">u8</span>, size: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Memory_tempAlloc"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Memory.</span><span class="api-item-title-strong">tempAlloc</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\memory\alloc.swg#L84" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Allocate a given amount of bytes in the temporary allocator. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">tempAlloc</span>(size: <span class="STpe">u64</span>, alignement: <span class="STpe">u32</span> = <span class="SNum">0</span>, hint: <span class="STpe">string</span> = <span class="SKwd">null</span>, loc = <span class="SCmp">#callerlocation</span>)-&gt;^<span class="STpe">void</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Noise_perlin"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Noise.</span><span class="api-item-title-strong">perlin</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\noise.swg#L138" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Perlin. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">perlin</span>(x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>, z: <span class="STpe">f32</span>, seed: <span class="STpe">s32</span> = <span class="SNum">1337</span>)-&gt;<span class="STpe">f32</span>
<span class="SKwd">func</span> <span class="SFct">perlin</span>(x: <span class="STpe">f32</span>, y: <span class="STpe">f32</span>, seed: <span class="STpe">s32</span> = <span class="SNum">1337</span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Parser_RegExp"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Parser.</span><span class="api-item-title-strong">RegExp</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\regexp.swg#L82" class="src">[src]</a></td>
</tr>
</table>
</p>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Parser_RegExp_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Clear content. </td>
</tr>
<tr>
<td><a href="#Core_Parser_RegExp_compile"><span class="SCde"><span class="SFct">compile</span>()</spa</a></td>
<td>Compile the expression. </td>
</tr>
<tr>
<td><a href="#Core_Parser_RegExp_grep"><span class="SCde"><span class="SFct">grep</span>()</spa</a></td>
<td>Find the first occurence in the string. </td>
</tr>
<tr>
<td><a href="#Core_Parser_RegExp_grepAll"><span class="SCde"><span class="SFct">grepAll</span>()</spa</a></td>
<td>Find all the occurences in the string. </td>
</tr>
<tr>
<td><a href="#Core_Parser_RegExp_match"><span class="SCde"><span class="SFct">match</span>()</spa</a></td>
<td>Returns true if <code class="inline-code">str</code> matches the regexp. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Parser_RegExp_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">RegExp.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\regexp.swg#L104" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Clear content. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Parser_RegExp_compile"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">RegExp.</span><span class="api-item-title-strong">compile</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\regexp.swg#L126" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compile the expression. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">compile</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, str: <span class="STpe">string</span>, ignoreCase: <span class="STpe">bool</span> = <span class="SKwd">false</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Parser_RegExp_grep"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">RegExp.</span><span class="api-item-title-strong">grep</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\regexp.swg#L204" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Find the first occurence in the string. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">grep</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, str: <span class="STpe">string</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Parser_RegExp_grepAll"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">RegExp.</span><span class="api-item-title-strong">grepAll</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\regexp.swg#L185" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Find all the occurences in the string. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">grepAll</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, str: <span class="STpe">string</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">string</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Parser_RegExp_match"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">RegExp.</span><span class="api-item-title-strong">match</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\regexp.swg#L136" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if <code class="inline-code">str</code> matches the regexp. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">match</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, str: <span class="STpe">string</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Path_combine"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Path.</span><span class="api-item-title-strong">combine</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L181" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Combine multiple paths into one, by adding a directory separator  between them if necessary. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">combine</span>(fullnames: <span class="STpe">string</span>...)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Path_equals"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Path.</span><span class="api-item-title-strong">equals</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L203" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the two paths are equal. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">equals</span>(path1: <span class="STpe">string</span>, path2: <span class="STpe">string</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Path_getAbsolute"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Path.</span><span class="api-item-title-strong">getAbsolute</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.win32.swg#L123" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform <code class="inline-code">fullname</code> to an absolute path. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getAbsolute</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Path_getDirectoryName"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Path.</span><span class="api-item-title-strong">getDirectoryName</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L45" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the directory part of the path, null if not found. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getDirectoryName</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Path_getExtension"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Path.</span><span class="api-item-title-strong">getExtension</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L124" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the file name extension, including the <code class="inline-code">.</code> character  Returns null if no extension was found. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getExtension</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Path_getExtensionLowerCase"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Path.</span><span class="api-item-title-strong">getExtensionLowerCase</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L146" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the file name extension, including the <code class="inline-code">.</code> character, in lower case  Returns null if no extension was found. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getExtensionLowerCase</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Path_getFileName"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Path.</span><span class="api-item-title-strong">getFileName</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L72" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the file name part of the path, null if not found. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getFileName</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Path_getFileNameWithoutExtension"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Path.</span><span class="api-item-title-strong">getFileNameWithoutExtension</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L96" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the path file name, null if not found. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getFileNameWithoutExtension</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Path_getRootLength"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Path.</span><span class="api-item-title-strong">getRootLength</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.win32.swg#L49" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the length of the root part of the path. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getRootLength</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Path_getRootName"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Path.</span><span class="api-item-title-strong">getRootName</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the root part of the path, null if not found. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getRootName</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Path_hasExtension"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Path.</span><span class="api-item-title-strong">hasExtension</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L159" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the file name contains an extension. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">hasExtension</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Path_isDirectorySeparator"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Path.</span><span class="api-item-title-strong">isDirectorySeparator</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given character is a directory separator. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isDirectorySeparator</span>(c: <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Path_isExtension"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Path.</span><span class="api-item-title-strong">isExtension</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L152" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given file is of the given extension. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isExtension</span>(fullname: <span class="STpe">string</span>, extension: <span class="STpe">string</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Path_isRooted"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Path.</span><span class="api-item-title-strong">isRooted</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Tests if the given path contains a root. A path is considered rooted  if it starts with a directory separator or a drive letter and a colon. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isRooted</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Path_isValidFileName"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Path.</span><span class="api-item-title-strong">isValidFileName</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.win32.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given file name is valid. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isValidFileName</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Path_isValidPathName"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Path.</span><span class="api-item-title-strong">isValidPathName</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.win32.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given path name is valid. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isValidPathName</span>(fullname: <span class="STpe">string</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Path_normalize"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Path.</span><span class="api-item-title-strong">normalize</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\io\path.swg#L210" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Normalize path  <code class="inline-code">\</code> are replaced with <code class="inline-code">/</code> as this is the std norm for paths. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">normalize</span>(fullname: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_CMWC4096"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Random.</span><span class="api-item-title-strong">CMWC4096</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\cmwc.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">q</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">4096</span>] <span class="STpe">u32</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">c</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">i</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td>special invalid value (&gt; 4095) to force the seed on first get. </td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Random_CMWC4096_nextU32"><span class="SCde"><span class="SFct">nextU32</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Random_CMWC4096_seedU32"><span class="SCde"><span class="SFct">seedU32</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_CMWC4096_nextU32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">CMWC4096.</span><span class="api-item-title-strong">nextU32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\cmwc.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nextU32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_CMWC4096_seedU32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">CMWC4096.</span><span class="api-item-title-strong">seedU32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\cmwc.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">seedU32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">u32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_MWC"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Random.</span><span class="api-item-title-strong">MWC</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\mwc.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">w</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">z</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Random_MWC_nextU32"><span class="SCde"><span class="SFct">nextU32</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Random_MWC_seedU32"><span class="SCde"><span class="SFct">seedU32</span>(<span class="SKwd">self</span>, <span class="STpe">u32</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Random_MWC_seedU32"><span class="SCde"><span class="SFct">seedU32</span>(<span class="SKwd">self</span>, <span class="STpe">u32</span>, <span class="STpe">u32</span>)</span></a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_MWC_nextU32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">MWC.</span><span class="api-item-title-strong">nextU32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\mwc.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nextU32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_MWC_seedU32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">MWC.</span><span class="api-item-title-strong">seedU32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\mwc.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">seedU32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">u32</span>)
<span class="SKwd">func</span> <span class="SFct">seedU32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value1: <span class="STpe">u32</span>, value2: <span class="STpe">u32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_Mt64"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Random.</span><span class="api-item-title-strong">Mt64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\mt64.swg#L21" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">mt</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">312</span>] <span class="STpe">u64</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">mti</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Random_Mt64_nextU64"><span class="SCde"><span class="SFct">nextU64</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Random_Mt64_seedU64"><span class="SCde"><span class="SFct">seedU64</span>(<span class="SKwd">self</span>, <span class="SKwd">const</span> [..] <span class="STpe">u64</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Random_Mt64_seedU64"><span class="SCde"><span class="SFct">seedU64</span>(<span class="SKwd">self</span>, <span class="STpe">u64</span>)</span></a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_Mt64_nextU64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Mt64.</span><span class="api-item-title-strong">nextU64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\mt64.swg#L80" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nextU64</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_Mt64_seedU64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Mt64.</span><span class="api-item-title-strong">seedU64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\mt64.swg#L42" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">seedU64</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, seed: <span class="SKwd">const</span> [..] <span class="STpe">u64</span>)
<span class="SKwd">func</span> <span class="SFct">seedU64</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, seed: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_Rng"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Random.</span><span class="api-item-title-strong">Rng</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_Random_Rng">Rng</a></span>(<span class="SCst">T</span> = <span class="SCst">Core</span>.<span class="SCst">Random</span>.<span class="SCst"><a href="#Core_Random_MWC">MWC</a></span>)</span></code>
</div>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">rng</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">seedDone</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Random_Rng_nextBool"><span class="SCde"><span class="SFct">nextBool</span>()</spa</a></td>
<td>Returns a random bool. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextF32"><span class="SCde"><span class="SFct">nextF32</span>(<span class="SKwd">self</span>)</span></a></td>
<td>Range is [0..1[, so 1.0 will never be returned. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextF32"><span class="SCde"><span class="SFct">nextF32</span>(<span class="SKwd">self</span>, <span class="STpe">f32</span>, <span class="STpe">f32</span>)</span></a></td>
<td>Returns a float value in a given range  <code class="inline-code">max</code> is excluded. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextF64"><span class="SCde"><span class="SFct">nextF64</span>(<span class="SKwd">self</span>)</span></a></td>
<td>Range is [0..1[, so 1.0 will never be returned. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextF64"><span class="SCde"><span class="SFct">nextF64</span>(<span class="SKwd">self</span>, <span class="STpe">f64</span>, <span class="STpe">f64</span>)</span></a></td>
<td>Returns a float value in a given range  <code class="inline-code">max</code> is excluded. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextS32"><span class="SCde"><span class="SFct">nextS32</span>(<span class="SKwd">self</span>)</span></a></td>
<td>Returns a signed 32 bits random value. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextS32"><span class="SCde"><span class="SFct">nextS32</span>(<span class="SKwd">self</span>, <span class="STpe">s32</span>, <span class="STpe">s32</span>)</span></a></td>
<td>Returns a signed random value in a given range  <code class="inline-code">max</code> is excluded. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextS64"><span class="SCde"><span class="SFct">nextS64</span>(<span class="SKwd">self</span>)</span></a></td>
<td>Returns a signed 64 bits random value. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextS64"><span class="SCde"><span class="SFct">nextS64</span>(<span class="SKwd">self</span>, <span class="STpe">s64</span>, <span class="STpe">s64</span>)</span></a></td>
<td>Returns a signed random value in a given range  <code class="inline-code">max</code> is excluded. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextU32"><span class="SCde"><span class="SFct">nextU32</span>(<span class="SKwd">self</span>)</span></a></td>
<td>Returns an unsigned 32 bits random value. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextU32"><span class="SCde"><span class="SFct">nextU32</span>(<span class="SKwd">self</span>, <span class="STpe">u32</span>, <span class="STpe">u32</span>)</span></a></td>
<td>Returns an unsigned random value in a given range  <code class="inline-code">max</code> is excluded. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextU64"><span class="SCde"><span class="SFct">nextU64</span>(<span class="SKwd">self</span>)</span></a></td>
<td>Returns an unsigned 64 bits random value. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_nextU64"><span class="SCde"><span class="SFct">nextU64</span>(<span class="SKwd">self</span>, <span class="STpe">u64</span>, <span class="STpe">u64</span>)</span></a></td>
<td>Returns an unsigned random value in a given range  <code class="inline-code">max</code> is excluded. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_seedNow"><span class="SCde"><span class="SFct">seedNow</span>()</spa</a></td>
<td>Seed the rng with the current time. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_seedU32"><span class="SCde"><span class="SFct">seedU32</span>()</spa</a></td>
<td>Seed random generator with a 32 bits value. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_seedU64"><span class="SCde"><span class="SFct">seedU64</span>()</spa</a></td>
<td>Seed random generator with a 64 bits value. </td>
</tr>
<tr>
<td><a href="#Core_Random_Rng_shuffle"><span class="SCde"><span class="SFct">shuffle</span>()</spa</a></td>
<td>Randomly change the order of a slice. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_Rng_nextBool"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rng.</span><span class="api-item-title-strong">nextBool</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L159" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a random bool. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nextBool</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_Rng_nextF32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rng.</span><span class="api-item-title-strong">nextF32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L82" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Range is [0..1[, so 1.0 will never be returned. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nextF32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>Returns a float value in a given range  <code class="inline-code">max</code> is excluded. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nextF32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, min: <span class="STpe">f32</span>, max: <span class="STpe">f32</span>)-&gt;<span class="STpe">f32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_Rng_nextF64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rng.</span><span class="api-item-title-strong">nextF64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L91" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Range is [0..1[, so 1.0 will never be returned. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nextF64</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>Returns a float value in a given range  <code class="inline-code">max</code> is excluded. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nextF64</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, min: <span class="STpe">f64</span>, max: <span class="STpe">f64</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_Rng_nextS32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rng.</span><span class="api-item-title-strong">nextS32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L68" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a signed 32 bits random value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nextS32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">s32</span></span></code>
</div>
<p>Returns a signed random value in a given range  <code class="inline-code">max</code> is excluded. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nextS32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, min: <span class="STpe">s32</span>, max: <span class="STpe">s32</span>)-&gt;<span class="STpe">s32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_Rng_nextS64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rng.</span><span class="api-item-title-strong">nextS64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L75" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a signed 64 bits random value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nextS64</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">s64</span></span></code>
</div>
<p>Returns a signed random value in a given range  <code class="inline-code">max</code> is excluded. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nextS64</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, min: <span class="STpe">s64</span>, max: <span class="STpe">s64</span>)-&gt;<span class="STpe">s64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_Rng_nextU32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rng.</span><span class="api-item-title-strong">nextU32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns an unsigned 32 bits random value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nextU32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>Returns an unsigned random value in a given range  <code class="inline-code">max</code> is excluded. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nextU32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, min: <span class="STpe">u32</span>, max: <span class="STpe">u32</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_Rng_nextU64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rng.</span><span class="api-item-title-strong">nextU64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L49" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns an unsigned 64 bits random value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nextU64</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>Returns an unsigned random value in a given range  <code class="inline-code">max</code> is excluded. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nextU64</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, min: <span class="STpe">u64</span>, max: <span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_Rng_seedNow"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rng.</span><span class="api-item-title-strong">seedNow</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L61" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Seed the rng with the current time. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">seedNow</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_Rng_seedU32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rng.</span><span class="api-item-title-strong">seedU32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Seed random generator with a 32 bits value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">seedU32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, seed: <span class="STpe">u32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_Rng_seedU64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rng.</span><span class="api-item-title-strong">seedU64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Seed random generator with a 64 bits value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">seedU64</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, seed: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_Rng_shuffle"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Rng.</span><span class="api-item-title-strong">shuffle</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\rng.swg#L165" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Randomly change the order of a slice. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">V</span>) <span class="SFct">shuffle</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, slice: [..] <span class="SCst">V</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Random_shared"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Random.</span><span class="api-item-title-strong">shared</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\rand\random.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the default per thread random generator. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">shared</span>()-&gt;*<span class="SCst">Core</span>.<span class="SCst">Random</span>.<span class="SCst"><a href="#Core_Random_Rng">Rng</a></span>'(<span class="SCst">Core</span>.<span class="SCst">Random</span>.<span class="SCst"><a href="#Core_Random_MWC">MWC</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_canCopy"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">canCopy</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L202" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">canCopy</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_copy"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">copy</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L460" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">copy</span>(dst: *<span class="STpe">void</span>, src: *<span class="STpe">void</span>, type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_crcToType"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">crcToType</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L536" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a crc to a registered typeinfo. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">crcToType</span>(crc: <span class="STpe">u32</span>)-&gt;<span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_getAttribute"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">getAttribute</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L317" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the given associated <code class="inline-code">attribute</code> to <code class="inline-code">type</code> or null. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getAttribute</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, attribute: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">Attribute</span></span></code>
</div>
<p>Returns the given associated <code class="inline-code">attribute</code> to <code class="inline-code">value</code> or null. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getAttribute</span>(value: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>, attribute: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">Attribute</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_getAttributeValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">getAttributeValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L240" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the given attribute value, or null. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getAttributeValue</span>(attribute: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">Attribute</span>, value: <span class="STpe">string</span>)-&gt;<span class="STpe">any</span></span></code>
</div>
<p>Returns the given attribute value, or null. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getAttributeValue</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, attribute: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, value: <span class="STpe">string</span>)-&gt;<span class="STpe">any</span></span></code>
</div>
<p>Returns the given attribute value, or null. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getAttributeValue</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>, attribute: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, value: <span class="STpe">string</span>)-&gt;<span class="STpe">any</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_getAttributes"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">getAttributes</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L283" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the given associated attributes to <code class="inline-code">type</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getAttributes</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, attribute: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">Attribute</span>)</span></code>
</div>
<p>Returns the given associated attributes to <code class="inline-code">value</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getAttributes</span>(value: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>, attribute: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">Attribute</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_getEnumName"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">getEnumName</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L374" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the enum value name corresponding to the value pointed by <code class="inline-code">valueAddr</code>  Can have multiple names if the enum is tagged with #<a href="swag.runtime.php#Swag_EnumFlags">Swag.EnumFlags</a>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getEnumName</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, valueAddr: <span class="SKwd">const</span> *<span class="STpe">void</span>, fullname = <span class="SKwd">true</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_getEnumValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">getEnumValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L357" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get information about a specific value in a given enum  Returns null if the value does not exist. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getEnumValue</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, name: <span class="STpe">string</span>)-&gt;<span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeValue</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_getField"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">getField</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L129" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get information about a specific field in a given struct  Returns null if the field does not exist. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getField</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, name: <span class="STpe">string</span>)-&gt;<span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeValue</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_getFieldValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">getFieldValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L145" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get a field value with a given runtime type. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getFieldValue</span>(dest: *<span class="STpe">void</span>, type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>, src: *<span class="STpe">void</span>, hardCast: <span class="STpe">bool</span> = <span class="SKwd">false</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_getMethod"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">getMethod</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L112" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get information about a specific mtd in a given struct  Returns null if the mtd does not exist. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getMethod</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, name: <span class="STpe">string</span>)-&gt;<span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeValue</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_hasAttribute"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">hasAttribute</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L350" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given <code class="inline-code">type</code> has the associated <code class="inline-code">attribute</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">hasAttribute</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, attribute: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>Returns true if the given <code class="inline-code">value</code> has the associated <code class="inline-code">attribute</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">hasAttribute</span>(value: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>, attribute: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_hasDrop"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">hasDrop</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L199" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">hasDrop</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_hasInterface"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">hasInterface</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L206" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the interface <code class="inline-code">itf</code> is implemented in the given structure type. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">hasInterface</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, itf: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_hasMethod"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">hasMethod</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L195" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Helpers functions to know if a struct has a special function. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">hasMethod</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, name: <span class="STpe">string</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_hasPostCopy"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">hasPostCopy</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L201" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">hasPostCopy</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_hasPostMove"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">hasPostMove</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L200" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">hasPostMove</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isAny"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isAny</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L49" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isAny</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isArray"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isArray</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isArray</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isBool"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isBool</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L58" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isBool</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isEnum"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isEnum</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isEnum</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isEnumFlags"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isEnumFlags</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isEnumFlags</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isFloat"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isFloat</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isFloat</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="SCst">Swag</span>.<span class="SCst">TypeInfoFlags</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isGeneric"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isGeneric</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isGeneric</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="SCst">Swag</span>.<span class="SCst">TypeInfoFlags</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isInteger"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isInteger</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isInteger</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="SCst">Swag</span>.<span class="SCst">TypeInfoFlags</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isInterface"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isInterface</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isInterface</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isNative"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isNative</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L9" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isNative</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isPointer"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isPointer</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L10" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isPointer</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isPointerArithmetic"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isPointerArithmetic</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L24" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isPointerArithmetic</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="SCst">Swag</span>.<span class="SCst">TypeInfoFlags</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isPointerRef"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isPointerRef</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isPointerRef</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="SCst">Swag</span>.<span class="SCst">TypeInfoFlags</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isRune"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isRune</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L40" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isRune</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isSimpleNative"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isSimpleNative</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isSimpleNative</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isSlice"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isSlice</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isSlice</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isString"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isString</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L67" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isString</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isStruct"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isStruct</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isStruct</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isStructOfName"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isStructOfName</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L78" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this is a struct of the given name. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isStructOfName</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, name: <span class="STpe">string</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isTuple"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isTuple</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L21" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isTuple</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="SCst">Swag</span>.<span class="SCst">TypeInfoFlags</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isType"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isType</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isType</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="SCst">Swag</span>.<span class="SCst">TypeInfoFlags</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_isTypeAlias"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">isTypeAlias</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isTypeAlias</span>(t: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_makeConcreteAlias"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">makeConcreteAlias</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L88" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>In case this is a type typealias, need to go deep inside it to find the right type. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">makeConcreteAlias</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_makeConcreteEnum"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">makeConcreteEnum</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L101" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform an enum type to its underling real native type. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">makeConcreteEnum</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_maxSizeOf"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">maxSizeOf</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L443" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the maximum sizeof a bunch of <code class="inline-code">typeinfo</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">maxSizeOf</span>(v: <span class="SKwd">const</span> [..] <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_nameToType"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">nameToType</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L546" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a crc to a registered typeinfo. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nameToType</span>(name: <span class="STpe">string</span>)-&gt;<span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_orFlags"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">orFlags</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L452" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Make an union of flags of all types. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">orFlags</span>(v: <span class="SKwd">const</span> [..] <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;<span class="SCst">Swag</span>.<span class="SCst">TypeInfoFlags</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_roomInArray"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">roomInArray</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L473" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Used to add an element in a <code class="inline-code">Core.Array</code> without knowing the type of the element at compile time  but knowing it at runtime (valueType). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">roomInArray</span>(addr: *<span class="STpe">void</span>, valueType: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;*<span class="STpe">void</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Reflection_setFieldValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Reflection.</span><span class="api-item-title-strong">setFieldValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\reflection.swg#L170" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set a field value with a given runtime type. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setFieldValue</span>(dest: *<span class="STpe">void</span>, type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>, src: <span class="SKwd">const</span> *<span class="STpe">void</span>, hardCast: <span class="STpe">bool</span> = <span class="SKwd">false</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Alias"><span class="api-item-title-kind">attr</span> <span class="api-item-title-light">Serialization.</span><span class="api-item-title-strong">Alias</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Accept this other name for the field. </p>
<div class="addinfos"><b>Usage</b>: struct-var multi 
</div>
<div class="code-block"><code><span class="SCde"><span class="SKwd">attr</span> <span class="SCst"><a href="#Core_Serialization_Alias">Alias</a></span>(name: <span class="STpe">string</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Serialization.</span><span class="api-item-title-strong">Decoder</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L39" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_Serialization_Decoder">Decoder</a></span>(<span class="SCst">T</span>)</span></code>
</div>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">serializer</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">flags</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_DecoderFlags">DecoderFlags</a></span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Serialization_Decoder_end"><span class="SCde"><span class="SFct">end</span>()</spa</a></td>
<td>Finish reading. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Decoder_readAll"><span class="SCde"><span class="SFct">readAll</span>()</spa</a></td>
<td>Read a full struct. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Decoder_readTypeValue"><span class="SCde"><span class="SFct">readTypeValue</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Decoder_readValue"><span class="SCde"><span class="SFct">readValue</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Decoder_start"><span class="SCde"><span class="SFct">start</span>()</spa</a></td>
<td>Start reading. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_beginField"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">beginField</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L271" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginField</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, val: <span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_beginSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">beginSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L285" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginSection</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, kind: <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_SectionKind">SectionKind</a></span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_end"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">end</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L266" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">end</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_endField"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">endField</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L279" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endField</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_endSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">endSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L290" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endSection</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_getVersion"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">getVersion</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L295" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getVersion</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_read"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">read</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L300" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">read</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, data: *<span class="STpe">void</span>, dataType: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_readBool"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readBool</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L328" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readBool</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_readBufferU8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readBufferU8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L305" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readBufferU8</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, count: <span class="STpe">u64</span>)-&gt;*<span class="STpe">u8</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_readF32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readF32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L337" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readF32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f32</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_readF64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readF64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L338" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readF64</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f64</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_readS16"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readS16</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L330" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readS16</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">s16</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_readS32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readS32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L331" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readS32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">s32</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_readS64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readS64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L332" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readS64</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">s64</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_readS8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readS8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L329" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readS8</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">s8</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_readU16"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readU16</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L334" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readU16</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u16</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_readU32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readU32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L335" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readU32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u32</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_readU64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readU64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L336" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readU64</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_readU8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readU8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L333" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readU8</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u8</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_IDecoder_start"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">start</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L260" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">start</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, input: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_end"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Decoder.</span><span class="api-item-title-strong">end</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L236" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Finish reading. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">end</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_readAll"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Decoder.</span><span class="api-item-title-strong">readAll</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L242" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Read a full struct. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">TR</span>) <span class="SFct">readAll</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, input: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;*<span class="SCst">TR</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_readTypeValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Decoder.</span><span class="api-item-title-strong">readTypeValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L47" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readTypeValue</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, typeVal: <span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>, data: ^<span class="STpe">void</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_readValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Decoder.</span><span class="api-item-title-strong">readValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L54" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readValue</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, data: ^<span class="STpe">void</span>, dataType: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Decoder_start"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Decoder.</span><span class="api-item-title-strong">start</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L229" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Start reading. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">start</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, input: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_DecoderFlags"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Serialization.</span><span class="api-item-title-strong">DecoderFlags</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L33" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Zero</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">IgnoreStructFieldError</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Serialization.</span><span class="api-item-title-strong">Encoder</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L38" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_Serialization_Encoder">Encoder</a></span>(<span class="SCst">T</span>)</span></code>
</div>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">serializer</span></td>
<td class="code-type"><span class="SCst">T</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">errorIfUnknown</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td>If true, raise an error if a type cannot be saved, and just ignore if false. </td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Serialization_Encoder_end"><span class="SCde"><span class="SFct">end</span>()</spa</a></td>
<td>End serialization. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Encoder_start"><span class="SCde"><span class="SFct">start</span>()</spa</a></td>
<td>Start serialization. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Encoder_writeAll"><span class="SCde"><span class="SFct">writeAll</span>()</spa</a></td>
<td>Write a full struct. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Encoder_writeTypeValue"><span class="SCde"><span class="SFct">writeTypeValue</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Encoder_writeValue"><span class="SCde"><span class="SFct">writeValue</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_beginField"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">beginField</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L262" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginField</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, val: <span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_beginSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">beginSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L274" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginSection</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, kind: <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_SectionKind">SectionKind</a></span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_end"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">end</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L257" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>End serialization. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">end</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_endField"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">endField</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L268" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endField</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_endSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">endSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L279" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endSection</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_start"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">start</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L250" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Start serialization. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">start</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, result: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_write"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">write</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L284" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">write</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, data: <span class="SKwd">const</span> ^<span class="STpe">void</span>, type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_writeBool"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeBool</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L307" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeBool</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">bool</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_writeBufferU8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeBufferU8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L289" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeBufferU8</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, data: <span class="SKwd">const</span> ^<span class="STpe">u8</span>, count: <span class="STpe">u64</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_writeF32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeF32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L316" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeF32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_writeF64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeF64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L317" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeF64</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">f64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_writeS16"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeS16</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L309" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeS16</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">s16</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_writeS32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeS32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L310" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeS32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">s32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_writeS64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeS64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L311" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeS64</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">s64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_writeS8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeS8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L308" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeS8</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">s8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_writeU16"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeU16</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L313" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeU16</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">u16</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_writeU32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeU32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L314" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeU32</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">u32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_writeU64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeU64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L315" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeU64</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_IEncoder_writeU8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeU8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L312" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeU8</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_end"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Encoder.</span><span class="api-item-title-strong">end</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L54" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>End serialization. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">end</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_start"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Encoder.</span><span class="api-item-title-strong">start</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L47" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Start serialization. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">start</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, result: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_writeAll"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Encoder.</span><span class="api-item-title-strong">writeAll</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L238" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Write a full struct. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeAll</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, result: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>, value: <span class="STpe">any</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_writeTypeValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Encoder.</span><span class="api-item-title-strong">writeTypeValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L59" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeTypeValue</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, typeVal: <span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>, data: <span class="SKwd">const</span> ^<span class="STpe">void</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Encoder_writeValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Encoder.</span><span class="api-item-title-strong">writeValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L66" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeValue</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, data: <span class="SKwd">const</span> ^<span class="STpe">void</span>, dataType: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Final"><span class="api-item-title-kind">attr</span> <span class="api-item-title-light">Serialization.</span><span class="api-item-title-strong">Final</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>The struct does not need versionning. </p>
<div class="addinfos"><b>Usage</b>: struct 
</div>
<div class="code-block"><code><span class="SCde"><span class="SKwd">attr</span> <span class="SCst"><a href="#Core_Serialization_Final">Final</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder"><span class="api-item-title-kind">interface</span> <span class="api-item-title-light">Serialization.</span><span class="api-item-title-strong">IDecoder</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">start</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>, <span class="SKwd">const</span> [..] <span class="STpe">u8</span>) <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">end</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>) <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">beginField</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>, <span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">endField</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>) <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">beginSection</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>, <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_SectionKind">SectionKind</a></span>) <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">endSection</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>) <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">getVersion</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>)-&gt;<span class="STpe">u32</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">read</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>, *<span class="STpe">void</span>, <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>) <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">readBufferU8</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>, <span class="STpe">u64</span>)-&gt;*<span class="STpe">u8</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">readBool</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">readS8</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>)-&gt;<span class="STpe">s8</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">readS16</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>)-&gt;<span class="STpe">s16</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">readS32</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>)-&gt;<span class="STpe">s32</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">readS64</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>)-&gt;<span class="STpe">s64</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">readU8</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>)-&gt;<span class="STpe">u8</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">readU16</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>)-&gt;<span class="STpe">u16</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">readU32</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>)-&gt;<span class="STpe">u32</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">readU64</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>)-&gt;<span class="STpe">u64</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">readF32</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>)-&gt;<span class="STpe">f32</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">readF64</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>)-&gt;<span class="STpe">f64</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_beginField"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">beginField</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L10" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginField</span>(<span class="SKwd">self</span>, val: <span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_beginSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">beginSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginSection</span>(<span class="SKwd">self</span>, kind: <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_SectionKind">SectionKind</a></span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_end"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">end</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L8" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">end</span>(<span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_endField"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">endField</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endField</span>(<span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_endSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">endSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endSection</span>(<span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_getVersion"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">getVersion</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getVersion</span>(<span class="SKwd">self</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_read"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">read</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">read</span>(<span class="SKwd">self</span>, data: *<span class="STpe">void</span>, dataType: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_readBool"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readBool</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readBool</span>(<span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_readBufferU8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readBufferU8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readBufferU8</span>(<span class="SKwd">self</span>, count: <span class="STpe">u64</span>)-&gt;*<span class="STpe">u8</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_readF32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readF32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readF32</span>(<span class="SKwd">self</span>)-&gt;<span class="STpe">f32</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_readF64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readF64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readF64</span>(<span class="SKwd">self</span>)-&gt;<span class="STpe">f64</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_readS16"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readS16</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L21" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readS16</span>(<span class="SKwd">self</span>)-&gt;<span class="STpe">s16</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_readS32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readS32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readS32</span>(<span class="SKwd">self</span>)-&gt;<span class="STpe">s32</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_readS64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readS64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readS64</span>(<span class="SKwd">self</span>)-&gt;<span class="STpe">s64</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_readS8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readS8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readS8</span>(<span class="SKwd">self</span>)-&gt;<span class="STpe">s8</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_readU16"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readU16</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readU16</span>(<span class="SKwd">self</span>)-&gt;<span class="STpe">u16</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_readU32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readU32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readU32</span>(<span class="SKwd">self</span>)-&gt;<span class="STpe">u32</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_readU64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readU64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readU64</span>(<span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_readU8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">readU8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L24" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readU8</span>(<span class="SKwd">self</span>)-&gt;<span class="STpe">u8</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IDecoder_start"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IDecoder.</span><span class="api-item-title-strong">start</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\decoder.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">start</span>(<span class="SKwd">self</span>, input: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder"><span class="api-item-title-kind">interface</span> <span class="api-item-title-light">Serialization.</span><span class="api-item-title-strong">IEncoder</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">start</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>, *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>) <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">end</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>) <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">beginField</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>, <span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>) <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">endField</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>) <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">beginSection</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>, <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_SectionKind">SectionKind</a></span>) <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">endSection</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>) <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">write</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>, <span class="SKwd">const</span> ^<span class="STpe">void</span>, <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>) <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">writeBufferU8</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>, <span class="SKwd">const</span> ^<span class="STpe">u8</span>, <span class="STpe">u64</span>) <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">writeBool</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>, <span class="STpe">bool</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">writeS8</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>, <span class="STpe">s8</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">writeS16</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>, <span class="STpe">s16</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">writeS32</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>, <span class="STpe">s32</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">writeS64</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>, <span class="STpe">s64</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">writeU8</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>, <span class="STpe">u8</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">writeU16</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>, <span class="STpe">u16</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">writeU32</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>, <span class="STpe">u32</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">writeU64</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>, <span class="STpe">u64</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">writeF32</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>, <span class="STpe">f32</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">writeF64</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>, <span class="STpe">f64</span>)</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_beginField"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">beginField</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginField</span>(<span class="SKwd">self</span>, val: <span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_beginSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">beginSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginSection</span>(<span class="SKwd">self</span>, kind: <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_SectionKind">SectionKind</a></span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_end"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">end</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">end</span>(<span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_endField"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">endField</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endField</span>(<span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_endSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">endSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endSection</span>(<span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_start"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">start</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">start</span>(<span class="SKwd">self</span>, result: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_write"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">write</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">write</span>(<span class="SKwd">self</span>, data: <span class="SKwd">const</span> ^<span class="STpe">void</span>, type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_writeBool"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeBool</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeBool</span>(<span class="SKwd">self</span>, value: <span class="STpe">bool</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_writeBufferU8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeBufferU8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeBufferU8</span>(<span class="SKwd">self</span>, data: <span class="SKwd">const</span> ^<span class="STpe">u8</span>, count: <span class="STpe">u64</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_writeF32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeF32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeF32</span>(<span class="SKwd">self</span>, value: <span class="STpe">f32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_writeF64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeF64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeF64</span>(<span class="SKwd">self</span>, value: <span class="STpe">f64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_writeS16"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeS16</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeS16</span>(<span class="SKwd">self</span>, value: <span class="STpe">s16</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_writeS32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeS32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeS32</span>(<span class="SKwd">self</span>, value: <span class="STpe">s32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_writeS64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeS64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeS64</span>(<span class="SKwd">self</span>, value: <span class="STpe">s64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_writeS8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeS8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeS8</span>(<span class="SKwd">self</span>, value: <span class="STpe">s8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_writeU16"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeU16</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeU16</span>(<span class="SKwd">self</span>, value: <span class="STpe">u16</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_writeU32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeU32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L32" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeU32</span>(<span class="SKwd">self</span>, value: <span class="STpe">u32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_writeU64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeU64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L33" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeU64</span>(<span class="SKwd">self</span>, value: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_IEncoder_writeU8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IEncoder.</span><span class="api-item-title-strong">writeU8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeU8</span>(<span class="SKwd">self</span>, value: <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_ISerialize"><span class="api-item-title-kind">interface</span> <span class="api-item-title-light">Serialization.</span><span class="api-item-title-strong">ISerialize</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">read</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_ISerialize">ISerialize</a></span>, <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">write</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_ISerialize">ISerialize</a></span>, <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">readElement</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_ISerialize">ISerialize</a></span>, <span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>, *<span class="STpe">void</span>, <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">writeElement</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_ISerialize">ISerialize</a></span>, <span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>, <span class="SKwd">const</span> *<span class="STpe">void</span>, <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">postSerialize</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_ISerialize">ISerialize</a></span>, *<span class="STpe">void</span>, <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>) <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_ISerialize_postSerialize"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ISerialize.</span><span class="api-item-title-strong">postSerialize</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">postSerialize</span>(<span class="SKwd">self</span>, data: *<span class="STpe">void</span>, decoder: <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_ISerialize_read"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ISerialize.</span><span class="api-item-title-strong">read</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">read</span>(<span class="SKwd">self</span>, decoder: <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_ISerialize_readElement"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ISerialize.</span><span class="api-item-title-strong">readElement</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">readElement</span>(<span class="SKwd">self</span>, type: <span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>, data: *<span class="STpe">void</span>, decoder: <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_ISerialize_write"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ISerialize.</span><span class="api-item-title-strong">write</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L28" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">write</span>(<span class="SKwd">self</span>, decoder: <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_ISerialize_writeElement"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ISerialize.</span><span class="api-item-title-strong">writeElement</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeElement</span>(<span class="SKwd">self</span>, type: <span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>, data: <span class="SKwd">const</span> *<span class="STpe">void</span>, decoder: <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_NoSerialize"><span class="api-item-title-kind">attr</span> <span class="api-item-title-light">Serialization.</span><span class="api-item-title-strong">NoSerialize</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Do not serialize a struct or a field. </p>
<div class="addinfos"><b>Usage</b>: struct struct-var 
</div>
<div class="code-block"><code><span class="SCde"><span class="SKwd">attr</span> <span class="SCst"><a href="#Core_Serialization_NoSerialize">NoSerialize</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_PodFinal"><span class="api-item-title-kind">attr</span> <span class="api-item-title-light">Serialization.</span><span class="api-item-title-strong">PodFinal</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>The struct does not need versionning an can be serialized in place. </p>
<div class="addinfos"><b>Usage</b>: struct 
</div>
<div class="code-block"><code><span class="SCde"><span class="SKwd">attr</span> <span class="SCst"><a href="#Core_Serialization_PodFinal">PodFinal</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Read.</span><span class="api-item-title-strong">JSon</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">stream</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ByteStream">ByteStream</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">line</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">col</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">propName</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Serialization_Read_JSon_beginElement"><span class="SCde"><span class="SFct">beginElement</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_beginRoot"><span class="SCde"><span class="SFct">beginRoot</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_beginSection"><span class="SCde"><span class="SFct">beginSection</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_beginSequence"><span class="SCde"><span class="SFct">beginSequence</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_beginStruct"><span class="SCde"><span class="SFct">beginStruct</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_beginValue"><span class="SCde"><span class="SFct">beginValue</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_endElement"><span class="SCde"><span class="SFct">endElement</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_endRoot"><span class="SCde"><span class="SFct">endRoot</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_endSection"><span class="SCde"><span class="SFct">endSection</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_endSequence"><span class="SCde"><span class="SFct">endSequence</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_endStruct"><span class="SCde"><span class="SFct">endStruct</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_endValue"><span class="SCde"><span class="SFct">endValue</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_getVersion"><span class="SCde"><span class="SFct">getVersion</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_readNative"><span class="SCde"><span class="SFct">readNative</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_startRead"><span class="SCde"><span class="SFct">startRead</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_toNextSequenceElement"><span class="SCde"><span class="SFct">toNextSequenceElement</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_JSon_zapBlanks"><span class="SCde"><span class="SFct">zapBlanks</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon_beginElement"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">beginElement</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L103" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginElement</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, val: <span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon_beginRoot"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">beginRoot</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L60" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginRoot</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon_beginSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">beginSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L76" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginSection</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, _kind: <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_SectionKind">SectionKind</a></span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon_beginSequence"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">beginSequence</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginSequence</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, _typeElem: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, _data: *<span class="STpe">u8</span>, _countElem: *<span class="STpe">u64</span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon_beginStruct"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">beginStruct</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L92" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginStruct</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, _structType: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, _structData: <span class="SKwd">const</span> *<span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon_beginValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">beginValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L138" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginValue</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon_endElement"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">endElement</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L133" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endElement</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon_endRoot"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">endRoot</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L68" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endRoot</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon_endSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">endSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L84" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endSection</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon_endSequence"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">endSequence</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L45" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endSequence</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon_endStruct"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">endStruct</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L98" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endStruct</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon_endValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">endValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L143" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endValue</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon_getVersion"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">getVersion</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L152" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getVersion</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon_readNative"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">readNative</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L161" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">NT</span>) <span class="SFct">readNative</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">NT</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon_startRead"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">startRead</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">startRead</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, input: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon_toNextSequenceElement"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">toNextSequenceElement</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L53" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toNextSequenceElement</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, _countElem: *<span class="STpe">u64</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_JSon_zapBlanks"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">zapBlanks</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\json.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">zapBlanks</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBin"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Read.</span><span class="api-item-title-strong">TagBin</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">stream</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ByteStream">ByteStream</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">options</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst">Read</span>.<span class="SCst"><a href="#Core_Serialization_Read_TagBinOptions">TagBinOptions</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">freeSections</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ArrayPtr">ArrayPtr</a></span>'(<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst">Read</span>.<span class="SCst"><a href="#Core_Serialization_Write_TagBinSection">TagBinSection</a></span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">sections</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ArrayPtr">ArrayPtr</a></span>'(<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst">Read</span>.<span class="SCst"><a href="#Core_Serialization_Write_TagBinSection">TagBinSection</a></span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">convertNextNative</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfoNative</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">convertValToArray</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">convertArrayToVal</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
</table>
<div class="code-block"><code><span class="SCde">Binary serializer with forward/backward compatibility.
Changes that are supported from V to V+1 are :</span></code>
</div>
<div class="code-block"><code><span class="SCde">* Add a new field. The new field will stay at the default value.
* Remove a field. It will just be ignored.
* Reorder of fields, as long as their name/type are the same.
* Rename a field with 'Serialization.Alias'.</span></code>
</div>
<div class="code-block"><code><span class="SCde">Supported type changes are :
* Change the size of a static array.
* Convert a static array to a dynamic array, and vice versa.
* Conversion from integer/float/rune/bool to integer/float/rune/bool.
* Conversion from single value to array/Core.Array, and vice versa.</span></code>
</div>
<div class="code-block"><code><span class="SCde">Supported attributes are :</span></code>
</div>
<div class="code-block"><code><span class="SCde">* 'Serialisation.Version'. If version is specified, then loading will not have versioning if versions are the same
* 'Serialization.Alias'. To rename a field. Multiple aliases are supported.
* 'Serialization.Final'. The struct will be loaded/saved without versioning (faster and lower serialization size)
* 'Serialization.PodFinal'. The struct will be loaded/saved in place without versioning</span></code>
</div>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Serialization_Read_TagBin_beginElement"><span class="SCde"><span class="SFct">beginElement</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_beginRoot"><span class="SCde"><span class="SFct">beginRoot</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_beginSection"><span class="SCde"><span class="SFct">beginSection</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_beginSequence"><span class="SCde"><span class="SFct">beginSequence</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_beginStruct"><span class="SCde"><span class="SFct">beginStruct</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_beginValue"><span class="SCde"><span class="SFct">beginValue</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_endElement"><span class="SCde"><span class="SFct">endElement</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_endRoot"><span class="SCde"><span class="SFct">endRoot</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_endSection"><span class="SCde"><span class="SFct">endSection</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_endSequence"><span class="SCde"><span class="SFct">endSequence</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_endStruct"><span class="SCde"><span class="SFct">endStruct</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_endValue"><span class="SCde"><span class="SFct">endValue</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_getVersion"><span class="SCde"><span class="SFct">getVersion</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_readNative"><span class="SCde"><span class="SFct">readNative</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_startRead"><span class="SCde"><span class="SFct">startRead</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Read_TagBin_toNextSequenceElement"><span class="SCde"><span class="SFct">toNextSequenceElement</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBin_beginElement"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">beginElement</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L328" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginElement</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, val: <span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBin_beginRoot"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">beginRoot</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L217" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginRoot</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBin_beginSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">beginSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L229" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginSection</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, kind: <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_SectionKind">SectionKind</a></span>, skipFat = <span class="SKwd">false</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBin_beginSequence"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">beginSequence</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L418" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginSequence</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, typeElem: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, data: *<span class="STpe">u8</span>, countElem: *<span class="STpe">u64</span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBin_beginStruct"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">beginStruct</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L285" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginStruct</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, structType: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, _structData: <span class="SKwd">const</span> *<span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBin_beginValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">beginValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L409" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginValue</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBin_endElement"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">endElement</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L403" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endElement</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBin_endRoot"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">endRoot</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L225" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endRoot</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBin_endSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">endSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L272" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endSection</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBin_endSequence"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">endSequence</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L482" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endSequence</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBin_endStruct"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">endStruct</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L323" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endStruct</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBin_endValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">endValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L414" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endValue</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBin_getVersion"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">getVersion</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L495" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getVersion</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBin_readNative"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">readNative</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L506" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">NT</span>) <span class="SFct">readNative</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">NT</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBin_startRead"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">startRead</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L212" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">startRead</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, input: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBin_toNextSequenceElement"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">toNextSequenceElement</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L487" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toNextSequenceElement</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, countElem: *<span class="STpe">u64</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBinOptions"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Read.</span><span class="api-item-title-strong">TagBinOptions</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L47" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">tryForward</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td>Accept to try to read a newest version, otherwise error. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Read_TagBinSection"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Read.</span><span class="api-item-title-strong">TagBinSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\read\tagbin.swg#L38" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">mapSeek</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_HashTable">HashTable</a></span>'(<span class="STpe">u32</span>, <span class="STpe">u64</span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">afterFatSeek</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">version</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">kind</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_SectionKind">SectionKind</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">skipFat</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_SectionKind"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Serialization.</span><span class="api-item-title-strong">SectionKind</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\encoder.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Raw</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Unordered</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Ordered</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Serializer"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Serialization.</span><span class="api-item-title-strong">Serializer</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">encode</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">decode</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">isWrite</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Serialization_Serializer_beginSection"><span class="SCde"><span class="SFct">beginSection</span>()</spa</a></td>
<td>Start a new section. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Serializer_end"><span class="SCde"><span class="SFct">end</span>()</spa</a></td>
<td>End encoding/decoding. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Serializer_endSection"><span class="SCde"><span class="SFct">endSection</span>()</spa</a></td>
<td>End the previous section. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Serializer_isReading"><span class="SCde"><span class="SFct">isReading</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Serializer_isWriting"><span class="SCde"><span class="SFct">isWriting</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Serializer_serialize"><span class="SCde"><span class="SFct">serialize</span>(<span class="SKwd">self</span>, <span class="STpe">string</span>, *<span class="SCst">MT</span>)</span></a></td>
<td>Serialize one value. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Serializer_serialize"><span class="SCde"><span class="SFct">serialize</span>(<span class="SKwd">self</span>, <span class="STpe">string</span>, <span class="STpe">u32</span>, *<span class="SCst">MT</span>)</span></a></td>
<td>Serialize one value. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Serializer_startRead"><span class="SCde"><span class="SFct">startRead</span>()</spa</a></td>
<td>Start decoding. </td>
</tr>
<tr>
<td><a href="#Core_Serialization_Serializer_startWrite"><span class="SCde"><span class="SFct">startWrite</span>()</spa</a></td>
<td>Start encoding. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Serializer_beginSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Serializer.</span><span class="api-item-title-strong">beginSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L74" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Start a new section. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginSection</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, kind = <span class="SCst"><a href="#Core_Serialization_SectionKind">SectionKind</a></span>.<span class="SCst">Unordered</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Serializer_end"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Serializer.</span><span class="api-item-title-strong">end</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L65" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>End encoding/decoding. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">end</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Serializer_endSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Serializer.</span><span class="api-item-title-strong">endSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L83" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>End the previous section. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endSection</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Serializer_isReading"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Serializer.</span><span class="api-item-title-strong">isReading</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L46" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isReading</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Serializer_isWriting"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Serializer.</span><span class="api-item-title-strong">isWriting</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L44" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isWriting</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Serializer_serialize"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Serializer.</span><span class="api-item-title-strong">serialize</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L165" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Serialize one value. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span>(<span class="SCst">MT</span>) <span class="SFct">serialize</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, name: <span class="STpe">string</span>, res: *<span class="SCst">MT</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>Serialize one value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">MT</span>) <span class="SFct">serialize</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, name: <span class="STpe">string</span>, crc32: <span class="STpe">u32</span>, res: *<span class="SCst">MT</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Serializer_startRead"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Serializer.</span><span class="api-item-title-strong">startRead</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L57" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Start decoding. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">startRead</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, decoder: <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IDecoder">IDecoder</a></span>, input: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Serializer_startWrite"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Serializer.</span><span class="api-item-title-strong">startWrite</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L49" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Start encoding. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">startWrite</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, encoder: <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_IEncoder">IEncoder</a></span>, output: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Version"><span class="api-item-title-kind">attr</span> <span class="api-item-title-light">Serialization.</span><span class="api-item-title-strong">Version</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\serialize.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the struct version number. </p>
<div class="addinfos"><b>Usage</b>: struct 
</div>
<div class="code-block"><code><span class="SCde"><span class="SKwd">attr</span> <span class="SCst"><a href="#Core_Serialization_Version">Version</a></span>(v: <span class="STpe">u32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_JSon"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Write.</span><span class="api-item-title-strong">JSon</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">options</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst">Write</span>.<span class="SCst"><a href="#Core_Serialization_Write_JSonOptions">JSonOptions</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">output</span></td>
<td class="code-type"><span class="SCde">*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">indent</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">fmtInt</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">StrConv</span>.<span class="SCst"><a href="#Core_StrConv_ConvertFormatInt">ConvertFormatInt</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">fmtFloat</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">StrConv</span>.<span class="SCst"><a href="#Core_StrConv_ConvertFormatFloat">ConvertFormatFloat</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">lastSeekValue</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBufferSeek">ConcatBufferSeek</a></span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Serialization_Write_JSon_beginElement"><span class="SCde"><span class="SFct">beginElement</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_beginRoot"><span class="SCde"><span class="SFct">beginRoot</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_beginSection"><span class="SCde"><span class="SFct">beginSection</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_beginSequence"><span class="SCde"><span class="SFct">beginSequence</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_beginStruct"><span class="SCde"><span class="SFct">beginStruct</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_beginValue"><span class="SCde"><span class="SFct">beginValue</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_endElement"><span class="SCde"><span class="SFct">endElement</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_endRoot"><span class="SCde"><span class="SFct">endRoot</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_endSection"><span class="SCde"><span class="SFct">endSection</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_endSequence"><span class="SCde"><span class="SFct">endSequence</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_endStruct"><span class="SCde"><span class="SFct">endStruct</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_endValue"><span class="SCde"><span class="SFct">endValue</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_startWrite"><span class="SCde"><span class="SFct">startWrite</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_writeIndent"><span class="SCde"><span class="SFct">writeIndent</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_JSon_writeNative"><span class="SCde"><span class="SFct">writeNative</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_JSon_beginElement"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">beginElement</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L112" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginElement</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, val: <span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_JSon_beginRoot"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">beginRoot</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginRoot</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_JSon_beginSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">beginSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L75" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginSection</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, _kind: <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_SectionKind">SectionKind</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_JSon_beginSequence"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">beginSequence</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L47" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginSequence</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, _typeElem: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, _data: <span class="SKwd">const</span> *<span class="STpe">void</span>, _countElem: <span class="STpe">u64</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_JSon_beginStruct"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">beginStruct</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L101" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginStruct</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, _structType: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, _structData: <span class="SKwd">const</span> *<span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_JSon_beginValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">beginValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L127" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginValue</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_JSon_endElement"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">endElement</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L122" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endElement</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_JSon_endRoot"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">endRoot</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endRoot</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_JSon_endSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">endSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L87" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endSection</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_JSon_endSequence"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">endSequence</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L61" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endSequence</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_JSon_endStruct"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">endStruct</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L107" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endStruct</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_JSon_endValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">endValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L131" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endValue</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_JSon_startWrite"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">startWrite</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">startWrite</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, buf: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_JSon_writeIndent"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">writeIndent</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">writeIndent</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_JSon_writeNative"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">JSon.</span><span class="api-item-title-strong">writeNative</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L144" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">NT</span>) <span class="SFct">writeNative</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SCst">NT</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_JSonOptions"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Write.</span><span class="api-item-title-strong">JSonOptions</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\json.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">indentLevel</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">saveBlanks</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_TagBin"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Write.</span><span class="api-item-title-strong">TagBin</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">output</span></td>
<td class="code-type"><span class="SCde">*<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">freeSections</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ArrayPtr">ArrayPtr</a></span>'(<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst">Write</span>.<span class="SCst"><a href="#Core_Serialization_Write_TagBinSection">TagBinSection</a></span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">sections</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ArrayPtr">ArrayPtr</a></span>'(<span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst">Write</span>.<span class="SCst"><a href="#Core_Serialization_Write_TagBinSection">TagBinSection</a></span>)</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Serialization_Write_TagBin_beginElement"><span class="SCde"><span class="SFct">beginElement</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_beginRoot"><span class="SCde"><span class="SFct">beginRoot</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_beginSection"><span class="SCde"><span class="SFct">beginSection</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_beginSequence"><span class="SCde"><span class="SFct">beginSequence</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_beginStruct"><span class="SCde"><span class="SFct">beginStruct</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_beginValue"><span class="SCde"><span class="SFct">beginValue</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_endElement"><span class="SCde"><span class="SFct">endElement</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_endRoot"><span class="SCde"><span class="SFct">endRoot</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_endSection"><span class="SCde"><span class="SFct">endSection</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_endSequence"><span class="SCde"><span class="SFct">endSequence</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_endStruct"><span class="SCde"><span class="SFct">endStruct</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_endValue"><span class="SCde"><span class="SFct">endValue</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_startWrite"><span class="SCde"><span class="SFct">startWrite</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Serialization_Write_TagBin_writeNative"><span class="SCde"><span class="SFct">writeNative</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_TagBin_beginElement"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">beginElement</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L135" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginElement</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, val: <span class="SCst">Swag</span>.<span class="SCst">TypeValue</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_TagBin_beginRoot"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">beginRoot</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L56" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginRoot</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_TagBin_beginSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">beginSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L66" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginSection</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, kind: <span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_SectionKind">SectionKind</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_TagBin_beginSequence"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">beginSequence</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L172" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginSequence</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, typeElem: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, data: <span class="SKwd">const</span> *<span class="STpe">void</span>, countElem: <span class="STpe">u64</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_TagBin_beginStruct"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">beginStruct</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L106" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginStruct</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, structType: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, _structData: <span class="SKwd">const</span> *<span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_TagBin_beginValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">beginValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L163" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">beginValue</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_TagBin_endElement"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">endElement</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L158" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endElement</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_TagBin_endRoot"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">endRoot</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L61" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endRoot</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_TagBin_endSection"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">endSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L79" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endSection</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_TagBin_endSequence"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">endSequence</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L211" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endSequence</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_TagBin_endStruct"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">endStruct</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L130" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endStruct</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_TagBin_endValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">endValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L168" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endValue</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_TagBin_startWrite"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">startWrite</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L51" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">startWrite</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, buf: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_TagBin_writeNative"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TagBin.</span><span class="api-item-title-strong">writeNative</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L219" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">NT</span>) <span class="SFct">writeNative</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SCst">NT</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_TagBinSection"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Write.</span><span class="api-item-title-strong">TagBinSection</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">startSeek</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBufferSeek">ConcatBufferSeek</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">mapSeek</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_HashTable">HashTable</a></span>'(<span class="STpe">u32</span>, <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBufferSeek">ConcatBufferSeek</a></span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">kind</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Serialization</span>.<span class="SCst"><a href="#Core_Serialization_SectionKind">SectionKind</a></span></span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_Write_TagBinSignatures"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Write.</span><span class="api-item-title-strong">TagBinSignatures</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\write\tagbin.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Root</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Fat</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Sequence</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Version</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Serialization_isPodFinal"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Serialization.</span><span class="api-item-title-strong">isPodFinal</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\serialization\helpers.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Determin if a type can be serialized by a simple copy. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isPodFinal</span>(type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>)-&gt;{raw: <span class="STpe">bool</span>, sizeof: <span class="STpe">u64</span>}</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Slice"><span class="api-item-title-kind">namespace</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">Slice</span></span>
</td>
</tr>
</table>
</p>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Slice_contains"><span class="SCde"><span class="SFct">contains</span>()</spa</a></td>
<td>Returns true if the given slice contains the <code class="inline-code">value</code>. </td>
</tr>
<tr>
<td><a href="#Core_Slice_equals"><span class="SCde"><span class="SFct">equals</span>()</spa</a></td>
<td>Returns true if two slices are equal. </td>
</tr>
<tr>
<td><a href="#Core_Slice_findLinear"><span class="SCde"><span class="SFct">findLinear</span>()</spa</a></td>
<td>Find <code class="inline-code">value</code> in a slice by performing a linear search. </td>
</tr>
<tr>
<td><a href="#Core_Slice_findSorted"><span class="SCde"><span class="SFct">findSorted</span>()</spa</a></td>
<td>Find <code class="inline-code">value</code> in a slice by performing a binary search. </td>
</tr>
<tr>
<td><a href="#Core_Slice_insertionSort"><span class="SCde"><span class="SFct">insertionSort</span>()</spa</a></td>
<td>Insertion sort algorithm (slow). </td>
</tr>
<tr>
<td><a href="#Core_Slice_isSorted"><span class="SCde"><span class="SFct">isSorted</span>(<span class="SKwd">const</span> [..] <span class="SCst">T</span>)</span></a></td>
<td>Returns true if the slice is sorted. </td>
</tr>
<tr>
<td><a href="#Core_Slice_isSorted"><span class="SCde"><span class="SFct">isSorted</span>(<span class="SKwd">const</span> [..] <span class="SCst">T</span>, <span class="SKwd">func</span>(*<span class="STpe">void</span>, <span class="SCst">T</span>, <span class="SCst">T</span>)-><span class="STpe">s32</span>)</span></a></td>
<td>Returns true if the slice is sorted. </td>
</tr>
<tr>
<td><a href="#Core_Slice_modifyInPlace"><span class="SCde"><span class="SFct">modifyInPlace</span>()</spa</a></td>
<td>Transform the content of a slice with a given lambda. </td>
</tr>
<tr>
<td><a href="#Core_Slice_quickSort"><span class="SCde"><span class="SFct">quickSort</span>()</spa</a></td>
<td>Quick sort algorithm. </td>
</tr>
<tr>
<td><a href="#Core_Slice_reverse"><span class="SCde"><span class="SFct">reverse</span>()</spa</a></td>
<td>Reverse the content of a slice. </td>
</tr>
<tr>
<td><a href="#Core_Slice_sort"><span class="SCde"><span class="SFct">sort</span>([..] <span class="SCst">T</span>)</span></a></td>
<td>Sort the slice, by picking the right algorithm depending on the type and the  number of elements. </td>
</tr>
<tr>
<td><a href="#Core_Slice_sort"><span class="SCde"><span class="SFct">sort</span>([..] <span class="SCst">T</span>, <span class="SKwd">func</span>(*<span class="STpe">void</span>, <span class="SCst">T</span>, <span class="SCst">T</span>)-><span class="STpe">s32</span>)</span></a></td>
<td>Sort the slice, by picking the right algorithm depending on the type and the  number of elements. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Slice_contains"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Slice.</span><span class="api-item-title-strong">contains</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\find.swg#L56" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given slice contains the <code class="inline-code">value</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>, <span class="SCst">V</span>) <span class="SFct">contains</span>(values: <span class="SKwd">const</span> [..] <span class="SCst">T</span>, value: <span class="SCst">V</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Slice_equals"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Slice.</span><span class="api-item-title-strong">equals</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\find.swg#L69" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if two slices are equal. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">equals</span>(dst: <span class="SKwd">const</span> [..] <span class="SCst">T</span>, src: <span class="SKwd">const</span> [..] <span class="SCst">T</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Slice_findLinear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Slice.</span><span class="api-item-title-strong">findLinear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\find.swg#L38" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Find <code class="inline-code">value</code> in a slice by performing a linear search. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>, <span class="SCst">V</span>) <span class="SFct">findLinear</span>(values: <span class="SKwd">const</span> [..] <span class="SCst">T</span>, value: <span class="SCst">V</span>)-&gt;{index: <span class="STpe">u64</span>, success: <span class="STpe">bool</span>}</span></code>
</div>
<p> O^n, but slice does not have to be sorted </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Slice_findSorted"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Slice.</span><span class="api-item-title-strong">findSorted</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\find.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Find <code class="inline-code">value</code> in a slice by performing a binary search. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>, <span class="SCst">V</span>) <span class="SFct">findSorted</span>(values: <span class="SKwd">const</span> [..] <span class="SCst">T</span>, value: <span class="SCst">V</span>)-&gt;{index: <span class="STpe">u64</span>, success: <span class="STpe">bool</span>}</span></code>
</div>
<p> The slice must be sorted in ascending order </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Slice_insertionSort"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Slice.</span><span class="api-item-title-strong">insertionSort</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\sort.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Insertion sort algorithm (slow). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">insertionSort</span>(values: [..] <span class="SCst">T</span>, cb: <span class="SKwd">closure</span>(<span class="SCst">T</span>, <span class="SCst">T</span>)-&gt;<span class="STpe">s32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Slice_isSorted"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Slice.</span><span class="api-item-title-strong">isSorted</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\sort.swg#L105" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the slice is sorted. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">isSorted</span>(values: <span class="SKwd">const</span> [..] <span class="SCst">T</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>Returns true if the slice is sorted. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">isSorted</span>(values: <span class="SKwd">const</span> [..] <span class="SCst">T</span>, cb: <span class="SKwd">closure</span>(<span class="SCst">T</span>, <span class="SCst">T</span>)-&gt;<span class="STpe">s32</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Slice_modifyInPlace"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Slice.</span><span class="api-item-title-strong">modifyInPlace</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\treat.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform the content of a slice with a given lambda. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">modifyInPlace</span>(values: [..] <span class="SCst">T</span>, cb: <span class="SKwd">func</span>(*<span class="SCst">T</span>))</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Slice_quickSort"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Slice.</span><span class="api-item-title-strong">quickSort</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\sort.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Quick sort algorithm. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">quickSort</span>(values: [..] <span class="SCst">T</span>, cb: <span class="SKwd">closure</span>(<span class="SCst">T</span>, <span class="SCst">T</span>)-&gt;<span class="STpe">s32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Slice_reverse"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Slice.</span><span class="api-item-title-strong">reverse</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\treat.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reverse the content of a slice. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">reverse</span>(values: [..] <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Slice_sort"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Slice.</span><span class="api-item-title-strong">sort</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\slice\sort.swg#L88" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sort the slice, by picking the right algorithm depending on the type and the  number of elements. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">sort</span>(values: [..] <span class="SCst">T</span>)</span></code>
</div>
<p>Sort the slice, by picking the right algorithm depending on the type and the  number of elements. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">sort</span>(values: [..] <span class="SCst">T</span>, cb: <span class="SKwd">closure</span>(<span class="SCst">T</span>, <span class="SCst">T</span>)-&gt;<span class="STpe">s32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">StaticArray</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">struct</span> <span class="SCst"><a href="#Core_StaticArray">StaticArray</a></span>(<span class="SCst">T</span>, <span class="SCst">N</span>: <span class="STpe">u64</span>)</span></code>
</div>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">buffer</span></td>
<td class="code-type"><span class="SCde">[?] <span class="SCst">T</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">count</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_StaticArray_add"><span class="SCde"><span class="SFct">add</span>(<span class="SKwd">self</span>, <span class="SCst">T</span>)</span></a></td>
<td>Add a copy of one element at the end of the array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_add"><span class="SCde"><span class="SFct">add</span>(<span class="SKwd">self</span>, <span class="SKwd">const</span> [..] <span class="SCst">T</span>)</span></a></td>
<td>Append a slice to the end of this instance. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_add"><span class="SCde"><span class="SFct">add</span>(<span class="SKwd">self</span>, <span class="SKwd">moveref</span> <span class="SCst">T</span>)</span></a></td>
<td>Move one element at the end of the array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_addOnce"><span class="SCde"><span class="SFct">addOnce</span>()</spa</a></td>
<td>Add a copy of one element at the end of the array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_back"><span class="SCde"><span class="SFct">back</span>()</spa</a></td>
<td>Returns a copy of the last element. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_backPtr"><span class="SCde"><span class="SFct">backPtr</span>()</spa</a></td>
<td>Returns the address of the last element. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Set the number of elements to 0. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_contains"><span class="SCde"><span class="SFct">contains</span>()</spa</a></td>
<td>Returns true if the given <code class="inline-code">value</code> is in the array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_emplaceAddress"><span class="SCde"><span class="SFct">emplaceAddress</span>()</spa</a></td>
<td>Reserve room at the end of the array for <code class="inline-code">num</code> elements, but does not  initialize them. Returns the address of the first element. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_emplaceAt"><span class="SCde"><span class="SFct">emplaceAt</span>()</spa</a></td>
<td>Move some values at the given index. If <code class="inline-code">index</code> is equal to <code class="inline-code">count</code>, then  the values are moved at the end of the array.  Order is preserved. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_emplaceInitAddress"><span class="SCde"><span class="SFct">emplaceInitAddress</span>()</spa</a></td>
<td>Reserve room at the end of the array for <code class="inline-code">num</code> elements. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_free"><span class="SCde"><span class="SFct">free</span>()</spa</a></td>
<td>Free the array content. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_front"><span class="SCde"><span class="SFct">front</span>()</spa</a></td>
<td>Returns a copy of the first element. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_frontPtr"><span class="SCde"><span class="SFct">frontPtr</span>()</spa</a></td>
<td>Returns the address of the first element. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_insertAt"><span class="SCde"><span class="SFct">insertAt</span>(<span class="SKwd">self</span>, <span class="STpe">u64</span>, <span class="SCst">T</span>)</span></a></td>
<td>Insert a value at the given index. If <code class="inline-code">index</code> is equal to <code class="inline-code">count</code>, then  the value is added at the end of the array.  Order is preserved. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_insertAt"><span class="SCde"><span class="SFct">insertAt</span>(<span class="SKwd">self</span>, <span class="STpe">u64</span>, <span class="SKwd">const</span> [..] <span class="SCst">T</span>)</span></a></td>
<td>Insert some values at the given index. If <code class="inline-code">index</code> is equal to <code class="inline-code">count</code>, then  the values are added at the end of the array.  Order is preserved. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_insertAt"><span class="SCde"><span class="SFct">insertAt</span>(<span class="SKwd">self</span>, <span class="STpe">u64</span>, <span class="SKwd">moveref</span> <span class="SCst">T</span>)</span></a></td>
<td>Move a value at the given index. If <code class="inline-code">index</code> is equal to <code class="inline-code">count</code>, then  the value is added at the end of the array.  Order is preserved. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_isEmpty"><span class="SCde"><span class="SFct">isEmpty</span>()</spa</a></td>
<td>Returns true if the array is empty. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_popBack"><span class="SCde"><span class="SFct">popBack</span>()</spa</a></td>
<td>Returns a copy of the last element, and remove it from the array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_remove"><span class="SCde"><span class="SFct">remove</span>(<span class="SKwd">self</span>, <span class="SCst">V</span>)</span></a></td>
<td>Remove the given <code class="inline-code">value</code>  If not found, does nothing. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_remove"><span class="SCde"><span class="SFct">remove</span>(<span class="SKwd">self</span>, <span class="STpe">u64</span>, <span class="STpe">u64</span>)</span></a></td>
<td>Remove <code class="inline-code">num</code> elements starting at <code class="inline-code">index</code>. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_removeAt"><span class="SCde"><span class="SFct">removeAt</span>()</spa</a></td>
<td>Remove an element at <code class="inline-code">index</code> by replacing it with the last element. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_removeAtOrdered"><span class="SCde"><span class="SFct">removeAtOrdered</span>()</spa</a></td>
<td>Remove <code class="inline-code">numValues</code> elements at <code class="inline-code">index</code> by shifting all others. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_removeBack"><span class="SCde"><span class="SFct">removeBack</span>()</spa</a></td>
<td>Remove the last element. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_removeOrdered"><span class="SCde"><span class="SFct">removeOrdered</span>()</spa</a></td>
<td>Remove the given <code class="inline-code">value</code>  If not found, does nothing. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_resize"><span class="SCde"><span class="SFct">resize</span>()</spa</a></td>
<td>Change the number of valid elements in the array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_sort"><span class="SCde"><span class="SFct">sort</span>(<span class="SKwd">self</span>)</span></a></td>
<td>Sort array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_sort"><span class="SCde"><span class="SFct">sort</span>(<span class="SKwd">self</span>, <span class="SKwd">func</span>(*<span class="STpe">void</span>, <span class="SCst">T</span>, <span class="SCst">T</span>)-><span class="STpe">s32</span>)</span></a></td>
<td>Sort array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_sortReverse"><span class="SCde"><span class="SFct">sortReverse</span>()</spa</a></td>
<td>Sort array in reverse order (from biggest to lowest value). </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_toSlice"><span class="SCde"><span class="SFct">toSlice</span>()</spa</a></td>
<td>Returns a slice. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_StaticArray_opAffect"><span class="SCde"><span class="SFct">opAffect</span>()</spa</a></td>
<td>Initializes an Array that contains values copied from the specified array. </td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opCast"><span class="SCde"><span class="SFct">opCast</span>(<span class="SKwd">self</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opCast"><span class="SCde"><span class="SFct">opCast</span>(<span class="SKwd">self</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opCount"><span class="SCde"><span class="SFct">opCount</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opData"><span class="SCde"><span class="SFct">opData</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opDrop"><span class="SCde"><span class="SFct">opDrop</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opIndex"><span class="SCde"><span class="SFct">opIndex</span>(<span class="SKwd">self</span>, <span class="STpe">u64</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opIndex"><span class="SCde"><span class="SFct">opIndex</span>(<span class="SKwd">self</span>, <span class="STpe">u64</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opIndexAffect"><span class="SCde"><span class="SFct">opIndexAffect</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opIndexAssign"><span class="SCde"><span class="SFct">opIndexAssign</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opSlice"><span class="SCde"><span class="SFct">opSlice</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_StaticArray_opVisit"><span class="SCde"><span class="SFct">opVisit</span>()</spa</a></td>
<td>Visit every elements of the array. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_add"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">add</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L207" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a copy of one element at the end of the array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">add</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SCst">T</span>)</span></code>
</div>
<p>Append a slice to the end of this instance. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">add</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, values: <span class="SKwd">const</span> [..] <span class="SCst">T</span>)</span></code>
</div>
<p>Move one element at the end of the array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">add</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SKwd">moveref</span> <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_addOnce"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">addOnce</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L196" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add a copy of one element at the end of the array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">addOnce</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_back"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">back</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L518" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a copy of the last element. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">back</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_backPtr"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">backPtr</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L526" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the address of the last element. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">backPtr</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;*<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L184" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the number of elements to 0. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_contains"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">contains</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L477" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given <code class="inline-code">value</code> is in the array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">V</span>) <span class="SFct">contains</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SCst">V</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_emplaceAddress"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">emplaceAddress</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L225" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve room at the end of the array for <code class="inline-code">num</code> elements, but does not  initialize them. Returns the address of the first element. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">emplaceAddress</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, num: <span class="STpe">u32</span> = <span class="SNum">1</span>)-&gt;^<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_emplaceAt"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">emplaceAt</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L332" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Move some values at the given index. If <code class="inline-code">index</code> is equal to <code class="inline-code">count</code>, then  the values are moved at the end of the array.  Order is preserved. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">emplaceAt</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, values: [..] <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_emplaceInitAddress"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">emplaceInitAddress</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L234" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve room at the end of the array for <code class="inline-code">num</code> elements. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">emplaceInitAddress</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, num: <span class="STpe">u32</span> = <span class="SNum">1</span>)-&gt;^<span class="SCst">T</span></span></code>
</div>
<p> Returns the address of the first element </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_free"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">free</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L140" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Free the array content. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">free</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_front"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">front</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L503" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a copy of the first element. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">front</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_frontPtr"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">frontPtr</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L511" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the address of the first element. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">frontPtr</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;*<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_insertAt"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">insertAt</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L246" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Insert a value at the given index. If <code class="inline-code">index</code> is equal to <code class="inline-code">count</code>, then  the value is added at the end of the array.  Order is preserved. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">insertAt</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, value: <span class="SCst">T</span>)</span></code>
</div>
<p>Insert some values at the given index. If <code class="inline-code">index</code> is equal to <code class="inline-code">count</code>, then  the values are added at the end of the array.  Order is preserved. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">insertAt</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, values: <span class="SKwd">const</span> [..] <span class="SCst">T</span>)</span></code>
</div>
<p>Move a value at the given index. If <code class="inline-code">index</code> is equal to <code class="inline-code">count</code>, then  the value is added at the end of the array.  Order is preserved. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">insertAt</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, value: <span class="SKwd">moveref</span> <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_isEmpty"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">isEmpty</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L156" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the array is empty. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isEmpty</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_opAffect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">opAffect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L82" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initializes an Array that contains values copied from the specified array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opAffect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, arr: <span class="SKwd">const</span> [..] <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_opCast"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">opCast</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opCast</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;[..] <span class="SCst">T</span>
<span class="SKwd">func</span> <span class="SFct">opCast</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SKwd">const</span> [..] <span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_opCount"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">opCount</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opCount</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_opData"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">opData</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opData</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SKwd">const</span> *<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_opDrop"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">opDrop</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L24" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opDrop</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_opIndex"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">opIndex</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L59" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opIndex</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>)-&gt;<span class="SCst">T</span>
<span class="SKwd">func</span> <span class="SFct">opIndex</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>)-&gt;<span class="SKwd">ref</span> <span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_opIndexAffect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">opIndexAffect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L67" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opIndexAffect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, value: <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_opIndexAssign"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">opIndexAssign</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L75" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opIndexAssign</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, value: <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_opSlice"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">opSlice</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L42" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opSlice</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, lower: <span class="STpe">u64</span>, upper: <span class="STpe">u64</span>)-&gt;[..] <span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_opVisit"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">opVisit</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L108" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Visit every elements of the array. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span>(ptr: <span class="STpe">bool</span>, back: <span class="STpe">bool</span>) <span class="SFct">opVisit</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, stmt: <span class="STpe">code</span>)</span></code>
</div>
<p> Visiting by pointer and in reverse order is supported </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_popBack"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">popBack</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L533" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a copy of the last element, and remove it from the array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">popBack</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_remove"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">remove</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L460" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove the given <code class="inline-code">value</code>  If not found, does nothing. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">V</span>) <span class="SFct">remove</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SCst">V</span>)</span></code>
</div>
<p>Remove <code class="inline-code">num</code> elements starting at <code class="inline-code">index</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">remove</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, num: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_removeAt"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">removeAt</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L415" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove an element at <code class="inline-code">index</code> by replacing it with the last element. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">removeAt</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>)</span></code>
</div>
<p> Order is not preserved </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_removeAtOrdered"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">removeAtOrdered</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L427" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove <code class="inline-code">numValues</code> elements at <code class="inline-code">index</code> by shifting all others. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">removeAtOrdered</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, numValues: <span class="STpe">u64</span> = <span class="SNum">1</span>)</span></code>
</div>
<p> Order is preserved </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_removeBack"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">removeBack</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L543" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove the last element. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">removeBack</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_removeOrdered"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">removeOrdered</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L469" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove the given <code class="inline-code">value</code>  If not found, does nothing. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">V</span>) <span class="SFct">removeOrdered</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="SCst">V</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_resize"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">resize</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L166" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Change the number of valid elements in the array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">resize</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, newCount: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_sort"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">sort</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L484" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sort array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">sort</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>Sort array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">sort</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, cb: <span class="SKwd">closure</span>(<span class="SCst">T</span>, <span class="SCst">T</span>)-&gt;<span class="STpe">s32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_sortReverse"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">sortReverse</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L490" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sort array in reverse order (from biggest to lowest value). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">sortReverse</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StaticArray_toSlice"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StaticArray.</span><span class="api-item-title-strong">toSlice</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\collections\staticarray.swg#L160" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a slice. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toSlice</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;[..] <span class="SCst">T</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_Atod_parse"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Atod.</span><span class="api-item-title-strong">parse</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\atod.swg#L874" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parse</span>(s: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;{value: <span class="STpe">f64</span>, eat: <span class="STpe">u32</span>, ovf: <span class="STpe">bool</span>} <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_ConvertFormat"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">ConvertFormat</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">value</span></td>
<td class="code-type"><span class="STpe">any</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_ConvertFormatFloat"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">ConvertFormatFloat</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Format structure to convert a float to a string. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde"><span class="SKwd">using</span> val</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">StrConv</span>.<span class="SCst"><a href="#Core_StrConv_ConvertFormat">ConvertFormat</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">precision</span></td>
<td class="code-type"><span class="STpe">s8</span></td>
<td>-1 is for 'most possible precision'. </td>
</tr>
<tr>
<td class="code-type"><span class="SCde">fmt</span></td>
<td class="code-type"><span class="STpe">u8</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">forceSign</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_StrConv_ConvertFormatFloat_setFormat"><span class="SCde"><span class="SFct">setFormat</span>()</spa</a></td>
<td>Set some format options with a given user string. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_ConvertFormatFloat_setFormat"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConvertFormatFloat.</span><span class="api-item-title-strong">setFormat</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set some format options with a given user string. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setFormat</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, strFormat: <span class="STpe">string</span>)</span></code>
</div>
<p> Format is: </p>
<p style="white-space: break-spaces"> `[+][fmt][precision]`

 `[+]`
      force the positive sign if number is positive
 `[fmt]` output format:
      `e (-d.dddde±dd, a decimal exponent)`
      `E (-d.ddddE±dd, a decimal exponent)`
      `f (-ddd.dddd, no exponent)`
      `g ('e' for large exponents, 'f' otherwise)`
      `G ('E' for large exponents, 'f' otherwise)`
 `[precision]`
      integer, precision of the fractional part</p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_ConvertFormatInt"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">ConvertFormatInt</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L79" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Format structure to convert an integer to a string. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde"><span class="SKwd">using</span> val</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">StrConv</span>.<span class="SCst"><a href="#Core_StrConv_ConvertFormat">ConvertFormat</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">base</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">padding</span></td>
<td class="code-type"><span class="STpe">u8</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">width</span></td>
<td class="code-type"><span class="STpe">u8</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">forceSign</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
</table>
<p> If <code class="inline-code">signed</code> is <code class="inline-code">true</code>, the value to convert must be stored in <code class="inline-code">signedValue</code>, otherwise it must  be stored in <code class="inline-code">unsignedValue</code>. </p>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_StrConv_ConvertFormatInt_setFormat"><span class="SCde"><span class="SFct">setFormat</span>()</spa</a></td>
<td>Set some format options with a given user string. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_ConvertFormatInt_setFormat"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">ConvertFormatInt.</span><span class="api-item-title-strong">setFormat</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L104" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set some format options with a given user string. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setFormat</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, strFormat: <span class="STpe">string</span>)</span></code>
</div>
<p> Format is: </p>
<p style="white-space: break-spaces"> `[+][B|D|X][padding][width]`

 `[+]`
      force sign for positive numbers
 `[B|D|X]`
      binary, decimal, hexadecimal
 `[padding]`
      padding character, in ascii, mandatory before the next field
 `[width]`
      width of the output, in characters</p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_Dtoa_parse"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Dtoa.</span><span class="api-item-title-strong">parse</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\dtoa.swg#L352" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>The format <code class="inline-code">fmt</code> is one of  <code class="inline-code">e</code> (-d.dddde±dd, a decimal exponent)  <code class="inline-code">E</code> (-d.ddddE±dd, a decimal exponent)  <code class="inline-code">f</code> (-ddd.dddd, no exponent)  <code class="inline-code">g</code> (<code class="inline-code">e</code> for large exponents, <code class="inline-code">f</code> otherwise)  <code class="inline-code">G</code> (<code class="inline-code">E</code> for large exponents, <code class="inline-code">f</code> otherwise)  Negative precision means "only as much as needed to be exact.". </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parse</span>(buf: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>, val: <span class="STpe">f64</span>, fmt: <span class="STpe">u8</span>, precision: <span class="STpe">s64</span>, forceSign: <span class="STpe">bool</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_IConvert"><span class="api-item-title-kind">interface</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">IConvert</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\iconvert.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">convert</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">StrConv</span>.<span class="SCst"><a href="#Core_StrConv_IConvert">IConvert</a></span>, *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>, <span class="SKwd">const</span> *<span class="SCst">Core</span>.<span class="SCst">StrConv</span>.<span class="SCst"><a href="#Core_StrConv_ConvertFormat">ConvertFormat</a></span>, <span class="STpe">string</span>)</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_IPokeValue"><span class="api-item-title-kind">interface</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">IPokeValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\ipokevalue.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">poke</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(*<span class="SCst">Core</span>.<span class="SCst">StrConv</span>.<span class="SCst"><a href="#Core_StrConv_IPokeValue">IPokeValue</a></span>, <span class="STpe">string</span>)-&gt;<span class="STpe">string</span> <span class="SKwd">throw</span></span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_StringBuilder"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">StringBuilder</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">buffer</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_StrConv_StringBuilder_appendAny"><span class="SCde"><span class="SFct">appendAny</span>()</spa</a></td>
<td>Append a value. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_appendEOL"><span class="SCde"><span class="SFct">appendEOL</span>()</spa</a></td>
<td>Append a end of line. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_appendFormat"><span class="SCde"><span class="SFct">appendFormat</span>()</spa</a></td>
<td>Append a formatted string. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_appendRune"><span class="SCde"><span class="SFct">appendRune</span>()</spa</a></td>
<td>Append a rune. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_appendString"><span class="SCde"><span class="SFct">appendString</span>()</spa</a></td>
<td>Append a string. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Clear the content of the builder. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_count"><span class="SCde"><span class="SFct">count</span>()</spa</a></td>
<td>Returns the number of characters. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_moveToString"><span class="SCde"><span class="SFct">moveToString</span>()</spa</a></td>
<td>Return the content as a string by eating the content of the string builder (if possible). </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_setBucketSize"><span class="SCde"><span class="SFct">setBucketSize</span>()</spa</a></td>
<td>Set sizes of buckets of the string builder. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_toString"><span class="SCde"><span class="SFct">toString</span>()</spa</a></td>
<td>Return the content as a string. </td>
</tr>
<tr>
<td><a href="#Core_StrConv_StringBuilder_zeroTerminated"><span class="SCde"><span class="SFct">zeroTerminated</span>()</spa</a></td>
<td>Force a ending 0. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_StringBuilder_appendAny"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StringBuilder.</span><span class="api-item-title-strong">appendAny</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L48" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append a value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">appendAny</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">any</span>, strFormat: <span class="STpe">string</span> = <span class="SKwd">null</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_StringBuilder_appendEOL"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StringBuilder.</span><span class="api-item-title-strong">appendEOL</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append a end of line. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">appendEOL</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_StringBuilder_appendFormat"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StringBuilder.</span><span class="api-item-title-strong">appendFormat</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L54" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append a formatted string. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">appendFormat</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, fmt: <span class="STpe">string</span>, values: ...)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_StringBuilder_appendRune"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StringBuilder.</span><span class="api-item-title-strong">appendRune</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L42" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append a rune. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">appendRune</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">rune</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_StringBuilder_appendString"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StringBuilder.</span><span class="api-item-title-strong">appendString</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L30" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append a string. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">appendString</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">string</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_StringBuilder_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StringBuilder.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Clear the content of the builder. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_StringBuilder_count"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StringBuilder.</span><span class="api-item-title-strong">count</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the number of characters. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">count</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_StringBuilder_moveToString"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StringBuilder.</span><span class="api-item-title-strong">moveToString</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L72" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Return the content as a string by eating the content of the string builder (if possible). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">moveToString</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_StringBuilder_setBucketSize"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StringBuilder.</span><span class="api-item-title-strong">setBucketSize</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L24" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set sizes of buckets of the string builder. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setBucketSize</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, size: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_StringBuilder_toString"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StringBuilder.</span><span class="api-item-title-strong">toString</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L66" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Return the content as a string. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toString</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_StringBuilder_zeroTerminated"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StringBuilder.</span><span class="api-item-title-strong">zeroTerminated</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\stringbuilder.swg#L60" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Force a ending 0. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">zeroTerminated</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_convert"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">convert</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L519" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Templated version. Convert a value of type <code class="inline-code">T</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">convert</span>(buf: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>, value: <span class="SCst">T</span>, strFormat: <span class="STpe">string</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_convertAny"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">convertAny</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L152" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a value to an utf8 string, and append the result in a ConcatBuffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">convertAny</span>(buf: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>, value: <span class="STpe">any</span>, strFormat: <span class="STpe">string</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_convertBool"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">convertBool</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L505" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a <code class="inline-code">bool</code> to a string, and put the result in a ConcatBuffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">convertBool</span>(buf: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>, value: <span class="STpe">bool</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_convertFloat"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">convertFloat</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L483" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a float to an utf8 string, and put the result in a ConcatBuffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">convertFloat</span>(buf: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>, value: <span class="STpe">any</span>, strFormat: <span class="STpe">string</span>)</span></code>
</div>
<p>Convert a float to an utf8 string, and put the result in a ConcatBuffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">convertFloat</span>(buf: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>, fmt: <span class="SCst">Core</span>.<span class="SCst">StrConv</span>.<span class="SCst"><a href="#Core_StrConv_ConvertFormatFloat">ConvertFormatFloat</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_convertInt"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">convertInt</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L494" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an integer to an utf8 string, and put the result in a ConcatBuffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">convertInt</span>(buf: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>, value: <span class="STpe">any</span>, strFormat: <span class="STpe">string</span>)</span></code>
</div>
<p>Convert an integer to an utf8 string, and put the result in a ConcatBuffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">convertInt</span>(buf: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>, fmt: <span class="SCst">Core</span>.<span class="SCst">StrConv</span>.<span class="SCst"><a href="#Core_StrConv_ConvertFormatInt">ConvertFormatInt</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_convertRune"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">convertRune</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L511" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a <code class="inline-code">rune</code> to a string, and put the result in a ConcatBuffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">convertRune</span>(buf: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>, value: <span class="STpe">rune</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_convertStruct"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">convertStruct</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\convert.swg#L301" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a structure content to an utf8 string, and put the result in a ConcatBuffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">convertStruct</span>(buf: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>, value: <span class="STpe">any</span>, strFormat: <span class="STpe">string</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_parseB64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">parseB64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L57" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer in binary to an unsigned integer value  Returns the value and the number of bytes used to make the conversion  <code class="inline-code">ovf</code> will be true in case of overflow. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parseB64</span>(str: <span class="STpe">string</span>)-&gt;{value: <span class="STpe">u64</span>, eat: <span class="STpe">u32</span>, ovf: <span class="STpe">bool</span>} <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_parseBool"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">parseBool</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L354" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer to a boolean  Returns the value and the number of bytes used to make the conversion. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parseBool</span>(str: <span class="STpe">string</span>)-&gt;{value: <span class="STpe">bool</span>, eat: <span class="STpe">u32</span>} <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_parseF32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">parseF32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L330" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer to a floating point value  Returns the value and the number of bytes used to make the conversion  <code class="inline-code">ovf</code> will be true in case of overflow. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parseF32</span>(str: <span class="STpe">string</span>)-&gt;{value: <span class="STpe">f32</span>, eat: <span class="STpe">u32</span>, ovf: <span class="STpe">bool</span>} <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_parseF64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">parseF64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L347" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parseF64</span>(str: <span class="STpe">string</span>)-&gt;{value: <span class="STpe">f64</span>, eat: <span class="STpe">u32</span>, ovf: <span class="STpe">bool</span>} <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_parseIdentifier"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">parseIdentifier</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L383" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Parse an identifier name in the sens of swag (ascii). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parseIdentifier</span>(str: <span class="STpe">string</span>)-&gt;<span class="STpe">string</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_parseRune"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">parseRune</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L374" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer to a simple rune. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parseRune</span>(str: <span class="STpe">string</span>)-&gt;{value: <span class="STpe">rune</span>, eat: <span class="STpe">u32</span>} <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_parseS16"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">parseS16</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L216" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parseS16</span>(str: <span class="STpe">string</span>)-&gt;{value: <span class="STpe">s16</span>, eat: <span class="STpe">u32</span>, ovf: <span class="STpe">bool</span>} <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_parseS32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">parseS32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L233" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parseS32</span>(str: <span class="STpe">string</span>)-&gt;{value: <span class="STpe">s32</span>, eat: <span class="STpe">u32</span>, ovf: <span class="STpe">bool</span>} <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_parseS64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">parseS64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L250" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parseS64</span>(str: <span class="STpe">string</span>)-&gt;{value: <span class="STpe">s64</span>, eat: <span class="STpe">u32</span>, ovf: <span class="STpe">bool</span>} <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_parseS8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">parseS8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L199" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer to an signed integer value  Returns the value and the number of bytes used to make the conversion  <code class="inline-code">ovf</code> will be true in case of overflow. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parseS8</span>(str: <span class="STpe">string</span>)-&gt;{value: <span class="STpe">s8</span>, eat: <span class="STpe">u32</span>, ovf: <span class="STpe">bool</span>} <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_parseString"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">parseString</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L400" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer to a Core.String  String in the buffer can be quoted (but the result will not be in that case). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parseString</span>(str: <span class="STpe">string</span>)-&gt;{value: <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span>, eat: <span class="STpe">u32</span>} <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_parseU16"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">parseU16</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L106" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parseU16</span>(str: <span class="STpe">string</span>)-&gt;{value: <span class="STpe">u16</span>, eat: <span class="STpe">u32</span>, ovf: <span class="STpe">bool</span>} <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_parseU32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">parseU32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L118" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parseU32</span>(str: <span class="STpe">string</span>)-&gt;{value: <span class="STpe">u32</span>, eat: <span class="STpe">u32</span>, ovf: <span class="STpe">bool</span>} <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_parseU64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">parseU64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L130" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parseU64</span>(str: <span class="STpe">string</span>)-&gt;{value: <span class="STpe">u64</span>, eat: <span class="STpe">u32</span>, ovf: <span class="STpe">bool</span>} <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_parseU8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">parseU8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L94" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer in decimal to an unsigned integer value  Returns the value and the number of bytes used to make the conversion  <code class="inline-code">ovf</code> will be true in case of overflow. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parseU8</span>(str: <span class="STpe">string</span>)-&gt;{value: <span class="STpe">u8</span>, eat: <span class="STpe">u32</span>, ovf: <span class="STpe">bool</span>} <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_parseX64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">parseX64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer in hexadecimal to an unsigned integer value  Returns the value and the number of bytes used to make the conversion  <code class="inline-code">ovf</code> will be true in case of overflow. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parseX64</span>(str: <span class="STpe">string</span>)-&gt;{value: <span class="STpe">u64</span>, eat: <span class="STpe">u32</span>, ovf: <span class="STpe">bool</span>} <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_pokeValue"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">pokeValue</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\pokevalue.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>This function will parse <code class="inline-code">buf</code> and poke the corresponding value to <code class="inline-code">addr</code>  <code class="inline-code">addr</code> must point to an initialized memory location that can hold type <code class="inline-code">type</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">pokeValue</span>(addr: *<span class="STpe">void</span>, type: <span class="SKwd">const</span> *<span class="SCst">Swag</span>.<span class="SCst">TypeInfo</span>, buf: <span class="STpe">string</span>)-&gt;<span class="STpe">string</span> <span class="SKwd">throw</span></span></code>
</div>
<p> Accepted types are :  - s8,s16,s32,s64,s64,u8,u16,u32,u64,u64,rune,bool,f32,f64  - <code class="inline-code">Core.String</code>  literal strings are not supported as <code class="inline-code">buf</code> is supposed to be transient  - enum           with or without <code class="inline-code">Swag.EnumFlags</code> attribute </p>
<p> <code class="inline-code">buf</code> can contain multiple values separated with blanks if <code class="inline-code">type</code> is:  - a static array of the types above  - a dynamic <code class="inline-code">Core.Array</code> of the types above </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_toDisplaySize"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">toDisplaySize</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\to.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a size in a displayable format (with Kb, Mb and so on). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toDisplaySize</span>(value: <span class="STpe">u64</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_toF32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">toF32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L525" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="inline-code">f32</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toF32</span>(str: <span class="STpe">string</span>)-&gt;<span class="STpe">f32</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_toF64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">toF64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L534" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="inline-code">f64</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toF64</span>(str: <span class="STpe">string</span>)-&gt;<span class="STpe">f64</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_toNum"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">toNum</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L543" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an integer or float. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">toNum</span>(str: <span class="STpe">string</span>)-&gt;<span class="SCst">T</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_toS16"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">toS16</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L462" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="inline-code">s16</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toS16</span>(str: <span class="STpe">string</span>)-&gt;<span class="STpe">s16</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_toS32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">toS32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L471" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="inline-code">s32</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toS32</span>(str: <span class="STpe">string</span>)-&gt;<span class="STpe">s32</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_toS64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">toS64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L480" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="inline-code">s64</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toS64</span>(str: <span class="STpe">string</span>)-&gt;<span class="STpe">s64</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_toS8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">toS8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L453" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="inline-code">s8</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toS8</span>(str: <span class="STpe">string</span>)-&gt;<span class="STpe">s8</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_toU16"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">toU16</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L498" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="inline-code">u16</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toU16</span>(str: <span class="STpe">string</span>)-&gt;<span class="STpe">u16</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_toU32"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">toU32</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L507" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="inline-code">u32</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toU32</span>(str: <span class="STpe">string</span>)-&gt;<span class="STpe">u32</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_toU64"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">toU64</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L516" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="inline-code">u64</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toU64</span>(str: <span class="STpe">string</span>)-&gt;<span class="STpe">u64</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_StrConv_toU8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">StrConv.</span><span class="api-item-title-strong">toU8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\parse.swg#L489" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a string to an <code class="inline-code">u8</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toU8</span>(str: <span class="STpe">string</span>)-&gt;<span class="STpe">u8</span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">String</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">buffer</span></td>
<td class="code-type"><span class="SCde">^<span class="STpe">u8</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">length</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">capacity</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">allocator</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Swag</span>.<span class="SCst">IAllocator</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">padding</span></td>
<td class="code-type"><span class="SCde">[<span class="SNum">16</span>] <span class="STpe">u8</span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_String_append"><span class="SCde"><span class="SFct">append</span>(<span class="SKwd">self</span>, <span class="STpe">rune</span>)</span></a></td>
<td>Append a rune to the String. </td>
</tr>
<tr>
<td><a href="#Core_String_append"><span class="SCde"><span class="SFct">append</span>(<span class="SKwd">self</span>, <span class="STpe">string</span>)</span></a></td>
<td>Append a string to the String. </td>
</tr>
<tr>
<td><a href="#Core_String_append"><span class="SCde"><span class="SFct">append</span>(<span class="SKwd">self</span>, <span class="STpe">u8</span>)</span></a></td>
<td>Append a byte to the String. </td>
</tr>
<tr>
<td><a href="#Core_String_appendFormat"><span class="SCde"><span class="SFct">appendFormat</span>()</spa</a></td>
<td>Append a formatted string. </td>
</tr>
<tr>
<td><a href="#Core_String_back"><span class="SCde"><span class="SFct">back</span>()</spa</a></td>
<td>Get the last byte. </td>
</tr>
<tr>
<td><a href="#Core_String_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Set the length of the String to 0. </td>
</tr>
<tr>
<td><a href="#Core_String_ensureNotNull"><span class="SCde"><span class="SFct">ensureNotNull</span>()</spa</a></td>
<td>Transform a null string in an empty one. </td>
</tr>
<tr>
<td><a href="#Core_String_from"><span class="SCde"><span class="SFct">from</span>()</spa</a></td>
<td>Convert a literal string to a String. </td>
</tr>
<tr>
<td><a href="#Core_String_grow"><span class="SCde"><span class="SFct">grow</span>()</spa</a></td>
<td>Ensure the String is big enough to store a given amount of bytes. </td>
</tr>
<tr>
<td><a href="#Core_String_insert"><span class="SCde"><span class="SFct">insert</span>()</spa</a></td>
<td>Insert a substring at the given position. </td>
</tr>
<tr>
<td><a href="#Core_String_isEmpty"><span class="SCde"><span class="SFct">isEmpty</span>()</spa</a></td>
<td>Returns true if the String has zero length. </td>
</tr>
<tr>
<td><a href="#Core_String_isNull"><span class="SCde"><span class="SFct">isNull</span>()</spa</a></td>
<td>Returns true if the String is null (undefined). </td>
</tr>
<tr>
<td><a href="#Core_String_isNullOrEmpty"><span class="SCde"><span class="SFct">isNullOrEmpty</span>()</spa</a></td>
<td>Returns true if the String is null or empty. </td>
</tr>
<tr>
<td><a href="#Core_String_join"><span class="SCde"><span class="SFct">join</span>()</spa</a></td>
<td>Join a list of strings to make a unique one. </td>
</tr>
<tr>
<td><a href="#Core_String_joinWith"><span class="SCde"><span class="SFct">joinWith</span>()</spa</a></td>
<td>Join an list of strings to make a unique one, by using a given <code class="inline-code">separator</code>  between them. </td>
</tr>
<tr>
<td><a href="#Core_String_makeLower"><span class="SCde"><span class="SFct">makeLower</span>()</spa</a></td>
<td>Convert the string inplace to lower case. </td>
</tr>
<tr>
<td><a href="#Core_String_makeUpper"><span class="SCde"><span class="SFct">makeUpper</span>()</spa</a></td>
<td>Convert the string inplace to upper case. </td>
</tr>
<tr>
<td><a href="#Core_String_remove"><span class="SCde"><span class="SFct">remove</span>()</spa</a></td>
<td>Remove some bytes at the given index. </td>
</tr>
<tr>
<td><a href="#Core_String_removeBack"><span class="SCde"><span class="SFct">removeBack</span>()</spa</a></td>
<td>Remove some bytes at the end. </td>
</tr>
<tr>
<td><a href="#Core_String_replace"><span class="SCde"><span class="SFct">replace</span>()</spa</a></td>
<td>Replace all occurences of <code class="inline-code">what</code> with <code class="inline-code">by</code>. </td>
</tr>
<tr>
<td><a href="#Core_String_reserve"><span class="SCde"><span class="SFct">reserve</span>()</spa</a></td>
<td>Reserve room for at least <code class="inline-code">newCapacity</code> bytes. </td>
</tr>
<tr>
<td><a href="#Core_String_toCharArray"><span class="SCde"><span class="SFct">toCharArray</span>()</spa</a></td>
<td>Convert string to a 32 bits character array. </td>
</tr>
<tr>
<td><a href="#Core_String_toLower"><span class="SCde"><span class="SFct">toLower</span>(<span class="SKwd">self</span>, <span class="SCst">CharacterSet</span>)</span></a></td>
<td>Returns a new String in lower case. </td>
</tr>
<tr>
<td><a href="#Core_String_toLower"><span class="SCde"><span class="SFct">toLower</span>(<span class="STpe">string</span>, <span class="SCst">CharacterSet</span>)</span></a></td>
<td>Returns a new String in lower case. </td>
</tr>
<tr>
<td><a href="#Core_String_toSlice"><span class="SCde"><span class="SFct">toSlice</span>()</spa</a></td>
<td>Returns a slice type. </td>
</tr>
<tr>
<td><a href="#Core_String_toString"><span class="SCde"><span class="SFct">toString</span>()</spa</a></td>
<td>Returns a string type. </td>
</tr>
<tr>
<td><a href="#Core_String_toUpper"><span class="SCde"><span class="SFct">toUpper</span>(<span class="SKwd">self</span>, <span class="SCst">CharacterSet</span>)</span></a></td>
<td>Returns a new String in upper case. </td>
</tr>
<tr>
<td><a href="#Core_String_toUpper"><span class="SCde"><span class="SFct">toUpper</span>(<span class="STpe">string</span>, <span class="SCst">CharacterSet</span>)</span></a></td>
<td>Returns a new String in lower case. </td>
</tr>
<tr>
<td><a href="#Core_String_trim"><span class="SCde"><span class="SFct">trim</span>()</spa</a></td>
<td>Removes all leading and trailing white-space characters from the current String. </td>
</tr>
<tr>
<td><a href="#Core_String_trimEnd"><span class="SCde"><span class="SFct">trimEnd</span>()</spa</a></td>
<td>Remove whitespaces at the end of the String. </td>
</tr>
<tr>
<td><a href="#Core_String_trimStart"><span class="SCde"><span class="SFct">trimStart</span>()</spa</a></td>
<td>Remove whitespaces at the start of the String. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_String_opAffect"><span class="SCde"><span class="SFct">opAffect</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opAssign"><span class="SCde"><span class="SFct">opAssign</span>(<span class="SKwd">self</span>, <span class="STpe">rune</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opAssign"><span class="SCde"><span class="SFct">opAssign</span>(<span class="SKwd">self</span>, <span class="STpe">string</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opAssign"><span class="SCde"><span class="SFct">opAssign</span>(<span class="SKwd">self</span>, <span class="STpe">u8</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opCast"><span class="SCde"><span class="SFct">opCast</span>(<span class="SKwd">self</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opCast"><span class="SCde"><span class="SFct">opCast</span>(<span class="SKwd">self</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opCast"><span class="SCde"><span class="SFct">opCast</span>(<span class="SKwd">self</span>)</span></a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opCmp"><span class="SCde"><span class="SFct">opCmp</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opCount"><span class="SCde"><span class="SFct">opCount</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opData"><span class="SCde"><span class="SFct">opData</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opEquals"><span class="SCde"><span class="SFct">opEquals</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opIndex"><span class="SCde"><span class="SFct">opIndex</span>()</spa</a></td>
<td>Returns the byte at the given index. </td>
</tr>
<tr>
<td><a href="#Core_String_opIndexAffect"><span class="SCde"><span class="SFct">opIndexAffect</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opIndexAssign"><span class="SCde"><span class="SFct">opIndexAssign</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opSlice"><span class="SCde"><span class="SFct">opSlice</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_String_opVisitBytes"><span class="SCde"><span class="SFct">opVisitBytes</span>()</spa</a></td>
<td>Visit the String utf8 bytes. </td>
</tr>
<tr>
<td><a href="#Core_String_opVisitRunes"><span class="SCde"><span class="SFct">opVisitRunes</span>()</spa</a></td>
<td>Visit the String runes  See <a href="#Core_Utf8_visitRunes">Utf8.visitRunes</a> for aliases. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_IHash32_compute"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IHash32.</span><span class="api-item-title-strong">compute</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L576" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">compute</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_append"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">append</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L334" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append a rune to the String. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">append</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">rune</span>)</span></code>
</div>
<p>Append a string to the String. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">append</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">string</span>)</span></code>
</div>
<p>Append a byte to the String. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">append</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_appendFormat"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">appendFormat</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L318" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Append a formatted string. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">appendFormat</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, format: <span class="STpe">string</span>, values: ...)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_back"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">back</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L269" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the last byte. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">back</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L212" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the length of the String to 0. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_ensureNotNull"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">ensureNotNull</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L236" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Transform a null string in an empty one. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">ensureNotNull</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_from"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">from</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L483" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a literal string to a String. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">from</span>(value: <span class="STpe">string</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_grow"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">grow</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L386" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Ensure the String is big enough to store a given amount of bytes. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">grow</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, wantedCapacity: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_insert"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">insert</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L298" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Insert a substring at the given position. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">insert</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, byteIndex: <span class="STpe">u64</span>, value: <span class="STpe">string</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_isEmpty"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">isEmpty</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L218" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the String has zero length. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isEmpty</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_isNull"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">isNull</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L224" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the String is null (undefined). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isNull</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_isNullOrEmpty"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">isNullOrEmpty</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L230" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the String is null or empty. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isNullOrEmpty</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_join"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">join</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L361" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Join a list of strings to make a unique one. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">join</span>(values: <span class="STpe">string</span>...)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_joinWith"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">joinWith</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L371" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Join an list of strings to make a unique one, by using a given <code class="inline-code">separator</code>  between them. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">joinWith</span>(separator: <span class="STpe">string</span>, values: <span class="STpe">string</span>...)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_makeLower"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">makeLower</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L523" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert the string inplace to lower case. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">makeLower</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, set = <span class="SCst"><a href="#Core_CharacterSet">CharacterSet</a></span>.<span class="SCst">Latin1</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_makeUpper"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">makeUpper</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L504" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert the string inplace to upper case. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">makeUpper</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, set = <span class="SCst"><a href="#Core_CharacterSet">CharacterSet</a></span>.<span class="SCst">Latin1</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_opAffect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">opAffect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L55" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opAffect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">string</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_opAssign"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">opAssign</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L115" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opAssign</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">rune</span>)
<span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opAssign</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">string</span>)
<span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opAssign</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_opCast"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">opCast</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L49" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opCast</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="SKwd">const</span> [..] <span class="STpe">u8</span>
<span class="SKwd">func</span> <span class="SFct">opCast</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">cstring</span>
<span class="SKwd">func</span> <span class="SFct">opCast</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_opCmp"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">opCmp</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L85" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opCmp</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="STpe">string</span>)-&gt;<span class="STpe">s32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_opCount"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">opCount</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opCount</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_opData"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">opData</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L31" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opData</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="SKwd">const</span> ^<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_opEquals"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">opEquals</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L76" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opEquals</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="STpe">string</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_opIndex"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">opIndex</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L161" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the byte at the given index. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opIndex</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>)-&gt;<span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_opIndexAffect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">opIndexAffect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L101" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opIndexAffect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, value: <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_opIndexAssign"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">opIndexAssign</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L90" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(op: <span class="STpe">string</span>) <span class="SFct">opIndexAssign</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, index: <span class="STpe">u64</span>, value: <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_opSlice"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">opSlice</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L70" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opSlice</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, lower: <span class="STpe">u64</span>, upper: <span class="STpe">u64</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_opVisitBytes"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">opVisitBytes</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L181" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Visit the String utf8 bytes. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span>(ptr: <span class="STpe">bool</span>, back: <span class="STpe">bool</span>) <span class="SFct">opVisitBytes</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, stmt: <span class="STpe">code</span>)</span></code>
</div>
<ul>
<li><code class="inline-code">@alias0</code> will contain the byte or the pointer to the byte</li>
<li><code class="inline-code">@alias1</code> will contain the byte index</li>
</ul>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_opVisitRunes"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">opVisitRunes</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L170" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Visit the String runes  See <a href="#Core_Utf8_visitRunes">Utf8.visitRunes</a> for aliases. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span>(ptr: <span class="STpe">bool</span>, back: <span class="STpe">bool</span>) <span class="SFct">opVisitRunes</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, stmt: <span class="STpe">code</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_remove"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">remove</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L277" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove some bytes at the given index. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">remove</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, byteIndex: <span class="STpe">u64</span>, byteCount: <span class="STpe">u64</span> = <span class="SNum">1</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_removeBack"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">removeBack</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L288" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove some bytes at the end. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">removeBack</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, byteCount: <span class="STpe">u64</span> = <span class="SNum">1</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_replace"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">replace</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L244" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Replace all occurences of <code class="inline-code">what</code> with <code class="inline-code">by</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">replace</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, what: <span class="STpe">string</span>, by: <span class="STpe">string</span>, comparisonType = <span class="SCst">Utf8</span>.<span class="SCst"><a href="#Core_Utf8_ComparisonType">ComparisonType</a></span>.<span class="SCst">Latin1</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_reserve"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">reserve</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L395" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reserve room for at least <code class="inline-code">newCapacity</code> bytes. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">reserve</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, newCapacity: <span class="STpe">u64</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_toCharArray"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">toCharArray</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L477" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert string to a 32 bits character array. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toCharArray</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">rune</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_toLower"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">toLower</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L558" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a new String in lower case. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toLower</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, set = <span class="SCst"><a href="#Core_CharacterSet">CharacterSet</a></span>.<span class="SCst">Latin1</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>Returns a new String in lower case. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toLower</span>(str: <span class="STpe">string</span>, set = <span class="SCst"><a href="#Core_CharacterSet">CharacterSet</a></span>.<span class="SCst">Latin1</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_toSlice"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">toSlice</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L498" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a slice type. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toSlice</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;[..] <span class="STpe">u8</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_toString"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">toString</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L491" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a string type. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toString</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_toUpper"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">toUpper</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L542" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a new String in upper case. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toUpper</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, set = <span class="SCst"><a href="#Core_CharacterSet">CharacterSet</a></span>.<span class="SCst">Latin1</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>Returns a new String in lower case. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toUpper</span>(str: <span class="STpe">string</span>, set = <span class="SCst"><a href="#Core_CharacterSet">CharacterSet</a></span>.<span class="SCst">Latin1</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_trim"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">trim</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L470" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Removes all leading and trailing white-space characters from the current String. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">trim</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_trimEnd"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">trimEnd</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L452" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove whitespaces at the end of the String. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">trimEnd</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_String_trimStart"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">String.</span><span class="api-item-title-strong">trimStart</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\string.swg#L431" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove whitespaces at the start of the String. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">trimStart</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_Event"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Sync.</span><span class="api-item-title-strong">Event</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\event.win32.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">handle</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> ^<span class="STpe">void</span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Sync_Event_create"><span class="SCde"><span class="SFct">create</span>()</spa</a></td>
<td>Creates a new event. </td>
</tr>
<tr>
<td><a href="#Core_Sync_Event_init"><span class="SCde"><span class="SFct">init</span>()</spa</a></td>
<td>Initialize event. </td>
</tr>
<tr>
<td><a href="#Core_Sync_Event_isValid"><span class="SCde"><span class="SFct">isValid</span>()</spa</a></td>
<td>Returns true if the event is valid. </td>
</tr>
<tr>
<td><a href="#Core_Sync_Event_release"><span class="SCde"><span class="SFct">release</span>()</spa</a></td>
<td>Destroy an existing event. </td>
</tr>
<tr>
<td><a href="#Core_Sync_Event_reset"><span class="SCde"><span class="SFct">reset</span>()</spa</a></td>
<td>Reset the event state. </td>
</tr>
<tr>
<td><a href="#Core_Sync_Event_signal"><span class="SCde"><span class="SFct">signal</span>()</spa</a></td>
<td>Signal the event. </td>
</tr>
<tr>
<td><a href="#Core_Sync_Event_wait"><span class="SCde"><span class="SFct">wait</span>()</spa</a></td>
<td>Wait for the event to be signaled. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_Event_create"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Event.</span><span class="api-item-title-strong">create</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\event.win32.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a new event. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">create</span>()-&gt;<span class="SCst">Core</span>.<span class="SCst">Sync</span>.<span class="SCst"><a href="#Core_Sync_Event">Event</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_Event_init"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Event.</span><span class="api-item-title-strong">init</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\event.win32.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize event. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">init</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, manual = <span class="SKwd">false</span>, initState = <span class="SKwd">false</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_Event_isValid"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Event.</span><span class="api-item-title-strong">isValid</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\event.win32.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the event is valid. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isValid</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_Event_release"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Event.</span><span class="api-item-title-strong">release</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\event.win32.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Destroy an existing event. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">release</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_Event_reset"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Event.</span><span class="api-item-title-strong">reset</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\event.win32.swg#L57" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Reset the event state. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">reset</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_Event_signal"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Event.</span><span class="api-item-title-strong">signal</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\event.win32.swg#L50" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Signal the event. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">signal</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_Event_wait"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Event.</span><span class="api-item-title-strong">wait</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\event.win32.swg#L64" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Wait for the event to be signaled. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">wait</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_Mutex"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Sync.</span><span class="api-item-title-strong">Mutex</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\mutex.win32.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">v</span></td>
<td class="code-type"><span class="SCde">*<span class="STpe">void</span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Sync_Mutex_lock"><span class="SCde"><span class="SFct">lock</span>()</spa</a></td>
<td>Lock mutex. </td>
</tr>
<tr>
<td><a href="#Core_Sync_Mutex_tryLock"><span class="SCde"><span class="SFct">tryLock</span>()</spa</a></td>
<td>Try to lock the mutex, and return <code class="inline-code">true</code> if it's the case. </td>
</tr>
<tr>
<td><a href="#Core_Sync_Mutex_unlock"><span class="SCde"><span class="SFct">unlock</span>()</spa</a></td>
<td>Unlock mutex. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_Mutex_lock"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Mutex.</span><span class="api-item-title-strong">lock</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\mutex.win32.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Lock mutex. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">lock</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_Mutex_tryLock"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Mutex.</span><span class="api-item-title-strong">tryLock</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\mutex.win32.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Try to lock the mutex, and return <code class="inline-code">true</code> if it's the case. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">tryLock</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_Mutex_unlock"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Mutex.</span><span class="api-item-title-strong">unlock</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\mutex.win32.swg#L26" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Unlock mutex. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">unlock</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_RWLock"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Sync.</span><span class="api-item-title-strong">RWLock</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">v</span></td>
<td class="code-type"><span class="SCde">*<span class="STpe">void</span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Sync_RWLock_lock"><span class="SCde"><span class="SFct">lock</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Sync_RWLock_lockExclusive"><span class="SCde"><span class="SFct">lockExclusive</span>()</spa</a></td>
<td>Lock mutex. </td>
</tr>
<tr>
<td><a href="#Core_Sync_RWLock_lockShared"><span class="SCde"><span class="SFct">lockShared</span>()</spa</a></td>
<td>Lock mutex. </td>
</tr>
<tr>
<td><a href="#Core_Sync_RWLock_tryLockExclusive"><span class="SCde"><span class="SFct">tryLockExclusive</span>()</spa</a></td>
<td>Try to lock the mutex, and return <code class="inline-code">true</code> if it's the case. </td>
</tr>
<tr>
<td><a href="#Core_Sync_RWLock_tryLockShared"><span class="SCde"><span class="SFct">tryLockShared</span>()</spa</a></td>
<td>Try to lock the mutex, and return <code class="inline-code">true</code> if it's the case. </td>
</tr>
<tr>
<td><a href="#Core_Sync_RWLock_unlock"><span class="SCde"><span class="SFct">unlock</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Sync_RWLock_unlockExclusive"><span class="SCde"><span class="SFct">unlockExclusive</span>()</spa</a></td>
<td>Unlock mutex. </td>
</tr>
<tr>
<td><a href="#Core_Sync_RWLock_unlockShared"><span class="SCde"><span class="SFct">unlockShared</span>()</spa</a></td>
<td>Unlock mutex. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_RWLock_lock"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">RWLock.</span><span class="api-item-title-strong">lock</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">lock</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_RWLock_lockExclusive"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">RWLock.</span><span class="api-item-title-strong">lockExclusive</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Lock mutex. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">lockExclusive</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_RWLock_lockShared"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">RWLock.</span><span class="api-item-title-strong">lockShared</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Lock mutex. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">lockShared</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_RWLock_tryLockExclusive"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">RWLock.</span><span class="api-item-title-strong">tryLockExclusive</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Try to lock the mutex, and return <code class="inline-code">true</code> if it's the case. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">tryLockExclusive</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_RWLock_tryLockShared"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">RWLock.</span><span class="api-item-title-strong">tryLockShared</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L35" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Try to lock the mutex, and return <code class="inline-code">true</code> if it's the case. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">tryLockShared</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_RWLock_unlock"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">RWLock.</span><span class="api-item-title-strong">unlock</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">unlock</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_RWLock_unlockExclusive"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">RWLock.</span><span class="api-item-title-strong">unlockExclusive</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Unlock mutex. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">unlockExclusive</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_RWLock_unlockShared"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">RWLock.</span><span class="api-item-title-strong">unlockShared</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\rwlock.win32.swg#L47" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Unlock mutex. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">unlockShared</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_scopedLock"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Sync.</span><span class="api-item-title-strong">scopedLock</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\sync.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">scopedLock</span>(syncObj: *<span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Sync_sharedLock"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Sync.</span><span class="api-item-title-strong">sharedLock</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\sync.swg#L11" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">sharedLock</span>(syncObj: *<span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_System_pushContext"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">System.</span><span class="api-item-title-strong">pushContext</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\system.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Push a new execution context for the given block of code. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span> <span class="SFct">pushContext</span>(cxt: <span class="SCst">Swag</span>.<span class="SCst">Context</span>, stmt: <span class="STpe">code</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Threading_Thread"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Threading.</span><span class="api-item-title-strong">Thread</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">userLambda</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">closure</span>(<span class="SCst">Core</span>.<span class="SCst">Threading</span>.<span class="SCst"><a href="#Core_Threading_Thread">Thread</a></span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">context</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Swag</span>.<span class="SCst">Context</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">userParam</span></td>
<td class="code-type"><span class="SCde">*<span class="STpe">void</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">priority</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Core</span>.<span class="SCst">Threading</span>.<span class="SCst"><a href="#Core_Threading_ThreadPriority">ThreadPriority</a></span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">handle</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> *<span class="STpe">void</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">id</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">requestEnd</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Threading_Thread_init"><span class="SCde"><span class="SFct">init</span>()</spa</a></td>
<td>Initialize a thread in pause state. </td>
</tr>
<tr>
<td><a href="#Core_Threading_Thread_isDone"><span class="SCde"><span class="SFct">isDone</span>()</spa</a></td>
<td>Returns true if the thread has finished. </td>
</tr>
<tr>
<td><a href="#Core_Threading_Thread_isValid"><span class="SCde"><span class="SFct">isValid</span>()</spa</a></td>
<td>Returns true if the thread is valid. </td>
</tr>
<tr>
<td><a href="#Core_Threading_Thread_safeForceEnd"><span class="SCde"><span class="SFct">safeForceEnd</span>()</spa</a></td>
<td>Force the thread to safely exist  User code needs to check for <code class="inline-code">requestEnd</code>. </td>
</tr>
<tr>
<td><a href="#Core_Threading_Thread_setPriority"><span class="SCde"><span class="SFct">setPriority</span>()</spa</a></td>
<td>Set the thread priority. </td>
</tr>
<tr>
<td><a href="#Core_Threading_Thread_sleep"><span class="SCde"><span class="SFct">sleep</span>()</spa</a></td>
<td>Sleep the current thread for a given amount of milliseconds. </td>
</tr>
<tr>
<td><a href="#Core_Threading_Thread_start"><span class="SCde"><span class="SFct">start</span>()</spa</a></td>
<td>Resume the given thread, if it was paused. </td>
</tr>
<tr>
<td><a href="#Core_Threading_Thread_wait"><span class="SCde"><span class="SFct">wait</span>()</spa</a></td>
<td>Wait for the given thread to be done, and close it  After that call, isValid() will return false. </td>
</tr>
<tr>
<td><a href="#Core_Threading_Thread_yield"><span class="SCde"><span class="SFct">yield</span>()</spa</a></td>
<td>Sleep the current thread for a given amount of milliseconds. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Threading_Thread_init"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Thread.</span><span class="api-item-title-strong">init</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.win32.swg#L57" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize a thread in pause state. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">init</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, lambda: <span class="SKwd">closure</span>(<span class="SCst">Core</span>.<span class="SCst">Threading</span>.<span class="SCst"><a href="#Core_Threading_Thread">Thread</a></span>), userParam: *<span class="STpe">void</span> = <span class="SKwd">null</span>, priority = <span class="SCst"><a href="#Core_Threading_ThreadPriority">ThreadPriority</a></span>.<span class="SCst">Normal</span>, tempAllocSize: <span class="STpe">s32</span> = -<span class="SNum">1</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Threading_Thread_isDone"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Thread.</span><span class="api-item-title-strong">isDone</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.win32.swg#L120" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the thread has finished. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isDone</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Threading_Thread_isValid"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Thread.</span><span class="api-item-title-strong">isValid</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the thread is valid. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isValid</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Threading_Thread_safeForceEnd"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Thread.</span><span class="api-item-title-strong">safeForceEnd</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.swg#L44" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Force the thread to safely exist  User code needs to check for <code class="inline-code">requestEnd</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">safeForceEnd</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Threading_Thread_setPriority"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Thread.</span><span class="api-item-title-strong">setPriority</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.win32.swg#L86" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Set the thread priority. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setPriority</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, priority: <span class="SCst">Core</span>.<span class="SCst">Threading</span>.<span class="SCst"><a href="#Core_Threading_ThreadPriority">ThreadPriority</a></span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Threading_Thread_sleep"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Thread.</span><span class="api-item-title-strong">sleep</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.win32.swg#L45" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sleep the current thread for a given amount of milliseconds. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">sleep</span>(ms: <span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_Duration">Duration</a></span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Threading_Thread_start"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Thread.</span><span class="api-item-title-strong">start</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.win32.swg#L79" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Resume the given thread, if it was paused. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">start</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Threading_Thread_wait"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Thread.</span><span class="api-item-title-strong">wait</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.win32.swg#L111" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Wait for the given thread to be done, and close it  After that call, isValid() will return false. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">wait</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Threading_Thread_yield"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Thread.</span><span class="api-item-title-strong">yield</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.win32.swg#L51" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Sleep the current thread for a given amount of milliseconds. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">yield</span>()</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Threading_ThreadPriority"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Threading.</span><span class="api-item-title-strong">ThreadPriority</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Lowest</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">BelowNormal</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Normal</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">AboveNormal</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Highest</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Threading_wait"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Threading.</span><span class="api-item-title-strong">wait</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\thread\thread.win32.swg#L16" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Wait multiple threads. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">wait</span>(threads: *<span class="SCst">Core</span>.<span class="SCst">Threading</span>.<span class="SCst"><a href="#Core_Threading_Thread">Thread</a></span>...)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_DateTime"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">DateTime</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Represents an instant in time, typically expressed as a date and time of day. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">year</span></td>
<td class="code-type"><span class="STpe">u16</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">month</span></td>
<td class="code-type"><span class="STpe">u16</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">day</span></td>
<td class="code-type"><span class="STpe">u16</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">hour</span></td>
<td class="code-type"><span class="STpe">u16</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">minute</span></td>
<td class="code-type"><span class="STpe">u16</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">second</span></td>
<td class="code-type"><span class="STpe">u16</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">millisecond</span></td>
<td class="code-type"><span class="STpe">u16</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_DateTime_dayOfWeek"><span class="SCde"><span class="SFct">dayOfWeek</span>()</spa</a></td>
<td>Returns the day of week of the current date. </td>
</tr>
<tr>
<td><a href="#Core_Time_DateTime_dayOfWeekName"><span class="SCde"><span class="SFct">dayOfWeekName</span>()</spa</a></td>
<td>Returns the day of week name. </td>
</tr>
<tr>
<td><a href="#Core_Time_DateTime_isValid"><span class="SCde"><span class="SFct">isValid</span>()</spa</a></td>
<td>Returns true if this is a valid datatime. </td>
</tr>
<tr>
<td><a href="#Core_Time_DateTime_monthName"><span class="SCde"><span class="SFct">monthName</span>()</spa</a></td>
<td>Returns the month name. </td>
</tr>
<tr>
<td><a href="#Core_Time_DateTime_now"><span class="SCde"><span class="SFct">now</span>()</spa</a></td>
<td>Returns a DateTime containing the current date and time. </td>
</tr>
<tr>
<td><a href="#Core_Time_DateTime_parse"><span class="SCde"><span class="SFct">parse</span>()</spa</a></td>
<td>Convert a string to a DateTime with the given format. </td>
</tr>
<tr>
<td><a href="#Core_Time_DateTime_setNow"><span class="SCde"><span class="SFct">setNow</span>()</spa</a></td>
<td>Initialize the structure with the current local date and time. </td>
</tr>
<tr>
<td><a href="#Core_Time_DateTime_toString"><span class="SCde"><span class="SFct">toString</span>()</spa</a></td>
<td>Convert to string. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_DateTime_opCmp"><span class="SCde"><span class="SFct">opCmp</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Time_DateTime_opEquals"><span class="SCde"><span class="SFct">opEquals</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_DateTime_IConvert_convert"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IConvert.</span><span class="api-item-title-strong">convert</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L341" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">convert</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, buf: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>, fmt: <span class="SKwd">const</span> *<span class="SCst">Core</span>.<span class="SCst">StrConv</span>.<span class="SCst"><a href="#Core_StrConv_ConvertFormat">ConvertFormat</a></span>, strFormat: <span class="STpe">string</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_DateTime_dayOfWeek"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">DateTime.</span><span class="api-item-title-strong">dayOfWeek</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L79" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the day of week of the current date. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">dayOfWeek</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_DayOfWeek">DayOfWeek</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_DateTime_dayOfWeekName"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">DateTime.</span><span class="api-item-title-strong">dayOfWeekName</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L96" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the day of week name. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">dayOfWeekName</span>(day: <span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_DayOfWeek">DayOfWeek</a></span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_DateTime_isValid"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">DateTime.</span><span class="api-item-title-strong">isValid</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L66" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if this is a valid datatime. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isValid</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_DateTime_monthName"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">DateTime.</span><span class="api-item-title-strong">monthName</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L89" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the month name. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">monthName</span>(month: <span class="STpe">u16</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_DateTime_now"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">DateTime.</span><span class="api-item-title-strong">now</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.win32.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a DateTime containing the current date and time. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">now</span>()-&gt;<span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_DateTime">DateTime</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_DateTime_opCmp"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">DateTime.</span><span class="api-item-title-strong">opCmp</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L46" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opCmp</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_DateTime">DateTime</a></span>)-&gt;<span class="STpe">s32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_DateTime_opEquals"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">DateTime.</span><span class="api-item-title-strong">opEquals</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opEquals</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_DateTime">DateTime</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_DateTime_parse"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">DateTime.</span><span class="api-item-title-strong">parse</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L102" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a string to a DateTime with the given format. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">parse</span>(str: <span class="STpe">string</span>, fmt = <span class="SCst"><a href="#Core_Time_DateTimeFormat">DateTimeFormat</a></span>.<span class="SCst"><a href="#Core_Time_DateTime">DateTime</a></span>, checkDate = <span class="SKwd">true</span>)-&gt;{value: <span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_DateTime">DateTime</a></span>, eat: <span class="STpe">u32</span>} <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_DateTime_setNow"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">DateTime.</span><span class="api-item-title-strong">setNow</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.win32.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize the structure with the current local date and time. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setNow</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_DateTime_toString"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">DateTime.</span><span class="api-item-title-strong">toString</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L283" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert to string. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toString</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, fmt = <span class="SCst"><a href="#Core_Time_DateTimeFormat">DateTimeFormat</a></span>.<span class="SCst"><a href="#Core_Time_DateTime">DateTime</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_DateTimeFormat"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">DateTimeFormat</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">DateTime</span></td>
<td>DDDD MMMM D YYYY HH:MM:SS. </td>
</tr>
<tr>
<td class="code-type"><span class="SCst">DateTimeMs</span></td>
<td>DDDD MMMM D YYYY HH:MM:SS.ZZZ. </td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Iso</span></td>
<td>YYYY-MM-DD HH:MM:SS. </td>
</tr>
<tr>
<td class="code-type"><span class="SCst">IsoMs</span></td>
<td>YYYY-MM-DD HH:MM:SS.ZZZ. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_DayOfWeek"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">DayOfWeek</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\datetime.swg#L7" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Sunday</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Monday</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Tuesday</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Wednesday</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Thursday</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Friday</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Saturday</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Duration"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">Duration</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\duration.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Represents a delay, expressed in seconds. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">timeInSeconds</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td>The duration in seconds. </td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_Duration_fromMs"><span class="SCde"><span class="SFct">fromMs</span>()</spa</a></td>
<td>Returns a duration initialized with milliseconds. </td>
</tr>
<tr>
<td><a href="#Core_Time_Duration_toMs"><span class="SCde"><span class="SFct">toMs</span>()</spa</a></td>
<td>Returns the value in milliseconds. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_Duration_opAffect"><span class="SCde"><span class="SFct">opAffect</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Time_Duration_opAffectSuffix"><span class="SCde"><span class="SFct">opAffectSuffix</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Duration_fromMs"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Duration.</span><span class="api-item-title-strong">fromMs</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\duration.swg#L39" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a duration initialized with milliseconds. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">fromMs</span>(valueMs: <span class="STpe">u32</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_Duration">Duration</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Duration_opAffect"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Duration.</span><span class="api-item-title-strong">opAffect</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\duration.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opAffect</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, valueMs: <span class="STpe">s32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Duration_opAffectSuffix"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Duration.</span><span class="api-item-title-strong">opAffectSuffix</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\duration.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(suffix: <span class="STpe">string</span>) <span class="SFct">opAffectSuffix</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, value: <span class="STpe">s32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Duration_toMs"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Duration.</span><span class="api-item-title-strong">toMs</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\duration.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the value in milliseconds. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toMs</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_FrameTiming"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">FrameTiming</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\frametiming.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">dtMin</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">dtMax</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">dt</span></td>
<td class="code-type"><span class="STpe">f32</span></td>
<td>Current delta time, in seconds. </td>
</tr>
<tr>
<td class="code-type"><span class="SCde">frameCount</span></td>
<td class="code-type"><span class="STpe">u32</span></td>
<td>Frame counter. </td>
</tr>
<tr>
<td class="code-type"><span class="SCde">prevTick</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">paused</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_FrameTiming_pause"><span class="SCde"><span class="SFct">pause</span>()</spa</a></td>
<td>Pause frame timing & count. </td>
</tr>
<tr>
<td><a href="#Core_Time_FrameTiming_unpause"><span class="SCde"><span class="SFct">unpause</span>()</spa</a></td>
<td>Unpause frame timing & count. </td>
</tr>
<tr>
<td><a href="#Core_Time_FrameTiming_update"><span class="SCde"><span class="SFct">update</span>()</spa</a></td>
<td>Update frame timers. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_FrameTiming_pause"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">FrameTiming.</span><span class="api-item-title-strong">pause</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\frametiming.swg#L44" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Pause frame timing & count. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">pause</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_FrameTiming_unpause"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">FrameTiming.</span><span class="api-item-title-strong">unpause</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\frametiming.swg#L50" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Unpause frame timing & count. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">unpause</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_FrameTiming_update"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">FrameTiming.</span><span class="api-item-title-strong">update</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\frametiming.swg#L19" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Update frame timers. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">update</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Stopwatch"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">Stopwatch</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L4" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Provides a set of methods and properties that you can use to accurately measure elapsed time. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">isStarted</span></td>
<td class="code-type"><span class="STpe">bool</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">startTimeStamp</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">elapsedTicks</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_Stopwatch_elapsedMicroseconds"><span class="SCde"><span class="SFct">elapsedMicroseconds</span>()</spa</a></td>
<td>Gets the total elapsed time in microseconds, after a call to <code class="inline-code">stop</code>. </td>
</tr>
<tr>
<td><a href="#Core_Time_Stopwatch_elapsedMicrosecondsNow"><span class="SCde"><span class="SFct">elapsedMicrosecondsNow</span>()</spa</a></td>
<td>Gets the current elapsed time in milliseconds since the start. </td>
</tr>
<tr>
<td><a href="#Core_Time_Stopwatch_elapsedMilliseconds"><span class="SCde"><span class="SFct">elapsedMilliseconds</span>()</spa</a></td>
<td>Gets the total elapsed time in milliseconds, after a call to <code class="inline-code">stop</code>. </td>
</tr>
<tr>
<td><a href="#Core_Time_Stopwatch_elapsedMillisecondsNow"><span class="SCde"><span class="SFct">elapsedMillisecondsNow</span>()</spa</a></td>
<td>Gets the current elapsed time in milliseconds since the start. </td>
</tr>
<tr>
<td><a href="#Core_Time_Stopwatch_reset"><span class="SCde"><span class="SFct">reset</span>()</spa</a></td>
<td>Stops time interval measurement and resets the elapsed time to zero. </td>
</tr>
<tr>
<td><a href="#Core_Time_Stopwatch_restart"><span class="SCde"><span class="SFct">restart</span>()</spa</a></td>
<td>Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time. </td>
</tr>
<tr>
<td><a href="#Core_Time_Stopwatch_scopeMeasure"><span class="SCde"><span class="SFct">scopeMeasure</span>()</spa</a></td>
<td>Measure until the end of the scope, and print the result in the console. </td>
</tr>
<tr>
<td><a href="#Core_Time_Stopwatch_start"><span class="SCde"><span class="SFct">start</span>()</spa</a></td>
<td>Starts, or resumes, measuring elapsed time for an interval. </td>
</tr>
<tr>
<td><a href="#Core_Time_Stopwatch_stop"><span class="SCde"><span class="SFct">stop</span>()</spa</a></td>
<td>Stops measuring elapsed time for an interval. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Stopwatch_elapsedMicroseconds"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Stopwatch.</span><span class="api-item-title-strong">elapsedMicroseconds</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L74" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Gets the total elapsed time in microseconds, after a call to <code class="inline-code">stop</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">elapsedMicroseconds</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Stopwatch_elapsedMicrosecondsNow"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Stopwatch.</span><span class="api-item-title-strong">elapsedMicrosecondsNow</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L60" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Gets the current elapsed time in milliseconds since the start. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">elapsedMicrosecondsNow</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Stopwatch_elapsedMilliseconds"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Stopwatch.</span><span class="api-item-title-strong">elapsedMilliseconds</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L68" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Gets the total elapsed time in milliseconds, after a call to <code class="inline-code">stop</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">elapsedMilliseconds</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Stopwatch_elapsedMillisecondsNow"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Stopwatch.</span><span class="api-item-title-strong">elapsedMillisecondsNow</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L52" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Gets the current elapsed time in milliseconds since the start. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">elapsedMillisecondsNow</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Stopwatch_reset"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Stopwatch.</span><span class="api-item-title-strong">reset</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Stops time interval measurement and resets the elapsed time to zero. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">reset</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Stopwatch_restart"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Stopwatch.</span><span class="api-item-title-strong">restart</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L44" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">restart</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Stopwatch_scopeMeasure"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Stopwatch.</span><span class="api-item-title-strong">scopeMeasure</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L81" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Measure until the end of the scope, and print the result in the console. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span> <span class="SFct">scopeMeasure</span>(name: <span class="STpe">string</span> = <span class="SStr">"stopwatch"</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Stopwatch_start"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Stopwatch.</span><span class="api-item-title-strong">start</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Starts, or resumes, measuring elapsed time for an interval. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">start</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Stopwatch_stop"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Stopwatch.</span><span class="api-item-title-strong">stop</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\stopwatch.swg#L24" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Stops measuring elapsed time for an interval. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">stop</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">TimeSpan</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Represents an interval of time, stored as a 64 bits integer. </p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">ticks</span></td>
<td class="code-type"><span class="STpe">u64</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_TimeSpan_addDays"><span class="SCde"><span class="SFct">addDays</span>()</spa</a></td>
<td>Add or remove the given amount of days to the TimeSpan. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_addHours"><span class="SCde"><span class="SFct">addHours</span>()</spa</a></td>
<td>Add or remove the given amount of hours to the TimeSpan. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_addMilliSeconds"><span class="SCde"><span class="SFct">addMilliSeconds</span>()</spa</a></td>
<td>Add or remove the given amount of minutes to the TimeSpan. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_addMinutes"><span class="SCde"><span class="SFct">addMinutes</span>()</spa</a></td>
<td>Add or remove the given amount of minutes to the TimeSpan. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_addMonths"><span class="SCde"><span class="SFct">addMonths</span>()</spa</a></td>
<td>Add or remove the given amount of months to the TimeSpan. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_addSeconds"><span class="SCde"><span class="SFct">addSeconds</span>()</spa</a></td>
<td>Add or remove the given amount of minutes to the TimeSpan. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_addYears"><span class="SCde"><span class="SFct">addYears</span>()</spa</a></td>
<td>Add or remove the given amount of years to the TimeSpan. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_from"><span class="SCde"><span class="SFct">from</span>()</spa</a></td>
<td>Creates a TimeSpan with the given DateTime. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_now"><span class="SCde"><span class="SFct">now</span>()</spa</a></td>
<td>Returns the current date and time. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_setNow"><span class="SCde"><span class="SFct">setNow</span>()</spa</a></td>
<td>Initialize the TimeSpan with the current date and time. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_toDateTime"><span class="SCde"><span class="SFct">toDateTime</span>()</spa</a></td>
<td>Converts a TimeSpan to a DateTime. </td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_totalDays"><span class="SCde"><span class="SFct">totalDays</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_totalHours"><span class="SCde"><span class="SFct">totalHours</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_totalMilliSeconds"><span class="SCde"><span class="SFct">totalMilliSeconds</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_totalMinutes"><span class="SCde"><span class="SFct">totalMinutes</span>()</spa</a></td>
<td></td>
</tr>
<tr>
<td><a href="#Core_Time_TimeSpan_totalSeconds"><span class="SCde"><span class="SFct">totalSeconds</span>()</spa</a></td>
<td></td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_TimeSpan_opCmp"><span class="SCde"><span class="SFct">opCmp</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan_addDays"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TimeSpan.</span><span class="api-item-title-strong">addDays</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L84" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add or remove the given amount of days to the TimeSpan. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">addDays</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, days: <span class="STpe">s32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan_addHours"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TimeSpan.</span><span class="api-item-title-strong">addHours</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L93" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add or remove the given amount of hours to the TimeSpan. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">addHours</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, hours: <span class="STpe">s32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan_addMilliSeconds"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TimeSpan.</span><span class="api-item-title-strong">addMilliSeconds</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L120" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add or remove the given amount of minutes to the TimeSpan. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">addMilliSeconds</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, milliSeconds: <span class="STpe">s32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan_addMinutes"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TimeSpan.</span><span class="api-item-title-strong">addMinutes</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L102" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add or remove the given amount of minutes to the TimeSpan. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">addMinutes</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, minutes: <span class="STpe">s32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan_addMonths"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TimeSpan.</span><span class="api-item-title-strong">addMonths</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L61" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add or remove the given amount of months to the TimeSpan. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">addMonths</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, months: <span class="STpe">s32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan_addSeconds"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TimeSpan.</span><span class="api-item-title-strong">addSeconds</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L111" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add or remove the given amount of minutes to the TimeSpan. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">addSeconds</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, seconds: <span class="STpe">s32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan_addYears"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TimeSpan.</span><span class="api-item-title-strong">addYears</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L54" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Add or remove the given amount of years to the TimeSpan. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">addYears</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, years: <span class="STpe">s32</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan_from"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TimeSpan.</span><span class="api-item-title-strong">from</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a TimeSpan with the given DateTime. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">from</span>(dateTime: <span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_DateTime">DateTime</a></span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_TimeSpan">TimeSpan</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan_now"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TimeSpan.</span><span class="api-item-title-strong">now</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L18" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the current date and time. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">now</span>()-&gt;<span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_TimeSpan">TimeSpan</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan_opCmp"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TimeSpan.</span><span class="api-item-title-strong">opCmp</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opCmp</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_TimeSpan">TimeSpan</a></span>)-&gt;<span class="STpe">s32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan_setNow"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TimeSpan.</span><span class="api-item-title-strong">setNow</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize the TimeSpan with the current date and time. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">setNow</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan_toDateTime"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TimeSpan.</span><span class="api-item-title-strong">toDateTime</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L44" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Converts a TimeSpan to a DateTime. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toDateTime</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_DateTime">DateTime</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan_totalDays"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TimeSpan.</span><span class="api-item-title-strong">totalDays</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L128" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">totalDays</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan_totalHours"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TimeSpan.</span><span class="api-item-title-strong">totalHours</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L129" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">totalHours</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan_totalMilliSeconds"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TimeSpan.</span><span class="api-item-title-strong">totalMilliSeconds</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L132" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">totalMilliSeconds</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan_totalMinutes"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TimeSpan.</span><span class="api-item-title-strong">totalMinutes</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L130" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">totalMinutes</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_TimeSpan_totalSeconds"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">TimeSpan.</span><span class="api-item-title-strong">totalSeconds</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timespan.swg#L131" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">totalSeconds</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">f64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Timer"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">Timer</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timer.swg#L6" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde">userLambda</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_Timer">Timer</a></span>)</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">handle</span></td>
<td class="code-type"><span class="SCde"><span class="SKwd">const</span> *<span class="STpe">void</span></span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCde">context</span></td>
<td class="code-type"><span class="SCde"><span class="SCst">Swag</span>.<span class="SCst">Context</span></span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_Time_Timer_create"><span class="SCde"><span class="SFct">create</span>()</spa</a></td>
<td>Creates a new timer. </td>
</tr>
<tr>
<td><a href="#Core_Time_Timer_init"><span class="SCde"><span class="SFct">init</span>()</spa</a></td>
<td>Initialize timer. </td>
</tr>
<tr>
<td><a href="#Core_Time_Timer_release"><span class="SCde"><span class="SFct">release</span>()</spa</a></td>
<td>Release the timer. </td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Timer_create"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Timer.</span><span class="api-item-title-strong">create</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timer.win32.swg#L17" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Creates a new timer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">create</span>(elapsedTimeMs: <span class="STpe">u32</span>, lambda: <span class="SKwd">func</span>(<span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_Timer">Timer</a></span>), periodic = <span class="SKwd">false</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_Timer">Timer</a></span> <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Timer_init"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Timer.</span><span class="api-item-title-strong">init</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timer.win32.swg#L25" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Initialize timer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">init</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, elapsedTimeMs: <span class="STpe">u32</span>, lambda: <span class="SKwd">func</span>(<span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_Timer">Timer</a></span>), periodic = <span class="SKwd">false</span>) <span class="SKwd">throw</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_Timer_release"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Timer.</span><span class="api-item-title-strong">release</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\timer.win32.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Release the timer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">release</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_dateToTicks"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">dateToTicks</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.swg#L72" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a date to a 64 bits value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">dateToTicks</span>(year: <span class="STpe">u16</span>, month: <span class="STpe">u16</span>, day: <span class="STpe">u16</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_Ticks">Ticks</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_daysInMonth"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">daysInMonth</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.swg#L134" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the number of days of the given month, for the given year. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">daysInMonth</span>(year: <span class="STpe">u16</span>, month: <span class="STpe">u16</span>)-&gt;<span class="STpe">u16</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_isLeapYear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">isLeapYear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.swg#L128" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given year is a leap year. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isLeapYear</span>(year: <span class="STpe">u16</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_nowMicroseconds"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">nowMicroseconds</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the current time expressed in microseconds. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nowMicroseconds</span>()-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_nowMilliseconds"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">nowMilliseconds</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the current time expressed in milliseconds. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nowMilliseconds</span>()-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_nowPrecise"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">nowPrecise</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.win32.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get current time precise value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">nowPrecise</span>()-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_preciseFrequency"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">preciseFrequency</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.win32.swg#L21" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>The frequency of the precise counter, in ticks per second. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">preciseFrequency</span>()-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_ticksToDate"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">ticksToDate</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.swg#L85" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a 64 bits value to a date. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">ticksToDate</span>(ticks: <span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_Ticks">Ticks</a></span>)-&gt;{year: <span class="STpe">u16</span>, month: <span class="STpe">u16</span>, day: <span class="STpe">u16</span>}</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_ticksToTime"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">ticksToTime</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.swg#L61" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a 64 bits tick value to a time. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">ticksToTime</span>(ticks: <span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_Ticks">Ticks</a></span>)-&gt;{hour: <span class="STpe">u16</span>, minute: <span class="STpe">u16</span>, second: <span class="STpe">u16</span>, millisecond: <span class="STpe">u16</span>}</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Time_timeToTicks"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Time.</span><span class="api-item-title-strong">timeToTicks</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\time\time.swg#L45" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a time to a 64 bits value. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">timeToTicks</span>(hour: <span class="STpe">u16</span>, minute: <span class="STpe">u16</span>, second: <span class="STpe">u16</span>, millisecond: <span class="STpe">u16</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst">Time</span>.<span class="SCst"><a href="#Core_Time_Ticks">Ticks</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Tokenize_eatCount"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Tokenize.</span><span class="api-item-title-strong">eatCount</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\tokenize.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Eat <code class="inline-code">count</code> bytes, and returns the remaining string. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">eatCount</span>(str: <span class="STpe">string</span>, count: <span class="STpe">u64</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Tokenize_eatQuotes"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Tokenize.</span><span class="api-item-title-strong">eatQuotes</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\tokenize.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Remove "". </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">eatQuotes</span>(str: <span class="STpe">string</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Tokenize_eatSpaces"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Tokenize.</span><span class="api-item-title-strong">eatSpaces</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\tokenize.swg#L23" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Eat all spaces, and returns the remaining string (trim left). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">eatSpaces</span>(str: <span class="STpe">string</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Tokenize_getTo"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Tokenize.</span><span class="api-item-title-strong">getTo</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\tokenize.swg#L165" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns a sub string starting at <code class="inline-code">startByteIndex</code> and ending with <code class="inline-code">delimiter</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getTo</span>(src: <span class="STpe">string</span>, delimiter: <span class="STpe">u8</span>, startByteIndex = <span class="SNum">0</span>'<span class="STpe">u64</span>, includeDelimiter = <span class="SKwd">true</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Tokenize_getToSpace"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Tokenize.</span><span class="api-item-title-strong">getToSpace</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\tokenize.swg#L145" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the first substring of <code class="inline-code">str</code>, stopping at the first blank character. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getToSpace</span>(str: <span class="STpe">string</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Tokenize_getWhileAlnum"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Tokenize.</span><span class="api-item-title-strong">getWhileAlnum</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\tokenize.swg#L155" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the first substring of <code class="inline-code">str</code> containing only digits and letters. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getWhileAlnum</span>(str: <span class="STpe">string</span>)-&gt;<span class="STpe">string</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Tokenize_split"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Tokenize.</span><span class="api-item-title-strong">split</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\tokenize.swg#L77" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Split string into sub strings, given an array of rune separators  Note that this returns an array of native strings, not copies.  All strings will be invalid if <code class="inline-code">src</code> String is destroyed. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">split</span>(src: <span class="STpe">string</span>, separators: <span class="SKwd">const</span> [..] <span class="STpe">rune</span>, maxSplit: <span class="STpe">u32</span> = <span class="SNum">0</span>, removeEmpty = <span class="SKwd">true</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">string</span>)</span></code>
</div>
<p>Split string into sub strings, given a rune separator  Note that this returns an array of native strings, not copies.  All strings will be invalid if <code class="inline-code">src</code> is destroyed. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">split</span>(src: <span class="STpe">string</span>, separator: <span class="STpe">rune</span>, maxSplit: <span class="STpe">u32</span> = <span class="SNum">0</span>, removeEmpty = <span class="SKwd">true</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">string</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Tokenize_splitLines"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Tokenize.</span><span class="api-item-title-strong">splitLines</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\tokenize.swg#L37" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Split the string into an array of lines  Note that this returns an array of native strings, not copies.  All strings will be invalid if <code class="inline-code">src</code> is destroyed. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">splitLines</span>(src: <span class="STpe">string</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">string</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_UUID"><span class="api-item-title-kind">struct</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">UUID</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\uuid.swg#L9" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCde"><span class="SKwd">using</span> uuid</span></td>
<td class="code-type"><span class="SCde">{val8: [<span class="SNum">16</span>] <span class="STpe">u8</span>, val64: [<span class="SNum">2</span>] <span class="STpe">u64</span>}</span></td>
<td></td>
</tr>
</table>
<h3>Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_UUID_clear"><span class="SCde"><span class="SFct">clear</span>()</spa</a></td>
<td>Clear id. </td>
</tr>
<tr>
<td><a href="#Core_UUID_getRandom"><span class="SCde"><span class="SFct">getRandom</span>()</spa</a></td>
<td>Get a version 4 UUID (random). </td>
</tr>
<tr>
<td><a href="#Core_UUID_toString"><span class="SCde"><span class="SFct">toString</span>(<span class="SKwd">self</span>)</span></a></td>
<td>Convert uuid to a string. </td>
</tr>
<tr>
<td><a href="#Core_UUID_toString"><span class="SCde"><span class="SFct">toString</span>(<span class="SKwd">self</span>, [..] <span class="STpe">u8</span>)</span></a></td>
<td>Convert uuid to a string of the form xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx. </td>
</tr>
</table>
<h3>Special Functions</h3>
<table class="enumeration">
<tr>
<td><a href="#Core_UUID_opEquals"><span class="SCde"><span class="SFct">opEquals</span>()</spa</a></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_UUID_IConvert_convert"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IConvert.</span><span class="api-item-title-strong">convert</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\uuid.swg#L120" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">convert</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, buf: *<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_ConcatBuffer">ConcatBuffer</a></span>, fmt: <span class="SKwd">const</span> *<span class="SCst">Core</span>.<span class="SCst">StrConv</span>.<span class="SCst"><a href="#Core_StrConv_ConvertFormat">ConvertFormat</a></span>, strFormat: <span class="STpe">string</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_UUID_IHash32_compute"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">IHash32.</span><span class="api-item-title-strong">compute</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\uuid.swg#L128" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">compute</span>(<span class="SKwd">using</span> <span class="SKwd">const</span> <span class="SKwd">self</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_UUID_clear"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">UUID.</span><span class="api-item-title-strong">clear</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\uuid.swg#L52" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Clear id. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">clear</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_UUID_getRandom"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">UUID.</span><span class="api-item-title-strong">getRandom</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\uuid.swg#L40" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get a version 4 UUID (random). </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">getRandom</span>()-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_UUID">UUID</a></span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_UUID_opEquals"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">UUID.</span><span class="api-item-title-strong">opEquals</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\uuid.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">opEquals</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, other: <span class="SCst">Core</span>.<span class="SCst"><a href="#Core_UUID">UUID</a></span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_UUID_toString"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">UUID.</span><span class="api-item-title-strong">toString</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\uuid.swg#L108" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert uuid to a string. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toString</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p>Convert uuid to a string of the form xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toString</span>(<span class="SKwd">using</span> <span class="SKwd">self</span>, result: [..] <span class="STpe">u8</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_fromUtf8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">fromUtf8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L142" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer to a character sequence, and returns the  number of valid elements in the destination buffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">fromUtf8</span>(dest: [..] <span class="STpe">rune</span>, src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>Convert an utf8 buffer to a character sequence. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">fromUtf8</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">rune</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_isAscii"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">isAscii</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L14" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isAscii</span>(c: <span class="STpe">rune</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_isControl"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">isControl</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L34" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isControl</span>(c: <span class="STpe">rune</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_isDigit"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">isDigit</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L20" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isDigit</span>(c: <span class="STpe">rune</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_isLatin1"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">isLatin1</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L13" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isLatin1</span>(c: <span class="STpe">rune</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_isLetter"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">isLetter</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L48" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isLetter</span>(c: <span class="STpe">rune</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_isLetterOrDigit"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">isLetterOrDigit</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L67" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isLetterOrDigit</span>(c: <span class="STpe">rune</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_isLower"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">isLower</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L81" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isLower</span>(c: <span class="STpe">rune</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_isNumber"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">isNumber</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L27" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isNumber</span>(c: <span class="STpe">rune</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_isSpace"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">isSpace</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L41" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isSpace</span>(c: <span class="STpe">rune</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_isSymbol"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">isSymbol</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L55" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isSymbol</span>(c: <span class="STpe">rune</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_isSymbolMath"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">isSymbolMath</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L62" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isSymbolMath</span>(c: <span class="STpe">rune</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_isTitle"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">isTitle</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L74" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isTitle</span>(c: <span class="STpe">rune</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_isUpper"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">isUpper</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L88" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isUpper</span>(c: <span class="STpe">rune</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_makeLower"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">makeLower</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L186" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Make a rune buffer lower case. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">makeLower</span>(buffer: [..] <span class="STpe">rune</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_makeUpper"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">makeUpper</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L175" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Make a rune buffer upper case. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">makeUpper</span>(buffer: [..] <span class="STpe">rune</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_toLower"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">toLower</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L95" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toLower</span>(c: <span class="STpe">rune</span>)-&gt;<span class="STpe">rune</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_toTitle"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">toTitle</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L124" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toTitle</span>(c: <span class="STpe">rune</span>)-&gt;<span class="STpe">rune</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Unicode_toUpper"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Unicode.</span><span class="api-item-title-strong">toUpper</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\unicode.swg#L109" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toUpper</span>(c: <span class="STpe">rune</span>)-&gt;<span class="STpe">rune</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf16_decodeRune"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf16.</span><span class="api-item-title-strong">decodeRune</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf16.swg#L12" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the unicode character pointed by <code class="inline-code">buffer</code>, and the number of u16 to encode it  Will return <code class="inline-code">RuneError</code> for an invalid utf16 sequence. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">decodeRune</span>(buffer: <span class="SKwd">const</span> [..] <span class="STpe">u16</span>)-&gt;{c: <span class="STpe">rune</span>, eat: <span class="STpe">u32</span>}</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf16_encodeRune"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf16.</span><span class="api-item-title-strong">encodeRune</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf16.swg#L38" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert unicode character <code class="inline-code">src</code> to an utf16 sequence, and returns  the number of u16 that were needed to make the conversion.  <code class="inline-code">dest</code> must be at least 2 u16 long. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">encodeRune</span>(dest: [..] <span class="STpe">u16</span>, src: <span class="STpe">rune</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf16_fromUnicode"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf16.</span><span class="api-item-title-strong">fromUnicode</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf16.swg#L97" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a character array (32 bits unicode) to an utf16 buffer  Returns the number of bytes written in the destination buffer  <code class="inline-code">dest</code> must be at least 2 bytes long. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">fromUnicode</span>(dest: [..] <span class="STpe">u16</span>, src: <span class="SKwd">const</span> [..] <span class="STpe">rune</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>Convert a character array (32 bits unicode) to an utf16 sequence. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">fromUnicode</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">rune</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">u16</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf16_fromUtf8"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf16.</span><span class="api-item-title-strong">fromUtf8</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf16.swg#L61" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf8 buffer to a utf16 buffer, and returns the  number of valid elements in the destination buffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">fromUtf8</span>(dest: [..] <span class="STpe">u16</span>, src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>Convert an utf8 buffer to an utf16 sequence. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">fromUtf8</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">u16</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf16_lengthZeroTerminated"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf16.</span><span class="api-item-title-strong">lengthZeroTerminated</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf16.swg#L133" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compute the string length of a zero terminated utf16 buffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">lengthZeroTerminated</span>(buf: <span class="SKwd">const</span> ^<span class="STpe">u16</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf16_toZeroTerminated"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf16.</span><span class="api-item-title-strong">toZeroTerminated</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf16.swg#L123" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert string to an utf16 array, zero terminated. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">toZeroTerminated</span>(src: <span class="STpe">string</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_Array">Array</a></span>'(<span class="STpe">u16</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_ComparisonType"><span class="api-item-title-kind">enum</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">ComparisonType</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L634" class="src">[src]</a></td>
</tr>
</table>
</p>
<table class="enumeration">
<tr>
<td class="code-type"><span class="SCst">Latin1</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Latin1NoCase</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">Unicode</span></td>
<td></td>
</tr>
<tr>
<td class="code-type"><span class="SCst">UnicodeNoCase</span></td>
<td></td>
</tr>
</table>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_byteIndex"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">byteIndex</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L403" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the byte index of the given rune index. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">byteIndex</span>(buffer: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, charIndex: <span class="STpe">u64</span>)-&gt;{index: <span class="STpe">u64</span>, success: <span class="STpe">bool</span>}</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_compare"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">compare</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L643" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Compare two utf8 buffers with the given algorithm. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">compare</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, dst: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, comparisonType = <span class="SCst"><a href="#Core_Utf8_ComparisonType">ComparisonType</a></span>.<span class="SCst">Latin1</span>)-&gt;<span class="STpe">s32</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_contains"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">contains</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L520" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if <code class="inline-code">src</code> contains the string <code class="inline-code">what</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">contains</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, what: <span class="STpe">string</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_countBytesAt"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">countBytesAt</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L358" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the number of bytes to encode the first rune of the utf8 buffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">countBytesAt</span>(buffer: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p> If it's an invalid encoding, returns 1. </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_countRunes"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">countRunes</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L437" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the number of runes in an utf8 buffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">countRunes</span>(buffer: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_decodeLastRune"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">decodeLastRune</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L81" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the last unicode rune of the utf8 slice, and the number of  bytes to encode it. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">decodeLastRune</span>(buffer: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;{c: <span class="STpe">rune</span>, eat: <span class="STpe">u32</span>}</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_decodeRune"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">decodeRune</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L140" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Get the unicode rune pointed by <code class="inline-code">buffer</code>, and the number of bytes to encode it. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">decodeRune</span>(buffer: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;{c: <span class="STpe">rune</span>, eat: <span class="STpe">u32</span>}</span></code>
</div>
<p> Will return <code class="inline-code">RuneError</code> for an invalid utf8 sequence </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_encodeRune"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">encodeRune</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L234" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert rune <code class="inline-code">src</code> to an utf8 sequence, and returns  the number of bytes that were needed to make the conversion. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">encodeRune</span>(dest: [..] <span class="STpe">u8</span>, src: <span class="STpe">rune</span>)-&gt;<span class="STpe">u32</span></span></code>
</div>
<p> <code class="inline-code">dest</code> must be at least 4 bytes long </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_endsWith"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">endsWith</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L598" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Return true if the string ends with <code class="inline-code">str</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">endsWith</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, str: <span class="STpe">string</span>, comparisonType = <span class="SCst"><a href="#Core_Utf8_ComparisonType">ComparisonType</a></span>.<span class="SCst">Latin1</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_firstRune"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">firstRune</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L609" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the first rune of the slice. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">firstRune</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;<span class="STpe">rune</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_fromUnicode"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">fromUnicode</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L274" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert a rune array to an utf8 buffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">fromUnicode</span>(dest: [..] <span class="STpe">u8</span>, src: <span class="SKwd">const</span> [..] <span class="STpe">rune</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>Convert an unicode buffer to a String. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">fromUnicode</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">rune</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p> Returns the number of bytes written in the destination buffer  <code class="inline-code">dest</code> must be at least 4 bytes long </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_fromUtf16"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">fromUtf16</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L305" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Convert an utf16 array to an utf8 buffer. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">fromUtf16</span>(dest: [..] <span class="STpe">u8</span>, src: <span class="SKwd">const</span> [..] <span class="STpe">u16</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>Convert an utf16 buffer to a String. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">fromUtf16</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">u16</span>)-&gt;<span class="SCst">Core</span>.<span class="SCst"><a href="#Core_String">String</a></span></span></code>
</div>
<p> Returns the number of bytes written in the destination buffer.  <code class="inline-code">dest</code> must be at least 4 bytes long </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_indexOf"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">indexOf</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L464" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Find one of the runes in <code class="inline-code">what</code>, and returns the byte index of it. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">indexOf</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, what: <span class="SKwd">const</span> [..] <span class="STpe">rune</span>, startByteIndex = <span class="SNum">0</span>'<span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>Find the first occurence of rune <code class="inline-code">what</code>, and returns the byte index of it. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">indexOf</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, what: <span class="STpe">rune</span>, startByteIndex = <span class="SNum">0</span>'<span class="STpe">u64</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>Find the given string, and returns the byte index of it. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">indexOf</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, what: <span class="STpe">string</span>, startByteIndex = <span class="SNum">0</span>'<span class="STpe">u64</span>, comparisonType = <span class="SCst"><a href="#Core_Utf8_ComparisonType">ComparisonType</a></span>.<span class="SCst">Latin1</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p> Returns <code class="inline-code">Swag.U64.Max</code> if not found </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_isValid"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">isValid</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L739" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the utf8 sequence is valid. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isValid</span>(buffer: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_isValidRune"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">isValidRune</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L341" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns true if the given unicode rune can be encoded in utf8. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">isValidRune</span>(c: <span class="STpe">rune</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_lastIndexOf"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">lastIndexOf</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L536" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the last index (in bytes) of a rune. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">lastIndexOf</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, what: <span class="SKwd">const</span> [..] <span class="STpe">rune</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>Find the last rune occurence of <code class="inline-code">what</code>, and returns the byte index of it. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">lastIndexOf</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, what: <span class="STpe">rune</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p>Returns the last index (in bytes) of a string. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">lastIndexOf</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, what: <span class="STpe">string</span>, comparisonType = <span class="SCst"><a href="#Core_Utf8_ComparisonType">ComparisonType</a></span>.<span class="SCst">Latin1</span>)-&gt;<span class="STpe">u64</span></span></code>
</div>
<p> Returns <code class="inline-code">Swag.U64.Max</code> if not found </p>
<p> Returns <code class="inline-code">Swag.U64.Max</code> if not found </p>
<p> Returns <code class="inline-code">Swag.U64.Max</code> if not found </p>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_lastRune"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">lastRune</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L622" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Returns the last rune of the slice. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">lastRune</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>)-&gt;<span class="STpe">rune</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_startsWith"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">startsWith</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L587" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Return true if the string starts with <code class="inline-code">str</code>. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span> <span class="SFct">startsWith</span>(src: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, str: <span class="STpe">string</span>, comparisonType = <span class="SCst"><a href="#Core_Utf8_ComparisonType">ComparisonType</a></span>.<span class="SCst">Latin1</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_Utf8_visitRunes"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Utf8.</span><span class="api-item-title-strong">visitRunes</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\text\utf8.swg#L705" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Macro to visit the unicode characters of the utf8 sequence. </p>
<div class="code-block"><code><span class="SCde"><span class="SAtr">#[<a href="swag.runtime.php#Swag_Macro">Swag.Macro</a>]</span>
<span class="SKwd">func</span> <span class="SFct">visitRunes</span>(buffer: <span class="SKwd">const</span> [..] <span class="STpe">u8</span>, stmt: <span class="STpe">code</span>)</span></code>
</div>
<ul>
<li><code class="inline-code">@alias0</code> will contain the character</li>
<li><code class="inline-code">@alias1</code> will contain the character index</li>
<li><code class="inline-code">@alias2</code> will contain the byte index of that character within the utf8 sequence</li>
</ul>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_add"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">add</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\helpers.swg#L22" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">add</span>(flags: <span class="SKwd">ref</span> <span class="SCst">T</span>, value: <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_equals"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">equals</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\helpers.swg#L15" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">equals</span>(flags: <span class="SCst">T</span>, value: <span class="SCst">T</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_has"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">has</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\helpers.swg#L8" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">has</span>(flags: <span class="SCst">T</span>, value: <span class="SCst">T</span>)-&gt;<span class="STpe">bool</span></span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_remove"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">remove</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\helpers.swg#L29" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">remove</span>(flags: <span class="SKwd">ref</span> <span class="SCst">T</span>, value: <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_set"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">set</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\system\helpers.swg#L36" class="src">[src]</a></td>
</tr>
</table>
</p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">set</span>(flags: <span class="SKwd">ref</span> <span class="SCst">T</span>, value: <span class="SCst">T</span>)</span></code>
</div>
<p>
<table class="api-item">
<tr>
<td class="api-item">
<span id="Core_swap"><span class="api-item-title-kind">func</span> <span class="api-item-title-light">Core.</span><span class="api-item-title-strong">swap</span></span>
</td>
<td class="api-item-title-src-ref">
<a href="https://github.com/swag-lang/swag/blob/master/bin/std/modules/core\src\algorithms\generic.swg#L5" class="src">[src]</a></td>
</tr>
</table>
</p>
<p>Swap two values. </p>
<div class="code-block"><code><span class="SCde"><span class="SKwd">func</span>(<span class="SCst">T</span>) <span class="SFct">swap</span>(x: *<span class="SCst">T</span>, y: *<span class="SCst">T</span>)</span></code>
</div>
</div>
</div>
</div>
</body>
</html>
