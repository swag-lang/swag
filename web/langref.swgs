#dependencies
{
    #import "core" location="swag@std"
}

using Core

enum State
{
    Paragraph
    Code
    Test
}

var g_Buf:  String  // Will contain the html page
var g_Toc:  String  // Will contain the left part, i.e. the table of content

var g_State:            Array'State
var g_StateEmpty:       bool
var g_SeekStartState:   u64
var g_SeekCodeEmptyEol: u64
var g_LastEmptyLine:    bool
var g_CptBrace:         s32
var g_SubTitle:         bool

func stateEnter(st: State)
{
    g_StateEmpty = true
    g_SeekStartState = g_Buf.length

    switch st
    {
    case Paragraph:
        g_Buf += "<div>"

    case Code, Test:
        g_Buf += "<div class=\"code\">"
        g_Buf += "<code style=\"white-space: break-spaces\">"
    }
}

func stateLeave(st: State)
{
    if g_StateEmpty
    {
        g_Buf.length = g_SeekStartState
        return
    }

    switch st
    {
    case Paragraph:
        g_Buf += "</div>\n"

    case Code, Test:
        if g_LastEmptyLine
            g_Buf.length = g_SeekCodeEmptyEol
        g_Buf += "</code>"
        g_Buf += "</div>"
    }
}

func pushState(st: State)
{
    stateLeave(g_State.back())
    stateEnter(st)
    g_State.add(st)
}

func popState()
{
    stateLeave(g_State.back())
    g_State.removeBack()
    stateEnter(g_State.back())
}

func addLine(line: string)
{
    var lineTrim: String = line
    lineTrim.trim()

    if Utf8.startsWith(lineTrim, "# ")
    {
        lineTrim.remove(0, 2)
        g_Buf += Format.toString("<h% id=\"%\">", g_SubTitle ? 4 : 3, lineTrim)
        addLine(lineTrim)
        g_Buf += g_SubTitle ? "</h4>" : "</h3>"

        g_Toc += Format.toString("<li><a href=\"#%\">%</a></li>\n", lineTrim, lineTrim);
        return
    }

    g_StateEmpty = false

    stateBold   := false
    stateItalic := false
    stateCode   := false

    for i := 0; i < @countof(line); i += 1
    {
        if line[i] == "*"'u8 and line[i+1] == "*"'u8
        {
            if stateBold
                g_Buf += "</b>"
            else
                g_Buf += "<b>"
            i += 1
            stateBold = !stateBold
            continue
        }

        if line[i] == "*"'u8
        {
            if !stateItalic and Latin1.isLetterOrDigit(line[i+1])
            {
                stateItalic = true
                g_Buf += "<i>"
                continue
            }

            if stateItalic
            {
                g_Buf += "</i>"
                stateItalic = false
                continue
            }
        }

        if line[i] == "`"'u8
        {
            if !stateCode
            {
                stateCode = true
                g_Buf += "<code class=\"incode\">"
                continue
            }

            if stateCode
            {
                g_Buf += "</code>"
                stateCode = false
                continue
            }
        }

        g_Buf += line[i]
    }

    g_Buf += "</br>\n"
}

func addLineCode(l: string)
{
    var lineTrim: String = l
    lineTrim.trim()

    if lineTrim.length
    {
        g_StateEmpty = false
        g_LastEmptyLine = false
    }
    else
    {
        g_SeekCodeEmptyEol = g_Buf.length
        g_LastEmptyLine = true
    }

    if !g_StateEmpty
    {
        if Utf8.startsWith(lineTrim, "//")
            g_Buf += "<span class=\"linecomment\">"

        g_Buf += l

        if Utf8.startsWith(lineTrim, "//")
            g_Buf += "</span>"

        g_Buf += "\n"
    }
}

func processFile(fileName: string)
{
    lines := assume File.readAllLines(fileName)

    stateEnter(.Code)
    g_State.add(State.Code)

    visit l: lines
    {
        lineTrim := l
        lineTrim.trim()

        var nextLine: String
        if @index != lines.count - 1
        {
            nextLine = lines[@index+1]
            nextLine.trim()
        }

        if Utf8.startsWith(lineTrim, "/**")
        {
            pushState(.Paragraph)
            continue
        }

        curState := g_State.back()
        switch curState
        {
        case Paragraph:
            if Utf8.startsWith(lineTrim, "```")
            {
                pushState(.Code)
                continue
            }

            if Utf8.startsWith(lineTrim, "*/")
            {
                popState()
                continue
            }

            addLine(lineTrim)

        case Test:
            if lineTrim == "{"
            {
                g_CptBrace += 1
                if g_CptBrace == 1 continue
            }

            if lineTrim == "}"
            {
                g_CptBrace -= 1
                if g_CptBrace == 0
                {
                    popState()
                    continue
                }
            }

            if g_CptBrace == 1 and Utf8.startsWith(lineTrim, "//") and nextLine == "{"
            {
                lineTrim.remove(0, 2)
                popState()
                pushState(.Paragraph)
                addLine("\n")
                addLine(lineTrim)
                popState()
                pushState(.Test)
                continue
            }

            lineLine := l
            if Utf8.startsWith(lineLine, "    ")
                lineLine.remove(0, 4)
            addLineCode(lineLine)

        case Code:
            if Utf8.startsWith(l, "```")
            {
                popState()
                continue
            }

            if Utf8.startsWith(l, "#test")
            {
                pushState(.Test)
                continue
            }

            addLineCode(l)
        }
    }

    while g_State.count
        stateLeave(g_State.popBack())
}

#run
{
    files := assume Directory.enumerateFiles("../bin/reference/tests/language/src", ".swg", recurse: true)
    files.sort(func(a, b) => a.fullname <=> b.fullname)

    g_Buf += "<html lang=\"en\">\n"
    g_Buf += "<body>\n"

    // Create styles
    g_Buf += """
        <style>
        .code {
            background-color: LightYellow;
            border: 1px solid LightGrey;
            margin: 20px;
            padding: 20px;
        }

        .incode {
            background-color: #eeeeee;
            padding: 2px;
            border: 1px dotted #cccc00;
        }

        .linecomment {
            color: Grey;
        }

        .container {
            display:        flex;
            flex-wrap:      nowrap;
            flex-direction: row;
            height:         100%;
            font-family:    arial;
            line-height:    1.3em;
        }

        .left {
            display:    block;
            overflow-y: scroll;
            width:      450;
            height:     100%;
        }

        .right {
            display:     block;
            overflow-y:  scroll;
            width:       100%;
            font-family: arial;
            line-height: 1.3em;
            height:      100%;
        }

        .page {
            width:       1000;
            margin:      0 auto;
        }

        </style>
    """

    // Main page (left and right parts, left is for table of content, right is for content)
    g_Buf += "<div class=\"container\">\n"
    g_Buf += "<div class=\"left\">\n"
    seekToc := g_Buf.length // This will be the place where we will insert the 'g_Toc' table of content
    g_Buf += "</div>\n"

    // Right page start
    g_Buf += "<div class=\"right\">\n"
    g_Buf += "<div class=\"page\">\n"
    g_Buf += "<h1>Swag language reference</h1>\n"

    // Table of content start
    g_Toc += "<h1>Table of content</h1>\n"
    g_Toc += "<ul>\n"

    visit v: files
    {
        if Path.getExtensionLowerCase(v.fullname) != ".swg"
            continue

        var title: String = Path.getFileNameWithoutExtension(v.fullname)
        fileName := title
        title.remove(0, 4)  // Remove 'NNN_'

        // If there's an additional '_' after 'NNN_', then this is a 'sub part'.
        wasSubTitle := g_SubTitle
        g_SubTitle = title[0] == "_"'u8
        if g_SubTitle
            title.remove(0, 1)
        if !wasSubTitle and g_SubTitle
            g_Toc += "<ul>\n"
        else if wasSubTitle and !g_SubTitle
            g_Toc += "</ul>\n"

        // Normalize filename as a title
        title[0] = Latin1.toUpper(title[0])
        title.replace("_", " ")

        // Add title to output
        g_Buf += "\n"
        g_Buf += Format.toString("<h% id=\"%\">", g_SubTitle ? 3 : 2, fileName)
        g_Buf += title
        g_Buf += g_SubTitle ? "</h3>\n" : "</h2>\n"

        // Add title to table of content
        g_Toc += Format.toString("<li><a href=\"#%\">%</a></li>\n", fileName, title);
        g_Toc += "<ul>\n"

        processFile(v.fullname)

        g_Toc += "</ul>\n"
    }

    g_Toc += "</ul>\n"

    // Close html page
    g_Buf +=
        """
        </div>
        </div>
        </div>
        </body>
        </html>
        """

    g_Buf.insert(seekToc, g_Toc)

    assume File.writeAllBytes("langref.html", g_Buf)
}
