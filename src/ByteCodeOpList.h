BYTECODE_OP(Nop, 0, "nop")
BYTECODE_OP(PushBP, 0, "")
BYTECODE_OP(PopBP, 0, "")
BYTECODE_OP(PushRR, 0, "push my_result")
BYTECODE_OP(PopRR, 0, "pop my_result")
BYTECODE_OP(DebugNop, 0, "nop")
BYTECODE_OP(Unreachable, 0, "unreachable")
BYTECODE_OP(InternalUnreachable, 0, "internal unreachable")

BYTECODE_OP(IncSPPostCallCond, OPFLAG_READ_A | OPFLAG_READ_VAL32_B, "if _ra_ popstack _rbu32_")
BYTECODE_OP(IncSPPostCall, OPFLAG_READ_VAL32_A, "popstack _rau32_")
BYTECODE_OP(DecSPBP, OPFLAG_READ_VAL32_A, "stacksize _rau32_")
BYTECODE_OP(SetBP, 0, "stacksize 0")
BYTECODE_OP(Ret, OPFLAG_READ_VAL32_A, "return(pop _rau32_)")

BYTECODE_OP(CloneString, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_A, "")

BYTECODE_OP(PushRVParam, OPFLAG_IS_PUSH_PARAM | OPFLAG_READ_A | OPFLAG_READ_VAL64_B, "")
BYTECODE_OP(PushRAParamCond, OPFLAG_IS_PUSH_PARAM | OPFLAG_READ_A | OPFLAG_READ_B, "if _ra_ pushparam _rb_")
BYTECODE_OP(PushRAParam, OPFLAG_IS_PUSH_PARAM | OPFLAG_READ_A, "pushparam _ra_")
BYTECODE_OP(PushRAParam2, OPFLAG_IS_PUSH_PARAM | OPFLAG_READ_A | OPFLAG_READ_B, "pushparam _ra_, _rb_")
BYTECODE_OP(PushRAParam3, OPFLAG_IS_PUSH_PARAM | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C, "pushparam _ra_, _rb_, _rc_")
BYTECODE_OP(PushRAParam4, OPFLAG_IS_PUSH_PARAM | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_READ_D, "pushparam _ra_, _rb_, _rc_, _rd_")

BYTECODE_OP(LocalCall, OPFLAG_IS_CALL | OPFLAG_READ_VAL64_A, "call")
BYTECODE_OP(LocalCallPop, OPFLAG_IS_CALL | OPFLAG_READ_VAL64_A | OPFLAG_READ_VAL32_C, "call(pop _rcu32_)")
BYTECODE_OP(LocalCallPopParam, OPFLAG_IS_CALL | OPFLAG_READ_VAL64_A | OPFLAG_READ_VAL32_C | OPFLAG_READ_D, "pushparam _rd_; call(pop _rcu32_)")
BYTECODE_OP(LocalCallPopRC, OPFLAG_IS_CALL | OPFLAG_READ_VAL64_A | OPFLAG_READ_VAL32_C | OPFLAG_WRITE_D, "_rd_ = call(pop _rcu32_)")
BYTECODE_OP(LambdaCall, OPFLAG_IS_CALL | OPFLAG_READ_A | OPFLAG_READ_VAL64_B, "call [_ra_]")
BYTECODE_OP(LambdaCallPop, OPFLAG_IS_CALL | OPFLAG_READ_A | OPFLAG_READ_VAL64_B | OPFLAG_READ_VAL32_C, "call(pop _rcu32_) [_ra_]")
BYTECODE_OP(ForeignCall, OPFLAG_IS_CALL | OPFLAG_READ_VAL64_A | OPFLAG_READ_VAL64_D, "call")
BYTECODE_OP(ForeignCallPop, OPFLAG_IS_CALL | OPFLAG_READ_VAL64_A | OPFLAG_READ_VAL32_C | OPFLAG_READ_VAL64_D, "call(pop _rcu32_)")

BYTECODE_OP(MakeLambda, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ = ")

BYTECODE_OP(IntrinsicItfTableOf, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C, "_rc_ = @itftableof(_ra_, _rb_)")
BYTECODE_OP(IntrinsicCompilerError, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C, "@compilererror(_ra_, _rb_, _rc_)")
BYTECODE_OP(IntrinsicCompilerWarning, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C, "@compilerwarning(_ra_, _rb_, _rc_)")
BYTECODE_OP(IntrinsicPanic, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C, "@panic(_ra_, _rb_, _rc_)")
BYTECODE_OP(IntrinsicTypeCmp, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_C | OPFLAG_WRITE_D, "_rd_ = @typecmp(_ra_, _rb_, _rcu64_)")
BYTECODE_OP(IntrinsicStringCmp, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_READ_D | OPFLAG_WRITE_D, "_rd_ = @stringcmp(_ra_, _rb_, _rc_, _rd_)")
BYTECODE_OP(IntrinsicDbgAlloc, OPFLAG_WRITE_A, "_ra_ = @dbgalloc()")
BYTECODE_OP(IntrinsicSysAlloc, OPFLAG_WRITE_A, "_ra_ = @sysalloc()")
BYTECODE_OP(IntrinsicRtFlags, OPFLAG_WRITE_A, "_ra_ = @rtflags()")

BYTECODE_OP(IntrinsicAlloc, OPFLAG_WRITE_A | OPFLAG_READ_B, "_ra_ = @alloc(_rb_)")
BYTECODE_OP(IntrinsicRealloc, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C, "_ra_ = @realloc(_rb_, _rc_)")
BYTECODE_OP(IntrinsicFree, OPFLAG_READ_A, "@free(_ra_)")
BYTECODE_OP(IntrinsicGetContext, OPFLAG_WRITE_A, "_ra_ = @getcontext()")
BYTECODE_OP(IntrinsicSetContext, OPFLAG_READ_A, "@setcontext(_ra_)")
BYTECODE_OP(IntrinsicGetProcessInfos, OPFLAG_WRITE_A, "_ra_ = @getpinfos()")
BYTECODE_OP(IntrinsicCVaStart, OPFLAG_READ_A, "@cvastart(_ra_)")
BYTECODE_OP(IntrinsicCVaEnd, OPFLAG_READ_A, "@cvaend(_ra_)")
BYTECODE_OP(IntrinsicCVaArg, OPFLAG_READ_A | OPFLAG_WRITE_B | OPFLAG_READ_VAL64_C, "_rb_ = @cvaarg(_ra_)")
BYTECODE_OP(IntrinsicArguments, OPFLAG_WRITE_A | OPFLAG_WRITE_B, "_ra_, _rb_ = @args()")
BYTECODE_OP(IntrinsicModules, OPFLAG_WRITE_A | OPFLAG_WRITE_B, "_ra_, _rb_ = @modules()")
BYTECODE_OP(IntrinsicGvtd, OPFLAG_WRITE_A | OPFLAG_WRITE_B, "_ra_, _rb_ = @gvtd()")
BYTECODE_OP(IntrinsicCompiler, OPFLAG_WRITE_A | OPFLAG_WRITE_B, "_ra_, _rb_ = @compiler()")
BYTECODE_OP(IntrinsicIsByteCode, OPFLAG_WRITE_A, "_ra_ = @isbytecode()")
BYTECODE_OP(IntrinsicMakeCallback, OPFLAG_WRITE_A | OPFLAG_READ_A, "_ra_ = @mkcallback(_ra_)")
BYTECODE_OP(IntrinsicBcBreakpoint, 0, "@breakpoint()")

BYTECODE_OP(IntrinsicGetErr, OPFLAG_WRITE_A, "_ra_ = @err()")
BYTECODE_OP(IntrinsicGetErrMsg, OPFLAG_WRITE_A | OPFLAG_WRITE_B, "_ra_, _rb_ = @errmsg")
BYTECODE_OP(InternalInitStackTrace, 0, "Internal InitStackTrace()")
BYTECODE_OP(InternalStackTrace, OPFLAG_READ_A, "Internal StackTrace(_ra_)")
BYTECODE_OP(InternalPanic, OPFLAG_READ_VAL64_D, "Internal Panic()")
BYTECODE_OP(InternalClearErr, OPFLAG_READ_A, "Internal ClearErr(_ra_)")
BYTECODE_OP(InternalPushErr, 0, "Internal PushErr()")
BYTECODE_OP(InternalPopErr, 0, "Internal PopErr()")
BYTECODE_OP(InternalHasErr, OPFLAG_WRITE_A | OPFLAG_READ_B, "_ra_ = Internal HasErr(_rb_)")
BYTECODE_OP(JumpIfNoError, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B, "Jump IfNoError")
BYTECODE_OP(InternalGetTlsPtr, OPFLAG_WRITE_A, "_ra_ = Internal GetTlsPtr")
BYTECODE_OP(InternalSetErr, OPFLAG_READ_A | OPFLAG_READ_B, "Internal SetErr(_ra_, _rb_)")
BYTECODE_OP(InternalFailedAssume, OPFLAG_READ_A, "Internal FailedAssume(_ra_)")

BYTECODE_OP(IntrinsicAtomicAddS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs8_ = [_ra_]; [_ra_] += _rbs8_")
BYTECODE_OP(IntrinsicAtomicAddS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs16_ = [_ra_]; [_ra_] += _rbs16_")
BYTECODE_OP(IntrinsicAtomicAddS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs32_ = [_ra_]; [_ra_] += _rbs32_")
BYTECODE_OP(IntrinsicAtomicAddS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs64_ = [_ra_]; [_ra_] += _rbs64_")

BYTECODE_OP(IntrinsicAtomicAndS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs8_ = [_ra_]; [_ra_] &= _rbs8_")
BYTECODE_OP(IntrinsicAtomicAndS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs16_ = [_ra_]; [_ra_] &= _rbs16_")
BYTECODE_OP(IntrinsicAtomicAndS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs32_ = [_ra_]; [_ra_] &= _rbs32_")
BYTECODE_OP(IntrinsicAtomicAndS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs64_ = [_ra_]; [_ra_] &= _rbs64_")

BYTECODE_OP(IntrinsicAtomicOrS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs8_ = [_ra_]; [_ra_] |= _rbs8_")
BYTECODE_OP(IntrinsicAtomicOrS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs16_ = [_ra_]; [_ra_] |= _rbs16_")
BYTECODE_OP(IntrinsicAtomicOrS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs32_ = [_ra_]; [_ra_] |= _rbs32_")
BYTECODE_OP(IntrinsicAtomicOrS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs64_ = [_ra_]; [_ra_] |= _rbs64_")

BYTECODE_OP(IntrinsicAtomicXorS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs8_ = [_ra_]; [_ra_] ^= _rbs8_")
BYTECODE_OP(IntrinsicAtomicXorS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs16_ = [_ra_]; [_ra_] ^= _rbs16_")
BYTECODE_OP(IntrinsicAtomicXorS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs32_ = [_ra_]; [_ra_] ^= _rbs32_")
BYTECODE_OP(IntrinsicAtomicXorS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs64_ = [_ra_]; [_ra_] ^= _rbs64_")

BYTECODE_OP(IntrinsicAtomicXchgS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs8_ = [_ra_]; [_ra_] = _rbs8_")
BYTECODE_OP(IntrinsicAtomicXchgS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs8_ = [_ra_]; [_ra_] = _rbs8_")
BYTECODE_OP(IntrinsicAtomicXchgS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs8_ = [_ra_]; [_ra_] = _rbs8_")
BYTECODE_OP(IntrinsicAtomicXchgS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "_rcs8_ = [_ra_]; [_ra_] = _rbs8_")

BYTECODE_OP(IntrinsicAtomicCmpXchgS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_WRITE_D | OPFLAG_UNPURE, "_rds8_ = [_ra_]; if [_ra_] == _rbs8_ [_ra_] = _rcs8_")
BYTECODE_OP(IntrinsicAtomicCmpXchgS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_WRITE_D | OPFLAG_UNPURE, "_rds16_ = [_ra_]; if [_ra_] == _rbs16_ [_ra_] = _rcs16_")
BYTECODE_OP(IntrinsicAtomicCmpXchgS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_WRITE_D | OPFLAG_UNPURE, "_rds32_ = [_ra_]; if [_ra_] == _rbs32_ [_ra_] = _rcs32_")
BYTECODE_OP(IntrinsicAtomicCmpXchgS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_WRITE_D | OPFLAG_UNPURE, "_rds64_ = [_ra_]; if [_ra_] == _rbs64_ [_ra_] = _rcs64_")

BYTECODE_OP(JumpIfZero8, OPFLAG_IS_8B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau8_ == 0")
BYTECODE_OP(JumpIfZero16, OPFLAG_IS_16B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau16_ == 0")
BYTECODE_OP(JumpIfZero32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau32_ == 0")
BYTECODE_OP(JumpIfZero64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau64_ == 0")
BYTECODE_OP(JumpIfNotZero8, OPFLAG_IS_8B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau8_ != 0")
BYTECODE_OP(JumpIfNotZero16, OPFLAG_IS_16B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau16_ != 0")
BYTECODE_OP(JumpIfNotZero32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau32_ != 0")
BYTECODE_OP(JumpIfNotZero64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau64_ != 0")

BYTECODE_OP(JumpIfFalse, OPFLAG_IS_8B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if !_rau8_")
BYTECODE_OP(JumpIfTrue, OPFLAG_IS_8B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau8_")

BYTECODE_OP(JumpIfNotEqual8, OPFLAG_IS_8B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau8_ != _rcu8_")
BYTECODE_OP(JumpIfNotEqual16, OPFLAG_IS_16B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau16_ != _rcu16_")
BYTECODE_OP(JumpIfNotEqual32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau32_ != _rcu32_")
BYTECODE_OP(JumpIfNotEqual64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau64_ != _rcu64_")
BYTECODE_OP(JumpIfNotEqualF32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau32_ != _rcu32_")
BYTECODE_OP(JumpIfNotEqualF64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau64_ != _rcu64_")

BYTECODE_OP(JumpIfEqual8, OPFLAG_IS_8B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau8_ == _rcu8_")
BYTECODE_OP(JumpIfEqual16, OPFLAG_IS_16B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau16_ == _rcu16_")
BYTECODE_OP(JumpIfEqual32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau32_ == _rcu32_")
BYTECODE_OP(JumpIfEqual64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau64_ == _rcu64_")
BYTECODE_OP(JumpIfEqualF32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf32_ == _rcf32_")
BYTECODE_OP(JumpIfEqualF64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf64_ == _rcf64_")
BYTECODE_OP(IncJumpIfEqual64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if ++_rau64_ == _rcu64_")

BYTECODE_OP(JumpIfLowerS8, OPFLAG_IS_8B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras8_ < _rcs8_")
BYTECODE_OP(JumpIfLowerS16, OPFLAG_IS_16B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras16_ < _rcs16_")
BYTECODE_OP(JumpIfLowerS32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras32_ < _rcs32_")
BYTECODE_OP(JumpIfLowerS64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras64_ < _rcs64_")
BYTECODE_OP(JumpIfLowerU8, OPFLAG_IS_8B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau8_ < _rcu8_")
BYTECODE_OP(JumpIfLowerU16, OPFLAG_IS_16B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau16_ < _rcu16_")
BYTECODE_OP(JumpIfLowerU32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau32_ < _rcu32_")
BYTECODE_OP(JumpIfLowerU64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau64_ < _rcu64_")
BYTECODE_OP(JumpIfLowerF32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf32_ < _rcf32_")
BYTECODE_OP(JumpIfLowerF64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf64_ < _rcf64_")

BYTECODE_OP(JumpIfLowerEqS8, OPFLAG_IS_8B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras8_ <= _rcs8_")
BYTECODE_OP(JumpIfLowerEqS16, OPFLAG_IS_16B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras16_ <= _rcs16_")
BYTECODE_OP(JumpIfLowerEqS32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras32_ <= _rcs32_")
BYTECODE_OP(JumpIfLowerEqS64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras64_ <= _rcs64_")
BYTECODE_OP(JumpIfLowerEqU8, OPFLAG_IS_8B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau8_ <= _rcu8_")
BYTECODE_OP(JumpIfLowerEqU16, OPFLAG_IS_16B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau16_ <= _rcu16_")
BYTECODE_OP(JumpIfLowerEqU32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau32_ <= _rcu32_")
BYTECODE_OP(JumpIfLowerEqU64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau64_ <= _rcu64_")
BYTECODE_OP(JumpIfLowerEqF32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf32_ <= _rcf32_")
BYTECODE_OP(JumpIfLowerEqF64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf64_ <= _rcf64_")

BYTECODE_OP(JumpIfGreaterS8, OPFLAG_IS_8B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras8_ > _rcs8_")
BYTECODE_OP(JumpIfGreaterS16, OPFLAG_IS_16B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras16_ > _rcs16_")
BYTECODE_OP(JumpIfGreaterS32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras32_ > _rcs32_")
BYTECODE_OP(JumpIfGreaterS64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras64_ > _rcs64_")
BYTECODE_OP(JumpIfGreaterU8, OPFLAG_IS_8B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau8_ > _rcu8_")
BYTECODE_OP(JumpIfGreaterU16, OPFLAG_IS_16B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau16_ > _rcu16_")
BYTECODE_OP(JumpIfGreaterU32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau32_ > _rcu32_")
BYTECODE_OP(JumpIfGreaterU64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau64_ > _rcu64_")
BYTECODE_OP(JumpIfGreaterF32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf32_ > _rcf32_")
BYTECODE_OP(JumpIfGreaterF64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf64_ > _rcf64_")

BYTECODE_OP(JumpIfGreaterEqS8, OPFLAG_IS_8B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras8_ >= _rcs8_")
BYTECODE_OP(JumpIfGreaterEqS16, OPFLAG_IS_16B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras16_ >= _rcs16_")
BYTECODE_OP(JumpIfGreaterEqS32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras32_ >= _rcs32_")
BYTECODE_OP(JumpIfGreaterEqS64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras64_ >= _rcs64_")
BYTECODE_OP(JumpIfGreaterEqU8, OPFLAG_IS_8B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau8_ >= _rcu8_")
BYTECODE_OP(JumpIfGreaterEqU16, OPFLAG_IS_16B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau16_ >= _rcu16_")
BYTECODE_OP(JumpIfGreaterEqU32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau32_ >= _rcu32_")
BYTECODE_OP(JumpIfGreaterEqU64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau64_ >= _rcu64_")
BYTECODE_OP(JumpIfGreaterEqF32, OPFLAG_IS_32B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf32_ >= _rcf32_")
BYTECODE_OP(JumpIfGreaterEqF64, OPFLAG_IS_64B | OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf64_ >= _rcf64_")

BYTECODE_OP(JumpDyn8, OPFLAG_IS_JUMPDYN | OPFLAG_READ_A | OPFLAG_READ_VAL64_B | OPFLAG_READ_VAL64_C | OPFLAG_READ_VAL64_D, "jumpdyn8 _rau32_")
BYTECODE_OP(JumpDyn16, OPFLAG_IS_JUMPDYN | OPFLAG_READ_A | OPFLAG_READ_VAL64_B | OPFLAG_READ_VAL64_C | OPFLAG_READ_VAL64_D, "jumpdyn16 _rau32_")
BYTECODE_OP(JumpDyn32, OPFLAG_IS_JUMPDYN | OPFLAG_READ_A | OPFLAG_READ_VAL64_B | OPFLAG_READ_VAL64_C | OPFLAG_READ_VAL64_D, "jumpdyn32 _rau32_")
BYTECODE_OP(JumpDyn64, OPFLAG_IS_JUMPDYN | OPFLAG_READ_A | OPFLAG_READ_VAL64_B | OPFLAG_READ_VAL64_C | OPFLAG_READ_VAL64_D, "jumpdyn64 _rau32_")
BYTECODE_OP(Jump, OPFLAG_IS_JUMP | OPFLAG_READ_VAL32_B, "jump")

BYTECODE_OP(TestNotZero8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _rbu8_ != 0")
BYTECODE_OP(TestNotZero16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _rbu16_ != 0")
BYTECODE_OP(TestNotZero32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _rbu32_ != 0")
BYTECODE_OP(TestNotZero64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _rbu64_ != 0")

BYTECODE_OP(DeRef8, OPFLAG_IS_64B | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_VAL64_C, "_ra_ = [_rb_ + _rcs64_]")
BYTECODE_OP(DeRef16, OPFLAG_IS_64B | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_VAL64_C, "_ra_ = [_rb_ + _rcs64_]")
BYTECODE_OP(DeRef32, OPFLAG_IS_64B | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_VAL64_C, "_ra_ = [_rb_ + _rcs64_]")
BYTECODE_OP(DeRef64, OPFLAG_IS_64B | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_VAL64_C, "_ra_ = [_rb_ + _rcs64_]")
BYTECODE_OP(DeRefStringSlice, OPFLAG_WRITE_A | OPFLAG_WRITE_B | OPFLAG_READ_A | OPFLAG_READ_VAL64_C, "_ra_ = [_ra_ + _rcs64_]; _rb_ = [_ra_ + _rcs64_ + 8]")

BYTECODE_OP(Mul64byVB64, OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ *= _rbu64_")
BYTECODE_OP(Div64byVB64, OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ /= _rbu64_")
BYTECODE_OP(Add32byVB32, OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ += _rbu32_")
BYTECODE_OP(Add64byVB64, OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ += _rbu64_")
BYTECODE_OP(MulAddVC64, OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_VAL64_C, "_ra_ = _ra_ * (_rb_ + _rcu8_)")

BYTECODE_OP(ZeroToTrue, OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = _ra_ == 0")
BYTECODE_OP(LowerZeroToTrue, OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = _ra_ < 0")
BYTECODE_OP(GreaterZeroToTrue, OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = _ra_ > 0")
BYTECODE_OP(LowerEqZeroToTrue, OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = _ra_ <= 0")
BYTECODE_OP(GreaterEqZeroToTrue, OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = _ra_ >= 0")

BYTECODE_OP(SetImmediate32, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = _rbu32_")
BYTECODE_OP(SetImmediate64, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ = _rbu64_")

BYTECODE_OP(MemCpy8, OPFLAG_IS_MEMCPY | OPFLAG_READ_A | OPFLAG_READ_B, "memcpy(_ra_, _rb_, 1)")
BYTECODE_OP(MemCpy16, OPFLAG_IS_MEMCPY | OPFLAG_READ_A | OPFLAG_READ_B, "memcpy(_ra_, _rb_, 2)")
BYTECODE_OP(MemCpy32, OPFLAG_IS_MEMCPY | OPFLAG_READ_A | OPFLAG_READ_B, "memcpy(_ra_, _rb_, 4)")
BYTECODE_OP(MemCpy64, OPFLAG_IS_MEMCPY | OPFLAG_READ_A | OPFLAG_READ_B, "memcpy(_ra_, _rb_, 8)")

BYTECODE_OP(IntrinsicMemCpy, OPFLAG_IS_MEMCPY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_C, "@memcpy(_ra_, _rb_, _rcu64_)")
BYTECODE_OP(IntrinsicMemMove, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_C, "@memmove(_ra_, _rb_, _rcu64_)")
BYTECODE_OP(IntrinsicMemSet, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "@memset(_ra_, _rbu64_, _rcu64_)")
BYTECODE_OP(IntrinsicMemCmp, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_READ_D | OPFLAG_IMM_D, "_ra_ = @memcmp(_rb_, _rc_, _rdu64_)")
BYTECODE_OP(IntrinsicStrLen, OPFLAG_WRITE_A | OPFLAG_READ_B, "_ra_ = @strlen(_rb_)")
BYTECODE_OP(IntrinsicStrCmp, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C, "_ra_ = @strcmp(_rb_, _rc_)")

BYTECODE_OP(CopyRBtoRA8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B, "_ra_ = _rb_")
BYTECODE_OP(CopyRBtoRA16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B, "_ra_ = _rb_")
BYTECODE_OP(CopyRBtoRA32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B, "_ra_ = _rb_")
BYTECODE_OP(CopyRBtoRA64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B, "_ra_ = _rb_")

BYTECODE_OP(CopyRBtoRA64x2, OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_READ_D, "_ra_ = _rb_; _rc_ = _rd_")
BYTECODE_OP(CopyRBAddrToRA, OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B, "_ra_ = &_rb_")

BYTECODE_OP(ClearRA, OPFLAG_IS_REGONLY | OPFLAG_WRITE_A, "_ra_ = 0")
BYTECODE_OP(ClearRAx2, OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_WRITE_B, "_ra_, _rb_ = 0")
BYTECODE_OP(ClearRAx3, OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_WRITE_B | OPFLAG_WRITE_C, "_ra_, _rb_, _rc_ = 0")
BYTECODE_OP(ClearRAx4, OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_WRITE_B | OPFLAG_WRITE_C | OPFLAG_WRITE_D, "_ra_, _rb_, _rc_, _rd_ = 0")

BYTECODE_OP(IncrementRA64, OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_A, "_ra_++")
BYTECODE_OP(DecrementRA32, OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_A, "_ra_--")
BYTECODE_OP(DecrementRA64, OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_A, "_ra_--")

BYTECODE_OP(CopyRCtoRRRet, OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "my_result = _rbu64_; pop _rau32_; return")
BYTECODE_OP(CopyRCtoRR, OPFLAG_READ_A | OPFLAG_IMM_A, "my_result = _rau64_")
BYTECODE_OP(CopyRCtoRR2, OPFLAG_READ_A | OPFLAG_READ_B, "my_result = _ra_, _rb_")
BYTECODE_OP(CopyRRtoRC, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ = my_result + _rbu64_")
BYTECODE_OP(CopyRTtoRC, OPFLAG_WRITE_A, "_ra_ = last_call_result")
BYTECODE_OP(CopyRTtoRC2, OPFLAG_WRITE_A | OPFLAG_WRITE_B, "_ra_, _rb_ = last_call_result")
BYTECODE_OP(CopyRCtoRT, OPFLAG_READ_A, "last_call_result = _ra_")

BYTECODE_OP(CopySP, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C, "_ra_ = &_rc_")
BYTECODE_OP(CopySPVaargs, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_VAL64_D, "_ra_ = &sp + _rbu32_")

BYTECODE_OP(GetParam64SI, OPFLAG_WRITE_A | OPFLAG_WRITE_B | OPFLAG_READ_VAL32_C, "")
BYTECODE_OP(IntrinsicIsConstExprSI, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_C, "")
BYTECODE_OP(IntrinsicLocationSI, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_C, "")

BYTECODE_OP(GetFromStack8, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = stack[_rbu32_]")
BYTECODE_OP(GetFromStack16, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = stack[_rbu32_]")
BYTECODE_OP(GetFromStack32, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = stack[_rbu32_]")
BYTECODE_OP(GetFromStack64, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = stack[_rbu32_]")

BYTECODE_OP(GetFromStack8x2, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_WRITE_C | OPFLAG_READ_VAL32_D, "_ra_ = stack[_rbu32_]; _rc_ = stack[_rdu32_]")
BYTECODE_OP(GetFromStack16x2, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_WRITE_C | OPFLAG_READ_VAL32_D, "_ra_ = stack[_rbu32_]; _rc_ = stack[_rdu32_]")
BYTECODE_OP(GetFromStack32x2, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_WRITE_C | OPFLAG_READ_VAL32_D, "_ra_ = stack[_rbu32_]; _rc_ = stack[_rdu32_]")
BYTECODE_OP(GetFromStack64x2, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_WRITE_C | OPFLAG_READ_VAL32_D, "_ra_ = stack[_rbu32_]; _rc_ = stack[_rdu32_]")

BYTECODE_OP(GetIncFromStack64, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_VAL64_C, "_ra_ = stack[_rbu32_] + _rcu64_")
BYTECODE_OP(GetIncFromStack64DeRef8, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_VAL64_C, "_ra_ = [stack[_rbu32_] + _rcu64_]")
BYTECODE_OP(GetIncFromStack64DeRef16, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_VAL64_C, "_ra_ = [stack[_rbu32_] + _rcu64_]")
BYTECODE_OP(GetIncFromStack64DeRef32, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_VAL64_C, "_ra_ = [stack[_rbu32_] + _rcu64_]")
BYTECODE_OP(GetIncFromStack64DeRef64, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_VAL64_C, "_ra_ = [stack[_rbu32_] + _rcu64_]")

BYTECODE_OP(GetParam8, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ = param(_rbh32_) & 0xFF")
BYTECODE_OP(GetParam16, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ = param(_rbh32_) & 0xFFFF")
BYTECODE_OP(GetParam32, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ = param(_rbh32_) & 0xFFFFFFFF")
BYTECODE_OP(GetParam64, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ = param(_rbh32_)")
BYTECODE_OP(GetParam64x2, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B | OPFLAG_WRITE_C | OPFLAG_READ_VAL64_D, "_ra_ = param(_rbh32_); _rc_ = param(_rdh32_)")
BYTECODE_OP(GetIncParam64, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B | OPFLAG_READ_VAL64_D, "_ra_ = param(_rbh32_) + _rdu64_")

BYTECODE_OP(GetParam64DeRef8, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ = [param(_rbh32_)]")
BYTECODE_OP(GetParam64DeRef16, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ = [param(_rbh32_)]")
BYTECODE_OP(GetParam64DeRef32, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ = [param(_rbh32_)]")
BYTECODE_OP(GetParam64DeRef64, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ = [param(_rbh32_)]")

BYTECODE_OP(GetIncParam64DeRef8, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B | OPFLAG_READ_VAL64_D, "_ra_ = [param(_rbh32_) + _rdu64_]")
BYTECODE_OP(GetIncParam64DeRef16, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B | OPFLAG_READ_VAL64_D, "_ra_ = [param(_rbh32_) + _rdu64_]")
BYTECODE_OP(GetIncParam64DeRef32, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B | OPFLAG_READ_VAL64_D, "_ra_ = [param(_rbh32_) + _rdu64_]")
BYTECODE_OP(GetIncParam64DeRef64, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B | OPFLAG_READ_VAL64_D, "_ra_ = [param(_rbh32_) + _rdu64_]")

BYTECODE_OP(CopyStack8, OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] = stack[_rbu32_]")
BYTECODE_OP(CopyStack16, OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] = stack[_rbu32_]")
BYTECODE_OP(CopyStack32, OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] = stack[_rbu32_]")
BYTECODE_OP(CopyStack64, OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] = stack[_rbu32_]")

BYTECODE_OP(MakeStackPointer, OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = stack + _rbu32_")
BYTECODE_OP(MakeStackPointerx2, OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_WRITE_C | OPFLAG_READ_VAL32_D, "_ra_ = stack + _rbu32_; _rc_ = stack + _rdu32_")
BYTECODE_OP(MakeStackPointerRT, OPFLAG_IS_REGONLY | OPFLAG_READ_VAL32_A, "resultPtr = stack + _rau32_")

BYTECODE_OP(GetFromCompilerSeg8, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .cdata[_rbu32_]")
BYTECODE_OP(GetFromCompilerSeg16, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .cdata[_rbu32_]")
BYTECODE_OP(GetFromCompilerSeg32, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .cdata[_rbu32_]")
BYTECODE_OP(GetFromCompilerSeg64, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .cdata[_rbu32_]")

BYTECODE_OP(GetFromBssSeg8, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .bss[_rbu32_]")
BYTECODE_OP(GetFromBssSeg16, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .bss[_rbu32_]")
BYTECODE_OP(GetFromBssSeg32, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .bss[_rbu32_]")
BYTECODE_OP(GetFromBssSeg64, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .bss[_rbu32_]")

BYTECODE_OP(GetFromMutableSeg8, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .data[_rbu32_]")
BYTECODE_OP(GetFromMutableSeg16, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .data[_rbu32_]")
BYTECODE_OP(GetFromMutableSeg32, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .data[_rbu32_]")
BYTECODE_OP(GetFromMutableSeg64, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .data[_rbu32_]")

BYTECODE_OP(MakeCompilerSegPointer, OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .cdata + _rbu32_")
BYTECODE_OP(MakeBssSegPointer, OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .bss + _rbu32_")
BYTECODE_OP(MakeMutableSegPointer, OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .data + _rbu32_")
BYTECODE_OP(MakeConstantSegPointer, OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .rdata + _rbu32_")

BYTECODE_OP(BinOpPlusS8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras8_ + _rbs8_")
BYTECODE_OP(BinOpPlusS8_Safe, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras8_ + _rbs8_")
BYTECODE_OP(BinOpPlusS16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras16_ + _rbs16_")
BYTECODE_OP(BinOpPlusS16_Safe, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras16_ + _rbs16_")
BYTECODE_OP(BinOpPlusS32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ + _rbs32_")
BYTECODE_OP(BinOpPlusS32_Safe, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ + _rbs32_")
BYTECODE_OP(BinOpPlusS64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ + _rbs64_")
BYTECODE_OP(BinOpPlusS64_Safe, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ + _rbs64_")
BYTECODE_OP(BinOpPlusU8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ + _rbu8_")
BYTECODE_OP(BinOpPlusU8_Safe, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ + _rbu8_")
BYTECODE_OP(BinOpPlusU16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ + _rbu16_")
BYTECODE_OP(BinOpPlusU16_Safe, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ + _rbu16_")
BYTECODE_OP(BinOpPlusU32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ + _rbu32_")
BYTECODE_OP(BinOpPlusU32_Safe, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ + _rbu32_")
BYTECODE_OP(BinOpPlusU64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ + _rbu64_")
BYTECODE_OP(BinOpPlusU64_Safe, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ + _rbu64_")
BYTECODE_OP(BinOpPlusF32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ + _rbf32_")
BYTECODE_OP(BinOpPlusF64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ + _rbf64_")

BYTECODE_OP(BinOpMinusS8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras8_ - _rbs8_")
BYTECODE_OP(BinOpMinusS8_Safe, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras8_ - _rbs8_")
BYTECODE_OP(BinOpMinusS16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras16_ - _rbs16_")
BYTECODE_OP(BinOpMinusS16_Safe, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras16_ - _rbs16_")
BYTECODE_OP(BinOpMinusS32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ - _rbs32_")
BYTECODE_OP(BinOpMinusS32_Safe, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ - _rbs32_")
BYTECODE_OP(BinOpMinusS64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ - _rbs64_")
BYTECODE_OP(BinOpMinusS64_Safe, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ - _rbs64_")
BYTECODE_OP(BinOpMinusU8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ - _rbu8_")
BYTECODE_OP(BinOpMinusU8_Safe, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ - _rbu8_")
BYTECODE_OP(BinOpMinusU16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ - _rbu16_")
BYTECODE_OP(BinOpMinusU16_Safe, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ - _rbu16_")
BYTECODE_OP(BinOpMinusU32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ - _rbu32_")
BYTECODE_OP(BinOpMinusU32_Safe, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ - _rbu32_")
BYTECODE_OP(BinOpMinusU64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ - _rbu64_")
BYTECODE_OP(BinOpMinusU64_Safe, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ - _rbu64_")
BYTECODE_OP(BinOpMinusF32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ - _rbf32_")
BYTECODE_OP(BinOpMinusF64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ - _rbf64_")

BYTECODE_OP(BinOpMulS8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras8_ * _rbs8_")
BYTECODE_OP(BinOpMulS8_Safe, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras8_ * _rbs8_")
BYTECODE_OP(BinOpMulS16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras16_ * _rbs16_")
BYTECODE_OP(BinOpMulS16_Safe, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras16_ * _rbs16_")
BYTECODE_OP(BinOpMulS32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ * _rbs32_")
BYTECODE_OP(BinOpMulS32_Safe, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ * _rbs32_")
BYTECODE_OP(BinOpMulS64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ * _rbs64_")
BYTECODE_OP(BinOpMulS64_Safe, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ * _rbs64_")
BYTECODE_OP(BinOpMulU8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ * _rbu8_")
BYTECODE_OP(BinOpMulU8_Safe, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ * _rbu8_")
BYTECODE_OP(BinOpMulU16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ * _rbu16_")
BYTECODE_OP(BinOpMulU16_Safe, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ * _rbu16_")
BYTECODE_OP(BinOpMulU32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ * _rbu32_")
BYTECODE_OP(BinOpMulU32_Safe, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ * _rbu32_")
BYTECODE_OP(BinOpMulU64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ * _rbu64_")
BYTECODE_OP(BinOpMulU64_Safe, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ * _rbu64_")
BYTECODE_OP(BinOpMulF32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ * _rbf32_")
BYTECODE_OP(BinOpMulF64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ * _rbf64_")

BYTECODE_OP(BinOpModuloS8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras8_ % _rbs8_")
BYTECODE_OP(BinOpModuloS16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras16_ % _rbs16_")
BYTECODE_OP(BinOpModuloS32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ % _rbs32_")
BYTECODE_OP(BinOpModuloS64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ % _rbs64_")
BYTECODE_OP(BinOpModuloU8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ % _rbu8_")
BYTECODE_OP(BinOpModuloU16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ % _rbu16_")
BYTECODE_OP(BinOpModuloU32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ % _rbu32_")
BYTECODE_OP(BinOpModuloU64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ % _rbu64_")

BYTECODE_OP(BinOpDivS8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras8_ / _rbs8_")
BYTECODE_OP(BinOpDivS16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras16_ / _rbs16_")
BYTECODE_OP(BinOpDivS32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ / _rbs32_")
BYTECODE_OP(BinOpDivS64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ / _rbs64_")
BYTECODE_OP(BinOpDivU8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ / _rbu8_")
BYTECODE_OP(BinOpDivU16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ / _rbu16_")
BYTECODE_OP(BinOpDivU32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ / _rbu32_")
BYTECODE_OP(BinOpDivU64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ / _rbu64_")
BYTECODE_OP(BinOpDivF32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ / _rbf32_")
BYTECODE_OP(BinOpDivF64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ / _rbf32_")

BYTECODE_OP(BinOpBitmaskAnd8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ & _rbu8_")
BYTECODE_OP(BinOpBitmaskAnd16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ & _rbu16_")
BYTECODE_OP(BinOpBitmaskAnd32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ & _rbu32_")
BYTECODE_OP(BinOpBitmaskAnd64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ & _rbu64_")

BYTECODE_OP(BinOpBitmaskOr8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ | _rbu8_")
BYTECODE_OP(BinOpBitmaskOr16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ | _rbu16_")
BYTECODE_OP(BinOpBitmaskOr32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ | _rbu32_")
BYTECODE_OP(BinOpBitmaskOr64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ | _rbu64_")

BYTECODE_OP(BinOpXorU8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ ^ _rbu8_")
BYTECODE_OP(BinOpXorU16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ ^ _rbu16_")
BYTECODE_OP(BinOpXorU32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ ^ _rbu32_")
BYTECODE_OP(BinOpXorU64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ ^ _rbu64_")

BYTECODE_OP(BinOpShiftLeftU8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ << _rbu32_")
BYTECODE_OP(BinOpShiftLeftU16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ << _rbu32_")
BYTECODE_OP(BinOpShiftLeftU32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ << _rbu32_")
BYTECODE_OP(BinOpShiftLeftU64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ << _rbu32_")
BYTECODE_OP(BinOpShiftLeftS8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ << _rbu32_")
BYTECODE_OP(BinOpShiftLeftS16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ << _rbu32_")
BYTECODE_OP(BinOpShiftLeftS32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ << _rbu32_")
BYTECODE_OP(BinOpShiftLeftS64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ << _rbu32_")

BYTECODE_OP(BinOpShiftRightU8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ >> _rbu32_")
BYTECODE_OP(BinOpShiftRightU16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ >> _rbu32_")
BYTECODE_OP(BinOpShiftRightU32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ >> _rbu32_")
BYTECODE_OP(BinOpShiftRightU64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ >> _rbu32_")
BYTECODE_OP(BinOpShiftRightS8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras8_ >> _rbu32_")
BYTECODE_OP(BinOpShiftRightS16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras16_ >> _rbu32_")
BYTECODE_OP(BinOpShiftRightS32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ >> _rbu32_")
BYTECODE_OP(BinOpShiftRightS64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ >> _rbu32_")

BYTECODE_OP(NegBool, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = !_rbu8_")
BYTECODE_OP(NegS32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = -_rbu32_")
BYTECODE_OP(NegS64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = -_rbu64_")
BYTECODE_OP(NegF32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = -_rbf32_")
BYTECODE_OP(NegF64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = -_rbf64_")

BYTECODE_OP(InvertU8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = ~_rbu8_")
BYTECODE_OP(InvertU16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = ~_rbu16_")
BYTECODE_OP(InvertU32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = ~_rbu32_")
BYTECODE_OP(InvertU64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = ~_rbu64_")

BYTECODE_OP(CompareOpEqual8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ == _rbu8_")
BYTECODE_OP(CompareOpEqual16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ == _rbu16_")
BYTECODE_OP(CompareOpEqual32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ == _rbu32_")
BYTECODE_OP(CompareOpEqual64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ == _rbu64_")
BYTECODE_OP(CompareOpEqualF32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ == _rbf32_")
BYTECODE_OP(CompareOpEqualF64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ == _rbf64_")

BYTECODE_OP(CompareOpNotEqual8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ != _rbu8_")
BYTECODE_OP(CompareOpNotEqual16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ != _rbu16_")
BYTECODE_OP(CompareOpNotEqual32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ != _rbu32_")
BYTECODE_OP(CompareOpNotEqual64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ != _rbu64_")
BYTECODE_OP(CompareOpNotEqualF32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ != _rbf32_")
BYTECODE_OP(CompareOpNotEqualF64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ != _rbf64_")

BYTECODE_OP(CompareOp3Way8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ <=> _rbu8_")
BYTECODE_OP(CompareOp3Way16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ <=> _rbu16_")
BYTECODE_OP(CompareOp3Way32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ <=> _rbu32_")
BYTECODE_OP(CompareOp3Way64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ <=> _rbu64_")
BYTECODE_OP(CompareOp3WayF32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ <=> _rbf32_")
BYTECODE_OP(CompareOp3WayF64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ <=> _rbf64_")

BYTECODE_OP(CompareOpLowerS8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras8_ < _rbs8_")
BYTECODE_OP(CompareOpLowerS16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras16_ < _rbs16_")
BYTECODE_OP(CompareOpLowerS32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ < _rbs32_")
BYTECODE_OP(CompareOpLowerS64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ < _rbs64_")
BYTECODE_OP(CompareOpLowerU8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ < _rbu8_")
BYTECODE_OP(CompareOpLowerU16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ < _rbu16_")
BYTECODE_OP(CompareOpLowerU32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ < _rbu32_")
BYTECODE_OP(CompareOpLowerU64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ < _rbu64_")
BYTECODE_OP(CompareOpLowerF32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ < _rbf32_")
BYTECODE_OP(CompareOpLowerF64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ < _rbf64_")

BYTECODE_OP(CompareOpLowerEqS8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras8_ <= _rbs8_")
BYTECODE_OP(CompareOpLowerEqS16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras16_ <= _rbs16_")
BYTECODE_OP(CompareOpLowerEqS32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ <= _rbs32_")
BYTECODE_OP(CompareOpLowerEqS64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ <= _rbs64_")
BYTECODE_OP(CompareOpLowerEqU8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ <= _rbu8_")
BYTECODE_OP(CompareOpLowerEqU16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ <= _rbu16_")
BYTECODE_OP(CompareOpLowerEqU32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ <= _rbu32_")
BYTECODE_OP(CompareOpLowerEqU64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ <= _rbu64_")
BYTECODE_OP(CompareOpLowerEqF32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ <= _rbf32_")
BYTECODE_OP(CompareOpLowerEqF64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ <= _rbf64_")

BYTECODE_OP(CompareOpGreaterS8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras8_ > _rbs8_")
BYTECODE_OP(CompareOpGreaterS16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras16_ > _rbs16_")
BYTECODE_OP(CompareOpGreaterS32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ > _rbs32_")
BYTECODE_OP(CompareOpGreaterS64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ > _rbs64_")
BYTECODE_OP(CompareOpGreaterU8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ > _rbu8_")
BYTECODE_OP(CompareOpGreaterU16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ > _rbu16_")
BYTECODE_OP(CompareOpGreaterU32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ > _rbu32_")
BYTECODE_OP(CompareOpGreaterU64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ > _rbu64_")
BYTECODE_OP(CompareOpGreaterF32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ > _rbf32_")
BYTECODE_OP(CompareOpGreaterF64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ > _rbf64_")

BYTECODE_OP(CompareOpGreaterEqS8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras8_ >= _rbs8_")
BYTECODE_OP(CompareOpGreaterEqS16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras16_ >= _rbs16_")
BYTECODE_OP(CompareOpGreaterEqS32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ >= _rbs32_")
BYTECODE_OP(CompareOpGreaterEqS64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ >= _rbs64_")
BYTECODE_OP(CompareOpGreaterEqU8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ >= _rbu8_")
BYTECODE_OP(CompareOpGreaterEqU16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ >= _rbu16_")
BYTECODE_OP(CompareOpGreaterEqU32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ >= _rbu32_")
BYTECODE_OP(CompareOpGreaterEqU64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ >= _rbu64_")
BYTECODE_OP(CompareOpGreaterEqF32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ >= _rbf32_")
BYTECODE_OP(CompareOpGreaterEqF64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ >= _rbf64_")

BYTECODE_OP(ClearMaskU32, OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ &= _rbx32_")
BYTECODE_OP(ClearMaskU64, OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ &= _rbx64_")

BYTECODE_OP(SetZeroStack8, OPFLAG_READ_VAL32_A, "stack[_rau32_] = 0")
BYTECODE_OP(SetZeroStack16, OPFLAG_READ_VAL32_A, "stack[_rau32_] = 0")
BYTECODE_OP(SetZeroStack32, OPFLAG_READ_VAL32_A, "stack[_rau32_] = 0")
BYTECODE_OP(SetZeroStack64, OPFLAG_READ_VAL32_A, "stack[_rau32_] = 0")
BYTECODE_OP(SetZeroStackX, OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "clear(stack + _rau32_, _rbu32_)")

BYTECODE_OP(SetZeroAtPointer8, OPFLAG_READ_A | OPFLAG_READ_VAL32_B, "[_ra_ + _rbu32_] = 0")
BYTECODE_OP(SetZeroAtPointer16, OPFLAG_READ_A | OPFLAG_READ_VAL32_B, "[_ra_ + _rbu32_] = 0")
BYTECODE_OP(SetZeroAtPointer32, OPFLAG_READ_A | OPFLAG_READ_VAL32_B, "[_ra_ + _rbu32_] = 0")
BYTECODE_OP(SetZeroAtPointer64, OPFLAG_READ_A | OPFLAG_READ_VAL32_B, "[_ra_ + _rbu32_] = 0")
BYTECODE_OP(SetZeroAtPointerX, OPFLAG_READ_A | OPFLAG_READ_VAL64_B | OPFLAG_READ_VAL64_C, "clear(_ra_ + _rcs64_, _rbu64_)")
BYTECODE_OP(SetZeroAtPointerXRB, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_VAL64_C, "clear(_ra_, _rb_ * _rcu64_)")

BYTECODE_OP(ClearRR8, OPFLAG_READ_VAL64_C, "[my_result + _rcs64_] = 0")
BYTECODE_OP(ClearRR16, OPFLAG_READ_VAL64_C, "[my_result + _rcs64_] = 0")
BYTECODE_OP(ClearRR32, OPFLAG_READ_VAL64_C, "[my_result + _rcs64_] = 0")
BYTECODE_OP(ClearRR64, OPFLAG_READ_VAL64_C, "[my_result + _rcs64_] = 0")
BYTECODE_OP(ClearRRX, OPFLAG_READ_VAL64_B | OPFLAG_READ_VAL64_C, "clear(my_result + _rcs64_, _rbu64_)")

BYTECODE_OP(SetAtPointer8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B | OPFLAG_READ_VAL32_C, "[_ra_ + _rcu32_] = _rbu8_")
BYTECODE_OP(SetAtPointer16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B | OPFLAG_READ_VAL32_C, "[_ra_ + _rcu32_] = _rbu16_")
BYTECODE_OP(SetAtPointer32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B | OPFLAG_READ_VAL32_C, "[_ra_ + _rcu32_] = _rbu32_")
BYTECODE_OP(SetAtPointer64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B | OPFLAG_READ_VAL32_C, "[_ra_ + _rcu32_] = _rbu64_")

BYTECODE_OP(SetAtStackPointer8, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] = _rbu8_")
BYTECODE_OP(SetAtStackPointer16, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] = _rbu16_")
BYTECODE_OP(SetAtStackPointer32, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] = _rbu32_")
BYTECODE_OP(SetAtStackPointer64, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] = _rbu64_")

BYTECODE_OP(SetAtStackPointer8x2, OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B | OPFLAG_READ_VAL32_C | OPFLAG_READ_D | OPFLAG_IMM_D, "stack[_rau32_] = _rbu8_; stack[_rcu32_] = _rdu8_")
BYTECODE_OP(SetAtStackPointer16x2, OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B | OPFLAG_READ_VAL32_C | OPFLAG_READ_D | OPFLAG_IMM_D, "stack[_rau32_] = _rbu16_; stack[_rcu32_] = _rdu16_")
BYTECODE_OP(SetAtStackPointer32x2, OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B | OPFLAG_READ_VAL32_C | OPFLAG_READ_D | OPFLAG_IMM_D, "stack[_rau32_] = _rbu32_; stack[_rcu32_] = _rdu32_")
BYTECODE_OP(SetAtStackPointer64x2, OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B | OPFLAG_READ_VAL32_C | OPFLAG_READ_D | OPFLAG_IMM_D, "stack[_rau32_] = _rbu64_; stack[_rcu32_] = _rdu64_")

BYTECODE_OP(IncPointer64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_B, "_rc_ = _ra_ + _rbs64_")
BYTECODE_OP(IncMulPointer64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_B | OPFLAG_READ_VAL64_D, "_rc_ = _ra_ + (_rbs64_ * _rdu64_)")
BYTECODE_OP(DecPointer64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_B, "_rc_ = _ra_ - _rbs64_")

BYTECODE_OP(CastBool8, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(bool) _rb_")
BYTECODE_OP(CastBool16, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(bool) _rb_")
BYTECODE_OP(CastBool32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(bool) _rb_")
BYTECODE_OP(CastBool64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(bool) _rb_")

BYTECODE_OP(CastS8S16, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(s16) _rb_")

BYTECODE_OP(CastS8S32, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(s32) _rb_")
BYTECODE_OP(CastS16S32, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(s32) _rb_")
BYTECODE_OP(CastF32S32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(s32) _rb_")

BYTECODE_OP(CastS8S64, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(s64) _rb_")
BYTECODE_OP(CastS16S64, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(s64) _rb_")
BYTECODE_OP(CastS32S64, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(s64) _rb_")
BYTECODE_OP(CastF64S64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(s64) _rb_")

BYTECODE_OP(CastS8F32, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f32) _rb_")
BYTECODE_OP(CastS16F32, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f32) _rb_")
BYTECODE_OP(CastS32F32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f32) _rb_")
BYTECODE_OP(CastS64F32, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f32) _rb_")
BYTECODE_OP(CastU8F32, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f32) _rb_")
BYTECODE_OP(CastU16F32, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f32) _rb_")
BYTECODE_OP(CastU32F32, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f32) _rb_")
BYTECODE_OP(CastU64F32, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f32) _rb_")
BYTECODE_OP(CastF64F32, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f32) _rb_")

BYTECODE_OP(CastS8F64, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f64) _rb_")
BYTECODE_OP(CastS16F64, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f64) _rb_")
BYTECODE_OP(CastS32F64, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f64) _rb_")
BYTECODE_OP(CastS64F64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f64) _rb_")
BYTECODE_OP(CastU8F64, OPFLAG_IS_8B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f64) _rb_")
BYTECODE_OP(CastU16F64, OPFLAG_IS_16B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f64) _rb_")
BYTECODE_OP(CastU32F64, OPFLAG_IS_32B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f64) _rb_")
BYTECODE_OP(CastU64F64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f64) _rb_")
BYTECODE_OP(CastF32F64, OPFLAG_IS_64B | OPFLAG_IS_REGONLY | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(f64) _rb_")

BYTECODE_OP(AffectOpPlusEqS8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbs8_")
BYTECODE_OP(AffectOpPlusEqS8_Safe, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbs8_")
BYTECODE_OP(AffectOpPlusEqS8_SSafe, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] += _rbu8_")
BYTECODE_OP(AffectOpPlusEqS8_SSSafe, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] += stack[_rbu32_]")

BYTECODE_OP(AffectOpPlusEqS16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbs16_")
BYTECODE_OP(AffectOpPlusEqS16_Safe, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbs16_")
BYTECODE_OP(AffectOpPlusEqS16_SSafe, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] += _rbu16_")
BYTECODE_OP(AffectOpPlusEqS16_SSSafe, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] += stack[_rbu32_]")

BYTECODE_OP(AffectOpPlusEqS32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbs32_")
BYTECODE_OP(AffectOpPlusEqS32_Safe, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbs32_")
BYTECODE_OP(AffectOpPlusEqS32_SSafe, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] += _rbu32_")
BYTECODE_OP(AffectOpPlusEqS32_SSSafe, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] += stack[_rbu32_]")

BYTECODE_OP(AffectOpPlusEqS64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbs64_")
BYTECODE_OP(AffectOpPlusEqS64_Safe, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbs64_")
BYTECODE_OP(AffectOpPlusEqS64_SSafe, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] += _rbu64_")
BYTECODE_OP(AffectOpPlusEqS64_SSSafe, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] += stack[_rbu32_]")

BYTECODE_OP(AffectOpPlusEqU8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbu8_")
BYTECODE_OP(AffectOpPlusEqU8_Safe, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbu8_")
BYTECODE_OP(AffectOpPlusEqU8_SSafe, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] += _rbu8_")
BYTECODE_OP(AffectOpPlusEqU8_SSSafe, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] += stack[_rbu32_]")

BYTECODE_OP(AffectOpPlusEqU16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbu16_")
BYTECODE_OP(AffectOpPlusEqU16_Safe, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbu16_")
BYTECODE_OP(AffectOpPlusEqU16_SSafe, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] += _rbu16_")
BYTECODE_OP(AffectOpPlusEqU16_SSSafe, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] += stack[_rbu32_]")

BYTECODE_OP(AffectOpPlusEqU32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbu32_")
BYTECODE_OP(AffectOpPlusEqU32_Safe, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbu32_")
BYTECODE_OP(AffectOpPlusEqU32_SSafe, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] += _rbu32_")
BYTECODE_OP(AffectOpPlusEqU32_SSSafe, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] += stack[_rbu32_]")

BYTECODE_OP(AffectOpPlusEqU64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbu64_")
BYTECODE_OP(AffectOpPlusEqU64_Safe, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbu64_")
BYTECODE_OP(AffectOpPlusEqU64_SSafe, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] += _rbu64_")
BYTECODE_OP(AffectOpPlusEqU64_SSSafe, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] += stack[_rbu32_]")

BYTECODE_OP(AffectOpPlusEqF32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbf32_")
BYTECODE_OP(AffectOpPlusEqF32_S, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] += _rbf32_")
BYTECODE_OP(AffectOpPlusEqF32_SS, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] += stack[_rbu32_]")

BYTECODE_OP(AffectOpPlusEqF64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbf64_")
BYTECODE_OP(AffectOpPlusEqF64_S, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] += _rbf64_")
BYTECODE_OP(AffectOpPlusEqF64_SS, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] += stack[_rbu32_]")

BYTECODE_OP(AffectOpMinusEqS8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbs8_")
BYTECODE_OP(AffectOpMinusEqS8_Safe, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbs8_")
BYTECODE_OP(AffectOpMinusEqS8_SSafe, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] -= _rbu8_")
BYTECODE_OP(AffectOpMinusEqS8_SSSafe, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] -= stack[_rbu32_]")

BYTECODE_OP(AffectOpMinusEqS16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbs16_")
BYTECODE_OP(AffectOpMinusEqS16_Safe, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbs16_")
BYTECODE_OP(AffectOpMinusEqS16_SSafe, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] -= _rbu16_")
BYTECODE_OP(AffectOpMinusEqS16_SSSafe, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] -= stack[_rbu32_]")

BYTECODE_OP(AffectOpMinusEqS32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbs32_")
BYTECODE_OP(AffectOpMinusEqS32_Safe, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbs32_")
BYTECODE_OP(AffectOpMinusEqS32_SSafe, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] -= _rbu32_")
BYTECODE_OP(AffectOpMinusEqS32_SSSafe, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] -= stack[_rbu32_]")

BYTECODE_OP(AffectOpMinusEqS64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbs64_")
BYTECODE_OP(AffectOpMinusEqS64_Safe, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbs64_")
BYTECODE_OP(AffectOpMinusEqS64_SSafe, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] -= _rbu64_")
BYTECODE_OP(AffectOpMinusEqS64_SSSafe, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] -= stack[_rbu32_]")

BYTECODE_OP(AffectOpMinusEqU8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbu8_")
BYTECODE_OP(AffectOpMinusEqU8_Safe, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbu8_")
BYTECODE_OP(AffectOpMinusEqU8_SSafe, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] -= _rbu8_")
BYTECODE_OP(AffectOpMinusEqU8_SSSafe, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] -= stack[_rbu32_]")

BYTECODE_OP(AffectOpMinusEqU16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbu16_")
BYTECODE_OP(AffectOpMinusEqU16_Safe, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbu16_")
BYTECODE_OP(AffectOpMinusEqU16_SSafe, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] -= _rbu16_")
BYTECODE_OP(AffectOpMinusEqU16_SSSafe, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] -= stack[_rbu32_]")

BYTECODE_OP(AffectOpMinusEqU32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbu32_")
BYTECODE_OP(AffectOpMinusEqU32_Safe, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbu32_")
BYTECODE_OP(AffectOpMinusEqU32_SSafe, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] -= _rbu32_")
BYTECODE_OP(AffectOpMinusEqU32_SSSafe, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] -= stack[_rbu32_]")

BYTECODE_OP(AffectOpMinusEqU64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbu64_")
BYTECODE_OP(AffectOpMinusEqU64_Safe, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbu64_")
BYTECODE_OP(AffectOpMinusEqU64_SSafe, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] -= _rbu64_")
BYTECODE_OP(AffectOpMinusEqU64_SSSafe, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] -= stack[_rbu32_]")

BYTECODE_OP(AffectOpMinusEqF32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbf32_")
BYTECODE_OP(AffectOpMinusEqF32_S, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] -= _rbf32_")
BYTECODE_OP(AffectOpMinusEqF32_SS, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] -= stack[_rbu32_]")

BYTECODE_OP(AffectOpMinusEqF64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbf64_")
BYTECODE_OP(AffectOpMinusEqF64_S, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] -= _rbf64_")
BYTECODE_OP(AffectOpMinusEqF64_SS, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] -= stack[_rbu32_]")

BYTECODE_OP(AffectOpMulEqS8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbs8_")
BYTECODE_OP(AffectOpMulEqS8_Safe, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbs8_")
BYTECODE_OP(AffectOpMulEqS8_SSafe, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] *= _rbu8_")
BYTECODE_OP(AffectOpMulEqS8_SSSafe, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] *= stack[_rbu32_]")

BYTECODE_OP(AffectOpMulEqS16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbs16_")
BYTECODE_OP(AffectOpMulEqS16_Safe, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbs16_")
BYTECODE_OP(AffectOpMulEqS16_SSafe, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] *= _rbu16_")
BYTECODE_OP(AffectOpMulEqS16_SSSafe, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] *= stack[_rbu32_]")

BYTECODE_OP(AffectOpMulEqS32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbs32_")
BYTECODE_OP(AffectOpMulEqS32_Safe, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbs32_")
BYTECODE_OP(AffectOpMulEqS32_SSafe, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] *= _rbu32_")
BYTECODE_OP(AffectOpMulEqS32_SSSafe, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] *= stack[_rbu32_]")

BYTECODE_OP(AffectOpMulEqS64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbs64_")
BYTECODE_OP(AffectOpMulEqS64_Safe, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbs64_")
BYTECODE_OP(AffectOpMulEqS64_SSafe, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] *= _rbu64_")
BYTECODE_OP(AffectOpMulEqS64_SSSafe, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] *= stack[_rbu32_]")

BYTECODE_OP(AffectOpMulEqU8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbu8_")
BYTECODE_OP(AffectOpMulEqU8_Safe, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbu8_")
BYTECODE_OP(AffectOpMulEqU8_SSafe, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] *= _rbu8_")
BYTECODE_OP(AffectOpMulEqU8_SSSafe, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] *= stack[_rbu32_]")

BYTECODE_OP(AffectOpMulEqU16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbu16_")
BYTECODE_OP(AffectOpMulEqU16_Safe, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbu16_")
BYTECODE_OP(AffectOpMulEqU16_SSafe, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] *= _rbu16_")
BYTECODE_OP(AffectOpMulEqU16_SSSafe, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] *= stack[_rbu32_]")

BYTECODE_OP(AffectOpMulEqU32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbu32_")
BYTECODE_OP(AffectOpMulEqU32_Safe, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbu32_")
BYTECODE_OP(AffectOpMulEqU32_SSafe, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] *= _rbu32_")
BYTECODE_OP(AffectOpMulEqU32_SSSafe, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] *= stack[_rbu32_]")

BYTECODE_OP(AffectOpMulEqU64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbu64_")
BYTECODE_OP(AffectOpMulEqU64_Safe, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbu64_")
BYTECODE_OP(AffectOpMulEqU64_SSafe, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] *= _rbu64_")
BYTECODE_OP(AffectOpMulEqU64_SSSafe, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] *= stack[_rbu32_]")

BYTECODE_OP(AffectOpMulEqF32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbf32_")
BYTECODE_OP(AffectOpMulEqF32_S, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] *= _rbf32_")
BYTECODE_OP(AffectOpMulEqF32_SS, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_B, "stack[_rau32_] *= stack[_rbu32_]")

BYTECODE_OP(AffectOpMulEqF64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] *= _rbf64_")
BYTECODE_OP(AffectOpMulEqF64_S, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] *= _rbf64_")
BYTECODE_OP(AffectOpMulEqF64_SS, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_B, "stack[_rau32_] *= stack[_rbu32_]")

BYTECODE_OP(AffectOpDivEqS8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] /= _rbs8_")
BYTECODE_OP(AffectOpDivEqS8_S, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] /= _rbs8_")
BYTECODE_OP(AffectOpDivEqS8_SS, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] /= stack[_rbu32_]")

BYTECODE_OP(AffectOpDivEqS16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] /= _rbs16_")
BYTECODE_OP(AffectOpDivEqS16_S, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] /= _rbs16_")
BYTECODE_OP(AffectOpDivEqS16_SS, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] /= stack[_rbu32_]")

BYTECODE_OP(AffectOpDivEqS32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] /= _rbs32_")
BYTECODE_OP(AffectOpDivEqS32_S, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] /= _rbs32_")
BYTECODE_OP(AffectOpDivEqS32_SS, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] /= stack[_rbu32_]")

BYTECODE_OP(AffectOpDivEqS64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] /= _rbs64_")
BYTECODE_OP(AffectOpDivEqS64_S, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] /= _rbs64_")
BYTECODE_OP(AffectOpDivEqS64_SS, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] /= stack[_rbu32_]")

BYTECODE_OP(AffectOpDivEqU8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] /= _rbu8_")
BYTECODE_OP(AffectOpDivEqU8_S, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] /= _rbu8_")
BYTECODE_OP(AffectOpDivEqU8_SS, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] /= stack[_rbu32_]")

BYTECODE_OP(AffectOpDivEqU16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] /= _rbu16_")
BYTECODE_OP(AffectOpDivEqU16_S, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] /= _rbu16_")
BYTECODE_OP(AffectOpDivEqU16_SS, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] /= stack[_rbu32_]")

BYTECODE_OP(AffectOpDivEqU32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] /= _rbu32_")
BYTECODE_OP(AffectOpDivEqU32_S, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] /= _rbu32_")
BYTECODE_OP(AffectOpDivEqU32_SS, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] /= stack[_rbu32_]")

BYTECODE_OP(AffectOpDivEqU64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] /= _rbu64_")
BYTECODE_OP(AffectOpDivEqU64_S, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] /= _rbu64_")
BYTECODE_OP(AffectOpDivEqU64_SS, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] /= stack[_rbu32_]")

BYTECODE_OP(AffectOpDivEqF32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] /= _rbf32_")
BYTECODE_OP(AffectOpDivEqF32_S, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] /= _rbf32_")
BYTECODE_OP(AffectOpDivEqF32_SS, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] /= stack[_rbu32_]")

BYTECODE_OP(AffectOpDivEqF64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] /= _rbf64_")
BYTECODE_OP(AffectOpDivEqF64_S, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] /= _rbf64_")
BYTECODE_OP(AffectOpDivEqF64_SS, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] /= stack[_rbu32_]")

BYTECODE_OP(AffectOpModuloEqS8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] %= _rbs8_")
BYTECODE_OP(AffectOpModuloEqS8_S, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] %= _rbs8_")
BYTECODE_OP(AffectOpModuloEqS8_SS, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] %= stack[_rbu32_]")

BYTECODE_OP(AffectOpModuloEqS16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] %= _rbs16_")
BYTECODE_OP(AffectOpModuloEqS16_S, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] %= _rbs16_")
BYTECODE_OP(AffectOpModuloEqS16_SS, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] %= stack[_rbu32_]")

BYTECODE_OP(AffectOpModuloEqS32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] %= _rbs32_")
BYTECODE_OP(AffectOpModuloEqS32_S, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] %= _rbs32_")
BYTECODE_OP(AffectOpModuloEqS32_SS, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] %= stack[_rbu32_]")

BYTECODE_OP(AffectOpModuloEqS64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] %= _rbs64_")
BYTECODE_OP(AffectOpModuloEqS64_S, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] %= _rbs64_")
BYTECODE_OP(AffectOpModuloEqS64_SS, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] %= stack[_rbu32_]")

BYTECODE_OP(AffectOpModuloEqU8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] %= _rbu8_")
BYTECODE_OP(AffectOpModuloEqU8_S, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] %= _rbu8_")
BYTECODE_OP(AffectOpModuloEqU8_SS, OPFLAG_IS_8B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] %= stack[_rbu32_]")

BYTECODE_OP(AffectOpModuloEqU16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] %= _rbu16_")
BYTECODE_OP(AffectOpModuloEqU16_S, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] %= _rbu16_")
BYTECODE_OP(AffectOpModuloEqU16_SS, OPFLAG_IS_16B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] %= stack[_rbu32_]")

BYTECODE_OP(AffectOpModuloEqU32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] %= _rbu32_")
BYTECODE_OP(AffectOpModuloEqU32_S, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] %= _rbu32_")
BYTECODE_OP(AffectOpModuloEqU32_SS, OPFLAG_IS_32B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] %= stack[_rbu32_]")

BYTECODE_OP(AffectOpModuloEqU64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] %= _rbu64_")
BYTECODE_OP(AffectOpModuloEqU64_S, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] %= _rbu64_")
BYTECODE_OP(AffectOpModuloEqU64_SS, OPFLAG_IS_64B | OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] %= stack[_rbu32_]")

BYTECODE_OP(AffectOpAndEqU8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] &= _rbu8_")
BYTECODE_OP(AffectOpAndEqU16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] &= _rbu16_")
BYTECODE_OP(AffectOpAndEqU32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] &= _rbu32_")
BYTECODE_OP(AffectOpAndEqU64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] &= _rbu64_")

BYTECODE_OP(AffectOpOrEqU8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] |= _rbu8_")
BYTECODE_OP(AffectOpOrEqU16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] |= _rbu16_")
BYTECODE_OP(AffectOpOrEqU32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] |= _rbu32_")
BYTECODE_OP(AffectOpOrEqU64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] |= _rbu64_")

BYTECODE_OP(AffectOpXorEqU8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] ^= _rbu8_")
BYTECODE_OP(AffectOpXorEqU16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] ^= _rbu16_")
BYTECODE_OP(AffectOpXorEqU32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] ^= _rbu32_")
BYTECODE_OP(AffectOpXorEqU64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] ^= _rbu64_")

BYTECODE_OP(AffectOpShiftLeftEqS8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] <<= _rbu32_")
BYTECODE_OP(AffectOpShiftLeftEqS16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] <<= _rbu32_")
BYTECODE_OP(AffectOpShiftLeftEqS32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] <<= _rbu32_")
BYTECODE_OP(AffectOpShiftLeftEqS64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] <<= _rbu32_")
BYTECODE_OP(AffectOpShiftLeftEqU8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] <<= _rbu32_")
BYTECODE_OP(AffectOpShiftLeftEqU16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] <<= _rbu32_")
BYTECODE_OP(AffectOpShiftLeftEqU32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] <<= _rbu32_")
BYTECODE_OP(AffectOpShiftLeftEqU64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] <<= _rbu32_")

BYTECODE_OP(AffectOpShiftRightEqS8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] >>= _rbu32_")
BYTECODE_OP(AffectOpShiftRightEqS16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] >>= _rbu32_")
BYTECODE_OP(AffectOpShiftRightEqS32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] >>= _rbu32_")
BYTECODE_OP(AffectOpShiftRightEqS64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] >>= _rbu32_")
BYTECODE_OP(AffectOpShiftRightEqU8, OPFLAG_IS_8B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] >>= _rbu32_")
BYTECODE_OP(AffectOpShiftRightEqU16, OPFLAG_IS_16B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] >>= _rbu32_")
BYTECODE_OP(AffectOpShiftRightEqU32, OPFLAG_IS_32B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] >>= _rbu32_")
BYTECODE_OP(AffectOpShiftRightEqU64, OPFLAG_IS_64B | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] >>= _rbu32_")

BYTECODE_OP(IntrinsicMulAddF32, OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_READ_D | OPFLAG_IMM_B | OPFLAG_IMM_C | OPFLAG_IMM_D, "_ra_ = (_rbf32_ * _rcf32_) + _rdf32_")
BYTECODE_OP(IntrinsicMulAddF64, OPFLAG_IS_REGONLY | OPFLAG_IS_FACTOR | OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_READ_D | OPFLAG_IMM_B | OPFLAG_IMM_C | OPFLAG_IMM_D, "_ra_ = (_rbf64_ * _rcf64_) + _rdf64_")

BYTECODE_OP(IntrinsicS8x1, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _w0_(_rbs8_)")
BYTECODE_OP(IntrinsicS16x1, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _w0_(_rbs16_)")
BYTECODE_OP(IntrinsicS32x1, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _w0_(_rbs32_)")
BYTECODE_OP(IntrinsicS64x1, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _w0_(_rbs64_)")
BYTECODE_OP(IntrinsicF32x1, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _w0_(_rbf32_)")
BYTECODE_OP(IntrinsicF64x1, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _w0_(_rbf64_)")
BYTECODE_OP(IntrinsicS8x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbs8_, _rcs8_)")
BYTECODE_OP(IntrinsicS16x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbs16_, _rcs16_)")
BYTECODE_OP(IntrinsicS32x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbs32_, _rcs32_)")
BYTECODE_OP(IntrinsicS64x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbs64_, _rcs64_)")
BYTECODE_OP(IntrinsicU8x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbu8_, _rcu8_)")
BYTECODE_OP(IntrinsicU16x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbu16_, _rcu16_)")
BYTECODE_OP(IntrinsicU32x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbu32_, _rcu32_)")
BYTECODE_OP(IntrinsicU64x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbu64_, _rcu64_)")
BYTECODE_OP(IntrinsicF32x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbf32_, _rcf32_)")
BYTECODE_OP(IntrinsicF64x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbf64_, _rcf64_)")

BYTECODE_OP(End, 0, "")
