BYTECODE_OP(Nop, 0, "", 0)
BYTECODE_OP(PushBP, 0, "", 0)
BYTECODE_OP(PopBP, 0, "", 0)
BYTECODE_OP(PushRR, 0, "push &result", 0)
BYTECODE_OP(PopRR, 0, "pop &result", 0)
BYTECODE_OP(DebugNop, 0, "", 0)

BYTECODE_OP(IncSPPostCallCond, OPFLAG_READ_A | OPFLAG_READ_VAL32_B, "if _ra_ popstack _rbu32_", 0)
BYTECODE_OP(IncSPPostCall, OPFLAG_READ_VAL32_A, "popstack _rau32_", 0)
BYTECODE_OP(DecSPBP, OPFLAG_READ_VAL32_A, "stacksize _rau32_", 0)
BYTECODE_OP(Ret, OPFLAG_READ_VAL32_A, "return", 0)

BYTECODE_OP(CloneString, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_A, "", 0)

BYTECODE_OP(PushRVParam, OPFLAG_READ_A | OPFLAG_READ_VAL64_B, "", 0)
BYTECODE_OP(PushRAParamCond, OPFLAG_READ_A | OPFLAG_READ_B, "if _ra_ pushstack _rb_", 0)
BYTECODE_OP(PushRAParam, OPFLAG_READ_A, "pushstack _ra_", 0)
BYTECODE_OP(PushRAParam2, OPFLAG_READ_A | OPFLAG_READ_B, "pushstack _ra_, _rb_", 0)
BYTECODE_OP(PushRAParam3, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C, "pushstack _ra_, _rb_, _rc_", 0)
BYTECODE_OP(PushRAParam4, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_READ_D, "pushstack _ra_, _rb_, _rc_, _rd_", 0)

BYTECODE_OP(MulAddVC64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_VAL64_C, "_ra_ = _ra_ * (_rb_ + _rcu8_)", 0)

BYTECODE_OP(LocalCall, OPFLAG_READ_VAL64_A, "call", 0)
BYTECODE_OP(LambdaCall, OPFLAG_READ_A | OPFLAG_READ_VAL64_B, "call [_ra_]", 0)
BYTECODE_OP(ForeignCall, OPFLAG_READ_VAL64_D, "call", 0)
BYTECODE_OP(MakeLambda, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ = ", 0)
BYTECODE_OP(InternalInitStackTrace, 0, "", 0)
BYTECODE_OP(InternalStackTrace, OPFLAG_READ_A, "", 0)

BYTECODE_OP(IntrinsicSetErr, OPFLAG_READ_A | OPFLAG_READ_B, "@seterr(_ra_, _rb_)", 2)
BYTECODE_OP(IntrinsicInterfaceOf, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C, "_rc_ = @interfaceof(_ra_, _rb_)", 3)
BYTECODE_OP(IntrinsicErrorMsg, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C, "@errormsg(_ra_, _rb_, _rc_)", 3)
BYTECODE_OP(IntrinsicPanic, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C, "@panic(_ra_, _rb_, _rc_)", 3)
BYTECODE_OP(InternalPanic, OPFLAG_READ_VAL64_D, "@panic", 4)
BYTECODE_OP(IntrinsicTypeCmp, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_C | OPFLAG_WRITE_D, "_rd_ = @typecmp(_ra_, _rb_, _rcu64_)", 4)
BYTECODE_OP(IntrinsicStringCmp, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_READ_D | OPFLAG_WRITE_D, "_rd_ = @stringcmp(_ra_, _rb_, _rc_, _rd_)", 5)

BYTECODE_OP(IntrinsicAlloc, OPFLAG_WRITE_A | OPFLAG_READ_B, "_ra_ = @alloc(_rb_)", 0)
BYTECODE_OP(IntrinsicRealloc, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C, "_ra_ = @realloc(_rb_, _rc_)", 0)
BYTECODE_OP(IntrinsicFree, OPFLAG_READ_A, "@free(_ra_)", 0)
BYTECODE_OP(IntrinsicGetContext, OPFLAG_WRITE_A, "_ra_ = @getcontext()", 0)
BYTECODE_OP(IntrinsicSetContext, OPFLAG_READ_A, "@setcontext(_ra_)", 0)
BYTECODE_OP(IntrinsicCVaStart, OPFLAG_READ_A, "@cvastart(_ra_)", 0)
BYTECODE_OP(IntrinsicCVaEnd, OPFLAG_READ_A, "@cvaend(_ra_)", 0)
BYTECODE_OP(IntrinsicCVaArg, OPFLAG_READ_A | OPFLAG_WRITE_B | OPFLAG_READ_VAL64_C, "_rb_ = @cvaarg(_ra_)", 0)
BYTECODE_OP(IntrinsicArguments, OPFLAG_WRITE_A | OPFLAG_WRITE_B, "_ra_, _rb_ = @args()", 0)
BYTECODE_OP(IntrinsicCompiler, OPFLAG_WRITE_A | OPFLAG_WRITE_B, "_ra_, _rb_ = @compiler()", 0)
BYTECODE_OP(IntrinsicIsByteCode, OPFLAG_WRITE_A, "_ra_ = @isbytecode()", 0)
BYTECODE_OP(IntrinsicMakeCallback, OPFLAG_WRITE_A | OPFLAG_READ_A, "_ra_ = @mkcallback(_ra_)", 0)
BYTECODE_OP(IntrinsicMakeForeign, OPFLAG_WRITE_A | OPFLAG_READ_A, "_ra_ = @mkforeign(_ra_)", 0)
BYTECODE_OP(IntrinsicGetErr, OPFLAG_WRITE_A | OPFLAG_WRITE_B, "_ra_, _rb_ = @geterr()", 0)
BYTECODE_OP(InternalCheckAny, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C, "checkAny(_ra_, _rb_, _rc_)", 0)
BYTECODE_OP(IntrinsicBcDbg, 0, "@bcdbg()", 0)
BYTECODE_OP(InternalClearErr, 0, "clear err", 0)
BYTECODE_OP(InternalPushErr, 0, "push err", 0)
BYTECODE_OP(InternalPopErr, 0, "pop err", 0)
BYTECODE_OP(InternalGetTlsPtr, OPFLAG_WRITE_A, "_ra_ = &tls", 4)

BYTECODE_OP(IntrinsicAtomicAddS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicAddS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicAddS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicAddS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)

BYTECODE_OP(IntrinsicAtomicAndS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicAndS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicAndS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicAndS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)

BYTECODE_OP(IntrinsicAtomicOrS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicOrS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicOrS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicOrS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)

BYTECODE_OP(IntrinsicAtomicXorS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicXorS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicXorS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicXorS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)

BYTECODE_OP(IntrinsicAtomicXchgS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicXchgS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicXchgS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicXchgS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_UNPURE, "", 0)

BYTECODE_OP(IntrinsicAtomicCmpXchgS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_WRITE_D | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicCmpXchgS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_WRITE_D | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicCmpXchgS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_WRITE_D | OPFLAG_UNPURE, "", 0)
BYTECODE_OP(IntrinsicAtomicCmpXchgS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_WRITE_D | OPFLAG_UNPURE, "", 0)

BYTECODE_OP(JumpIfZero8, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau8_ == 0", 0)
BYTECODE_OP(JumpIfZero16, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau16_ == 0", 0)
BYTECODE_OP(JumpIfZero32, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau32_ == 0", 0)
BYTECODE_OP(JumpIfZero64, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau64_ == 0", 0)
BYTECODE_OP(JumpIfNotZero8, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau8_ != 0", 0)
BYTECODE_OP(JumpIfNotZero16, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau16_ != 0", 0)
BYTECODE_OP(JumpIfNotZero32, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau32_ != 0", 0)
BYTECODE_OP(JumpIfNotZero64, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau64_ != 0", 0)
BYTECODE_OP(JumpIfFalse, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if !_rau8_", 0)
BYTECODE_OP(JumpIfTrue, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_IMM_A, "jump if _rau8_", 0)
BYTECODE_OP(JumpIfNotEqual8, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau8_ != _rcu8_", 0)
BYTECODE_OP(JumpIfNotEqual16, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau16_ != _rcu16_", 0)
BYTECODE_OP(JumpIfNotEqual32, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau32_ != _rcu32_", 0)
BYTECODE_OP(JumpIfNotEqual64, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau64_ != _rcu64_", 0)
BYTECODE_OP(JumpIfEqual8, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau8_ == _rcu8_", 0)
BYTECODE_OP(JumpIfEqual16, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau16_ == _rcu16_", 0)
BYTECODE_OP(JumpIfEqual32, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau32_ == _rcu32_", 0)
BYTECODE_OP(IncJumpIfEqual64, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if ++_rau64_ == _rcu64_", 0)
BYTECODE_OP(JumpIfEqual64, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau64_ == _rcu64_", 0)
BYTECODE_OP(JumpIfLowerU32, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau32_ < _rcu32_", 0)
BYTECODE_OP(JumpIfLowerU64, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau64_ < _rcu64_", 0)
BYTECODE_OP(JumpIfLowerS32, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras32_ < _rcs32_", 0)
BYTECODE_OP(JumpIfLowerS64, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras64_ < _rcs64_", 0)
BYTECODE_OP(JumpIfLowerF32, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf32_ < _rcf32_", 0)
BYTECODE_OP(JumpIfLowerF64, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf64_ < _rcf64_", 0)
BYTECODE_OP(JumpIfLowerEqU32, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau32_ <= _rcu32_", 0)
BYTECODE_OP(JumpIfLowerEqU64, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau64_ <= _rcu64_", 0)
BYTECODE_OP(JumpIfLowerEqS32, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras32_ <= _rcs32_", 0)
BYTECODE_OP(JumpIfLowerEqS64, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras64_ <= _rcs64_", 0)
BYTECODE_OP(JumpIfLowerEqF32, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf32_ <= _rcf32_", 0)
BYTECODE_OP(JumpIfLowerEqF64, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf64_ <= _rcf64_", 0)
BYTECODE_OP(JumpIfGreaterU32, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau32_ > _rcu32_", 0)
BYTECODE_OP(JumpIfGreaterU64, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau64_ > _rcu64_", 0)
BYTECODE_OP(JumpIfGreaterS32, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras32_ > _rcs32_", 0)
BYTECODE_OP(JumpIfGreaterS64, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras64_ > _rcs64_", 0)
BYTECODE_OP(JumpIfGreaterF32, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf32_ > _rcf32_", 0)
BYTECODE_OP(JumpIfGreaterF64, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf64_ > _rcf64_", 0)
BYTECODE_OP(JumpIfGreaterEqU32, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau32_ >= _rcu32_", 0)
BYTECODE_OP(JumpIfGreaterEqU64, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _rau64_ >= _rcu64_", 0)
BYTECODE_OP(JumpIfGreaterEqS32, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras32_ >= _rcs32_", 0)
BYTECODE_OP(JumpIfGreaterEqS64, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _ras64_ >= _rcs64_", 0)
BYTECODE_OP(JumpIfGreaterEqF32, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf32_ >= _rcf32_", 0)
BYTECODE_OP(JumpIfGreaterEqF64, OPFLAG_IS_JUMP | OPFLAG_READ_A | OPFLAG_IMM_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C | OPFLAG_IMM_C, "jump if _raf64_ >= _rcf64_", 0)
BYTECODE_OP(Jump, OPFLAG_IS_JUMP | OPFLAG_READ_VAL32_B, "jump", 0)

BYTECODE_OP(TestNotZero8, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _rbu8_ != 0", 0)
BYTECODE_OP(TestNotZero16, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _rbu16_ != 0", 0)
BYTECODE_OP(TestNotZero32, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _rbu32_ != 0", 0)
BYTECODE_OP(TestNotZero64, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _rbu64_ != 0", 0)

BYTECODE_OP(DeRef8, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_VAL64_C, "_ra_ = [_rb_ + _rcs64_]", 0)
BYTECODE_OP(DeRef16, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_VAL64_C, "_ra_ = [_rb_ + _rcs64_]", 0)
BYTECODE_OP(DeRef32, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_VAL64_C, "_ra_ = [_rb_ + _rcs64_]", 0)
BYTECODE_OP(DeRef64, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_VAL64_C, "_ra_ = [_rb_ + _rcs64_]", 0)
BYTECODE_OP(DeRefStringSlice, OPFLAG_WRITE_A | OPFLAG_WRITE_B | OPFLAG_READ_A | OPFLAG_READ_VAL64_C, "_ra_, _rb_ = [_ra_ + _rcs64_], [_ra_ + _rcs64_ + 8]", 0)

BYTECODE_OP(Mul64byVB64, OPFLAG_READ_A | OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ *= _rbu64_", 0)
BYTECODE_OP(Div64byVB64, OPFLAG_READ_A | OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ /= _rbu64_", 0)

BYTECODE_OP(ZeroToTrue, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = _ra_ == 0", 0)
BYTECODE_OP(LowerZeroToTrue, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = _ra_ < 0", 0)
BYTECODE_OP(GreaterZeroToTrue, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = _ra_ > 0", 0)
BYTECODE_OP(LowerEqZeroToTrue, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = _ra_ <= 0", 0)
BYTECODE_OP(GreaterEqZeroToTrue, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = _ra_ >= 0", 0)

BYTECODE_OP(SetImmediate32, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = _rbu32_", 0)
BYTECODE_OP(SetImmediate64, OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ = _rbu64_", 0)

BYTECODE_OP(MemCpy8, OPFLAG_IS_MEMCPY | OPFLAG_READ_A | OPFLAG_READ_B, "memcpy(_ra_, _rb_, 1)", 0)
BYTECODE_OP(MemCpy16, OPFLAG_IS_MEMCPY | OPFLAG_READ_A | OPFLAG_READ_B, "memcpy(_ra_, _rb_, 2)", 0)
BYTECODE_OP(MemCpy32, OPFLAG_IS_MEMCPY | OPFLAG_READ_A | OPFLAG_READ_B, "memcpy(_ra_, _rb_, 4)", 0)
BYTECODE_OP(MemCpy64, OPFLAG_IS_MEMCPY | OPFLAG_READ_A | OPFLAG_READ_B, "memcpy(_ra_, _rb_, 8)", 0)

BYTECODE_OP(IntrinsicMemCpy, OPFLAG_IS_MEMCPY | OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_C, "@memcpy(_ra_, _rb_, _rcu64_)", 0)
BYTECODE_OP(IntrinsicMemMove, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_C, "@memmove(_ra_, _rb_, _rcu64_)", 0)
BYTECODE_OP(IntrinsicMemSet, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "@memset(_ra_, _rbu64_, _rcu64_)", 0)
BYTECODE_OP(IntrinsicMemCmp, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_READ_D | OPFLAG_IMM_D, "_ra_ = @memcmp(_rb_, _rc_, _rdu64_)", 0)
BYTECODE_OP(IntrinsicStrLen, OPFLAG_WRITE_A | OPFLAG_READ_B, "_ra_ = @strlen(_rb_)", 2)
BYTECODE_OP(IntrinsicStrCmp, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C, "_ra_ = @strcmp(_rb_, _rc_)", 3)

BYTECODE_OP(CopyRBtoRA8, OPFLAG_IS_COPY_RBRA | OPFLAG_WRITE_A | OPFLAG_READ_B, "_ra_ = _rb_", 0)
BYTECODE_OP(CopyRBtoRA16, OPFLAG_IS_COPY_RBRA | OPFLAG_WRITE_A | OPFLAG_READ_B, "_ra_ = _rb_", 0)
BYTECODE_OP(CopyRBtoRA32, OPFLAG_IS_COPY_RBRA | OPFLAG_WRITE_A | OPFLAG_READ_B, "_ra_ = _rb_", 0)
BYTECODE_OP(CopyRBtoRA64, OPFLAG_IS_COPY_RBRA | OPFLAG_WRITE_A | OPFLAG_READ_B, "_ra_ = _rb_", 0)

BYTECODE_OP(CopyRBAddrToRA, OPFLAG_WRITE_A | OPFLAG_READ_B, "_ra_ = &_rb_", 0)
BYTECODE_OP(CopyRBAddrToRA2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C, "_ra_ = &_rb_", 0)

BYTECODE_OP(ClearRA, OPFLAG_WRITE_A, "_ra_ = 0", 0)
BYTECODE_OP(ClearRA2, OPFLAG_WRITE_A | OPFLAG_WRITE_B, "_ra_, _rb_ = 0", 0)
BYTECODE_OP(ClearRA3, OPFLAG_WRITE_A | OPFLAG_WRITE_B | OPFLAG_WRITE_C, "_ra_, _rb_, _rc_ = 0", 0)
BYTECODE_OP(ClearRA4, OPFLAG_WRITE_A | OPFLAG_WRITE_B | OPFLAG_WRITE_C | OPFLAG_WRITE_D, "_ra_, _rb_, _rc_, _rd_ = 0", 0)

BYTECODE_OP(IncrementRA32, OPFLAG_WRITE_A | OPFLAG_READ_A, "_ra_++", 0)
BYTECODE_OP(DecrementRA32, OPFLAG_WRITE_A | OPFLAG_READ_A, "_ra_--", 0)
BYTECODE_OP(IncrementRA64, OPFLAG_WRITE_A | OPFLAG_READ_A, "_ra_++", 0)
BYTECODE_OP(DecrementRA64, OPFLAG_WRITE_A | OPFLAG_READ_A, "_ra_--", 0)

BYTECODE_OP(Add32byVB32, OPFLAG_READ_A | OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ += _rbu32_", 0)
BYTECODE_OP(Add64byVB64, OPFLAG_READ_A | OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ += _rbu64_", 0)

BYTECODE_OP(CopyRCtoRR, OPFLAG_READ_A | OPFLAG_IMM_A, "result = _rau64_", 0)
BYTECODE_OP(CopyRCtoRR2, OPFLAG_READ_A | OPFLAG_READ_B, "result = _ra_, _rb_", 0)
BYTECODE_OP(CopyRCtoRT, OPFLAG_READ_A, "resultPtr = _ra_", 0)
BYTECODE_OP(CopyRRtoRC, OPFLAG_WRITE_A, "_ra_ = resultPtr", 0)
BYTECODE_OP(CopyRTtoRC, OPFLAG_WRITE_A, "_ra_ = result", 0)
BYTECODE_OP(CopyRTtoRC2, OPFLAG_WRITE_A | OPFLAG_WRITE_B, "_ra_, _rb_ = result", 0)

BYTECODE_OP(CopySP, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_C, "_ra_ = &_rc_", 0)
BYTECODE_OP(CopySPVaargs, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_VAL32_C | OPFLAG_READ_VAL64_D, "_ra_ = &sp + _rbu32_", 0)

BYTECODE_OP(GetFromStackParam64SI, OPFLAG_WRITE_A | OPFLAG_WRITE_B | OPFLAG_READ_VAL32_C, "", 0)
BYTECODE_OP(IntrinsicIsConstExprSI, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_C, "", 0)

BYTECODE_OP(GetFromStack8, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = stack[_rbu32_]", 0)
BYTECODE_OP(GetFromStack16, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = stack[_rbu32_]", 0)
BYTECODE_OP(GetFromStack32, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = stack[_rbu32_]", 0)
BYTECODE_OP(GetFromStack64, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = stack[_rbu32_]", 0)
BYTECODE_OP(GetFromStack64x2, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_WRITE_C | OPFLAG_READ_VAL32_D, "_ra_, _rc_ = stack[_rbu32_], stack[_rdu32_]", 0)

BYTECODE_OP(GetFromStackParam8, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_VAL32_C, "_ra_ = param[_rcu32_] & 0xFF", 0)
BYTECODE_OP(GetFromStackParam16, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_VAL32_C, "_ra_ = param[_rcu32_] & 0xFFFF", 0)
BYTECODE_OP(GetFromStackParam32, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_VAL32_C, "_ra_ = param[_rcu32_] & 0xFFFFFFFF", 0)
BYTECODE_OP(GetFromStackParam64, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B | OPFLAG_READ_VAL32_C, "_ra_ = param[_rcu32_]", 0)

BYTECODE_OP(CopyStack8, OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] = stack[_rbu32_]", 0)
BYTECODE_OP(CopyStack16, OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] = stack[_rbu32_]", 0)
BYTECODE_OP(CopyStack32, OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] = stack[_rbu32_]", 0)
BYTECODE_OP(CopyStack64, OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "stack[_rau32_] = stack[_rbu32_]", 0)

BYTECODE_OP(MakeStackPointer, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = stack + _rbu32_", 0)
BYTECODE_OP(MakeStackPointerRT, OPFLAG_READ_VAL32_A, "resultPtr = stack + _rau32_", 0)

BYTECODE_OP(SetZeroStack8, OPFLAG_READ_VAL32_A, "stack[_rau32_] = 0", 0)
BYTECODE_OP(SetZeroStack16, OPFLAG_READ_VAL32_A, "stack[_rau32_] = 0", 0)
BYTECODE_OP(SetZeroStack32, OPFLAG_READ_VAL32_A, "stack[_rau32_] = 0", 0)
BYTECODE_OP(SetZeroStack64, OPFLAG_READ_VAL32_A, "stack[_rau32_] = 0", 0)
BYTECODE_OP(SetZeroStackX, OPFLAG_READ_VAL32_A | OPFLAG_READ_VAL32_B, "clear(stack + _rau32_, _rbu32_)", 0)

BYTECODE_OP(GetFromCompilerSeg64, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .cdata[_rbu32_]", 0)
BYTECODE_OP(GetFromBssSeg64, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .bss[_rbu32_]", 0)
BYTECODE_OP(GetFromMutableSeg64, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .data[_rbu32_]", 0)

BYTECODE_OP(MakeCompilerSegPointer, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .cdata + _rbu32_", 0)
BYTECODE_OP(MakeBssSegPointer, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .bss + _rbu32_", 0)
BYTECODE_OP(MakeMutableSegPointer, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .data + _rbu32_", 0)
BYTECODE_OP(MakeConstantSegPointer, OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ = .rdata + _rbu32_", 0)

BYTECODE_OP(BinOpModuloS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C, "_rc_ = _ras32_ % _rbs32_", 0)
BYTECODE_OP(BinOpModuloS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C, "_rc_ = _ras64_ % _rbs64_", 0)
BYTECODE_OP(BinOpModuloU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C, "_rc_ = _rau32_ % _rbu32_", 0)
BYTECODE_OP(BinOpModuloU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C, "_rc_ = _rau64_ % _rbu64_", 0)

BYTECODE_OP(BinOpPlusS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ + _rbs32_", 0)
BYTECODE_OP(BinOpPlusS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ + _rbs64_", 0)
BYTECODE_OP(BinOpPlusU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ + _rbu32_", 0)
BYTECODE_OP(BinOpPlusU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ + _rbu64_", 0)
BYTECODE_OP(BinOpPlusF32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ + _rbf32_", 0)
BYTECODE_OP(BinOpPlusF64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ + _rbf64_", 0)

BYTECODE_OP(BinOpMinusS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ - _rbs32_", 0)
BYTECODE_OP(BinOpMinusS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ - _rbs64_", 0)
BYTECODE_OP(BinOpMinusU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ - _rbu32_", 0)
BYTECODE_OP(BinOpMinusU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ - _rbu64_", 0)
BYTECODE_OP(BinOpMinusF32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ - _rbf32_", 0)
BYTECODE_OP(BinOpMinusF64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ - _rbf64_", 0)

BYTECODE_OP(BinOpMulS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ * _rbs32_", 0)
BYTECODE_OP(BinOpMulS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ * _rbs64_", 0)
BYTECODE_OP(BinOpMulU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ * _rbu32_", 0)
BYTECODE_OP(BinOpMulU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ * _rbu64_", 0)
BYTECODE_OP(BinOpMulF32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ * _rbf32_", 0)
BYTECODE_OP(BinOpMulF64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ * _rbf64_", 0)

BYTECODE_OP(BinOpDivS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C, "_rc_ = _ras32_ / _rbs32_", 0)
BYTECODE_OP(BinOpDivS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C, "_rc_ = _ras64_ / _rbs64_", 0)
BYTECODE_OP(BinOpDivU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C, "_rc_ = _rau32_ / _rbu32_", 0)
BYTECODE_OP(BinOpDivU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C, "_rc_ = _rau64_ / _rbu64_", 0)
BYTECODE_OP(BinOpDivF32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ / _rbf32_", 0)
BYTECODE_OP(BinOpDivF64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ / _rbf32_", 0)

BYTECODE_OP(BinOpBitmaskAnd8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ & _rbu8_", 0)
BYTECODE_OP(BinOpBitmaskAnd16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ & _rbu16_", 0)
BYTECODE_OP(BinOpBitmaskAnd32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ & _rbu32_", 0)
BYTECODE_OP(BinOpBitmaskAnd64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ & _rbu64_", 0)
BYTECODE_OP(BinOpBitmaskOr8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ | _rbu8_", 0)
BYTECODE_OP(BinOpBitmaskOr16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ | _rbu16_", 0)
BYTECODE_OP(BinOpBitmaskOr32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ | _rbu32_", 0)
BYTECODE_OP(BinOpBitmaskOr64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ | _rbu64_", 0)

BYTECODE_OP(BinOpShiftLeftU8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ << _rbu32_", 0)
BYTECODE_OP(BinOpShiftLeftU16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ << _rbu32_", 0)
BYTECODE_OP(BinOpShiftLeftU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ << _rbu32_", 0)
BYTECODE_OP(BinOpShiftLeftU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ << _rbu32_", 0)

BYTECODE_OP(BinOpShiftRightU8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ >> _rbu32_", 0)
BYTECODE_OP(BinOpShiftRightU16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ >> _rbu32_", 0)
BYTECODE_OP(BinOpShiftRightU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ >> _rbu32_", 0)
BYTECODE_OP(BinOpShiftRightU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ >> _rbu32_", 0)

BYTECODE_OP(BinOpShiftRightS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras8_ >> _rbu32_", 0)
BYTECODE_OP(BinOpShiftRightS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras16_ >> _rbu32_", 0)
BYTECODE_OP(BinOpShiftRightS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ >> _rbu32_", 0)
BYTECODE_OP(BinOpShiftRightS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ >> _rbu32_", 0)

BYTECODE_OP(BinOpXorU8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ ^ _rbu8_", 0)
BYTECODE_OP(BinOpXorU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ ^ _rbu32_", 0)
BYTECODE_OP(BinOpXorU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ ^ _rbu64_", 0)

BYTECODE_OP(NegBool, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = !_rbu8_", 0)
BYTECODE_OP(NegS32, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = -_ra_", 0)
BYTECODE_OP(NegS64, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = -_ra_", 0)
BYTECODE_OP(NegF32, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = -_ra_", 0)
BYTECODE_OP(NegF64, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = -_ra_", 0)

BYTECODE_OP(InvertU8, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = ~_ra_", 0)
BYTECODE_OP(InvertU16, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = ~_ra_", 0)
BYTECODE_OP(InvertU32, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = ~_ra_", 0)
BYTECODE_OP(InvertU64, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = ~_ra_", 0)

BYTECODE_OP(CompareOpEqual8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ == _rbu8_", 0)
BYTECODE_OP(CompareOpEqual16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ == _rbu16_", 0)
BYTECODE_OP(CompareOpEqual32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ == _rbu32_", 0)
BYTECODE_OP(CompareOpEqual64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ == _rbu64_", 0)

BYTECODE_OP(CompareOpNotEqual8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau8_ != _rbu8_", 0)
BYTECODE_OP(CompareOpNotEqual16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau16_ != _rbu16_", 0)
BYTECODE_OP(CompareOpNotEqual32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ != _rbu32_", 0)
BYTECODE_OP(CompareOpNotEqual64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ != _rbu64_", 0)

BYTECODE_OP(CompareOp3WayS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ <=> _rbs32_", 0)
BYTECODE_OP(CompareOp3WayS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ <=> _rbs64_", 0)
BYTECODE_OP(CompareOp3WayU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ <=> _rbu32_", 0)
BYTECODE_OP(CompareOp3WayU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ <=> _rbu64_", 0)
BYTECODE_OP(CompareOp3WayF32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ <=> _rbf32_", 0)
BYTECODE_OP(CompareOp3WayF64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ <=> _rbf64_", 0)

BYTECODE_OP(CompareOpLowerS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ < _rbs32_", 0)
BYTECODE_OP(CompareOpLowerS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ < _rbs64_", 0)
BYTECODE_OP(CompareOpLowerU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ < _rbu32_", 0)
BYTECODE_OP(CompareOpLowerU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ < _rbu64_", 0)
BYTECODE_OP(CompareOpLowerF32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ < _rbf32_", 0)
BYTECODE_OP(CompareOpLowerF64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ < _rbf64_", 0)

BYTECODE_OP(CompareOpLowerEqS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ <= _rbs32_", 0)
BYTECODE_OP(CompareOpLowerEqS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ <= _rbs64_", 0)
BYTECODE_OP(CompareOpLowerEqU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ <= _rbu32_", 0)
BYTECODE_OP(CompareOpLowerEqU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ <= _rbu64_", 0)
BYTECODE_OP(CompareOpLowerEqF32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ <= _rbf32_", 0)
BYTECODE_OP(CompareOpLowerEqF64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ <= _rbf64_", 0)

BYTECODE_OP(CompareOpGreaterS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ > _rbs32_", 0)
BYTECODE_OP(CompareOpGreaterS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ > _rbs64_", 0)
BYTECODE_OP(CompareOpGreaterU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ > _rbu32_", 0)
BYTECODE_OP(CompareOpGreaterU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ > _rbu64_", 0)
BYTECODE_OP(CompareOpGreaterF32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ > _rbf32_", 0)
BYTECODE_OP(CompareOpGreaterF64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ > _rbf64_", 0)

BYTECODE_OP(CompareOpGreaterEqS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras32_ >= _rbs32_", 0)
BYTECODE_OP(CompareOpGreaterEqS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _ras64_ >= _rbs64_", 0)
BYTECODE_OP(CompareOpGreaterEqU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau32_ >= _rbu32_", 0)
BYTECODE_OP(CompareOpGreaterEqU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _rau64_ >= _rbu64_", 0)
BYTECODE_OP(CompareOpGreaterEqF32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf32_ >= _rbf32_", 0)
BYTECODE_OP(CompareOpGreaterEqF64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_A | OPFLAG_IMM_B, "_rc_ = _raf64_ >= _rbf64_", 0)

BYTECODE_OP(ClearMaskU32, OPFLAG_READ_A | OPFLAG_WRITE_A | OPFLAG_READ_VAL32_B, "_ra_ &= _rbx32_", 0)
BYTECODE_OP(ClearMaskU64, OPFLAG_READ_A | OPFLAG_WRITE_A | OPFLAG_READ_VAL64_B, "_ra_ &= _rbx64_", 0)

BYTECODE_OP(SetZeroAtPointer8, OPFLAG_READ_A | OPFLAG_READ_VAL32_B, "[_ra_ + _rbu32_] = 0", 0)
BYTECODE_OP(SetZeroAtPointer16, OPFLAG_READ_A | OPFLAG_READ_VAL32_B, "[_ra_ + _rbu32_] = 0", 0)
BYTECODE_OP(SetZeroAtPointer32, OPFLAG_READ_A | OPFLAG_READ_VAL32_B, "[_ra_ + _rbu32_] = 0", 0)
BYTECODE_OP(SetZeroAtPointer64, OPFLAG_READ_A | OPFLAG_READ_VAL32_B, "[_ra_ + _rbu32_] = 0", 0)
BYTECODE_OP(SetZeroAtPointerX, OPFLAG_READ_A | OPFLAG_READ_VAL64_B | OPFLAG_READ_VAL64_C, "clear(_ra_ + _rcs64_, _rbu64_)", 0)
BYTECODE_OP(SetZeroAtPointerXRB, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_READ_VAL64_C, "clear(_ra_, _rb_ * _rcu64_)", 0)

BYTECODE_OP(SetAtPointer8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B | OPFLAG_READ_VAL32_C, "[_ra_ + _rcu32_] = _rbu8_", 0)
BYTECODE_OP(SetAtPointer16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B | OPFLAG_READ_VAL32_C, "[_ra_ + _rcu32_] = _rbu16_", 0)
BYTECODE_OP(SetAtPointer32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B | OPFLAG_READ_VAL32_C, "[_ra_ + _rcu32_] = _rbu32_", 0)
BYTECODE_OP(SetAtPointer64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B | OPFLAG_READ_VAL32_C, "[_ra_ + _rcu32_] = _rbu64_", 0)

BYTECODE_OP(SetAtStackPointer8, OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] = _rbu8_", 0)
BYTECODE_OP(SetAtStackPointer16, OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] = _rbu16_", 0)
BYTECODE_OP(SetAtStackPointer32, OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] = _rbu32_", 0)
BYTECODE_OP(SetAtStackPointer64, OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B, "stack[_rau32_] = _rbu64_", 0)

BYTECODE_OP(SetAtStackPointer8x2, OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B | OPFLAG_READ_VAL32_C | OPFLAG_READ_D | OPFLAG_IMM_D, "stack[_rau32_] = _rbu8_, stack[_rcu32_] = _rdu8_", 0)
BYTECODE_OP(SetAtStackPointer16x2, OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B | OPFLAG_READ_VAL32_C | OPFLAG_READ_D | OPFLAG_IMM_D, "stack[_rau32_] = _rbu16_, stack[_rcu32_] = _rdu16_", 0)
BYTECODE_OP(SetAtStackPointer32x2, OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B | OPFLAG_READ_VAL32_C | OPFLAG_READ_D | OPFLAG_IMM_D, "stack[_rau32_] = _rbu32_, stack[_rcu32_] = _rdu32_", 0)
BYTECODE_OP(SetAtStackPointer64x2, OPFLAG_READ_VAL32_A | OPFLAG_READ_B | OPFLAG_IMM_B | OPFLAG_READ_VAL32_C | OPFLAG_READ_D | OPFLAG_IMM_D, "stack[_rau32_] = _rbu64_, stack[_rcu32_] = _rdu64_", 0)

BYTECODE_OP(IncPointer64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_B, "_rc_ = _ra_ + _rbs64_", 0)
BYTECODE_OP(DecPointer64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_WRITE_C | OPFLAG_IMM_B, "_rc_ = _ra_ - _rbs64_", 0)

BYTECODE_OP(CastBool8, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(bool) _rb_", 0)
BYTECODE_OP(CastBool16, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(bool) _rb_", 0)
BYTECODE_OP(CastBool32, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(bool) _rb_", 0)
BYTECODE_OP(CastBool64, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = cast(bool) _rb_", 0)

BYTECODE_OP(CastS8S16, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(s16) _ra_", 0)

BYTECODE_OP(CastS8S32, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(s32) _ra_", 0)
BYTECODE_OP(CastS16S32, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(s32) _ra_", 0)
BYTECODE_OP(CastF32S32, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(s32) _ra_", 0)

BYTECODE_OP(CastS8S64, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(s64) _ra_", 0)
BYTECODE_OP(CastS16S64, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(s64) _ra_", 0)
BYTECODE_OP(CastS32S64, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(s64) _ra_", 0)
BYTECODE_OP(CastF64S64, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(s64) _ra_", 0)

BYTECODE_OP(CastS8F32, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f32) _ra_", 0)
BYTECODE_OP(CastS16F32, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f32) _ra_", 0)
BYTECODE_OP(CastS32F32, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f32) _ra_", 0)
BYTECODE_OP(CastS64F32, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f32) _ra_", 0)
BYTECODE_OP(CastU8F32, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f32) _ra_", 0)
BYTECODE_OP(CastU16F32, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f32) _ra_", 0)
BYTECODE_OP(CastU32F32, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f32) _ra_", 0)
BYTECODE_OP(CastU64F32, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f32) _ra_", 0)
BYTECODE_OP(CastF64F32, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f32) _ra_", 0)

BYTECODE_OP(CastS8F64, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f64) _ra_", 0)
BYTECODE_OP(CastS16F64, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f64) _ra_", 0)
BYTECODE_OP(CastS32F64, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f64) _ra_", 0)
BYTECODE_OP(CastS64F64, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f64) _ra_", 0)
BYTECODE_OP(CastU8F64, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f64) _ra_", 0)
BYTECODE_OP(CastU16F64, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f64) _ra_", 0)
BYTECODE_OP(CastU32F64, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f64) _ra_", 0)
BYTECODE_OP(CastU64F64, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f64) _ra_", 0)
BYTECODE_OP(CastF32F64, OPFLAG_READ_A | OPFLAG_WRITE_A, "_ra_ = cast(f64) _ra_", 0)

BYTECODE_OP(AffectOpPlusEqS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbs8_", 0)
BYTECODE_OP(AffectOpPlusEqS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbs16_", 0)
BYTECODE_OP(AffectOpPlusEqS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbs32_", 0)
BYTECODE_OP(AffectOpPlusEqS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbs64_", 0)
BYTECODE_OP(AffectOpPlusEqU8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbu8_", 0)
BYTECODE_OP(AffectOpPlusEqU16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbu16_", 0)
BYTECODE_OP(AffectOpPlusEqU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbu32_", 0)
BYTECODE_OP(AffectOpPlusEqU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbu64_", 0)
BYTECODE_OP(AffectOpPlusEqF32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbf32_", 0)
BYTECODE_OP(AffectOpPlusEqF64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbf64_", 0)

BYTECODE_OP(AffectOpPlusEqS8_Safe, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbs8_", 0)
BYTECODE_OP(AffectOpPlusEqS16_Safe, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbs16_", 0)
BYTECODE_OP(AffectOpPlusEqS32_Safe, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbs32_", 0)
BYTECODE_OP(AffectOpPlusEqS64_Safe, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbs64_", 0)
BYTECODE_OP(AffectOpPlusEqU8_Safe, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbu8_", 0)
BYTECODE_OP(AffectOpPlusEqU16_Safe, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbu16_", 0)
BYTECODE_OP(AffectOpPlusEqU32_Safe, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbu32_", 0)
BYTECODE_OP(AffectOpPlusEqU64_Safe, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] += _rbu64_", 0)

BYTECODE_OP(AffectOpMinusEqS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbs8_", 0)
BYTECODE_OP(AffectOpMinusEqS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbs16_", 0)
BYTECODE_OP(AffectOpMinusEqS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbs32_", 0)
BYTECODE_OP(AffectOpMinusEqS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbs64_", 0)
BYTECODE_OP(AffectOpMinusEqU8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbu8_", 0)
BYTECODE_OP(AffectOpMinusEqU16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbu16_", 0)
BYTECODE_OP(AffectOpMinusEqU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbu32_", 0)
BYTECODE_OP(AffectOpMinusEqU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbu64_", 0)
BYTECODE_OP(AffectOpMinusEqF32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbf32_", 0)
BYTECODE_OP(AffectOpMinusEqF64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbf64_", 0)

BYTECODE_OP(AffectOpMinusEqS8_Safe, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbs8_", 0)
BYTECODE_OP(AffectOpMinusEqS16_Safe, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbs16_", 0)
BYTECODE_OP(AffectOpMinusEqS32_Safe, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbs32_", 0)
BYTECODE_OP(AffectOpMinusEqS64_Safe, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbs64_", 0)
BYTECODE_OP(AffectOpMinusEqU8_Safe, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbu8_", 0)
BYTECODE_OP(AffectOpMinusEqU16_Safe, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbu16_", 0)
BYTECODE_OP(AffectOpMinusEqU32_Safe, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbu32_", 0)
BYTECODE_OP(AffectOpMinusEqU64_Safe, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] -= _rbu64_", 0)

BYTECODE_OP(AffectOpMulEqS8, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] *= _rbs8_", 0)
BYTECODE_OP(AffectOpMulEqS16, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] *= _rbs16_", 0)
BYTECODE_OP(AffectOpMulEqS32, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] *= _rbs32_", 0)
BYTECODE_OP(AffectOpMulEqS64, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] *= _rbs64_", 0)
BYTECODE_OP(AffectOpMulEqU8, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] *= _rbu8_", 0)
BYTECODE_OP(AffectOpMulEqU16, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] *= _rbu16_", 0)
BYTECODE_OP(AffectOpMulEqU32, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] *= _rbu32_", 0)
BYTECODE_OP(AffectOpMulEqU64, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] *= _rbu64_", 0)
BYTECODE_OP(AffectOpMulEqF32, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] *= _rbf32_", 0)
BYTECODE_OP(AffectOpMulEqF64, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] *= _rbf64_", 0)

BYTECODE_OP(AffectOpDivEqS8, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] /= _rbs8_", 0)
BYTECODE_OP(AffectOpDivEqS16, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] /= _rbs16_", 0)
BYTECODE_OP(AffectOpDivEqS32, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] /= _rbs32_", 0)
BYTECODE_OP(AffectOpDivEqS64, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] /= _rbs64_", 0)
BYTECODE_OP(AffectOpDivEqU8, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] /= _rbu8_", 0)
BYTECODE_OP(AffectOpDivEqU16, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] /= _rbu16_", 0)
BYTECODE_OP(AffectOpDivEqU32, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] /= _rbu32_", 0)
BYTECODE_OP(AffectOpDivEqU64, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] /= _rbu64_", 0)
BYTECODE_OP(AffectOpDivEqF32, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] /= _rbf32_", 0)
BYTECODE_OP(AffectOpDivEqF64, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] /= _rbf64_", 0)

BYTECODE_OP(AffectOpAndEqS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] &= _rbs8_", 0)
BYTECODE_OP(AffectOpAndEqS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] &= _rbs16_", 0)
BYTECODE_OP(AffectOpAndEqS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] &= _rbs32_", 0)
BYTECODE_OP(AffectOpAndEqS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] &= _rbs64_", 0)

BYTECODE_OP(AffectOpOrEqS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] |= _rbs8_", 0)
BYTECODE_OP(AffectOpOrEqS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] |= _rbs16_", 0)
BYTECODE_OP(AffectOpOrEqS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] |= _rbs32_", 0)
BYTECODE_OP(AffectOpOrEqS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] |= _rbs64_", 0)

BYTECODE_OP(AffectOpXorEqU8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] ^= _rbs8_", 0)
BYTECODE_OP(AffectOpXorEqU16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] ^= _rbs16_", 0)
BYTECODE_OP(AffectOpXorEqU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] ^= _rbs32_", 0)
BYTECODE_OP(AffectOpXorEqU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] ^= _rbs64_", 0)

BYTECODE_OP(AffectOpShiftLeftEqU8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] <<= _rbu32_", 0)
BYTECODE_OP(AffectOpShiftLeftEqU16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] <<= _rbu32_", 0)
BYTECODE_OP(AffectOpShiftLeftEqU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] <<= _rbu32_", 0)
BYTECODE_OP(AffectOpShiftLeftEqU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] <<= _rbu32_", 0)

BYTECODE_OP(AffectOpShiftRightEqU8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] >>= _rbu32_", 0)
BYTECODE_OP(AffectOpShiftRightEqU16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] >>= _rbu32_", 0)
BYTECODE_OP(AffectOpShiftRightEqU32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] >>= _rbu32_", 0)
BYTECODE_OP(AffectOpShiftRightEqU64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] >>= _rbu32_", 0)

BYTECODE_OP(AffectOpShiftRightEqS8, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] >>= _rbu32_", 0)
BYTECODE_OP(AffectOpShiftRightEqS16, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] >>= _rbu32_", 0)
BYTECODE_OP(AffectOpShiftRightEqS32, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] >>= _rbu32_", 0)
BYTECODE_OP(AffectOpShiftRightEqS64, OPFLAG_READ_A | OPFLAG_READ_B | OPFLAG_IMM_B, "[_ra_] >>= _rbu32_", 0)

BYTECODE_OP(AffectOpModuloEqS8, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] %= _rb_", 0)
BYTECODE_OP(AffectOpModuloEqS16, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] %= _rb_", 0)
BYTECODE_OP(AffectOpModuloEqS32, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] %= _rb_", 0)
BYTECODE_OP(AffectOpModuloEqS64, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] %= _rb_", 0)
BYTECODE_OP(AffectOpModuloEqU8, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] %= _rb_", 0)
BYTECODE_OP(AffectOpModuloEqU16, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] %= _rb_", 0)
BYTECODE_OP(AffectOpModuloEqU32, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] %= _rb_", 0)
BYTECODE_OP(AffectOpModuloEqU64, OPFLAG_READ_A | OPFLAG_READ_B, "[_ra_] %= _rb_", 0)

BYTECODE_OP(IntrinsicS8x1, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _w0_(_rbs8_)", 0)
BYTECODE_OP(IntrinsicS16x1, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _w0_(_rbs16_)", 0)
BYTECODE_OP(IntrinsicS32x1, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _w0_(_rbs32_)", 0)
BYTECODE_OP(IntrinsicS64x1, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _w0_(_rbs64_)", 0)
BYTECODE_OP(IntrinsicF32x1, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _w0_(_rbf32_)", 0)
BYTECODE_OP(IntrinsicF64x1, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_IMM_B, "_ra_ = _w0_(_rbf64_)", 0)
BYTECODE_OP(IntrinsicS8x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbs8_, _rcs8_)", 0)
BYTECODE_OP(IntrinsicS16x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbs16_, _rcs16_)", 0)
BYTECODE_OP(IntrinsicS32x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbs32_, _rcs32_)", 0)
BYTECODE_OP(IntrinsicS64x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbs64_, _rcs64_)", 0)
BYTECODE_OP(IntrinsicU8x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbu8_, _rcu8_)", 0)
BYTECODE_OP(IntrinsicU16x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbu16_, _rcu16_)", 0)
BYTECODE_OP(IntrinsicU32x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbu32_, _rcu32_)", 0)
BYTECODE_OP(IntrinsicU64x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbu64_, _rcu64_)", 0)
BYTECODE_OP(IntrinsicF32x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbf32_, _rcf32_)", 0)
BYTECODE_OP(IntrinsicF64x2, OPFLAG_WRITE_A | OPFLAG_READ_B | OPFLAG_READ_C | OPFLAG_IMM_B | OPFLAG_IMM_C, "_ra_ = _w0_(_rbf64_, _rcf64_)", 0)

BYTECODE_OP(End, 0, "", 0)
