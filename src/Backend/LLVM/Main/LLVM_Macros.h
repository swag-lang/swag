#pragma once
#define I1_TY()    llvm::Type::getInt1Ty(context)
#define I8_TY()    llvm::Type::getInt8Ty(context)
#define I16_TY()   llvm::Type::getInt16Ty(context)
#define I32_TY()   llvm::Type::getInt32Ty(context)
#define I64_TY()   llvm::Type::getInt64Ty(context)
#define IX_TY(__n) llvm::Type::getIntNTy(context, __n)
#define F32_TY()   llvm::Type::getFloatTy(context)
#define F64_TY()   llvm::Type::getDoubleTy(context)
#define FX_TY(__n) ((__n) == 32 ? llvm::Type::getFloatTy(context) : llvm::Type::getDoubleTy(context))
#define VOID_TY()  llvm::Type::getVoidTy(context)

#define PTR_I8_TY()    llvm::Type::getInt8PtrTy(context)
#define PTR_I16_TY()   llvm::Type::getInt16PtrTy(context)
#define PTR_I32_TY()   llvm::Type::getInt32PtrTy(context)
#define PTR_I64_TY()   llvm::Type::getInt64PtrTy(context)
#define PTR_IX_TY(__n) llvm::Type::getIntNPtrTy(context, __n)
#define PTR_F32_TY()   llvm::Type::getFloatPtrTy(context)
#define PTR_F64_TY()   llvm::Type::getDoublePtrTy(context)
#define PTR_FX_TY(__n) (__n) == 32 ? llvm::Type::getFloatPtrTy(context) : llvm::Type::getDoublePtrTy(context)

#define CST_RC32    builder.getInt32(ip->c.u32)
#define CST_RC64    builder.getInt64(ip->c.u64)
#define CST_RA(__n) builder.getIntN(__n, ip->a.u64)
#define CST_RB(__n) builder.getIntN(__n, ip->b.u64)

#define GEP(__type, __data, __offset) ((__offset) ? builder.CreateInBoundsGEP(__type, __data, builder.getInt64(__offset)) : (__data))

#define GEP64(__data, __offset)             ((__offset) ? builder.CreateInBoundsGEP(I64_TY(), __data, builder.getInt64(__offset)) : (__data))
#define GEP64_PTR_I8(__data, __offset)      builder.CreateInBoundsGEP(I8_TY(), __data, builder.getInt64((__offset) * 8))
#define GEP64_PTR_I16(__data, __offset)     builder.CreateInBoundsGEP(I16_TY(), __data, builder.getInt64((__offset) * 4))
#define GEP64_PTR_I32(__data, __offset)     builder.CreateInBoundsGEP(I32_TY(), __data, builder.getInt64((__offset) * 2))
#define GEP64_PTR_IX(__data, __offset, __n) builder.CreateInBoundsGEP(llvm::Type::getIntNTy(context, __n), __data, builder.getInt64((__offset) * (64 / (__n))))
#define GEP64_PTR_F32(__data, __offset)     builder.CreateInBoundsGEP(F32_TY(), __data, builder.getInt64((__offset) * 2))
#define GEP64_PTR_F64(__data, __offset)     builder.CreateInBoundsGEP(F64_TY(), __data, builder.getInt64(__offset))
#define GEP64_PTR_FX(__data, __offset, __n) builder.CreateInBoundsGEP(FX_TY(__n), __data, builder.getInt64((__offset) * (64 / (__n))))

#define GEP64_PTR_PTR_I8(__data, __offset)  builder.CreateInBoundsGEP(PTR_I8_TY(), __data, builder.getInt64(__offset))
#define GEP64_PTR_PTR_I16(__data, __offset) builder.CreateInBoundsGEP(PTR_I16_TY(), __data, builder.getInt64(__offset))
#define GEP64_PTR_PTR_I32(__data, __offset) builder.CreateInBoundsGEP(PTR_I32_TY(), __data, builder.getInt64(__offset))
#define GEP64_PTR_PTR_I64(__data, __offset) builder.CreateInBoundsGEP(PTR_I64_TY(), __data, builder.getInt64(__offset))

#define GEP8(__data, __offset)             ((__offset) ? builder.CreateInBoundsGEP(I8_TY(), __data, builder.getInt64(__offset)) : (__data))
#define GEP8_PTR_I32(__data, __offset)     ((__offset) & 3) ? TO_PTR_I32(GEP8(__data, __offset)) : builder.CreateInBoundsGEP(I32_TY(), __data, builder.getInt64((__offset) / 4))
#define GEP8_PTR_I64(__data, __offset)     ((__offset) & 7) ? TO_PTR_I64(GEP8(__data, __offset)) : builder.CreateInBoundsGEP(I64_TY(), __data, builder.getInt64((__offset) / 8))
#define GEP8_PTR_IX(__data, __offset, __n) ((__offset) & (((__n) / 8) - 1)) ? TO_PTR_IX(GEP8(__data, __offset), __n) : builder.CreateInBoundsGEP(IX_TY(__n), __data, builder.getInt64((__offset) / ((__n) / 8)))
#define GEP8_PTR_FX(__data, __offset, __n) ((__offset) & (((__n) / 8) - 1)) ? TO_PTR_FX(GEP8(__data, __offset), __n) : builder.CreateInBoundsGEP(FX_TY(__n), __data, builder.getInt64((__offset) / ((__n) / 8)))

#define TO_PTR_PTR_I8(__r) builder.CreatePointerCast(__r, PTR_I8_TY()->getPointerTo())

#define TO_PTR_I8(__r)      builder.CreatePointerCast(__r, PTR_I8_TY())
#define TO_PTR_I16(__r)     builder.CreatePointerCast(__r, PTR_I16_TY())
#define TO_PTR_I32(__r)     builder.CreatePointerCast(__r, PTR_I32_TY())
#define TO_PTR_I64(__r)     builder.CreatePointerCast(__r, PTR_I64_TY())
#define TO_PTR_IX(__r, __n) builder.CreatePointerCast(__r, PTR_IX_TY(__n))
#define TO_PTR_F64(__r)     builder.CreatePointerCast(__r, PTR_F64_TY())
#define TO_PTR_F32(__r)     builder.CreatePointerCast(__r, PTR_F32_TY())
#define TO_PTR_FX(__r, __n) builder.CreatePointerCast(__r, PTR_FX_TY(__n))

#define MK_IMMA_64()    ip->hasFlag(BCI_IMM_A) ? (llvm::Value*) builder.getInt64(ip->a.u64) : (llvm::Value*) builder.CreateLoad(I64_TY(), GEP64(allocR, ip->a.u32))
#define MK_IMMA_IX(__n) ip->hasFlag(BCI_IMM_A) ? (llvm::Value*) builder.getIntN(__n, ip->a.u64) : (llvm::Value*) builder.CreateLoad(IX_TY(__n), GEP64(allocR, ip->a.u32))
#define MK_IMMA_FX(__n) ip->hasFlag(BCI_IMM_A) ? (llvm::Value*) llvm::ConstantFP::get(FX_TY(__n), __n == 32 ? ip->a.f32 : ip->a.f64) : (llvm::Value*) builder.CreateLoad(FX_TY(__n), GEP64(allocR, ip->a.u32))

#define MK_IMMB_8()     ip->hasFlag(BCI_IMM_B) ? (llvm::Value*) builder.getInt8(ip->b.u8) : (llvm::Value*) builder.CreateLoad(I8_TY(), GEP64(allocR, ip->b.u32))
#define MK_IMMB_64()    ip->hasFlag(BCI_IMM_B) ? (llvm::Value*) builder.getInt64(ip->b.u64) : (llvm::Value*) builder.CreateLoad(I64_TY(), GEP64(allocR, ip->b.u32))
#define MK_IMMB_IX(__n) ip->hasFlag(BCI_IMM_B) ? (llvm::Value*) builder.getIntN(__n, ip->b.u64) : (llvm::Value*) builder.CreateLoad(IX_TY(__n), GEP64(allocR, ip->b.u32))
#define MK_IMMB_FX(__n) ip->hasFlag(BCI_IMM_B) ? (llvm::Value*) llvm::ConstantFP::get(FX_TY(__n), __n == 32 ? ip->b.f32 : ip->b.f64) : (llvm::Value*) builder.CreateLoad(FX_TY(__n), GEP64(allocR, ip->b.u32))

#define MK_IMMC_64()    ip->hasFlag(BCI_IMM_C) ? (llvm::Value*) builder.getInt64(ip->c.u64) : (llvm::Value*) builder.CreateLoad(I64_TY(), GEP64(allocR, ip->c.u32))
#define MK_IMMC_IX(__n) ip->hasFlag(BCI_IMM_C) ? (llvm::Value*) builder.getIntN(__n, ip->c.u64) : (llvm::Value*) builder.CreateLoad(IX_TY(__n), GEP64(allocR, ip->c.u32))
#define MK_IMMC_FX(__n) ip->hasFlag(BCI_IMM_C) ? (llvm::Value*) llvm::ConstantFP::get(FX_TY(__n), __n == 32 ? ip->c.f32 : ip->c.f64) : (llvm::Value*) builder.CreateLoad(FX_TY(__n), GEP64(allocR, ip->c.u32))

#define MK_IMMD_64()    ip->hasFlag(BCI_IMM_D) ? (llvm::Value*) builder.getInt64(ip->d.u64) : (llvm::Value*) builder.CreateLoad(I64_TY(), GEP64(allocR, ip->d.u32))
#define MK_IMMD_IX(__n) ip->hasFlag(BCI_IMM_D) ? (llvm::Value*) builder.getIntN(__n, ip->d.u64) : (llvm::Value*) builder.CreateLoad(IX_TY(__n), GEP64(allocR, ip->d.u32))
#define MK_IMMD_FX(__n) ip->hasFlag(BCI_IMM_D) ? (llvm::Value*) llvm::ConstantFP::get(FX_TY(__n), __n == 32 ? ip->d.f32 : ip->d.f64) : (llvm::Value*) builder.CreateLoad(FX_TY(__n), GEP64(allocR, ip->d.u32))
