#pragma once
#include "SemanticContext.h"

struct AstAttrUse;
struct AstFuncCallParam;
struct AstFuncDecl;
struct AstIdentifier;
struct AstIdentifierRef;
struct AstNode;
struct AttributeList;
struct DataSegment;
struct Diagnostic;
struct Module;
struct SourceFile;
struct SymbolName;
struct SymbolOverload;
struct TypeInfoFuncAttr;

enum class AstNodeKind : uint8_t;
enum class SymbolKind : uint8_t;
using ToConcreteFlags = Flags<uint32_t>;
using GenExportFlags  = Flags<uint32_t>;
using OverloadFlags   = Flags<uint32_t>;

struct FindUserOp
{
    SymbolName*     symbol;
    TypeInfoStruct* parentStruct;
    TypeInfoParam*  usingField;
};

using CollectFlags                              = Flags<uint32_t>;
constexpr CollectFlags COLLECT_ALL              = 0x00000000;
constexpr CollectFlags COLLECT_NO_STRUCT        = 0x00000001;
constexpr CollectFlags COLLECT_NO_INLINE_PARAMS = 0x00000002;

using MatchIdParamsFlags                            = Flags<uint32_t>;
constexpr MatchIdParamsFlags MIP_JUST_CHECK         = 0x00000001;
constexpr MatchIdParamsFlags MIP_FOR_GHOSTING       = 0x00000002;
constexpr MatchIdParamsFlags MIP_FOR_ZERO_GHOSTING  = 0x00000004;
constexpr MatchIdParamsFlags MIP_SECOND_GENERIC_TRY = 0x00000008;

constexpr uint32_t ROP_SIMPLE_CAST = 0x00000001;

using ResolveIdFlags                          = Flags<uint32_t>;
constexpr ResolveIdFlags RI_ZERO              = 0x00000000;
constexpr ResolveIdFlags RI_FOR_GHOSTING      = 0x00000001;
constexpr ResolveIdFlags RI_FOR_ZERO_GHOSTING = 0x00000002;

namespace Semantic
{
    void start(SemanticContext* context, SourceFile* sourceFile, AstNode* originalNode);

    void waitSymbolNoLock(Job* job, SymbolName* symbol);
    void waitAllStructInterfacesReg(Job* job, TypeInfo* typeInfo);
    void waitAllStructInterfaces(Job* job, TypeInfo* typeInfo);
    void waitAllStructSpecialMethods(Job* job, TypeInfo* typeInfo);
    void waitAllStructMethods(Job* job, TypeInfo* typeInfo);
    void waitStructGeneratedAlloc(Job* job, TypeInfo* typeInfo);
    void waitStructGenerated(Job* job, TypeInfo* typeInfo);
    void waitForOverloads(Job* job, SymbolName* symbol);
    void waitOverloadCompleted(Job* job, const SymbolOverload* overload);
    void waitFuncDeclFullResolve(Job* job, AstFuncDecl* funcDecl);
    void waitTypeCompleted(Job* job, TypeInfo* typeInfo);
    void waitForGenericParameters(const SemanticContext* context, OneMatch& match);

    bool valueEqualsTo(const ComputedValue* value, AstNode* node);
    bool valueEqualsTo(const ComputedValue* value1, const ComputedValue* value2, const TypeInfo* typeInfo, AstNodeFlags flags);

    bool checkTypeIsNative(SemanticContext* context, TypeInfo* leftTypeInfo, TypeInfo* rightTypeInfo, AstNode* left, AstNode* right);
    bool checkTypeIsNative(SemanticContext* context, AstNode* node, TypeInfo* typeInfo);
    bool checkFuncPrototype(SemanticContext* context, AstFuncDecl* node);
    bool checkFuncPrototypeOpNumParams(SemanticContext* context, const AstFuncDecl* node, AstNode* parameters, uint32_t numWanted, bool exact = true);
    bool checkFuncPrototypeOpReturnType(SemanticContext* context, AstFuncDecl* node, TypeInfo* wanted);
    bool checkFuncPrototypeOpParam(SemanticContext* context, AstNode* parameters, uint32_t index, TypeInfo* wanted);
    bool checkFuncPrototypeOp(SemanticContext* context, AstFuncDecl* node);
    bool checkIsConcrete(SemanticContext* context, AstNode* node);
    bool checkCanMakeFuncPointer(SemanticContext* context, AstFuncDecl* funcNode, AstNode* node);
    bool checkCanTakeAddress(SemanticContext* context, AstNode* node);
    bool checkIsConcreteOrType(SemanticContext* context, AstNode* node, bool typeOnly = false);
    bool checkAttribute(SemanticContext* context, AstNode* oneAttribute, AstNode* checkNode);
    Utf8 checkLiteralValue(ComputedValue& computedValue, LiteralType& literalType, const Register& literalValue, TypeInfo* typeSuffix, bool negApplied);
    bool checkCanThrow(SemanticContext* context);
    bool checkCanCatch(SemanticContext* context);
    bool checkImplScopes(SemanticContext* context, AstImpl* node, const Scope* scopeImpl, const Scope* scope);
    bool checkIsConstAffect(SemanticContext* context, AstNode* left, const AstNode* right);
    bool checkIsConstExpr(JobContext* context, bool test, AstNode* expression, const Utf8& errMsg = "", const Utf8& errParam = "");
    bool checkIsConstExpr(JobContext* context, AstNode* expression, const Utf8& errMsg = "", const Utf8& errParam = "");
    bool checkInitDropCount(SemanticContext* context, const AstNode* node, AstNode* expression, AstNode* count);

    bool hasUserOp(SemanticContext* context, const Utf8& name, TypeInfoStruct* leftStruct, TypeInfoParam* parentField, VectorNative<FindUserOp>& result);
    bool hasUserOp(SemanticContext* context, const Utf8& name, TypeInfoStruct* leftStruct, SymbolName** result);
    bool hasUserOp(SemanticContext* context, const Utf8& name, const AstNode* left, SymbolName** result);
    bool waitUserOp(SemanticContext* context, const Utf8& name, const AstNode* left, SymbolName** result);

    void addAlternativeScopeOnce(VectorNative<AlternativeScope>& scopes, Scope* scope, AltScopeFlags flags = 0);
    void addAlternativeScope(VectorNative<AlternativeScope>& scopes, Scope* scope, AltScopeFlags flags = 0);
    bool hasAlternativeScope(VectorNative<AlternativeScope>& scopes, const Scope* scope);
    bool collectAttributes(SemanticContext* context, AstNode* forNode, AttributeList* result);
    bool collectAttributes(SemanticContext* context, AstNode* forNode, AttributeList* result, AstAttrUse* attrUse);
    void collectAlternativeScopes(const AstNode* startNode, VectorNative<AlternativeScope>& scopes);
    void collectAlternativeScopeVars(const AstNode* startNode, VectorNative<AlternativeScope>& scopes, VectorNative<AlternativeScopeVar>& scopesVars);
    void collectAlternativeScopeHierarchy(SemanticContext* context, VectorNative<AlternativeScope>& scopes, VectorNative<AlternativeScopeVar>& scopesVars, AstNode* startNode, CollectFlags flags, IdentifierScopeUpMode scopeUpMode = IdentifierScopeUpMode::None, TokenParse* scopeUpValue = nullptr);
    bool collectScopeHierarchy(SemanticContext* context, VectorNative<AlternativeScope>& scopes, VectorNative<AlternativeScopeVar>& scopesVars, AstNode* startNode, CollectFlags flags, IdentifierScopeUpMode scopeUpMode = IdentifierScopeUpMode::None, TokenParse* scopeUpValue = nullptr);
    bool findIdentifierInScopes(SemanticContext* context, AstIdentifierRef* identifierRef, AstIdentifier* identifier);
    bool findIdentifierInScopes(SemanticContext* context, VectorNative<OneSymbolMatch>& symbolsMatch, AstIdentifierRef* identifierRef, AstIdentifier* identifier);

    bool        canInheritAccess(const AstNode* node);
    AstSemFlags attributeToAccess(AttributeFlags attribute);
    void        doInheritAccess(AstNode* forNode, const AstNode* node);
    void        inheritAccess(const AstNode* node);
    void        setNodeAccess(AstNode* node);
    void        setDefaultAccess(AstNode* node);
    bool        canHaveGlobalAccess(const AstNode* node);
    bool        canHaveAccess(const AstNode* node);
    void        computeAccess(AstNode* node);
    void        computeAccessRec(AstNode* node);
    bool        checkAccess(JobContext* context, AstNode* node);

    void           decreaseInterfaceRegCount(TypeInfoStruct* typeInfoStruct);
    void           decreaseInterfaceCount(TypeInfoStruct* typeInfoStruct);
    void           decreaseMethodCount(const AstFuncDecl* funcNode, TypeInfoStruct* typeInfoStruct);
    uint32_t       alignOf(const AstVarDecl* node);
    bool           isCompilerContext(const AstNode* node);
    DataSegment*   getConstantSegFromContext(const AstNode* node, bool forceCompiler = false);
    bool           setState(SemanticContext* context, AstNode* node, AstNodeResolveState state);
    void           inheritAttributesFromParent(AstNode* child);
    void           inheritAttributesFrom(AstNode* child, AttributeFlags attributeFlags, SafetyFlags safetyOn, SafetyFlags safetyOff);
    void           inheritAttributesFromOwnerFunc(AstNode* child);
    bool           setupIdentifierRef(SemanticContext* context, AstNode* node);
    bool           derefConstantValue(SemanticContext* context, AstNode* node, TypeInfo* typeInfo, DataSegment* storageSegment, uint8_t* ptr);
    bool           derefConstant(SemanticContext* context, uint8_t* ptr, const SymbolOverload* overload, DataSegment* storageSegment);
    uint32_t       getMaxStackSize(AstNode* node);
    void           setOwnerMaxStackSize(AstNode* node, uint32_t size);
    bool           makeInline(JobContext* context, AstFuncDecl* funcDecl, AstNode* identifier);
    bool           makeInline(SemanticContext* context, AstFuncDecl* funcDecl, AstNode* identifier);
    void           sortParameters(AstNode* allParams);
    void           dealWithIntrinsic(const SemanticContext* context, AstIdentifier* identifier);
    bool           setSymbolMatchCallParams(SemanticContext* context, const OneMatch& oneMatch, AstIdentifier* identifier);
    bool           setSymbolMatchVar(SemanticContext* context, const OneMatch& oneMatch, AstIdentifierRef* idRef, AstIdentifier* identifier, SymbolOverload* overload);
    bool           setSymbolMatchFunc(SemanticContext* context, const OneMatch& oneMatch, AstIdentifier* identifier, const SymbolOverload* overload);
    bool           setSymbolMatchStruct(SemanticContext* context, OneMatch& oneMatch, AstIdentifierRef* identifierRef, AstIdentifier* identifier, const SymbolOverload* overload, TypeInfo* typeAlias);
    bool           setIdentifierSymbolAndType(SemanticContext* context, AstIdentifierRef* identifierRef, AstIdentifier* identifier, OneMatch& oneMatch);
    bool           setIdentifierSymbol(SemanticContext* context, AstIdentifierRef* identifierRef, AstIdentifier* identifier, OneMatch& oneMatch);
    bool           setSymbolMatchUsingVar(SemanticContext* context, AstIdentifierRef* identifierRef, const AstIdentifier* identifier, AstNode* dependentVar);
    void           resolvePendingLambdaTyping(const SemanticContext* context, AstNode* funcNode, const TypeInfo* resolvedType);
    void           allocateOnStack(AstNode* node, const TypeInfo* typeInfo);
    bool           setupFuncDeclParams(SemanticContext* context, TypeInfoFuncAttr* typeInfo, const AstNode* funcNode, AstNode* parameters, bool forGenerics);
    Diagnostic*    computeNonConstExprNote(AstNode* node);
    bool           executeCompilerNode(SemanticContext* context, AstNode* node, bool onlyConstExpr);
    bool           doExecuteCompilerNode(SemanticContext* context, AstNode* node, bool onlyConstExpr);
    bool           reserveAndStoreToSegment(JobContext* context, DataSegment* storageSegment, uint32_t& storageOffset, ComputedValue* value, TypeInfo* typeInfo, AstNode* assignment);
    bool           storeToSegment(JobContext* context, DataSegment* storageSegment, uint32_t storageOffset, ComputedValue* value, TypeInfo* typeInfo, AstNode* assignment);
    bool           isFunctionButNotACall(SemanticContext* context, AstNode* node, const SymbolName* symbol);
    bool           matchIdentifierParameters(SemanticContext* context, VectorNative<OneTryMatch*>& overloads, AstNode* node, MatchIdParamsFlags flags = 0);
    bool           evaluateConstExpression(SemanticContext* context, AstNode* node);
    bool           evaluateConstExpression(SemanticContext* context, AstNode* node1, AstNode* node2);
    bool           evaluateConstExpression(SemanticContext* context, AstNode* node1, AstNode* node2, AstNode* node3);
    bool           waitForStructUserOps(SemanticContext* context, const AstNode* node);
    bool           collectConstantAssignment(SemanticContext* context, DataSegment** storageSegmentResult, uint32_t* storageOffsetResult, OverloadFlags& symbolFlags);
    bool           collectConstantSlice(SemanticContext* context, AstNode* assignNode, TypeInfo* assignType, DataSegment* storageSegment, uint32_t& storageOffset);
    bool           collectAssignment(SemanticContext* context, DataSegment* storageSegment, uint32_t& storageOffset, AstVarDecl* node, TypeInfo* typeInfo = nullptr);
    bool           collectLiteralsToSegment(JobContext* context, DataSegment* storageSegment, uint32_t baseOffset, uint32_t& offset, AstNode* node);
    bool           collectStructLiterals(JobContext* context, DataSegment* storageSegment, uint32_t offsetStruct, AstNode* node);
    void           disableCompilerIfBlock(SemanticContext* context, AstCompilerIfBlock* block);
    void           propagateReturn(AstNode* node);
    bool           resolveMakePointer(SemanticContext* context);
    bool           resolveMakePointerLambda(SemanticContext* context);
    bool           boundCheck(SemanticContext* context, const TypeInfo* forType, AstNode* arrayNode, AstNode* arrayAccess, uint64_t maxCount);
    bool           getConstantArrayPtr(SemanticContext* context, uint32_t* storageOffset, DataSegment** storageSegment);
    void           forceConstType(SemanticContext* context, AstTypeExpression* node);
    void           setVarDeclResolve(AstVarDecl* varNode);
    bool           convertTypeListToArray(SemanticContext* context, AstVarDecl* node, bool isCompilerConstant, OverloadFlags overFlags, CastFlags castFlags = 0);
    DataSegment*   getSegmentForVar(SemanticContext* context, const AstVarDecl* varNode);
    bool           getDigitHex(SemanticContext* context, const SourceLocation& startLoc, const char* pzs, const char** pzr, int& result, const char* errMsg);
    bool           processLiteralString(SemanticContext* context);
    bool           computeExpressionListTupleType(SemanticContext* context, AstNode* node);
    bool           getUsingVar(SemanticContext* context, AstIdentifierRef* identifierRef, const AstIdentifier* node, const SymbolOverload* overload, AstNode** result, AstNode** resultLeaf);
    bool           canTryUfcs(SemanticContext* context, TypeInfoFuncAttr* typeFunc, AstNode* ufcsNode, bool nodeIsExplicit);
    bool           getUfcs(SemanticContext* context, const AstIdentifierRef* identifierRef, AstIdentifier* node, const SymbolOverload* overload, AstNode** ufcsFirstParam);
    bool           appendLastCodeStatement(SemanticContext* context, AstIdentifier* node, const SymbolOverload* overload);
    bool           fillMatchContextCallParameters(SemanticContext* context, SymbolMatchContext& symMatchContext, AstIdentifier* identifier, const SymbolOverload* overload, AstNode* ufcsFirstParam);
    bool           fillMatchContextGenericParameters(SemanticContext* context, SymbolMatchContext& symMatchContext, AstIdentifier* node, const SymbolOverload* overload);
    bool           needToCompleteSymbolNoLock(SemanticContext* context, const AstIdentifier* identifier, SymbolName* symbol, bool testOverloads);
    bool           needToWaitForSymbolNoLock(SemanticContext* context, const AstIdentifier* identifier, const SymbolName* symbol);
    bool           resolveIdentifier(SemanticContext* context, AstIdentifier* identifier, ResolveIdFlags riFlags);
    TypeInfoEnum*  findEnumTypeInContext(SemanticContext* context, TypeInfo* typeInfo);
    bool           findEnumTypeInContext(SemanticContext* context, const AstNode* node, VectorNative<TypeInfoEnum*>& result, VectorNative<std::pair<AstNode*, TypeInfoEnum*>>& has, VectorNative<SymbolOverload*>& testedOver);
    void           addSymbolMatch(VectorNative<OneSymbolMatch>& symbolsMatch, SymbolName* symName, Scope* scope, AltScopeFlags altFlags);
    bool           ufcsSetFirstParam(SemanticContext* context, AstIdentifierRef* identifierRef, OneMatch& match);
    bool           filterGenericMatches(const SemanticContext* context, VectorNative<OneMatch*>& matches, VectorNative<OneMatch*>& genMatches);
    bool           filterMatchesInContext(SemanticContext* context, VectorNative<OneMatch*>& matches);
    bool           solveValidIf(SemanticContext* context, const AstStruct* structDecl);
    bool           solveValidIf(SemanticContext* context, OneMatch* oneMatch, AstFuncDecl* funcDecl);
    bool           filterMatchesDirect(SemanticContext* context, VectorNative<OneMatch*>& matches);
    bool           filterMatchesCompare(const SemanticContext* context, VectorNative<OneMatch*>& matches);
    void           computeMatchesCoerceCast(VectorNative<OneMatch*>& matches);
    bool           filterMatchesCoerceCast(SemanticContext* context, VectorNative<OneMatch*>& matches);
    bool           filterSymbols(SemanticContext* context, AstIdentifier* node);
    void           flattenStructChildren(SemanticContext* context, AstNode* parent, VectorNative<AstNode*>& result);
    bool           setFullResolve(SemanticContext* context, AstFuncDecl* funcNode);
    void           setFuncDeclParamsIndex(const AstFuncDecl* funcNode);
    bool           isMethod(const AstFuncDecl* funcNode);
    void           launchResolveSubDecl(const JobContext* context, AstNode* node);
    bool           registerFuncSymbol(SemanticContext* context, AstFuncDecl* funcNode, OverloadFlags overFlags = 0);
    void           resolveSubDecls(const JobContext* context, AstFuncDecl* funcNode);
    Utf8           getSpecialOpSignature(const AstFuncDecl* node);
    TypeInfo*      getDeducedLambdaType(SemanticContext* context, const AstMakePointer* node);
    bool           deduceLambdaParamTypeFrom(SemanticContext* context, AstVarDecl* nodeParam, bool& lambdaExpr, bool& genericType);
    AstFuncDecl*   getFunctionForReturn(AstNode* node);
    bool           setUnRef(AstNode* node);
    TypeInfo*      getConcreteTypeUnRef(AstNode* node, ToConcreteFlags concreteFlags);
    AstIdentifier* createTmpId(SemanticContext* context, AstNode* node, const Utf8& name);
    bool           makeIntrinsicKindof(SemanticContext* context, AstNode* node);

    Utf8 getCompilerFunctionString(const AstNode* node, TokenId id);
    bool sendCompilerMsgFuncDecl(SemanticContext* context);
    bool sendCompilerMsgTypeDecl(SemanticContext* context);
    bool sendCompilerMsgGlobalVar(SemanticContext* context);

    bool preResolveCompilerInstruction(SemanticContext* context);
    bool preResolveGeneratedStruct(SemanticContext* context);
    bool preResolveStructContent(SemanticContext* context);
    bool preResolveAttrDecl(SemanticContext* context);
    bool preResolveSubstBreakContinue(SemanticContext* context);
    bool preResolveIdentifierRef(SemanticContext* context);

    bool resolveSubDeclRef(SemanticContext* context);
    bool resolveUserOpAffect(SemanticContext* context, TypeInfo* leftTypeInfo, TypeInfo* rightTypeInfo, AstNode* left, AstNode* right);
    bool resolveBinaryOpPlus(SemanticContext* context, AstNode* left, AstNode* right);
    bool resolveBinaryOpMinus(SemanticContext* context, AstNode* left, AstNode* right);
    bool resolveBinaryOpMul(SemanticContext* context, AstNode* left, AstNode* right);
    bool resolveBinaryOpDiv(SemanticContext* context, AstNode* left, AstNode* right);
    bool resolveUnaryOpExclam(SemanticContext* context, AstNode* child);
    bool resolveUnaryOpMinus(SemanticContext* context, AstNode* op, AstNode* child);
    bool resolveUnaryOpInvert(SemanticContext* context, AstNode* child);
    bool resolveUnaryOp(SemanticContext* context);
    bool resolveTypeAsExpression(SemanticContext* context, AstNode* node, TypeInfo* typeInfo, TypeInfo** resultTypeInfo, GenExportFlags genFlags = 0);
    bool resolveTypeAsExpression(SemanticContext* context, AstNode* node, TypeInfo** resultTypeInfo, GenExportFlags genFlags = 0);
    bool resolveType(SemanticContext* context);
    bool resolveTypeLambdaClosure(SemanticContext* context);
    bool resolveVarDeclAfterType(SemanticContext* context);
    bool resolveVarDeclBefore(SemanticContext* context);
    bool resolveVarDeclAfter(SemanticContext* context);
    bool resolveVarDeclAfterAssign(SemanticContext* context);
    bool resolveVarDecl(SemanticContext* context);
    bool resolveTypeAliasBefore(SemanticContext* context);
    bool resolveTypeAlias(SemanticContext* context);
    bool resolveIntrinsicMakeAny(SemanticContext* context, AstNode* node, TypeInfo* typeInfo);
    bool resolveIntrinsicMakeCallback(SemanticContext* context, AstNode* node);
    bool resolveIntrinsicTag(SemanticContext* context);
    bool resolveIntrinsicMakeSlice(SemanticContext* context, AstNode* node, TypeInfo* typeInfo, const char* name);
    bool resolveIntrinsicMakeInterface(SemanticContext* context);
    bool resolveIntrinsicDataOf(SemanticContext* context, AstNode* node, AstNode* expression);
    bool resolveIntrinsicCountOf(SemanticContext* context, AstNode* node, AstNode* expression);
    bool resolveIntrinsicStringOf(SemanticContext* context);
    bool resolveIntrinsicNameOf(SemanticContext* context);
    bool resolveIntrinsicRunes(SemanticContext* context);
    bool resolveIntrinsicSpread(SemanticContext* context);
    bool resolveIntrinsicKindOf(SemanticContext* context);
    bool resolveIntrinsicTypeOf(SemanticContext* context);
    bool resolveIntrinsicDeclType(SemanticContext* context);
    bool resolveIntrinsicProperty(SemanticContext* context);
    bool resolveLiteral(SemanticContext* context);
    bool resolveLiteralSuffix(SemanticContext* context);
    bool resolveIndex(SemanticContext* context);
    bool resolveBreak(SemanticContext* context);
    bool resolveUnreachable(SemanticContext* context);
    bool resolveFallThrough(SemanticContext* context);
    bool resolveContinue(SemanticContext* context);
    bool resolveScopeBreakable(SemanticContext* context);
    bool resolveExpressionListTuple(SemanticContext* context);
    bool resolveExpressionListArray(SemanticContext* context);
    bool resolveExplicitNoInit(SemanticContext* context);
    bool resolveBoolExpression(SemanticContext* context);
    bool resolveCompareExpression(SemanticContext* context);
    bool resolveFactorExpression(SemanticContext* context);
    bool resolveShiftExpression(SemanticContext* context);
    bool resolveCompilerMacro(SemanticContext* context);
    bool resolveCompilerMixin(SemanticContext* context);
    bool resolveCompilerAssert(SemanticContext* context);
    bool resolveCompilerPrint(SemanticContext* context);
    bool resolveCompilerError(SemanticContext* context);
    bool resolveCompilerWarning(SemanticContext* context);
    bool resolveCompilerForeignLib(SemanticContext* context);
    bool resolveCompilerRun(SemanticContext* context);
    bool resolveCompilerValidIfExpression(SemanticContext* context);
    bool resolveCompilerAstExpression(SemanticContext* context);
    bool resolveCompilerSpecialValue(SemanticContext* context);
    bool resolveCompilerInclude(SemanticContext* context);
    bool resolveIntrinsicDefined(SemanticContext* context);
    bool resolveIntrinsicLocation(SemanticContext* context);
    bool resolveUserOpCommutative(SemanticContext* context, const Utf8& name, const char* opConst, TypeInfo* opType, AstNode* left, AstNode* right, uint32_t ropFlags = 0);
    bool resolveUserOp(SemanticContext* context, const Utf8& name, const char* opConst, TypeInfo* opType, AstNode* left, AstNode* right, uint32_t ropFlags = 0);
    bool resolveUserOp(SemanticContext* context, const Utf8& name, const char* opConst, TypeInfo* opType, AstNode* left, VectorNative<AstNode*>& params, uint32_t ropFlags = 0);
    bool resolveCompOpEqual(SemanticContext* context, AstNode* left, AstNode* right);
    bool resolveCompOpLower(SemanticContext* context, AstNode* left, AstNode* right);
    bool resolveCompOp3Way(SemanticContext* context, AstNode* left, AstNode* right);
    bool resolveCompOpGreater(SemanticContext* context, AstNode* left, AstNode* right);
    bool resolveIdentifier(SemanticContext* context);
    bool resolveIdentifierRef(SemanticContext* context);
    bool resolveTryBlock(SemanticContext* context);
    bool resolveTry(SemanticContext* context);
    bool resolveTryCatch(SemanticContext* context);
    bool resolveAssumeBlock(SemanticContext* context);
    bool resolveAssume(SemanticContext* context);
    bool resolveCatch(SemanticContext* context);
    bool resolveThrow(SemanticContext* context);
    bool resolveImpl(SemanticContext* context);
    bool resolveImplForAfterFor(SemanticContext* context);
    bool resolveImplForType(SemanticContext* context);
    bool resolveImplFor(SemanticContext* context);
    bool generateMissingInterfaceFct(const uint32_t& numFctInterface, VectorNative<AstFuncDecl*>& mapItIdxToFunc, SemanticContext* context, TypeInfoStruct* typeStruct, TypeInfoStruct* typeBaseInterface, TypeInfoStruct* typeInterface, AstImpl* node, TypeInfo* typeInfo, bool& retFlag);
    bool resolveStruct(SemanticContext* context);
    bool resolveInterface(SemanticContext* context);
    bool resolveEnum(SemanticContext* context);
    bool resolveEnumType(SemanticContext* context);
    bool resolveSubEnumValue(SemanticContext* context);
    bool resolveEnumValue(SemanticContext* context);
    bool resolveFuncDeclParams(SemanticContext* context);
    bool resolveFuncDeclAfterSI(SemanticContext* context);
    bool resolveFuncDecl(SemanticContext* context);
    bool resolveFuncDeclType(SemanticContext* context);
    bool resolveCaptureFuncCallParams(SemanticContext* context);
    bool resolveFuncCallGenParams(SemanticContext* context);
    bool resolveFuncCallParams(SemanticContext* context);
    bool resolveFuncCallParam(SemanticContext* context);
    bool resolveAttrDecl(SemanticContext* context);
    bool resolveAttrUse(SemanticContext* context, AstAttrUse* node);
    bool resolveAttrUse(SemanticContext* context);
    bool resolveReturn(SemanticContext* context);
    bool resolveRetVal(SemanticContext* context);
    bool resolveUsingVar(SemanticContext* context, AstNode* varNode, TypeInfo* typeInfoVar);
    bool resolveNameAlias(SemanticContext* context);
    bool resolveWith(SemanticContext* context);
    bool resolveWithVarDeclAfter(SemanticContext* context);
    bool resolveWithAfterKnownType(SemanticContext* context);
    bool resolveUsing(SemanticContext* context);
    bool resolveBinaryOpModulo(SemanticContext* context, AstNode* left, AstNode* right);
    bool resolveBitmaskOr(SemanticContext* context, AstNode* left, AstNode* right);
    bool resolveBitmaskAnd(SemanticContext* context, AstNode* left, AstNode* right);
    bool resolveShiftLeft(SemanticContext* context, AstNode* left, AstNode* right);
    bool resolveShiftRight(SemanticContext* context, AstNode* left, AstNode* right);
    bool resolveXor(SemanticContext* context, AstNode* left, AstNode* right);
    bool resolveAppend(SemanticContext* context, AstNode* left, AstNode* right);
    bool resolveExplicitCast(SemanticContext* context);
    bool resolveExplicitBitCast(SemanticContext* context);
    bool resolveExplicitAutoCast(SemanticContext* context);
    bool resolveCompilerIf(SemanticContext* context);
    bool resolveIf(SemanticContext* context);
    bool resolveWhile(SemanticContext* context);
    bool resolveLoopBefore(SemanticContext* context);
    bool resolveInlineBefore(SemanticContext* context);
    bool resolveInlineAfter(SemanticContext* context);
    bool resolveForBefore(SemanticContext* context);
    bool resolveFor(SemanticContext* context);
    bool resolveSwitchAfterExpr(SemanticContext* context);
    bool resolveSwitch(SemanticContext* context);
    bool resolveCase(SemanticContext* context);
    bool resolveLoop(SemanticContext* context);
    bool resolveVisit(SemanticContext* context);
    bool resolveAfterKnownType(SemanticContext* context);
    bool resolveAffect(SemanticContext* context);
    bool resolveMove(SemanticContext* context);
    bool resolveRange(SemanticContext* context);
    bool resolveScopedStmtBefore(SemanticContext* context);
    bool resolveScopedStmtAfter(SemanticContext* context);
    bool resolveArrayPointerDeRef(SemanticContext* context);
    bool resolveArrayPointerSlicingUpperBound(SemanticContext* context);
    bool resolveArrayPointerSlicing(SemanticContext* context);
    bool resolveMoveRef(SemanticContext* context);
    bool resolveKeepRef(SemanticContext* context);
    bool resolveArrayPointerIndex(SemanticContext* context);
    bool resolveArrayPointerRef(SemanticContext* context);
    bool resolveTypeList(SemanticContext* context);
    bool resolveConditionalOp(SemanticContext* context);
    bool resolveDefer(SemanticContext* context);
    bool resolveNullConditionalOp(SemanticContext* context);
    bool resolveInit(SemanticContext* context);
    bool resolveDropCopyMove(SemanticContext* context);
    bool resolveTupleUnpackBefore(SemanticContext* context);
    bool resolveTupleUnpackBeforeVar(SemanticContext* context);
}
