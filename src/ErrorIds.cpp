#include "pch.h"

const char* Msg0488 = "%s '%s' cannot be dereferenced like a pointer";
const char* Msg0013 = "%s '%s' cannot be referenced in that context because it's not a value";
const char* Msg0097 = "%s '%s' has not been used as the first parameter to call '%s'";
const char* Msg0083 = "%s '%s' is deprecated";
const char* Msg0420 = "%s '%s' is waiting for ";
const char* Msg0421 = "%s '%s' to be solved";
const char* Msg0747 = "%s cannot be public";
const char* Msg0756 = "%s cannot have the 'Swag.Implicit' attribute because it's generic";
const char* Msg0755 = "%s cannot have the 'Swag.NoReturn' attribute without 'Swag.Macro' or 'Swag.Mixin'";
const char* Msg0749 = "%s has a return type '%s', but the body is missing a 'return'";
const char* Msg0757 = "%s is marked with 'Swag.Macro' and 'Swag.Inline' attributes at the same time";
const char* Msg0758 = "%s is marked with 'Swag.Macro' and 'Swag.Mixin' attributes at the same time";
const char* Msg0759 = "%s is marked with 'Swag.Mixin' and 'Swag.Inline' attributes at the same time";
const char* Msg0760 = "%s is marked with 'Swag.Mixin' and 'Swag.Macro' attributes at the same time";
const char* Msg0088 = "%s is not declared with the 'Swag.Mixin' attribute, and this is mandatory for a function call at global scope";
const char* Msg0505 = "%s overflow, maximum size is 0x%I64x bytes";
const char* Msg0606 = "%s should return a value";
const char* Msg0834 = "%s size overflow";
const char* Msg0237 = "'#assert' message string cannot be evaluated at compile time";
const char* Msg0234 = "'#ast' expression is not 'string' ('%s' provided)";
const char* Msg0255 = "'#callerfunction' can only be set in a function parameter declaration";
const char* Msg0254 = "'#callerlocation' can only be set in a function parameter declaration";
const char* Msg0750 = "'#compiler' function should have a parameter of type 'Swag.CompilerMsgMask'";
const char* Msg0268 = "'#dependencies' can only be declared at the file level";
const char* Msg0232 = "'#dependencies' can only be used in the module configuration file ('module.swg')";
const char* Msg0256 = "'#function' can only be used inside a function";
const char* Msg0283 = "'#gettag' default value expected, found a type";
const char* Msg0245 = "'#gettag' name expected, found a type";
const char* Msg0250 = "'#gettag' name value cannot be evaluated at compile time";
const char* Msg0251 = "'#gettag' parameter should be a string, but is '%s'";
const char* Msg0370 = "'#global export' already defined";
const char* Msg0371 = "'#global foreignlib' should be followed by a string";
const char* Msg0374 = "'#global testerror' is invalid outside a test module (in the './tests' folder of the workspace)";
const char* Msg0375 = "'#global testwarning' is invalid outside a test module (in the './tests' folder of the workspace)";
const char* Msg0369 = "'#global' should be defined first, at the top of the file";
const char* Msg0376 = "'#global' unexpected instruction '%s'";
const char* Msg0248 = "'#hastag' name cannot be evaluated at compile time";
const char* Msg0249 = "'#hastag' parameter should be a string ('%s' provided)";
const char* Msg0378 = "'#import' can only be declared at the top level scope";
const char* Msg0377 = "'#import' can only be used in the module configuration file ('module.swg')";
const char* Msg0235 = "'#import' can only be used inside a '#dependencies' block";
const char* Msg0336 = "'#import' has a specific build number ('%d') but undefined revision ('?')";
const char* Msg0335 = "'#import' has a specific revision ('%d') but undefined major version ('?')";
const char* Msg0284 = "'#import' location already defined as '%s'";
const char* Msg0380 = "'#import' location defined twice";
const char* Msg0379 = "'#import' should be followed by a string";
const char* Msg0286 = "'#import' version already defined as '%s'";
const char* Msg0382 = "'#import' version defined twice";
const char* Msg0288 = "'#import' version invalid format";
const char* Msg0243 = "'#load' parameter should be of type string ('%s' provided)";
const char* Msg0239 = "'#macro' can only be used inside a 'Swag.Macro' function";
const char* Msg0739 = "'#main' function already defined once";
const char* Msg0366 = "'#mixin' empty replacement block";
const char* Msg0365 = "'#mixin' invalid replacement '%s'";
const char* Msg0364 = "'#mixin' replacement block can only be used inside a breakable statement ('loop', 'visit', 'for' ...)";
const char* Msg0384 = "'#placeholder' can only be declared in a top level scope";
const char* Msg0385 = "'#placeholder' should be followed by an identifier";
const char* Msg0233 = "'#selectif' expression is not 'bool' ('%s' provided)";
const char* Msg0368 = "'#semerror' cannot be in a '#if' block";
const char* Msg0241 = "'#semerror' has not triggered an error";
const char* Msg0367 = "'#semerror' is invalid outside a test module (in the './tests' folder of the workspace)";
const char* Msg0744 = "'#test' functions can only be used in a test module (in the './tests' folder of the workspace)";
const char* Msg0908 = "'%s = %s' is impossible because special function 'opAffect' cannot be found in '%s'";
const char* Msg0224 = "'%s = %s' is impossible because special function 'opAffect' cannot be found in '%s'";
const char* Msg0350 = "'%s' attribute cannot be used in a file marked with '#global export', because the whole file is implicitly public";
const char* Msg0535 = "'%s' can only be used before a call that can raise errors";
const char* Msg0139 = "'%s' can only be used before a function call, and '%s' is %s";
const char* Msg0138 = "'%s' can only be used inside a function marked with 'throw', and '%s' is not";
const char* Msg0842 = "'%s' can only be used inside a function";
const char* Msg0089 = "'%s' cannot be evaluated at compile time";
const char* Msg0137 = "'%s' cannot be used inside a struct special function";
const char* Msg0788 = "'%s' cannot have 'null' as first parameter";
const char* Msg0498 = "'%s' count parameter should be an integer, but is '%s'";
const char* Msg0495 = "'%s' first parameter should be a pointer, but is '%s'";
const char* Msg0570 = "'%s' operation not allowed on type 'any'";
const char* Msg0497 = "'%s' second parameter should be a pointer to type '%s', but points to '%s'";
const char* Msg0496 = "'%s' second parameter should be a pointer, but is '%s'";
const char* Msg0853 = "'%s' should be immediatly followed by an identifier";
const char* Msg0787 = "'%s' should have a pointer as a first parameter";
const char* Msg0858 = "'%s' should not be followed by a line break %s";
const char* Msg0225 = "'%s[index] = %s' is impossible because special function 'opIndexAffect' cannot be found in '%s'";
const char* Msg0427 = "'@acos' called with invalid value '%.3f'";
const char* Msg0741 = "'@alias' names are not all contiguous in function '%s' (missing '@alias%u')";
const char* Msg0275 = "'@alias' special variable name should be followed by a number";
const char* Msg0426 = "'@asin' called with invalid value '%.3f'";
const char* Msg0800 = "'@countof' cannot be used on a tuple type";
const char* Msg0801 = "'@countof' cannot be used on type '%s'";
const char* Msg0797 = "'@dataof' cannot be applied to expression of type '%s'";
const char* Msg0796 = "'@dataof' cannot be used on a tuple type";
const char* Msg0630 = "'@index' can only be used inside a breakable loop ('visit', 'loop' ...)";
const char* Msg0490 = "'@init' count parameter should be an integer, but is '%s'";
const char* Msg0489 = "'@init' first parameter should be a pointer, but is '%s'";
const char* Msg0428 = "'@log' called with invalid value '%.3f'";
const char* Msg0424 = "'@log10' called with invalid value '%.3f'";
const char* Msg0423 = "'@log2' called with invalid value '%.3f'";
const char* Msg0790 = "'@mkany' cannot have 'null' as first parameter";
const char* Msg0792 = "'@mkany' should have a 'typeinfo' or a type value as a second parameter ('%s' provided)";
const char* Msg0789 = "'@mkany' should have a pointer as a first parameter";
const char* Msg0784 = "'@mkcallback' should have a lambda value as a first parameter";
const char* Msg0783 = "'@mkforeign' should have a 'const *void' as a second parameter";
const char* Msg0782 = "'@mkforeign' should have a lambda type as a first parameter";
const char* Msg0793 = "'@mkinterface' should have a one dimension pointer or a struct as a first parameter";
const char* Msg0794 = "'@mkinterface' should have a typeinfo as a second parameter";
const char* Msg0795 = "'@mkinterface' should have an interface as a third parameter";
const char* Msg0417 = "'@power' called with invalid values '%.3f' and '%.3f'";
const char* Msg0806 = "'@spread' can only be called as a function parameter";
const char* Msg0425 = "'@sqrt' called with invalid value '%.3f'";
const char* Msg0596 = "'Swag.Align' value should be a power of two ('%d' provided)";
const char* Msg0617 = "'Swag.Complete' attribute cannot be used on a switch with type '%s'";
const char* Msg0599 = "'Swag.ExportType' invalid value '%s'";
const char* Msg0594 = "'Swag.Optim' invalid value '%s'";
const char* Msg0595 = "'Swag.Pack' value should be 0 or a power of two ('%d' provided)";
const char* Msg0593 = "'Swag.Safety' invalid value '%s'";
const char* Msg0028 = "'Swag.Strict' attribute can only be used on a type alias";
const char* Msg0159 = "'Swag.Tls' and 'Swag.Compiler' attributes are exclusive";
const char* Msg0561 = "']' should not be followed by a line break when declaring an array type";
const char* Msg0632 = "'break' can only be used inside a breakable block";
const char* Msg0865 = "'case' or 'default' expected";
const char* Msg0869 = "'case' statement is empty, you should add a 'break' or a 'fallthrough'";
const char* Msg0823 = "'case' statement is empty, you should add a 'break'";
const char* Msg0848 = "'catch' can only be used inside a function";
const char* Msg0637 = "'continue' can only be used inside a breakable loop ('for', 'visit', 'loop', 'while' ...)";
const char* Msg0866 = "'default' already defined";
const char* Msg0616 = "'default' is invalid in a switch marked with 'Swag.Complete'";
const char* Msg0634 = "'fallthrough' can only be used inside a 'case' block";
const char* Msg0633 = "'fallthrough' can only be used inside a 'switch' block";
const char* Msg0635 = "'fallthrough' cannot be used in the last 'case' of the switch";
const char* Msg0438 = "'for' is invalid for an enum implementation block";
const char* Msg0559 = "'move' cannot be applied to a constant expression";
const char* Msg0075 = "'opVisit' should have the 'Swag.Macro' attribute";
const char* Msg0791 = "'pointer to value and type are not related (first parameter is a pointer to type '%s' but second parameter is type '%s')";
const char* Msg0769 = "'retval' type can only be used in a function body";
const char* Msg0771 = "'retval' type cannot be used in a function that returns nothing";
const char* Msg0560 = "'retval' type is invalid for a function return type";
const char* Msg0334 = "'self' can only be used inside a struct or 'impl' block";
const char* Msg0406 = "'self' can only be used inside an 'impl' block";
const char* Msg0306 = "'slice' should be declared as immutable with 'const'";
const char* Msg0392 = "'swag' namespace is reserved by the compiler";
const char* Msg0854 = "'throw' can only be used inside a function";
const char* Msg0692 = "'using' cannot be used on a variable of type '%s'";
const char* Msg0691 = "'using' cannot be used on an enum variable";
const char* Msg0695 = "'using' cannot be used on type %s";
const char* Msg0668 = "'using' is invalid on a constant";
const char* Msg0669 = "'using' on a field is only valid for a struct type ('%s' provided)";
const char* Msg0451 = "'using' on a member is invalid in an interface definition";
const char* Msg0689 = "'using' on a variable cannot be used in '%s' scope";
const char* Msg0822 = "'using' on a variable with a type pointer can only be used on a pointer to a struct (type is '%s')";
const char* Msg0453 = "'var' is not necessary to declare a field inside a struct";
const char* Msg0399 = "'{' is expected instead of '%s'";
const char* Msg0903 = ", found '%s' ";
const char* Msg0901 = ", found identifier '%s' ";
const char* Msg0900 = ", found symbol '%s' ";
const char* Msg0902 = ", found type '%s' ";
const char* Msg0904 = "; did you miss 'var' or 'const' to declare a global variable ?";
const char* Msg0215 = "[safety] '<<' shift operand value on type '%s' is greater than '%d'";
const char* Msg0216 = "[safety] '>>' shift operand value on type '%s' is greater than '%d'";
const char* Msg0219 = "[safety] '@abs' integer overflow on type '%s'";
const char* Msg0533 = "[safety] '@cstrlen' pointer is null";
const char* Msg0531 = "[safety] '@memcmp' first pointer is null";
const char* Msg0532 = "[safety] '@memcmp' second pointer is null";
const char* Msg0526 = "[safety] '@memcpy' destination pointer is null";
const char* Msg0527 = "[safety] '@memcpy' source pointer is null";
const char* Msg0528 = "[safety] '@memmove' destination pointer is null";
const char* Msg0529 = "[safety] '@memmove' source pointer is null";
const char* Msg0530 = "[safety] '@memset' destination pointer is null";
const char* Msg0229 = "[safety] bad slicing, lower bound is greater than upper bound";
const char* Msg0230 = "[safety] bad slicing, upper bound is out of range";
const char* Msg0208 = "[safety] cast from a negative value of type '%s' to unsigned type '%s'";
const char* Msg0859 = "[safety] dereferencing a null pointer";
const char* Msg0221 = "[safety] division by zero";
const char* Msg0222 = "[safety] index out of range";
const char* Msg0211 = "[safety] integer overflow during '*' operation on type '%s'";
const char* Msg0214 = "[safety] integer overflow during '*=' operation on type '%s'";
const char* Msg0209 = "[safety] integer overflow during '+' operation on type '%s'";
const char* Msg0212 = "[safety] integer overflow during '+=' operation on type '%s'";
const char* Msg0210 = "[safety] integer overflow during '-' operation on type '%s'";
const char* Msg0213 = "[safety] integer overflow during '-=' operation on type '%s'";
const char* Msg0217 = "[safety] integer overflow during '<<' operation on type '%s'";
const char* Msg0218 = "[safety] integer overflow during '>>' operation on type '%s'";
const char* Msg0220 = "[safety] integer overflow when taking the negative value of type '%s'";
const char* Msg0228 = "[safety] invalid dynamic cast, types mismatch";
const char* Msg0207 = "[safety] truncated bits when casting expression from '%s' to '%s'";
const char* Msg0763 = "a %s cannot be marked with 'Swag.Inline' attribute";
const char* Msg0761 = "a %s cannot be marked with 'Swag.Macro' attribute";
const char* Msg0762 = "a %s cannot be marked with 'Swag.Mixin' attribute";
const char* Msg0512 = "a %s cannot be marked with 'Swag.NoReturn' attribute";
const char* Msg0860 = "a %s cannot be marked with 'Swag.NotGeneric' attribute";
const char* Msg0349 = "a %s definition should appear at file or namespace scope";
const char* Msg0407 = "a method can only be declared inside an 'impl' block";
const char* Msg0301 = "affect not allowed from an array";
const char* Msg0571 = "affect not allowed on %s '%s'";
const char* Msg0572 = "affect not allowed, '%s' is %s";
const char* Msg0566 = "affect operation not allowed";
const char* Msg0564 = "affect operation not allowed, left expression is immutable ('const')";
const char* Msg0567 = "affect operation not allowed, left expression is not a variable";
const char* Msg0565 = "affect operation not allowed, left expression is not an l-value";
const char* Msg0574 = "affect to tuple is not possible because right expression is not compatible";
const char* Msg0027 = "alias can only be used with a type or an identifier";
const char* Msg0030 = "alias cannot be used on %s";
const char* Msg0025 = "alias is public but '%s' is not";
const char* Msg0780 = "alias name '%s' is unused and should be removed";
const char* Msg0814 = "alignement cannot be computed because expression is generic";
const char* Msg0115 = "ambiguous resolution of generic %s '%s'";
const char* Msg0116 = "ambiguous resolution of symbol '%s'";
const char* Msg0277 = "an '@alias' number should be in the range [0, 31] ('%u' provided)";
const char* Msg0310 = "an enum variable should be initialized with a valid value or with '?'";
const char* Msg0247 = "an identifier marked with '#scopefct' can only be used inside a function";
const char* Msg0246 = "an identifier marked with '#scopefct' cannot be used in a scope";
const char* Msg0010 = "an interface can only be compared to 'null'";
const char* Msg0676 = "an interface can only contain members of type 'lambda' ('%s' provided)";
const char* Msg0485 = "array access type should be integer, but is '%s'";
const char* Msg0021 = "array dimension cannot be evaluated at compile time";
const char* Msg0023 = "array dimension is 0";
const char* Msg0022 = "array dimension should be integer, but is '%s'";
const char* Msg0840 = "array size should be defined before the type name";
const char* Msg0293 = "attempt to unpack '%u' variables, but '%s' contains only '%u' field(s)";
const char* Msg0591 = "attribute '%s' assigned twice to '%s' ('Swag.AttrMulti' is not present in the declaration of '%s')";
const char* Msg0583 = "attribute '%s' can only be applied to %s";
const char* Msg0588 = "attribute '%s' cannot be applied to %s";
const char* Msg0586 = "attribute '%s' cannot be used in that context";
const char* Msg0600 = "attribute '%s' does not have the 'File' usage, and cannot be used with '#global'";
const char* Msg0297 = "attribute 'Swag.Discardable' can only be used on a lambda variable (provided type is '%s')";
const char* Msg0190 = "attribute declaration ('attr'), unlike function, cannot be marked with 'throw'";
const char* Msg0726 = "attribute declaration ('attr'), unlike function, should not have a return value starting with '->'";
const char* Msg0602 = "attribute parameter cannot be evaluated at compile time";
const char* Msg0136 = "back ticked identifier can only be used inside a 'Swag.Macro' function or an '#inline' block";
const char* Msg0135 = "backtick can only be used inside an inline/macro block";
const char* Msg0054 = "bad generic parameter '%d' for %s (type expected, value provided)";
const char* Msg0057 = "bad generic parameter '%d' for %s (value expected, type provided)";
const char* Msg0476 = "bad slicing, lower bound '%I64u' is greater than upper bound '%I64u'";
const char* Msg0477 = "bad slicing, upper bound '%I64u' is out of range";
const char* Msg0655 = "bad type for first parameter of interface function implementation ('self' expected, '%s' provided)";
const char* Msg0679 = "bad type for first parameter of interface member ('self' expected, '%s' provided)";
const char* Msg0070 = "bad type of generic parameter '%d' for %s ('%s' expected, '%s' provided)";
const char* Msg0053 = "bad type of parameter '%d' for %s ('%s' expected, '%s' provided)";
const char* Msg0050 = "bad type of parameter '%d' for %s ('%s' is expected for field '%s', '%s' provided)";
const char* Msg0047 = "bad type of parameter '%d' for %s, generic type '%s' is assigned to '%s' ('%s' provided)";
const char* Msg0833 = "bit inversion operation not allowed on type '%s'";
const char* Msg0434 = "bytecode execution, ";
const char* Msg0015 = "bytecode stack overflow (maximum stack size is '--stack-size:%s')";
const char* Msg0076 = "call level limit reached (maximum level is '--max-recurse:%d')";
const char* Msg0786 = "callback return type '%s' not supported";
const char* Msg0785 = "callback type not supported, too many parameters (maximum is '%d')";
const char* Msg0227 = "cannot access '%s' by index because special function 'opIndex' cannot be found in type '%s'";
const char* Msg0226 = "cannot access by index because special function 'opIndex' cannot be found in type '%s'";
const char* Msg0049 = "cannot access environment variable 'PATH'";
const char* Msg0509 = "cannot access file '%s'";
const char* Msg0051 = "cannot add '%s' to the 'PATH' environment variable";
const char* Msg0569 = "cannot affect an expression of type 'void'";
const char* Msg0029 = "cannot alias multiple variables";
const char* Msg0160 = "cannot assign a function pointer to a constant";
const char* Msg0032 = "cannot bitcast from type '%s' (should be native integer, char or float)";
const char* Msg0033 = "cannot bitcast to a type with a bigger size ('%s' from '%s')";
const char* Msg0493 = "cannot call '@postcopy' on type '%s' because it is marked with the 'Swag.NoCopy' attribute";
const char* Msg0105 = "cannot call empty function '%s'";
const char* Msg0200 = "cannot cast from '%s' to '%s' because '%s' has multiple fields of type '%s' with 'using'";
const char* Msg0177 = "cannot cast from '%s' to '%s'";
const char* Msg0418 = "cannot cast from immutable type '%s' to mutable '%s'";
const char* Msg0907 = "cannot cast from type '%s' to pointer type; only type 'uint' is accepted";
const char* Msg0175 = "cannot cast implicitly from '%s' to '%s'";
const char* Msg0203 = "cannot cast, not enough initializers ('%d' expected, '%d' provided)";
const char* Msg0204 = "cannot cast, too many initializers ('%d' expected, '%d' provided)";
const char* Msg0176 = "cannot cast, type '%s' does not implement interface '%s'";
const char* Msg0059 = "cannot convert slice of type '%s' to a constant expression";
const char* Msg0058 = "cannot convert type '%s' to a constant expression";
const char* Msg0537 = "cannot convert typeinfo '%s' to runtime typeinfo";
const char* Msg0045 = "cannot create '%s' process (::CreatePipe)";
const char* Msg0311 = "cannot create constant because type '%s' is generic";
const char* Msg0604 = "cannot create directory '%s'";
const char* Msg0046 = "cannot create process '%s'";
const char* Msg0312 = "cannot create variable because type '%s' is generic";
const char* Msg0351 = "cannot declare a %s symbol in a private scope (%s '%s' is private)";
const char* Msg0279 = "cannot decompose a tuple in %s";
const char* Msg0709 = "cannot deduce flag value of '%s' because previous value is not power of two";
const char* Msg0308 = "cannot deduce type from 'null'";
const char* Msg0603 = "cannot delete file '%s'";
const char* Msg0486 = "cannot dereference a 'void' pointer";
const char* Msg0482 = "cannot dereference a tuple type like a pointer or an array";
const char* Msg0481 = "cannot dereference type '%s'";
const char* Msg0094 = "cannot discard a function call that returns nothing";
const char* Msg0280 = "cannot evaluate constant expression of type '%s' at compile time";
const char* Msg0281 = "cannot evaluate constant expression of type '%s' at compile time, because struct is not marked with 'Swag.ConstExpr'";
const char* Msg0090 = "cannot evaluate function parameter at compile time (type is '%s')";
const char* Msg0321 = "cannot evaluate tuple value at compile time because one of its members is not 'Swag.ConstExpr'";
const char* Msg0810 = "cannot evaluate type in that context because it's generic";
const char* Msg0775 = "cannot expand '%s' because this is recursive";
const char* Msg0781 = "cannot expand '%s' in global scope because it contains sub declarations, this is not (yet?) supported";
const char* Msg0510 = "cannot fetch file '%s' for module dependency '%s'";
const char* Msg0508 = "cannot find '%s' in module folder '%s'";
const char* Msg0244 = "cannot find file '%s'";
const char* Msg0079 = "cannot find special function '%s' in '%s'";
const char* Msg0673 = "cannot find struct member '%s' to compute variable relocation ('Swag.Offset' attribute)";
const char* Msg0680 = "cannot initialize an interface member";
const char* Msg0038 = "cannot instantiate generic %s '%s' with an untyped float, you need to specify a type\n";
const char* Msg0037 = "cannot instantiate generic %s '%s' with an untyped integer, you need to specify a type\n";
const char* Msg0042 = "cannot instantiate generic function '%s', missing contextual types replacements";
const char* Msg0041 = "cannot instantiate generic function '%s', missing generic parameters";
const char* Msg0039 = "cannot instantiate generic struct '%s', missing contextual types replacements";
const char* Msg0043 = "cannot instantiate variable because type '%s' is generic";
const char* Msg0832 = "cannot negate number '%I64d' because '%I64u' is not in the range of 's64'";
const char* Msg0830 = "cannot negate number '%d' because '%u' is not in the range of 's16'";
const char* Msg0831 = "cannot negate number '%d' because '%u' is not in the range of 's32'";
const char* Msg0829 = "cannot negate number '%d' because '%u' is not in the range of 's8'";
const char* Msg0223 = "cannot open #load file '%s'";
const char* Msg0524 = "cannot open file '%s' for writing";
const char* Msg0502 = "cannot open file '%s'";
const char* Msg0091 = "cannot reference 'Swag.Compiler' %s '%s' from runtime %s";
const char* Msg0107 = "cannot reference 'Swag.Compiler' function '%s' from runtime function '%s'";
const char* Msg0108 = "cannot reference 'Swag.Test' function '%s' from '%s'";
const char* Msg0101 = "cannot reference 'opDrop' special function (use '@drop' instead)";
const char* Msg0100 = "cannot reference 'opInit' special function (use '@init' instead)";
const char* Msg0103 = "cannot reference 'opPostCopy' special function (use '@postcopy' instead)";
const char* Msg0104 = "cannot reference 'opPostMove' special function (use '@postmove' instead)";
const char* Msg0060 = "cannot reference a compiler constant at runtime";
const char* Msg0012 = "cannot reference a type expression";
const char* Msg0206 = "cannot reference variable '%s' because it's in another stack frame";
const char* Msg0682 = "cannot relocate an interface member";
const char* Msg0516 = "cannot resolve dependency to module '%s' because of two different major versions ('%d' and '%d')";
const char* Msg0518 = "cannot resolve dependency to module '%s', version '%s' cannot be found at location '%s'";
const char* Msg0258 = "cannot resolve foreign function call to '%s'";
const char* Msg0133 = "cannot resolve identifier '%s'";
const char* Msg0681 = "cannot resolve interface because type '%s' is generic";
const char* Msg0513 = "cannot resolve module dependency '%s' ('location' is empty)";
const char* Msg0672 = "cannot resolve struct '%s' because type '%s' is generic";
const char* Msg0004 = "cannot select function '%s' because '%s' has failed";
const char* Msg0048 = "cannot set environment variable 'SWAG_FOLDER' to '%s'\n";
const char* Msg0320 = "cannot slice '%s' because special function 'opSlice' cannot be found in type '%s'";
const char* Msg0465 = "cannot take address of %s";
const char* Msg0471 = "cannot take address of a macro";
const char* Msg0472 = "cannot take address of a mixin";
const char* Msg0473 = "cannot take address of an inline function";
const char* Msg0469 = "cannot take address of constant";
const char* Msg0114 = "cannot take the address of a function with call parameters";
const char* Msg0161 = "cannot transform type '%s' to a constant array because 'opCount' returns '0'";
const char* Msg0162 = "cannot transform type '%s' to a constant array because 'opSlice' returns an empty slice";
const char* Msg0292 = "cannot unpack '%s' because it does not contain any field";
const char* Msg0291 = "cannot unpack type '%s', this is not a struct";
const char* Msg0821 = "cannot unpack variable '%s' from struct '%s' because there's no corresponding member";
const char* Msg0117 = "cannot use 'using' on two variables with the same type";
const char* Msg0337 = "cannot use a range in a switch with an expression";
const char* Msg0332 = "cannot use operator 'orelse' on type '%s'";
const char* Msg0624 = "cannot visit a tuple";
const char* Msg0627 = "cannot visit a variadic type by pointer";
const char* Msg0636 = "cannot visit an enum by pointer";
const char* Msg0525 = "cannot write to file '%s'";
const char* Msg0722 = "command line error: argument '%s' should be followed by '%s'";
const char* Msg0724 = "command line error: argument '%s' should be followed by 'true' or 'false' ('%s')";
const char* Msg0725 = "command line error: argument '%s' should be followed by a string";
const char* Msg0728 = "command line error: argument '%s' should be followed by an integer value ('%s')";
const char* Msg0727 = "command line error: argument '%s' should be followed by an integer value";
const char* Msg0519 = "command line error: invalid --stack-size value (%s), valid range is [%s, %s]";
const char* Msg0520 = "command line error: invalid abi '%s' for x64 backend";
const char* Msg0523 = "command line error: invalid arch '%s' for x64 backend";
const char* Msg0720 = "command line error: invalid argument '%s'";
const char* Msg0522 = "command line error: invalid os '%s' for x64 backend";
const char* Msg0521 = "command line error: invalid vendor '%s' for x64 backend";
const char* Msg0001 = "compare operation not allowed on type '%s'";
const char* Msg0007 = "comparison operations are invalid on tuple types";
const char* Msg0238 = "compiler assertion failed";
const char* Msg0737 = "compiler instruction '%s' is invalid as a default parameter value";
const char* Msg0743 = "compiler special function cannot have the 'Swag.Inline' attribute";
const char* Msg0405 = "const before a function parameter name can only be followed by 'self'";
const char* Msg0305 = "constant should be explicitly initialized";
const char* Msg0298 = "constant should be initialized";
const char* Msg0805 = "constant value should be unsigned, but is '%I64d'";
const char* Msg0802 = "constant value should be unsigned, but is '%d'";
const char* Msg0231 = "copy semantic is forbidden for type '%s' because of 'Swag.NoCopy' attribute";
const char* Msg0557 = "dependency module '%s' cannot be found in that workspace";
const char* Msg0511 = "dependency module folder '%s' does not exist";
const char* Msg0699 = "dimension of enum array type '%s' should be specified";
const char* Msg0150 = "division by zero";
const char* Msg0129 = "during '#checkif' validation of function call";
const char* Msg0128 = "during '#selectif' validation of function call";
const char* Msg0112 = "during generic expansion";
const char* Msg0118 = "during inline expansion";
const char* Msg0684 = "embedded interface '%s' cannot be public";
const char* Msg0675 = "embedded struct '%s' cannot be public";
const char* Msg0356 = "empty attribute";
const char* Msg0447 = "empty tuple definition";
const char* Msg0700 = "enum array type '%s' should be 'const'";
const char* Msg0701 = "enum slice type '%s' should be 'const'";
const char* Msg0717 = "enum value '%s' is out of range of 's16'";
const char* Msg0718 = "enum value '%s' is out of range of 's32'";
const char* Msg0719 = "enum value '%s' is out of range of 's64'";
const char* Msg0716 = "enum value '%s' is out of range of 's8'";
const char* Msg0710 = "enum value '%s' is out of range of 'u16'";
const char* Msg0712 = "enum value '%s' is out of range of 'u32'";
const char* Msg0714 = "enum value '%s' is out of range of 'u64'";
const char* Msg0708 = "enum value '%s' is out of range of 'u8'";
const char* Msg0706 = "enum value '%s' of type '%s' should be initialized";
const char* Msg0153 = "error reading source file '%s'";
const char* Msg0036 = "error: backend: cannot locate windows sdk folder";
const char* Msg0102 = "evaluation of a function parameter of type '%s' is not supported at compile time";
const char* Msg0435 = "exception during compile time execution !";
const char* Msg0330 = "expected '%s' instead of '%s' %s";
const char* Msg0825 = "expected ',' or ']', found '%s'";
const char* Msg0455 = "expected ':' or '=' in variable declaration, found '%s'";
const char* Msg0141 = "expected '[', '{', '(', '\"' or an intrinsic name, found character '%c'";
const char* Msg0416 = "expected '{' to start the %s body, found ';'";
const char* Msg0460 = "expected a binary digit, found '%s'";
const char* Msg0622 = "expected a constant name, found '%s'";
const char* Msg0897 = "expected a left expression";
const char* Msg0121 = "expected a single identifier %s";
const char* Msg0444 = "expected a struct name, found '%s'";
const char* Msg0662 = "expected a struct or an enum, but '%s' is %s";
const char* Msg0648 = "expected a struct, but '%s' is %s";
const char* Msg0290 = "expected a struct, but symbol '%s' is %s";
const char* Msg0895 = "expected a top level instruction";
const char* Msg0236 = "expected a type 'string' as an '#assert' message ('%s' provided)";
const char* Msg0343 = "expected a type declaration, found '%s'";
const char* Msg0202 = "expected a type inside a tuple type definition, found '%s'";
const char* Msg0898 = "expected a variable declaration";
const char* Msg0315 = "expected a variable name, found '%s'";
const char* Msg0333 = "expected an alias name, found '%s'";
const char* Msg0355 = "expected an attribute name, found '%s'";
const char* Msg0582 = "expected an attribute, but '%s' is %s";
const char* Msg0896 = "expected an embedded instruction or a curly block";
const char* Msg0396 = "expected an enum name, found '%s'";
const char* Msg0702 = "expected an enum type, found '%s'";
const char* Msg0400 = "expected an enum value identifier, found '%s'";
const char* Msg0899 = "expected an expression";
const char* Msg0285 = "expected an identifier, found a literal";
const char* Msg0835 = "expected an identifier, found symbol '%s'";
const char* Msg0646 = "expected an interface, but '%s' is %s";
const char* Msg0171 = "expected the type of the array after dimensions, found '%s'";
const char* Msg0798 = "expression cannot be evaluated at compile time";
const char* Msg0615 = "expression cannot be evaluated at compile time, and switch is 'Swag.Complete'";
const char* Msg0862 = "expression is empty";
const char* Msg0807 = "expression of type '%s' cannot be spreaded";
const char* Msg0629 = "expression of type '%s' cannot be visited with 'visit'";
const char* Msg0240 = "expression should be of type 'code', but is '%s'";
const char* Msg0257 = "failed to load module '%s' while resolving foreign function '%s': %s";
const char* Msg0052 = "failed to start watcher service !";
const char* Msg0055 = "failed to update watcher service !";
const char* Msg0546 = "fatal error: cache directory '%s' does not exist";
const char* Msg0547 = "fatal error: cannot create cache directory '%s'";
const char* Msg0818 = "fatal error: cannot create directory '%s'";
const char* Msg0824 = "fatal error: cannot create file '%s'";
const char* Msg0543 = "fatal error: cannot create public directory '%s'";
const char* Msg0347 = "fatal error: cannot create script file '%s'";
const char* Msg0545 = "fatal error: cannot create target directory '%s'";
const char* Msg0345 = "fatal error: cannot delete directory '%s'";
const char* Msg0344 = "fatal error: cannot delete file '%s'";
const char* Msg0165 = "fatal error: cannot find 'SWAG_FOLDER' in the environment; you must run 'swag env' first at the Swag.exe location to register its path";
const char* Msg0539 = "fatal error: command line --tag '%s' unsupported type '%s'";
const char* Msg0507 = "fatal error: invalid module '%s', configuration file '%s' is missing";
const char* Msg0319 = "fatal error: invalid script file extension; should be '.swgs' instead of '%s'";
const char* Msg0000 = "fatal error: invalid swag command '%s'";
const char* Msg0538 = "fatal error: invalid value '%s' for command line '--tag:%s'; this is not a valid literal";
const char* Msg0322 = "fatal error: invalid value for '--tag:%s' (%s)";
const char* Msg0542 = "fatal error: invalid workspace '%s', subfolder 'modules/' or 'tests/' does not exist";
const char* Msg0318 = "fatal error: missing script file; use '--file:<filename>.swgs' to specify a script to run";
const char* Msg0540 = "fatal error: missing workspace folder '--workspace'";
const char* Msg0397 = "fatal error: module '%s' already exists in the '/modules' folder";
const char* Msg0014 = "fatal error: not enough memory !";
const char* Msg0166 = "fatal error: script file '%s' does not exist";
const char* Msg0552 = "fatal error: some problems have been found in compiler bootstrap !!!";
const char* Msg0554 = "fatal error: some problems have been found in compiler runtime !!!";
const char* Msg0817 = "fatal error: workspace folder '%s' already exists";
const char* Msg0541 = "fatal error: workspace folder '%s' does not exist";
const char* Msg0120 = "field name '%s' cannot be found in tuple";
const char* Msg0242 = "filename cannot be evaluated at compile time";
const char* Msg0466 = "floating point number exponent should have at least one digit";
const char* Msg0199 = "forbidden 'opDrop' special function for '%s' because struct is marked with 'Swag.ConstExpr'";
const char* Msg0113 = "found %d overloads for '%s' but no one could match";
const char* Msg0325 = "found '#elif' without a corresponding '#if'";
const char* Msg0324 = "found '#else' without a corresponding '#if'";
const char* Msg0326 = "found ')' without a corresponding opening '('";
const char* Msg0328 = "found ']' without a corresponding opening '['";
const char* Msg0323 = "found 'else' without a corresponding 'if'";
const char* Msg0327 = "found '}' without a corresponding opening '{'";
const char* Msg0752 = "function '%s' cannot have generic parameters because it is flagged with the 'Swag.NoGeneric' attribute";
const char* Msg0753 = "function '%s' cannot have the 'Swag.Complete' attribute, this is reserved for 'opAffect'";
const char* Msg0754 = "function '%s' cannot have the 'Swag.Implicit' attribute, this is reserved for 'opAffect' and 'opCast'";
const char* Msg0652 = "function '%s' has an incorrect signature for interface '%s'";
const char* Msg0751 = "function '%s' has the 'Swag.NoGeneric' attribute but seems to be generic";
const char* Msg0098 = "function '%s' should be called with '()' and not curlies (this is reserved for struct initialization)";
const char* Msg0766 = "function cannot have a return type because it is flagged with the 'Swag.NoReturn' attribute";
const char* Msg0767 = "function cannot have the 'Swag.Discardable' attribute because it returns 'void'";
const char* Msg0764 = "function cannot return a value of type '%s'";
const char* Msg0413 = "function names starting with '@' are reserved for intrinsics";
const char* Msg0742 = "function with the 'Swag.Foreign' attribute cannot have a body";
const char* Msg0745 = "function with the 'Swag.Test' attribute cannot have a return value";
const char* Msg0746 = "function with the 'Swag.Test' attribute cannot have parameters";
const char* Msg0386 = "global 'using' should be declared at the top of the file";
const char* Msg0313 = "global variable cannot be declared as 'public'";
const char* Msg0085 = "identifier '%s' cannot be dereferenced like a struct (type is '%s')";
const char* Msg0110 = "identifier '%s' cannot be found in %s '%s'";
const char* Msg0093 = "identifier '%s' cannot be found in tuple";
const char* Msg0127 = "identifier '%s' has call parameters, but is %s and not a function";
const char* Msg0125 = "identifier '%s' has call parameters, but is a variable of type '%s' and not a function";
const char* Msg0893 = "identifier '%s' has not been solved";
const char* Msg0316 = "identifier '%s' should be public";
const char* Msg0272 = "identifier '%s' starts with '__', and this is reserved by the language";
const char* Msg0448 = "identifier expected";
const char* Msg0881 = "identifier is preceeded with '.', but no parent scope can be found";
const char* Msg0201 = "if this is a tuple literal and not a type declaration, use '@{' instead of '{'";
const char* Msg0198 = "if this is an array literal and not a type declaration, use '@[' instead of '['";
const char* Msg0660 = "implementation block for '%s' is not private but the corresponding identifier is";
const char* Msg0659 = "implementation block for '%s' is private but the corresponding identifier is not";
const char* Msg0661 = "implementation block is not defined in the same scope as '%s' ('impl' parent scope is '%s', '%s' parent scope is '%s')";
const char* Msg0441 = "implementation block kind (%s) does not match the type of '%s' (%s)";
const char* Msg0468 = "index out of range (index is '%I64u', maximum index is '%I64u')";
const char* Msg0670 = "initialization expression cannot be evaluated at compile time";
const char* Msg0307 = "initialization expression is 'void'";
const char* Msg0906 = "initialization value cannot be evaluated at compile time because 'opAffect' is not 'Swag.ConstExpr'";
const char* Msg0270 = "initializer list is empty";
const char* Msg0733 = "inline function has variadic arguments, this is not yet supported";
const char* Msg0683 = "interface '%s' is empty";
const char* Msg0861 = "intrinsic parameter expression cannot be empty";
const char* Msg0891 = "invalid '%s', use '%s' instead to do a logical test";
const char* Msg0845 = "invalid 'assume' inside '%s' expression";
const char* Msg0844 = "invalid 'catch' inside '%s' expression";
const char* Msg0514 = "invalid 'location' format; should have the form 'location=\"mode@accesspath\"'";
const char* Msg0515 = "invalid 'location' mode; should be 'swag' or 'disk', not '%s'";
const char* Msg0846 = "invalid 'throw' inside '%s' expression";
const char* Msg0843 = "invalid 'try' inside '%s' expression";
const char* Msg0694 = "invalid 'using' type";
const char* Msg0826 = "invalid access to an array with multiple dimensions, syntax is [x, y], not [x][y]";
const char* Msg0470 = "invalid address expression";
const char* Msg0454 = "invalid affect operator '==', did you mean '=' ?";
const char* Msg0598 = "invalid attribute '%s'";
const char* Msg0597 = "invalid attribute usage";
const char* Msg0031 = "invalid bitcast type '%s' (should be native integer, char or float)";
const char* Msg0081 = "invalid character '%s'";
const char* Msg0267 = "invalid compare operator '=', did you mean '==' ?";
const char* Msg0314 = "invalid file format, should be ascii, utf-8 or utf-8-bom";
const char* Msg0069 = "invalid first parameter type for special function '%s' ('%s' expected, '%s' provided)";
const char* Msg0074 = "invalid generic parameter for special function '%s' ('bool' expected, '%s' provided)";
const char* Msg0072 = "invalid generic parameter for special function '%s' ('string' expected, '%s' provided)";
const char* Msg0130 = "invalid generic parameters, identifier '%s' is %s and not a function or a struct";
const char* Msg0440 = "invalid generic parameters, should be naked";
const char* Msg0463 = "invalid hexadecimal digit '%s'";
const char* Msg0304 = "invalid initialization expression for array (expected an array literal or '?')";
const char* Msg0395 = "invalid label identifier '%s'";
const char* Msg0877 = "invalid label name, identifier expected";
const char* Msg0876 = "invalid label name, you should add ';' or put a valid label identifier";
const char* Msg0124 = "invalid lambda call, '%s' is not a variable";
const char* Msg0123 = "invalid lambda call, cannot reference struct member '%s'";
const char* Msg0467 = "invalid literal number prefix '%s'";
const char* Msg0381 = "invalid location '%s'";
const char* Msg0776 = "invalid name alias";
const char* Msg0778 = "invalid name alias, should be a single identifier";
const char* Msg0777 = "invalid name alias, should be an identifier";
const char* Msg0403 = "invalid named parameter '%s'";
const char* Msg0061 = "invalid number of arguments for special function '%s' ('%d' expected, '%d' provided)";
const char* Msg0071 = "invalid number of generic parameters for special function '%s'";
const char* Msg0073 = "invalid number of generic parameters for special function '%s'";
const char* Msg0145 = "invalid number syntax, a digit separator '_' cannot be followed by another digit separator";
const char* Msg0152 = "invalid number syntax, a digit separator '_' cannot end a literal number";
const char* Msg0155 = "invalid number syntax, a digit separator '_' cannot start a fractional part";
const char* Msg0154 = "invalid number syntax, a digit separator '_' cannot start a literal number";
const char* Msg0156 = "invalid number syntax, a digit separator '_' cannot start an exponent part";
const char* Msg0151 = "invalid number syntax, missing at least one digit";
const char* Msg0168 = "invalid operation '%s' on a tuple type";
const char* Msg0573 = "invalid operation on a tuple type";
const char* Msg0264 = "invalid operator modifier '%s'";
const char* Msg0066 = "invalid parameter '%d' for special function '%s' ('%s' expected, '%s' provided)";
const char* Msg0077 = "invalid parameter '2' for special function '%s' (cannot be of type '%s')";
const char* Msg0408 = "invalid parameter name '%s'";
const char* Msg0373 = "invalid pass name '%s'";
const char* Msg0132 = "invalid reference to private scope";
const char* Msg0065 = "invalid return type for special function '%s' ('%s' expected, '%s' provided)";
const char* Msg0276 = "invalid special variable name '%s', '@alias' should be followed by a number ('%s' provided)";
const char* Msg0609 = "invalid switch type '%s'";
const char* Msg0608 = "invalid switch type 'any', you need to cast to a concrete type";
const char* Msg0841 = "invalid token '%s' after 'discard'";
const char* Msg0449 = "invalid token '%s' in tuple type, ',' or '}' are expected here";
const char* Msg0260 = "invalid token '['";
const char* Msg0402 = "invalid token, ',' expected";
const char* Msg0401 = "invalid token, identifier expected";
const char* Msg0731 = "invalid type '%s' for attribute parameter";
const char* Msg0697 = "invalid type '%s' for enum flags (should be unsigned integer)";
const char* Msg0698 = "invalid type '%s' for enum index (should be integer)";
const char* Msg0017 = "invalid type declaration, symbol '%s' is not a type (it's %s)";
const char* Msg0278 = "invalid variable name '%s' (cannot start with '@')";
const char* Msg0296 = "invalid variable name '%s' because '@alias' can only be used inside a macro or a mixin function";
const char* Msg0410 = "invalid variable name '%s'";
const char* Msg0383 = "invalid version '%s'";
const char* Msg0436 = "it could be a bug in the compile time part of your program";
const char* Msg0639 = "label name '%s' already defined in the hierarchy";
const char* Msg0331 = "line break or ';' is expected before '%s' to close the %s";
const char* Msg0464 = "literal number is too big (cannot fit in 64 bits)";
const char* Msg0558 = "llvm backend cannot create target '%s'";
const char* Msg0034 = "llvm backend unsupported os '%s'";
const char* Msg0828 = "minus operation not allowed on type '%s'";
const char* Msg0879 = "missing '#global if' expression";
const char* Msg0878 = "missing '#if' expression";
const char* Msg0269 = "missing '#main' function (executable entry point)";
const char* Msg0500 = "missing '%d' test errors (%d raised)";
const char* Msg0501 = "missing '%d' test warnings (%d raised)";
const char* Msg0329 = "missing '%s' %s";
const char* Msg0867 = "missing 'case' expression before ':'";
const char* Msg0868 = "missing 'case' expression before 'break'";
const char* Msg0863 = "missing 'if' boolean expression before '{'";
const char* Msg0864 = "missing 'while' boolean expression before '{'";
const char* Msg0772 = "missing a return value ('%s')";
const char* Msg0872 = "missing another 'visit' variable name after ',' and before ':'";
const char* Msg0654 = "missing first parameter 'self' for interface function '%s'";
const char* Msg0020 = "missing function call '()' to %s";
const char* Msg0119 = "missing function call parameters";
const char* Msg0414 = "missing function name instead of '%s'";
const char* Msg0409 = "missing function parameter type or assignment (':' or '=')";
const char* Msg0883 = "missing function parameters before '{'";
const char* Msg0412 = "missing generic name or type";
const char* Msg0411 = "missing generic parameters";
const char* Msg0303 = "missing initialization expression to deduce size of array";
const char* Msg0394 = "missing label identifier before '{'";
const char* Msg0390 = "missing namespace name before ';'";
const char* Msg0389 = "missing namespace name before '{'";
const char* Msg0677 = "missing parameters for interface member '%s' ('self' expected as first parameter)";
const char* Msg0068 = "missing parameters for special function '%s'";
const char* Msg0339 = "missing pointer declaration '*' after 'const'";
const char* Msg0064 = "missing return type for special function '%s' ('%s' expected)";
const char* Msg0063 = "missing return type for special function '%s'";
const char* Msg0874 = "missing the 'loop' expression to evaluate before '{'";
const char* Msg0871 = "missing the 'visit' expression to evaluate before '{'";
const char* Msg0623 = "missing variable type or assignment (':' or '=')";
const char* Msg0556 = "module '%s' cannot be found in that workspace";
const char* Msg0549 = "module '%s', cannot resolve %s '%s'";
const char* Msg0169 = "more than one module with name '%s' is present in the workspace (path is '%s')";
const char* Msg0011 = "named parameter '%s' already used";
const char* Msg0393 = "namespace cannot have the same name as the module ('%s')";
const char* Msg0388 = "namespace definition should appear either at file scope or immediately within another namespace definition";
const char* Msg0391 = "namespace name should be an identifier ('%s' provided)";
const char* Msg0827 = "negate an unsigned type ('%s') is not allowed";
const char* Msg0880 = "no corresponding '}' has been found";
const char* Msg0299 = "non mutable variable should be initialized";
const char* Msg0748 = "not all control paths of %s return a value";
const char* Msg0035 = "not enough generic parameters for %s";
const char* Msg0196 = "not enough initializers for '%s' ('%d' expected, '%d' provided)";
const char* Msg0016 = "not enough parameters for %s";
const char* Msg0205 = "not enough parameters in tuple initialization ('%d' expected, '%d' provided)";
const char* Msg0087 = "only calls to 'Swag.Mixin' functions can be done at global scope ('%s' is %s)";
const char* Msg0870 = "opVisit special name expected";
const char* Msg0005 = "operation '%s' not allowed on %s '%s'";
const char* Msg0504 = "operation '%s' not allowed, left type is '%s' and right type is '%s'";
const char* Msg0157 = "operator '%' not allowed on type '%s'";
const char* Msg0164 = "operator '&' not allowed on type '%s'";
const char* Msg0148 = "operator '*' not allowed on type '%s'";
const char* Msg0143 = "operator '+' not allowed on type '%s'";
const char* Msg0142 = "operator '+' not allowed with operand type '%s'";
const char* Msg0147 = "operator '-' not allowed on type '%s'";
const char* Msg0146 = "operator '-' not allowed with operand type '%s'";
const char* Msg0149 = "operator '/' not allowed on type '%s'";
const char* Msg0170 = "operator '<<' not allowed on type '%s'";
const char* Msg0172 = "operator '>>' not allowed on type '%s'";
const char* Msg0167 = "operator '^' not allowed on type '%s'";
const char* Msg0163 = "operator '|' not allowed on type '%s'";
const char* Msg0265 = "operator modifier '%s' already used once";
const char* Msg0266 = "operator modifier '%s' is invalid for operator '%s'";
const char* Msg0006 = "parameter '%d' should be named because some parameters before are named";
const char* Msg0738 = "parameter '%d' should have a default value because some parameters before have a default value";
const char* Msg0040 = "partial type alias for generic struct instantiation is not supported";
const char* Msg0892 = "placeholder identifier '%s' has not been solved";
const char* Msg0144 = "pointer arithmetic not allowed on 'typeinfo'";
const char* Msg0579 = "pointer arithmetic not allowed with operand type '%s'";
const char* Msg0024 = "pointer to 'Swag.TypeInfo' should be 'const'";
const char* Msg0342 = "pointer to reference is not (yet?) supported";
const char* Msg0348 = "private definition should appear at file or namespace scope";
const char* Msg0300 = "reference should be initialized";
const char* Msg0774 = "returning a value of type '%s', but %s returns nothing";
const char* Msg0431 = "runtime variable '%s' is initialized to zero and cannot be changed at compile time; initialize it with '?' if this is intended";
const char* Msg0419 = "semantic cycle detected during resolution of %s '%s'";
const char* Msg0173 = "shift operand should be 'u32' and not '%s'";
const char* Msg0653 = "should be";
const char* Msg0812 = "size cannot be computed because expression is generic";
const char* Msg0009 = "slice can only be compared to 'null'";
const char* Msg0474 = "slicing operator cannot be applied on an array with multiple dimensions";
const char* Msg0475 = "slicing operator cannot be applied on type '%s'";
const char* Msg0657 = "some functions of interface '%s' are not implemented";
const char* Msg0078 = "special function '%s' (starting with 'op' followed by a letter in upper case) is unknown";
const char* Msg0067 = "special function '%s' should be defined in a 'impl' scope";
const char* Msg0625 = "special visit name is only valid for struct (type is '%s')";
const char* Msg0536 = "stack overflow (maximum stack size is '--stack-size:%s')";
const char* Msg0765 = "struct '%s' has the 'Swag.NoCopy' attribute, so 'opPostCopy' is irrelevant";
const char* Msg0082 = "struct '%s' should be initialized in place with '{}' and not parenthesis (this is reserved for function calls)";
const char* Msg0295 = "struct cannot be initialized twice";
const char* Msg0666 = "struct cannot be marked with 'Swag.Opaque' because it is not public";
const char* Msg0667 = "struct cannot be marked with 'Swag.Opaque' because the whole file is exported ('#global export')";
const char* Msg0839 = "struct initialization of '%s' should be done with '{}' and not parenthesis (this is reserved for function calls)";
const char* Msg0674 = "struct member name '%s' starts with 'item', and this is reserved by the language";
const char* Msg0610 = "switch body is empty";
const char* Msg0612 = "switch enum value '%s' already defined";
const char* Msg0620 = "switch is incomplete (missing '%s.%s')";
const char* Msg0613 = "switch value '%d' already defined";
const char* Msg0614 = "switch value '%f' already defined";
const char* Msg0611 = "switch value '%s' already defined";
const char* Msg0607 = "switch without an expression cannot be marked as 'Swag.Complete'";
const char* Msg0885 = "symbol '%s' already defined as %s in an accessible scope";
const char* Msg0890 = "symbol '%s' already defined as a name alias in an accessible scope";
const char* Msg0886 = "symbol '%s' already defined in an accessible scope";
const char* Msg0346 = "symbol '%s' already defined in parent scope";
const char* Msg0888 = "symbol '%s' already defined with the same signature in an accessible scope";
const char* Msg0262 = "symbol ':' is interpreted as a pointer dereference, but is followed by a symbol ('%s')";
const char* Msg0696 = "symbol already defined";
const char* Msg0062 = "too few arguments for special function '%s' (at least '%d' expected, only '%d' provided)";
const char* Msg0626 = "too many 'visit' alias names (maximum is '2', but '%u' are provided)";
const char* Msg0338 = "too many array dimensions (maximum is '254')";
const char* Msg0459 = "too many digits in literal number";
const char* Msg0044 = "too many generic parameters for %s '%s'";
const char* Msg0491 = "too many initialization parameters for type '%s'";
const char* Msg0197 = "too many initializers for '%s' ('%d' expected, '%d' provided)";
const char* Msg0026 = "too many parameters for %s";
const char* Msg0340 = "too many pointer dimensions (maximim is '%u')";
const char* Msg0252 = "type '%s' and type '%s' defined in the command line for '%s' are incompatible";
const char* Msg0002 = "type '%s' cannot be used in a range expression";
const char* Msg0911 = "type '%s' cannot be used in an union because it contains 'opDrop' (or one of its members does)";
const char* Msg0909 = "type '%s' cannot be used in an union because it contains 'opPostCopy' (or one of its members does)";
const char* Msg0910 = "type '%s' cannot be used in an union because it contains 'opPostMove' (or one of its members does)";
const char* Msg0671 = "type '%s' is generic, but struct '%s' does not declare generic parameters";
const char* Msg0478 = "type '%s' is immutable ('const') and cannot be changed";
const char* Msg0838 = "type 'Self' cannot be used outside an 'impl', 'struct' or 'interface' block";
const char* Msg0730 = "type 'alias' is only valid in a 'Swag.Macro' or 'Swag.Mixin' function";
const char* Msg0729 = "type 'code' is only valid in a 'Swag.Macro' or 'Swag.Mixin' function";
const char* Msg0294 = "type to tuple conversion is not (yet?) supported for type '%s'";
const char* Msg0309 = "unable to deduce type of %s '%s'";
const char* Msg0534 = "uncatched error when calling '%s'; missing 'try', 'assume' or 'catch'";
const char* Msg0099 = "unexpected aliased identifiers because function '%s' is not a macro or a mixin";
const char* Msg0274 = "unexpected call parameters for variable '%s'";
const char* Msg0080 = "unexpected end of file found in comment";
const char* Msg0905 = "unexpected end of line found in string literal";
const char* Msg0273 = "unexpected generic parameters for variable '%s'";
const char* Msg0352 = "unexpected token '%s' after 'private' attribute";
const char* Msg0353 = "unexpected token '%s' after 'protected' attribute";
const char* Msg0354 = "unexpected token '%s' after 'public' attribute";
const char* Msg0140 = "unknown compiler instruction '%s'";
const char* Msg0122 = "unknown identifier '%s'";
const char* Msg0631 = "unknown label '%s'";
const char* Msg0499 = "unknown module dependency '%s'";
const char* Msg0008 = "unknown named parameter '%s'";
const char* Msg0282 = "unpacking '%d' variable(s), but the tuple on the right contains '%d' element(s)";
const char* Msg0768 = "unreachable code";
const char* Msg0664 = "unsupported alias as an implementation block name";
const char* Msg0555 = "unsupported tuple type in generic parameters";
const char* Msg0109 = "unused return value of function '%s'";
const char* Msg0092 = "unused return value of lambda '%s'";
const char* Msg0096 = "unused variable '%s'";
const char* Msg0180 = "value '%I64d' is negative and not in the range of 'u16'";
const char* Msg0182 = "value '%I64d' is negative and not in the range of 'u32'";
const char* Msg0185 = "value '%I64d' is negative and not in the range of 'u64'";
const char* Msg0178 = "value '%I64d' is negative and not in the range of 'u8'";
const char* Msg0187 = "value '%I64d' is not in the range of 's16'";
const char* Msg0188 = "value '%I64d' is not in the range of 's32'";
const char* Msg0189 = "value '%I64d' is not in the range of 's64'";
const char* Msg0186 = "value '%I64d' is not in the range of 's8'";
const char* Msg0191 = "value '%I64d' is truncated in 'f32'";
const char* Msg0194 = "value '%I64d' is truncated in 'f64'";
const char* Msg0181 = "value '%I64u' is not in the range of 'u16'";
const char* Msg0183 = "value '%I64u' is not in the range of 'u32'";
const char* Msg0179 = "value '%I64u' is not in the range of 'u8'";
const char* Msg0192 = "value '%I64u' is truncated in 'f32'";
const char* Msg0195 = "value '%I64u' is truncated in 'f64'";
const char* Msg0193 = "value '%lf' is truncated in 'f32'";
const char* Msg0086 = "variable '%s' has only been used to find function '%s'; use scope '%s' instead";
const char* Msg0894 = "variable '%s' is used before being declared";
const char* Msg0645 = "variable initialized twice, first with type arguments, and then with this assignment";
const char* Msg0271 = "variable name or '?' expected in tuple unpacking, found '%s'";
const char* Msg0457 = "variable should have a type or should be initialized";
const char* Msg0734 = "variadic argument should be the last one";
const char* Msg0289 = "version should be of the form 'version.revision.buildnum', with each number >= 0 or the '?' character";
const char* Msg0056 = "x64 backend unsupported os '%s'";
const char* Msg0820 = nullptr;
const char* Msg0819 = nullptr;
const char* Msg0638 = nullptr;
const char* Msg0685 = nullptr;
const char* Msg0816 = nullptr;
const char* Msg0815 = nullptr;
const char* Msg0813 = nullptr;
const char* Msg0184 = nullptr;
const char* Msg0811 = nullptr;
const char* Msg0809 = nullptr;
const char* Msg0808 = nullptr;
const char* Msg0641 = nullptr;
const char* Msg0642 = nullptr;
const char* Msg0804 = nullptr;
const char* Msg0803 = nullptr;
const char* Msg0686 = nullptr;
const char* Msg0799 = nullptr;
const char* Msg0779 = nullptr;
const char* Msg0687 = nullptr;
const char* Msg0688 = nullptr;
const char* Msg0643 = nullptr;
const char* Msg0640 = nullptr;
const char* Msg0456 = nullptr;
const char* Msg0644 = nullptr;
const char* Msg0458 = nullptr;
const char* Msg0317 = nullptr;
const char* Msg0452 = nullptr;
const char* Msg0770 = nullptr;
const char* Msg0647 = nullptr;
const char* Msg0450 = nullptr;
const char* Msg0461 = nullptr;
const char* Msg0462 = nullptr;
const char* Msg0446 = nullptr;
const char* Msg0445 = nullptr;
const char* Msg0443 = nullptr;
const char* Msg0550 = nullptr;
const char* Msg0442 = nullptr;
const char* Msg0439 = nullptr;
const char* Msg0873 = nullptr;
const char* Msg0875 = nullptr;
const char* Msg0548 = nullptr;
const char* Msg0437 = nullptr;
const char* Msg0433 = nullptr;
const char* Msg0432 = nullptr;
const char* Msg0882 = nullptr;
const char* Msg0690 = nullptr;
const char* Msg0430 = nullptr;
const char* Msg0678 = nullptr;
const char* Msg0740 = nullptr;
const char* Msg0693 = nullptr;
const char* Msg0372 = nullptr;
const char* Msg0736 = nullptr;
const char* Msg0735 = nullptr;
const char* Msg0429 = nullptr;
const char* Msg0732 = nullptr;
const char* Msg0544 = nullptr;
const char* Msg0506 = nullptr;
const char* Msg0649 = nullptr;
const char* Msg0650 = nullptr;
const char* Msg0703 = nullptr;
const char* Msg0704 = nullptr;
const char* Msg0651 = nullptr;
const char* Msg0656 = nullptr;
const char* Msg0723 = nullptr;
const char* Msg0422 = nullptr;
const char* Msg0721 = nullptr;
const char* Msg0658 = nullptr;
const char* Msg0415 = nullptr;
const char* Msg0479 = nullptr;
const char* Msg0705 = nullptr;
const char* Msg0480 = nullptr;
const char* Msg0484 = nullptr;
const char* Msg0715 = nullptr;
const char* Msg0663 = nullptr;
const char* Msg0404 = nullptr;
const char* Msg0713 = nullptr;
const char* Msg0711 = nullptr;
const char* Msg0665 = nullptr;
const char* Msg0503 = nullptr;
const char* Msg0492 = nullptr;
const char* Msg0494 = nullptr;
const char* Msg0707 = nullptr;
const char* Msg0387 = nullptr;
const char* Msg0621 = nullptr;
const char* Msg0562 = nullptr;
const char* Msg0618 = nullptr;
const char* Msg0563 = nullptr;
const char* Msg0302 = nullptr;
const char* Msg0568 = nullptr;
const char* Msg0889 = nullptr;
const char* Msg0575 = nullptr;
const char* Msg0605 = nullptr;
const char* Msg0576 = nullptr;
const char* Msg0577 = nullptr;
const char* Msg0578 = nullptr;
const char* Msg0580 = nullptr;
const char* Msg0581 = nullptr;
const char* Msg0585 = nullptr;
const char* Msg0601 = nullptr;
const char* Msg0887 = nullptr;
const char* Msg0590 = nullptr;
const char* Msg0836 = nullptr;
const char* Msg0837 = nullptr;
const char* Msg0847 = nullptr;
const char* Msg0849 = nullptr;
const char* Msg0850 = nullptr;
const char* Msg0851 = nullptr;
const char* Msg0852 = nullptr;
const char* Msg0855 = nullptr;
const char* Msg0856 = nullptr;
const char* Msg0857 = nullptr;
const char* Msg0628 = nullptr;
const char* Msg0358 = nullptr;
const char* Msg0261 = nullptr;
const char* Msg0357 = nullptr;
const char* Msg0359 = nullptr;
const char* Msg0487 = nullptr;
const char* Msg0773 = nullptr;
const char* Msg0362 = nullptr;
const char* Msg0361 = nullptr;
const char* Msg0360 = nullptr;
const char* Msg0263 = nullptr;
const char* Msg0363 = nullptr;
const char* Msg0174 = nullptr;
const char* Msg0341 = nullptr;
const char* Msg0483 = nullptr;
const char* Msg0111 = nullptr;
const char* Msg0259 = nullptr;
const char* Msg0126 = nullptr;
const char* Msg0158 = nullptr;
const char* Msg0587 = nullptr;
const char* Msg0589 = nullptr;
const char* Msg0398 = nullptr;
const char* Msg0551 = nullptr;
const char* Msg0018 = nullptr;
const char* Msg0553 = nullptr;
const char* Msg0084 = nullptr;
const char* Msg0592 = nullptr;
const char* Msg0106 = nullptr;
const char* Msg0619 = nullptr;
const char* Msg0517 = nullptr;
const char* Msg0884 = nullptr;
const char* Msg0287 = nullptr;
const char* Msg0253 = nullptr;
const char* Msg0095 = nullptr;
const char* Msg0912 = nullptr;

const char* Hnt0006 = "this cannot be visited";
const char* Hnt0007 = "this implies another 'visit' variable name";
const char* Hnt0008 = "this is a pointer dereference ':'";
const char* Hnt0009 = "this should be a 'visit' variable name or the expression to evaluate";
const char* Hnt0010 = "this should be a 'visit' variable name";
const char* Hnt0021 = "this should be a pointer";
const char* Hnt0025 = "this could be casted with 'cast(%s)'";
const char* Hnt0001 = "this '@sqrt' is called with a negative value";
const char* Hnt0023 = "this call could be preceeded by 'discard' if you do not want to use the return value";
const char* Hnt0005 = "this could be casted to 'uint'";
const char* Hnt0017 = "this function is marked with the 'Swag.Inline' attribute";
const char* Hnt0015 = "this function is marked with the 'Swag.Macro' attribute";
const char* Hnt0016 = "this function is marked with the 'Swag.Mixin' attribute";
const char* Hnt0018 = "this is a constant";
const char* Hnt0024 = "this is a pointer type declaration because of '*'";
const char* Hnt0003 = "this is a static reference to a struct member of '%s'";
const char* Hnt0014 = "this is invalid in global scope";
const char* Hnt0012 = "this return (%s) should have type '%s'";
const char* Hnt0004 = "this should be 'const %s'";
const char* Hnt0020 = "this should be 'impl %s'";
const char* Hnt0019 = "this should be 'impl enum %s'";
const char* Hnt0013 = "this should be on another line, or separated with ';'";
const char* Hnt0011 = "this type is '%s'";
const char* Hnt0022 = "this type is immutable ('const')";
const char* Hnt0002 = "this value can only be converted to type '%s' with a dynamic call to 'opAffect'";
const char* Hnt0026 = "this should be removed";
const char* Hnt0027 = "this should be the 'loop' expression to evaluate";
const char* Hnt0028 = "this should be the 'loop' variable name or the expression to evaluate";
const char* Hnt0029 = "this should be the 'visit' expression to evaluate";
const char* Hnt0030 = "this should be the expression to dereference";
const char* Hnt0031 = "this should be the range right expression";
const char* Hnt0032 = "this type is '%s' (could be casted with 'cast(%s)')";
const char* Hnt0033 = "this evaluates to 0";
const char* Hnt0000 = "this divisor expression is zero";
const char* Hnt0034 = "this returns nothing";
const char* Hnt0035 = "this is an alias and should be an identifier";
const char* Hnt0036 = nullptr;
const char* Hnt0037 = nullptr;

const char* Note011 = "%s is marked with 'Swag.NoReturn', so the return is used inside %s";
const char* Note001 = "'%s' is %s of type '%s' which does not contain a subscope";
const char* Note010 = "'%s' is %s";
const char* Note042 = "'%s' is a function without the 'Swag.ConstExpr' attribute (you could also use '#run' before the call)";
const char* Note041 = "'%s' is a variable and variables inside expressions cannot be evaluated at compile time";
const char* Note006 = "did you mean '%s' ?";
const char* Note008 = "here is %s";
const char* Note040 = "here is '%s'";
const char* Note024 = "here is a previous declaration";
const char* Note016 = "here is another";
const char* Note025 = "here is attribute '%s'";
const char* Note000 = "here is its declaration";
const char* Note015 = "here is one";
const char* Note026 = "here is the %s";
const char* Note007 = "here is the '%s'";
const char* Note027 = "here is the declaration of '%s'";
const char* Note028 = "here is the declaration";
const char* Note029 = "here is the definition of '%s'";
const char* Note030 = "here is the definition of the tuple";
const char* Note031 = "here is the deprecated definition";
const char* Note032 = "here is the faulty attribute";
const char* Note033 = "here is the function";
const char* Note034 = "here is the missing value";
const char* Note035 = "here is the other '#import'";
const char* Note036 = "here is the other definition";
const char* Note037 = "here is the previous definition";
const char* Note038 = "here is the related command line option: '%s'";
const char* Note039 = "here is the variable declaration";
const char* Note020 = "if you want to declare a lambda, you should use 'func('";
const char* Note014 = "if you want to dereference variable '%s' like in C, use 'dref %s'";
const char* Note005 = "is there a missing 'self' ?";
const char* Note019 = "it is applied on this %s";
const char* Note012 = "note: use '-w:<path>' or '--workspace:<path>' to specifiy a valid workspace folder, or execute swag from a valid workspace folder";
const char* Note002 = "occurred %s %s'%s'";
const char* Note003 = "occurred %s";
const char* Note004 = "occurred in generated code";
const char* Note013 = "symbol has been found thanks to a 'using'";
const char* Note021 = "to close the left expression";
const char* Note023 = "to close the namespace body";
const char* Note022 = "to start the namespace body";
const char* Note018 = "when solving affectation";
const char* Note017 = "when solving";
const char* Note009 = "you can run swag with --dbgcatch to attach the bytecode debugger when the error occurs";
const char* Note043 = nullptr;
const char* Note044 = nullptr;
const char* Note045 = nullptr;

const char* Rem0001 = "symbol '%s' was not found in '%s'";
const char* Rem0002 = "symbol '%s' exists in interface scope '%s'";
const char* Rem0000 = nullptr;