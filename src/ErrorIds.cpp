#include "pch.h"
#include "Utf8.h"
#include "ErrorIds.h"

#undef SWAG_ERROR
#define SWAG_ERROR(__enum) #__enum
const char* g_EI[] = {
#include "ErrorList.h"
};

Utf8 g_E[MAX_ERRORS];
#undef SWAG_ERROR
#define SWAG_ERROR(__n, __msg)               \
    {                                        \
        SWAG_ASSERT(g_E[(int) __n].empty()); \
        g_E[(int) __n] = __msg;              \
    }
void initErrors()
{
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Fat0002, "[fatal] cache directory '%s' not found");
    SWAG_ERROR(Fat0021, "[fatal] failed due to compiler bootstrap issues");
    SWAG_ERROR(Fat0022, "[fatal] failed due to compiler runtime issues");
    SWAG_ERROR(Fat0003, "[fatal] failed to create cache directory '%s'");
    SWAG_ERROR(Fat0004, "[fatal] failed to create directory '%s'");
    SWAG_ERROR(Fat0005, "[fatal] failed to create file '%s'");
    SWAG_ERROR(Fat0006, "[fatal] failed to create public directory '%s'");
    SWAG_ERROR(Fat0007, "[fatal] failed to create script file '%s'");
    SWAG_ERROR(Fat0008, "[fatal] failed to create target directory '%s'");
    SWAG_ERROR(Fat0009, "[fatal] failed to delete directory '%s'");
    SWAG_ERROR(Fat0010, "[fatal] failed to delete file '%s'");
    SWAG_ERROR(Fat0019, "[fatal] not enough memory");
    SWAG_ERROR(Fat0015, "[fatal] invalid '--tag:%s' value (%s)");
    SWAG_ERROR(Fat0012, "[fatal] invalid module '%s'; missing configuration file '%s'");
    SWAG_ERROR(Fat0013, "[fatal] invalid script file extension; expected '.swgs' found '%s'");
    SWAG_ERROR(Fat0014, "[fatal] invalid swag command '%s'");
    SWAG_ERROR(Fat0016, "[fatal] invalid workspace '%s'; missing 'modules/' or 'tests/' subfolder");
    SWAG_ERROR(Fat0018, "[fatal] module '%s' already exists in '/modules'");
    SWAG_ERROR(Fat0020, "[fatal] script file '%s' not found");
    SWAG_ERROR(Fat0017, "[fatal] script file missing (use '--file:<filename>.swgs')");
    SWAG_ERROR(Fat0023, "[fatal] unexpected compile tag value '%s' (use '--tag:%s')");
    SWAG_ERROR(Fat0024, "[fatal] unknown compile tag type '%s' (use '--tag:%s')");
    SWAG_ERROR(Fat0025, "[fatal] workspace folder '%s' already exists");
    SWAG_ERROR(Fat0026, "[fatal] workspace folder '%s' not found");
    SWAG_ERROR(Fat0011, "[fatal] expected workspace folder '--workspace'");
    SWAG_ERROR(Fat0027, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Saf0002, "[safety 'any'] invalid cast from 'any' to '%s'");
    SWAG_ERROR(Saf0028, "[safety 'any'] null value; can't cast to '%s'");
    SWAG_ERROR(Saf0020, "[safety 'bool'] invalid boolean value");
    SWAG_ERROR(Saf0008, "[safety 'boundcheck'] index out of bounds");
    SWAG_ERROR(Saf0034, "[safety 'boundcheck'] lower bound > upper bound");
    SWAG_ERROR(Saf0004, "[safety 'boundcheck'] slice error: lower > upper");
    SWAG_ERROR(Saf0005, "[safety 'boundcheck'] slice error: upper out of bounds");
    SWAG_ERROR(Saf0003, "[safety 'math'] '@abs' overflow (type is '%s')");
    SWAG_ERROR(Saf0027, "[safety 'math'] '@acos' invalid arg (type is '%s')");
    SWAG_ERROR(Saf0026, "[safety 'math'] '@asin' invalid arg (type is '%s')");
    SWAG_ERROR(Saf0023, "[safety 'math'] '@log' invalid arg (type is '%s')");
    SWAG_ERROR(Saf0025, "[safety 'math'] '@log10' invalid arg (type is '%s')");
    SWAG_ERROR(Saf0024, "[safety 'math'] '@log2' invalid arg (type is '%s')");
    SWAG_ERROR(Saf0022, "[safety 'math'] '@sqrt' invalid arg (type is '%s')");
    SWAG_ERROR(Saf0007, "[safety 'math'] division by zero");
    SWAG_ERROR(Saf0021, "[safety 'nan'] invalid float (NaN)");
    SWAG_ERROR(Saf0001, "[safety 'null'] dereferencing a null pointer");
    SWAG_ERROR(Saf0032, "[safety 'overflow'] '%I64d' negative for unsigned '%s'");
    SWAG_ERROR(Saf0033, "[safety 'overflow'] '%I64u' unfit for type '%s'");
    SWAG_ERROR(Saf0030, "[safety 'overflow'] '%g' negative for unsigned '%s'");
    SWAG_ERROR(Saf0031, "[safety 'overflow'] '%g' unfit for type '%s'");
    SWAG_ERROR(Saf0006, "[safety 'overflow'] negative value '%s' to unsigned '%s'");
    SWAG_ERROR(Saf0010, "[safety 'overflow'] overflow in '*' (type is '%s')");
    SWAG_ERROR(Saf0009, "[safety 'overflow'] overflow in '*=' (type is '%s')");
    SWAG_ERROR(Saf0012, "[safety 'overflow'] overflow in '+' (type is '%s')");
    SWAG_ERROR(Saf0011, "[safety 'overflow'] overflow in '+=' (type is '%s')");
    SWAG_ERROR(Saf0014, "[safety 'overflow'] overflow in '-' (type is '%s')");
    SWAG_ERROR(Saf0013, "[safety 'overflow'] overflow in '-=' (type is '%s')");
    SWAG_ERROR(Saf0015, "[safety 'overflow'] overflow in '<<' (type is '%s')");
    SWAG_ERROR(Saf0016, "[safety 'overflow'] overflow in '>>' (type is '%s')");
    SWAG_ERROR(Saf0017, "[safety 'overflow'] overflow in negative (type is '%s')");
    SWAG_ERROR(Saf0018, "[safety 'overflow'] truncation from '%s' to '%s'");
    SWAG_ERROR(Saf0029, "[safety 'overflow'] value '%s' ('%I64u' in decimal) unfit for type '%s'");
    SWAG_ERROR(Saf0019, "[safety 'switch'] switch unexpected value ('Swag.Complete')");
    SWAG_ERROR(Saf0035, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(San0006, "[sanity] null %s dereference: '%s'");
    SWAG_ERROR(San0005, "[sanity] null pointer dereference");
    SWAG_ERROR(San0002, "[sanity] return of %s: '%s'");
    SWAG_ERROR(San0001, "[sanity] return of local or temporary variable");
    SWAG_ERROR(San0010, "[sanity] stack overflow: offset '%lld', size '%lld'");
    SWAG_ERROR(San0004, "[sanity] uninitialized %s usage: '%s'");
    SWAG_ERROR(San0003, "[sanity] uninitialized stack memory usage");
    SWAG_ERROR(San0007, "[sanity] division by zero");
    SWAG_ERROR(San0008, "[sanity] division by zero: %s '%s'");
    SWAG_ERROR(San0009, nullptr);
    SWAG_ERROR(San0011, nullptr);
    SWAG_ERROR(San0012, nullptr);
    SWAG_ERROR(San0013, nullptr);
    SWAG_ERROR(San0014, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Tkn0001, "incomplete binary number format                   $ binary literals require at least one '0' or '1' digit");
    SWAG_ERROR(Tkn0007, "incomplete hexadecimal number format              $ hexadecimal literals require at least one valid digit (0-9, A-F, a-f)");
    SWAG_ERROR(Tkn0023, "invalid float number format                       $ the fractional part should not start with '_'");
    SWAG_ERROR(Tkn0024, "invalid float number format                       $ the exponent part should not start with '_'");
    SWAG_ERROR(Tkn0002, "invalid float number format                       $ exponent in the scientific notation must contain at least one digit");
    SWAG_ERROR(Tkn0003, "invalid binary number format                      $ binary literals should only contain '0' or '1', found '%s' instead");
    SWAG_ERROR(Tkn0017, "invalid compiler directive                        $ '%s' is not a valid compiler directive starting with '#'");
    SWAG_ERROR(Tkn0027, "invalid intrinsic                                 $ '%s' is not a valid intrinsic starting with '@'");
    SWAG_ERROR(Tkn0004, "invalid hexadecimal number format                 $ hexadecimal literals can only contain digits 0-9, A-F, and a-f, found '%s' instead");
    SWAG_ERROR(Tkn0020, "invalid number format                             $ consecutive digit separators '_' are not allowed");
    SWAG_ERROR(Tkn0009, "invalid number format                             $ this hexadecimal number has too many digits to fit within a 64-bit representation");
    SWAG_ERROR(Tkn0029, "invalid number format                             $ this binary number has too many digits to fit within a 64-bit representation");
    SWAG_ERROR(Tkn0021, "invalid number format                             $ a number should not end with a digit separator '_'");
    SWAG_ERROR(Tkn0022, "invalid number format                             $ a number should not start with a digit separator '_'");
    SWAG_ERROR(Tkn0019, "invalid number prefix                             $ expected '0x' for hexadecimal or '0b' for binary, found '%s' instead");
    SWAG_ERROR(Tkn0008, "number out of range                               $ this literal number exceeds 64 bits and is out of allowable range");
    SWAG_ERROR(Tkn0028, "invalid character                                 $ the character '%s' is not recognized in this context");
    SWAG_ERROR(Tkn0025, "unexpected end of file within comment             $ this multi-line comment is missing its closing '*/'");
    SWAG_ERROR(Tkn0026, "character literal is missing its closing backtick $ expected a closing backtick '`' before the end of the line");
    SWAG_ERROR(Tkn0018, "string literal is missing its closing '\"'        $ expected a closing quotation mark '\"' before the end of the line $ if you want a multi-line string, use the syntax \"\"\"string\"\"\"");
    SWAG_ERROR(Tkn0030, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Syn0001, "'#global export' already defined                  $ only one '#global export' is allowed per file");
    SWAG_ERROR(Syn0181, "'default' already defined                         $ only one 'default' statement is allowed per 'switch'");
    SWAG_ERROR(Syn0123, "'impl' kind mismatch                              $ this implementation kind (%s) and the type of '%s' (%s) are not the same");
    SWAG_ERROR(Syn0031, "access modifier already defined                   $ invalid use of '%s' access modifier previously specifying '%s'");
    SWAG_ERROR(Syn0200, "ambiguous syntax                                  $ ambiguity arises between initializing '%s' and starting a new block");
    SWAG_ERROR(Syn0195, "ambiguous syntax                                  $ ambiguous declaration within lambda type parameters");
    SWAG_ERROR(Syn0116, "duplicated '#import' location                     $ the '#import' location has already been defined");
    SWAG_ERROR(Syn0117, "duplicated '#import' version                      $ the '#import' version has already been defined");
    SWAG_ERROR(Syn0125, "duplicated instruction modifier                   $ the instruction modifier '%s' has already been defined");
    SWAG_ERROR(Syn0015, "empty '#mixin' replacement block                  $ an empty 'mixin' block is useless $ add some content to the '#mixin' block or consider removing it");
    SWAG_ERROR(Syn0158, "empty 'case' statement                            $ a 'case' statement should never be empty");
    SWAG_ERROR(Syn0052, "empty 'default' statement                         $ a 'default' statement should never be empty");
    SWAG_ERROR(Syn0124, "empty array literal                               $ an array literal should contain at least one value");
    SWAG_ERROR(Syn0054, "empty compiler function body                      $ %s requires a body; expected '{' but found ';' instead");
    SWAG_ERROR(Syn0093, "empty namespace name                              $ expected the namespace name before '%s'");
    SWAG_ERROR(Syn0048, "expected '%s'                                     $ expected '%s' %s, found '%s' instead");
    SWAG_ERROR(Syn0019, "identifier expected                               $ expected a function call after '%s', found '%s' instead");
    SWAG_ERROR(Syn0217, "incompatible use of 'moveref' qualifier           $ the 'moveref' qualifier can't be combined with an immutable ('const') expression");
    SWAG_ERROR(Syn0186, "incompatible use of cast modifiers                $ the '%s' and '%s' cast modifiers are mutually exclusive and can't be used together");
    SWAG_ERROR(Syn0056, "incomplete 'case' expression list                 $ expected another expression after ',' and before ':' $ ',' indicates a list of 'case' expressions; provide the next expression or consider removing the ','");
    SWAG_ERROR(Syn0199, "incomplete alias list                             $ expected another alias name after ',' $ either provide an additional alias name or remove the trailing ','");
    SWAG_ERROR(Syn0201, "incomplete arguments list                         $ expected another call argument after ',' $ either provide an additional argument or remove the trailing ','");
    SWAG_ERROR(Syn0202, "incomplete parameters list                        $ expected another parameter after ',' $ either provide an additional parameter or remove the trailing ','");
    SWAG_ERROR(Syn0171, "incomplete variables list                         $ expected another variable name after ',' $ either provide an additional variable name or remove the trailing ','");
    SWAG_ERROR(Syn0176, "incomplete tuple unpacking                        $ expected another variable name after ',' $ either provide an additional variable name or remove the trailing ','");
    SWAG_ERROR(Syn0047, "incomplete indexing                               $ expected another expression after ',' $ either provide an additional expression or remove the trailing ','");
    SWAG_ERROR(Syn0213, "incomplete array dimensions                       $ expected another dimension after ',' $ either provide an additional dimension or remove the trailing ','");
    SWAG_ERROR(Syn0136, "invalid '#global' instruction                     $ '%s' is not recognized as a valid '#global' instruction");
    SWAG_ERROR(Syn0109, "invalid '#import' location                        $ expected a '#import' location path, found '%' instead");
    SWAG_ERROR(Syn0113, "invalid '#import' location                        $ expected a '#import' version as a string, found '%' instead");
    SWAG_ERROR(Syn0016, "invalid '#mixin' replacement keyword              $ a '#mixin' block accepts only 'break' and 'continue' as replacements, found '%s' instead");
    SWAG_ERROR(Syn0164, "invalid '#scope' identifier                       $ expected the '#scope' identifier, found '%s' instead");
    SWAG_ERROR(Syn0211, "invalid '#up' count                               $ expected an integer literal for the '#up' count, found '%s' instead");
    SWAG_ERROR(Syn0082, "invalid '#up' count                               $ the '#up' count can't be zero");
    SWAG_ERROR(Syn0210, "invalid '#up' count                               $ the '#up' count should be an untype integer in the range [1, 255], found '%s'");
    SWAG_ERROR(Syn0169, "invalid '@alias' number                           $ '@alias' variable names should end with a number, found '%s' instead");
    SWAG_ERROR(Syn0168, "invalid '@mixin' number                           $ '@mixin' variable names should end with a number, found '%s' instead");
    SWAG_ERROR(Syn0108, "invalid 'break' scope name                        $ expected the scope name after 'break', found '%' instead");
    SWAG_ERROR(Syn0142, "invalid 'defer' mode                              $ '%s' is not a valid 'defer' mode $ the valid defer modes are 'defer(err)' and 'defer(noerr)'");
    SWAG_ERROR(Syn0173, "invalid 'discard' call                            $ expected a discardable call after 'discard', found '%s' instead");
    SWAG_ERROR(Syn0053, "invalid 'switch' block content                    $ expected 'case' or 'default', found '%s' instead");
    SWAG_ERROR(Syn0115, "invalid 'visit' name                              $ expected a 'visit' specialized name, found '%s' instead");
    SWAG_ERROR(Syn0148, "invalid 'with' expression                         $ expected a 'with' valid expression");
    SWAG_ERROR(Syn0071, "invalid alias name                                $ expected the alias name after '%s', found '%s' instead");
    SWAG_ERROR(Syn0218, "invalid alias name                                $ expected an identifier for name aliasing, found '%s' instead");
    SWAG_ERROR(Syn0190, "invalid assignment                                $ assignments are not allowed for unnamed parameters ('?')");
    SWAG_ERROR(Syn0072, "invalid attribute name                            $ expected an attribute name, found '%s' instead");
    SWAG_ERROR(Syn0050, "invalid attribute usage                           $ expected ',' for a new attribute name, or ']' to end the list, found '%s' instead");
    SWAG_ERROR(Syn0104, "invalid auto-generated 'impl' block               $ 'impl' block generation is permissible only within a '#message' with 'Swag.CompilerMsgMask.AttributeGen'");
    SWAG_ERROR(Syn0207, "invalid block start                               $ a block start '{' is not allowed after 'discard try/assume/catch'");
    SWAG_ERROR(Syn0094, "invalid character syntax                          $ characters should be delimited with backticks '`' and not quotes $ consider using the syntax `%s` instead");
    SWAG_ERROR(Syn0049, "invalid closure parameters                        $ expected '(' to start the list of parameters of the closure, found '%s' instead");
    SWAG_ERROR(Syn0062, "invalid compound name                             $ expected a single identifier %s $ consider using a single name without the '.' character");
    SWAG_ERROR(Syn0184, "invalid constant name                             $ expected a constant name, found '%s' instead");
    SWAG_ERROR(Syn0193, "invalid default value                             $ 'self' can't have a default value");
    SWAG_ERROR(Syn0194, "invalid default value                             $ lambda parameters can't have a default value");
    SWAG_ERROR(Syn0073, "invalid embedded instruction                      $ expected an embedded instruction or a curly block, found '%s' instead");
    SWAG_ERROR(Syn0159, "invalid empty attribute                           $ an attribute should contain at least one value $ you should specify the attribute name between '[]'");
    SWAG_ERROR(Syn0187, "invalid empty statement ';'                       $ a semicolon ';' can't be used alone to mark an empty statement");
    SWAG_ERROR(Syn0075, "invalid enum identifier                           $ expected an enum value identifier, found '%s' instead");
    SWAG_ERROR(Syn0074, "invalid enum name                                 $ expected the enum name, found '%s' instead");
    SWAG_ERROR(Syn0059, "invalid expression                                $ expected an expression, found '%s' instead");
    SWAG_ERROR(Syn0076, "invalid expression                                $ expected an expression after %s, found '%s' instead");
    SWAG_ERROR(Syn0020, "invalid expression                                $ the directive '%s' can't be used as an expression $ this directive can only be used as a statement");
    SWAG_ERROR(Syn0133, "invalid function declaration                      $ expected 'func' or 'mtd' to declare an interface function, found '%s' instead $ to declare a function within an interface, use 'func' or 'mtd'");
    SWAG_ERROR(Syn0106, "invalid function name                             $ a function name ('%s') can't start with '@', this is reserved for intrinsics");
    SWAG_ERROR(Syn0089, "invalid function name                             $ expected a function name, found '%s'");
    SWAG_ERROR(Syn0058, "invalid generic parameter name                    $ expected an identifier as the generic name, found '%s' instead");
    SWAG_ERROR(Syn0078, "invalid identifier                                $ expected an identifier, found '%s' instead");
    SWAG_ERROR(Syn0077, "invalid identifier                                $ expected an identifier here");
    SWAG_ERROR(Syn0157, "invalid identifier list                           $ 'with' does not support multiple identifiers");
    SWAG_ERROR(Syn0105, "invalid logical operator                          $ expected '%s' for logical test, found '%s' instead");
    SWAG_ERROR(Syn0110, "invalid named argument                            $ expected a named argument before ':', found '%s' instead");
    SWAG_ERROR(Syn0041, "invalid namespace name                            $ expected the namespace name, found '%s' instead");
    SWAG_ERROR(Syn0178, "invalid operator modifier                         $ '%s' is not recognized as a valid operator modifier");
    SWAG_ERROR(Syn0112, "invalid parameter name                            $ expected a parameter name, found '%s' instead");
    SWAG_ERROR(Syn0167, "invalid pass name                                 $ '%s' is not recognized as a valid compiler pass name");
    SWAG_ERROR(Syn0022, "invalid reference to 'with' block                 $ an identifier is expected after '.', found '%s' instead");
    SWAG_ERROR(Syn0128, "invalid struct initialization                     $ expected '{}' to initialize a struct, and not '()' which is reserved for function calls");
    SWAG_ERROR(Syn0063, "invalid struct name                               $ expected the struct name, found '%s' instead");
    SWAG_ERROR(Syn0064, "invalid top-level instruction                     $ expected a top-level instruction, found '%s' instead");
    SWAG_ERROR(Syn0066, "invalid type declaration                          $ expected a type declaration, found '%s' instead");
    SWAG_ERROR(Syn0096, "invalid type declaration                          $ expected the array type after its dimensions, found '%s' instead");
    SWAG_ERROR(Syn0067, "invalid type declaration                          $ expected a type in the tuple definition, found '%s' instead");
    SWAG_ERROR(Syn0060, "invalid type suffix                               $ expected an identifier or a type after the start of a type suffix ''', found '%s' instead");
    SWAG_ERROR(Syn0034, "invalid use of '#mixin' block                     $ a '#mixin' block is only valid within a breakable statement such as 'loop', 'visit', 'for', etc.");
    SWAG_ERROR(Syn0121, "invalid use of access modifier                    $ the '%s' access modifier can only be used at the global scope");
    SWAG_ERROR(Syn0065, "invalid variable list                             $ 'if' does not support multiples variable declarations");
    SWAG_ERROR(Syn0111, "invalid variable name                             $ a variable name ('%s') can't start with '@', this is reserved for intrinsics $ only '@mixin' and '@alias' are possible in that case");
    SWAG_ERROR(Syn0069, "invalid variable name                             $ expected a variable name, found '%s' instead");
    SWAG_ERROR(Syn0161, "invalid variable name                             $ unexpected generic parameters after variable name '%s'");
    SWAG_ERROR(Syn0216, "invalid variable name                             $ unexpected parameters after variable name '%s'");
    SWAG_ERROR(Syn0183, "misplaced '#dependencies'                         $ '#dependencies' can only be used within 'module.swg' or '.swgs' files");
    SWAG_ERROR(Syn0182, "misplaced '#dependencies'                         $ '#dependencies' must be placed at the file level");
    SWAG_ERROR(Syn0003, "misplaced '#global testerror'                     $ '#global testerror' is only valid in a test file from the './tests' folder");
    SWAG_ERROR(Syn0004, "misplaced '#global testwarning'                   $ '#global testwarning' is only valid in a test file from the './tests' folder");
    SWAG_ERROR(Syn0005, "misplaced '#global using'                         $ '#global using' can only be used within 'module.swg' or '.swgs' files");
    SWAG_ERROR(Syn0006, "misplaced '#global' directive                     $ '#global' should be placed at the very top of the file");
    SWAG_ERROR(Syn0009, "misplaced '#import'                               $ '#import' can only be used within 'module.swg' or '.swgs' files");
    SWAG_ERROR(Syn0008, "misplaced '#import'                               $ '#import' must be placed just under a '#dependencies' block");
    SWAG_ERROR(Syn0010, "misplaced '#import'                               $ '#import' must be placed within the '#dependencies' block");
    SWAG_ERROR(Syn0013, "misplaced '#include'                              $ '#include' can only be used within 'module.swg' or '.swgs' files");
    SWAG_ERROR(Syn0012, "misplaced '#include'                              $ '#include' must be placed just under a '#dependencies' block");
    SWAG_ERROR(Syn0014, "misplaced '#include'                              $ '#include' must be placed within the '#dependencies' block");
    SWAG_ERROR(Syn0035, "misplaced '#placeholder'                          $ '#placeholder' must be placed within a top level scope");
    SWAG_ERROR(Syn0135, "misplaced 'Self' type                             $ the 'Self' type is only valid within an 'impl', 'struct', or 'interface' block");
    SWAG_ERROR(Syn0045, "misplaced 'const'                                 $ expected 'self' after 'const' when declaring a function parameter, found '%s' instead");
    SWAG_ERROR(Syn0061, "misplaced 'const' qualifier                       $ the 'const' qualifier is not allowed for 'func', but only for 'mtd'");
    SWAG_ERROR(Syn0039, "misplaced 'mtd'                                   $ 'mtd' is only valid within a struct implementation block $ you could replace 'mtd' with 'func'");
    SWAG_ERROR(Syn0038, "misplaced 'mtd' in enum                           $ 'mtd' is only valid within a struct implementation block $ you could replace 'mtd' with 'func'");
    SWAG_ERROR(Syn0027, "misplaced 'self'                                  $ the 'self' keyword is only valid within an 'impl' block of an enum or a struct");
    SWAG_ERROR(Syn0028, "misplaced 'throw'                                 $ raising an error with 'throw' is only valid within a function, macro or mixin");
    SWAG_ERROR(Syn0029, "misplaced 'using' in interface                    $ 'using' can't be associated with an interface member");
    SWAG_ERROR(Syn0174, "misplaced access modifier                         $ misuse of '%s' before '%s'; '%s' can't be prefixed with an access modifier");
    SWAG_ERROR(Syn0120, "misplaced array size                              $ the size of the array must be placed before the type name");
    SWAG_ERROR(Syn0150, "misplaced attribute                               $ unexpected start of an attribute after '%s' $ attributes should be placed before access modifiers; consider moving the attribute before '%s'");
    SWAG_ERROR(Syn0153, "misplaced closure                                 $ a closure definition is not valid at the global level $ closures can only be defined within functions");
    SWAG_ERROR(Syn0147, "misplaced error catching                          $ '%s' can't be nested in a '%s' expression $ you should use only one 'try', 'catch' or 'assume'");
    SWAG_ERROR(Syn0021, "misplaced error catching                          $ treating a return error with '%s' can only be done inside a function, macro or mixin");
    SWAG_ERROR(Syn0163, "misplaced function declaration                    $ functions can't be directly declared inside structs $ functions associated with structs should be declared inside 'impl' blocks");
    SWAG_ERROR(Syn0040, "misplaced namespace                               $ a namespace should be defined in the top-level scope or within another namespace");
    SWAG_ERROR(Syn0180, "misplaced reference to 'with' block               $ statements starting with the '.' operator are only valid within a 'with' block");
    SWAG_ERROR(Syn0036, "misplaced top-level 'using'                       $ a top-level 'using' must be placed before any other declarations");
    SWAG_ERROR(Syn0177, "misplaced tuple unpacking                         $ tuple unpacking is not allowed in %s");
    SWAG_ERROR(Syn0002, "missing '#foreignlib' string argument             $ expected the library name after '#foreignlib', found '%s' instead $ use '#foreignlib \"path/to/library\"' to specify the library to import");
    SWAG_ERROR(Syn0204, "missing '#global testerror' string argument       $ expected the error string to check after '#global testerror', found '%s' instead");
    SWAG_ERROR(Syn0205, "missing '#global testwarning' string argument     $ expected the warning string to check after '#global testwarning', found '%s' instead");
    SWAG_ERROR(Syn0083, "missing '#if' boolean expression                  $ expected a boolean expression before '%s'");
    SWAG_ERROR(Syn0007, "missing '#import' string argument                 $ expected the module name to import after '#import', found '%s' instead");
    SWAG_ERROR(Syn0011, "missing '#include' string argument                $ expected the file name to include after '#include', found '%s' instead");
    SWAG_ERROR(Syn0033, "missing '#message' parameter                      $ '#message' requests a parameter of type 'Swag.CompilerMsgMask'");
    SWAG_ERROR(Syn0017, "missing '#placeholder' identifier                 $ expected an identifier after '#placeholder', found '%s' instead");
    SWAG_ERROR(Syn0196, "missing '#type' type                              $ expected a valid type after '#type', found '%s' instead");
    SWAG_ERROR(Syn0175, "missing '(' before arguments                      $ expected '(' to start the list of arguments, found '%s' instead");
    SWAG_ERROR(Syn0203, "missing '(' before parameters                     $ expected '(' to start the list of parameters, found '%s' instead");
    SWAG_ERROR(Syn0051, "missing ':'                                       $ a ':' is expected here after the 'loop' variable name '%s' $ syntax is 'loop [variable:] count'");
    SWAG_ERROR(Syn0023, "missing '@alias' number                           $ '@alias' variable names should end with a number such as '@alias0', '@alias1', etc.");
    SWAG_ERROR(Syn0119, "missing '@mixin' number                           $ '@mixin' variable names should end with a number such as '@mixin0', '@mixin1', etc.");
    SWAG_ERROR(Syn0055, "missing 'case' expression                         $ expected the 'case' expression before '%s'");
    SWAG_ERROR(Syn0057, "missing 'closure' capture variable                $ expected another capture variable between ',' and '|' $ add another variable or consider removing the trailing comma");
    SWAG_ERROR(Syn0084, "missing 'if' boolean expression                   $ expected a boolean expression before '%s'");
    SWAG_ERROR(Syn0085, "missing 'loop' count                              $ expected the 'loop' count expression before '%s'");
    SWAG_ERROR(Syn0086, "missing 'visit' expression                        $ expected the element to visit before '%s'");
    SWAG_ERROR(Syn0214, "missing 'visit' name                              $ expected the 'visit' specialized name between '()' $ if you are using the default 'visit', consider removing the parenthesis");
    SWAG_ERROR(Syn0212, "missing 'visit' variable                          $ expected another 'visit' variable between ',' and ':' $ the first 'visit' variable is the value, the second one is the index");
    SWAG_ERROR(Syn0087, "missing 'while' boolean expression                $ expected a boolean expression before '%s'");
    SWAG_ERROR(Syn0026, "missing attribute name                            $ expected an attribute name before '('");
    SWAG_ERROR(Syn0070, "missing constant type                             $ expected ':' followed by the type or an assignment with '=', found '%s' instead");
    SWAG_ERROR(Syn0037, "missing end of line                               $ expected a line break or a ';' to close the %s, found '%s' instead $ consider adding a line break or separating the previous statement with a ';'");
    SWAG_ERROR(Syn0140, "missing enum name                                 $ expected the enum name before the start of the body '{'");
    SWAG_ERROR(Syn0146, "missing enum name                                 $ expected the enum name before the start of the type definition ':'");
    SWAG_ERROR(Syn0091, "missing function parameters                       $ expected the function parameters between '()' before the start of the body '{' $ if you want to declare a function without parameters, consider adding '()' after the name");
    SWAG_ERROR(Syn0092, "missing generic parameters                        $ expected at least one generic parameter between '()' $ consider removing '()' if this is not generic");
    SWAG_ERROR(Syn0044, "missing intrinsic arguments                       $ expected the intrinsic arguments between '()'");
    SWAG_ERROR(Syn0090, "missing lambda parameter type                     $ expected ':' followed by the type or an assignment with '=' $ when declaring lambda parameters, you should not combined inferred and explicit types");
    SWAG_ERROR(Syn0185, "missing slicing upper bound                       $ expected an upper bound expression after '..<' $ if you want to slice to the end, consider using '..' instead");
    SWAG_ERROR(Syn0025, "missing struct name                               $ expected the struct name before the start of the body '{'");
    SWAG_ERROR(Syn0068, "missing closing '%s'                              $ expected '%s' %s, found '%s' instead");
    SWAG_ERROR(Syn0172, "missing variable type                             $ expected ':' followed by the type or an assignment with '=', found '%s' instead");
    SWAG_ERROR(Syn0209, "out of range '#up' count                          $ the '#up' count should be in the range [1, 255], found '%u'");
    SWAG_ERROR(Syn0043, "out of range '@alias' number                      $ an '@alias' number should be in the range [0, 31], found '%u'");
    SWAG_ERROR(Syn0032, "out of range '@mixin' number                      $ a '@mixin' number should be in the range [0, 31], found '%u'");
    SWAG_ERROR(Syn0132, "out of range array dimensions                     $ array dimensions can't exceed '254'");
    SWAG_ERROR(Syn0018, "redundant access modifier                         $ the '%s' access modifier is unnecessary because of '#global export' $ consider removing the 'public' modifier, as '#global export' ensures all declarations in this file are publicly accessible");
    SWAG_ERROR(Syn0122, "reserved identifier                               $ the identifier '%s' starts with '__', this is language-reserved $ identifiers starting with '__' are typically reserved for compiler-internal or system use");
    SWAG_ERROR(Syn0118, "reserved namespace name                           $ the namespace '%s' is reserved by the compiler");
    SWAG_ERROR(Syn0097, "unexpected '#elif'                                $ '#elif' found without a preceding '#if' directive");
    SWAG_ERROR(Syn0098, "unexpected '#else'                                $ '#else' found without a preceding '#if' or '#elif' directive");
    SWAG_ERROR(Syn0137, "unexpected '#validif/#validifx'                   $ the '#validif/#validifx' directive is not allowed on special function '%s' $ '#validif' and '#validifx' are not valid for 'opDrop', 'opPostCopy', and 'opPostMove'");
    SWAG_ERROR(Syn0215, "unexpected '#validifx' in struct                  $ '#validifx' is not allowed for a struct, this is only valid for functions $ consider using '#validif' instead");
    SWAG_ERROR(Syn0139, "unexpected '['                                    $ nested square brackets '[..][..]' are not allowed for multi-dimensional array access $ to access elements in a multi-dimensional array, use the format [x, y] and not [x][y]");
    SWAG_ERROR(Syn0192, "unexpected 'const'                                $ unexpected 'const' before a lambda parameter name");
    SWAG_ERROR(Syn0101, "unexpected 'elif'                                 $ 'elif' found without a preceding 'if'");
    SWAG_ERROR(Syn0102, "unexpected 'else'                                 $ 'else' found without a preceding 'if' or 'elif'");
    SWAG_ERROR(Syn0143, "unexpected 'for' keyword                          $ the 'for' keyword is not valid in an enum implementation");
    SWAG_ERROR(Syn0095, "unexpected 'mtd'                                  $ expected 'func' or 'closure' instead of 'mtd' to declare a lambda type");
    SWAG_ERROR(Syn0144, "unexpected 'retval' return type                   $ 'retval' is only valid as a local variable type");
    SWAG_ERROR(Syn0088, "unexpected 'throw' qualifier                      $ an attribute can't have the 'throw' qualifier as it can't raise errors");
    SWAG_ERROR(Syn0030, "unexpected 'var' in struct                        $ 'var' is unnecessary in struct variable declarations $ struct variables should be declared as 'fieldName: Type' without 'var'");
    SWAG_ERROR(Syn0099, "unexpected ')'                                    $ symbol ')' found without a preceding '('");
    SWAG_ERROR(Syn0100, "unexpected ']'                                    $ symbol ']' found without a preceding '['");
    SWAG_ERROR(Syn0103, "unexpected '}'                                    $ symbol '}' found without a preceding '{'");
    SWAG_ERROR(Syn0208, "unexpected affectation                            $ unexpected usage of the assignement operator '=' inside an expression");
    SWAG_ERROR(Syn0138, "unexpected attribute return type                  $ an attribute can't have a return type starting with '->'");
    SWAG_ERROR(Syn0149, "unexpected comparison                             $ expected an affectation with '=' but found the comparison operator '==' instead");
    SWAG_ERROR(Syn0160, "unexpected empty expression                       $ the expression '()' is empty and not allowed here");
    SWAG_ERROR(Syn0188, "unexpected end of comment                         $ unexpected end of multi-line comment '*/' after %s $ beginning '/*' of multi-line comment is missing");
    SWAG_ERROR(Syn0162, "unexpected generic parameters                     $ expected an non-generic name without generic parameters starting with '''");
    SWAG_ERROR(Syn0191, "unexpected lambda parameter name                  $ unexpected name when declaring a lambda type $ consider removing the name");
    SWAG_ERROR(Syn0170, "unexpected lambda parameter type                  $ unexpected type $ when declaring lambda parameters, you should not combined inferred and explicit types");
    SWAG_ERROR(Syn0165, "unexpected lambda return type                     $ unexpected return type when parameters type are inferred $ when inferring lambda parameter types, the return type should also be inferred");
    SWAG_ERROR(Syn0024, "unexpected line break in array type declaration   $ the type of the array should be placed on the same line as the array dimensions");
    SWAG_ERROR(Syn0126, "unexpected operator modifier                      $ the operator modifier '%s' can't be applied to '%s'");
    SWAG_ERROR(Syn0198, "unexpected symbol                                 $ unexpected symbol '%s' after the identifier '%s' $ did you forget 'var' or 'const' to declare a global variable or constant?");
    SWAG_ERROR(Syn0042, "unexpected tuple unpacking name                   $ expected a variable name or '?' when unpacking a tuple, found '%s' instead");
    SWAG_ERROR(Syn0197, "unexpected type declaration                       $ unexpected type declaration after 'self' $ 'self' is implicitly typed; consider removing the redundant type");
    SWAG_ERROR(Syn0189, "unexpected type declaration                       $ unexpected type declaration after unnamed parameters");
    SWAG_ERROR(Syn0219, "unexpected type suffix                            $ %s should not be followed by a type suffix");
    SWAG_ERROR(Syn0134, "unsupported tuple type                            $ tuple types are not supported for generic parameters");
    SWAG_ERROR(Syn0179, "unused return value                               $ the return value of the intrinsic '%s' should be used");
    SWAG_ERROR(Syn0046, nullptr);
    SWAG_ERROR(Syn0107, nullptr);
    SWAG_ERROR(Syn0114, nullptr);
    SWAG_ERROR(Syn0166, nullptr);
    SWAG_ERROR(Syn0079, nullptr);
    SWAG_ERROR(Syn0206, nullptr);
    SWAG_ERROR(Syn0131, nullptr);
    SWAG_ERROR(Syn0220, nullptr);
    SWAG_ERROR(Syn0080, nullptr);
    SWAG_ERROR(Syn0081, nullptr);
    SWAG_ERROR(Syn0129, nullptr);
    SWAG_ERROR(Syn0130, nullptr);
    SWAG_ERROR(Syn0141, nullptr);
    SWAG_ERROR(Syn0145, nullptr);
    SWAG_ERROR(Syn0151, nullptr);
    SWAG_ERROR(Syn0152, nullptr);
    SWAG_ERROR(Syn0154, nullptr);
    SWAG_ERROR(Syn0155, nullptr);
    SWAG_ERROR(Syn0156, nullptr);
    SWAG_ERROR(Syn0127, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Wrn0003, "deprecated usage          $ %s '%s' is deprecated (attribute 'Swag.Deprecated')");
    SWAG_ERROR(Wrn0002, "unused %s                 $ %s '%s' is not used");
    SWAG_ERROR(Wrn0001, "unreachable code          $ this code is not reachable and will never execute");
    SWAG_ERROR(Wrn0009, "unchanged local variable  $ the variable '%s' remains unchanged after its declaration $ if you don't intend to modify it, consider declaring it with 'let' instead of 'var' for immutability");
    SWAG_ERROR(Wrn0010, "unchanged local variable  $ the variable 'a' is declared but its value is never set or modified");
    SWAG_ERROR(Wrn0011, "%s");
    SWAG_ERROR(Wrn0004, nullptr);
    SWAG_ERROR(Wrn0005, nullptr);
    SWAG_ERROR(Wrn0006, nullptr);
    SWAG_ERROR(Wrn0007, nullptr);
    SWAG_ERROR(Wrn0008, nullptr);
    SWAG_ERROR(Wrn0012, nullptr);
    SWAG_ERROR(Wrn0013, nullptr);
    SWAG_ERROR(Wrn0014, nullptr);
    SWAG_ERROR(Wrn0015, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Err0113, "overload ambiguity            $ %d overloads found for '%s', but none matched the provided arguments");
    SWAG_ERROR(Err0520, "mismatch access               $ %s '%s' can't be public due to %s '%s' with '%s' access");
    SWAG_ERROR(Err0013, "not a value                   $ %s '%s' is not a valid value in this context");
    SWAG_ERROR(Err0003, "not a value                   $ this is an implicit reference to a static struct member of '%s'");
    SWAG_ERROR(Err0305, "symbol already defined        $ the %s '%s' has already been defined %s");

    SWAG_ERROR(Err0097, "%s '%s' isn't used as the first parameter in '%s'");
    SWAG_ERROR(Err0112, "%s '%s' not found in '%s'");
    SWAG_ERROR(Err0521, "%s '%s' not used as primary argument for function '%s'");
    SWAG_ERROR(Err0086, "%s '%s' used only to scope function '%s'");
    SWAG_ERROR(Err0747, "%s can't be public");
    SWAG_ERROR(Err0512, "%s can't have 'Swag.CalleeReturn' attribute");
    SWAG_ERROR(Err0763, "%s can't have 'Swag.Inline' attribute");
    SWAG_ERROR(Err0761, "%s can't have 'Swag.Macro' attribute");
    SWAG_ERROR(Err0762, "%s can't have 'Swag.Mixin' attribute");
    SWAG_ERROR(Err0860, "%s can't have 'Swag.NotGeneric' attribute");
    SWAG_ERROR(Err0757, "%s can't have both 'Swag.Macro' and 'Swag.Inline'");
    SWAG_ERROR(Err0758, "%s can't have both 'Swag.Macro' and 'Swag.Mixin'");
    SWAG_ERROR(Err0759, "%s can't have both 'Swag.Mixin' and 'Swag.Inline'");
    SWAG_ERROR(Err0760, "%s can't have both 'Swag.Mixin' and 'Swag.Macro'");
    SWAG_ERROR(Err0505, "%s exceeded, max size is '0x%I64x' bytes");
    SWAG_ERROR(Err0755, "%s must have 'Swag.Macro' or 'Swag.Mixin' to use 'Swag.CalleeReturn'");
    SWAG_ERROR(Err0606, "%s must return a value");
    SWAG_ERROR(Err0738, "%s needs a default value as preceding parameter has one");
    SWAG_ERROR(Err0777, "%s of %s yields invalid generic type ('%s' to '%s')");
    SWAG_ERROR(Err0749, "%s returns type '%s' but lacks 'return' in body");
    SWAG_ERROR(Err0834, "%s size exceeded");
    SWAG_ERROR(Err0433, "%s");
    SWAG_ERROR(Err0567, "%s");
    SWAG_ERROR(Err0401, "%s");
    SWAG_ERROR(Err0234, "'#ast' must be string type (got '%s')");
    SWAG_ERROR(Err0255, "'#callerfunction' is for function parameter declarations only");
    SWAG_ERROR(Err0254, "'#callerlocation' is for function parameter declarations only");
    SWAG_ERROR(Err0336, "'#import' has build number ('%d') but lacks revision");
    SWAG_ERROR(Err0335, "'#import' has revision ('%d') but lacks major version");
    SWAG_ERROR(Err0284, "'#import' location already defined as '%s'");
    SWAG_ERROR(Err0288, "'#import' version format is invalid");
    SWAG_ERROR(Err0286, "'#import' version is '%s'");
    SWAG_ERROR(Err0243, "'#load' requires string type (got '%s')");
    SWAG_ERROR(Err0239, "'#macro' is for 'Swag.Macro' functions only");
    SWAG_ERROR(Err0269, "'#main' function expected");
    SWAG_ERROR(Err0739, "'#main' function previously defined");
    SWAG_ERROR(Err0804, "'#message' block needs 'Swag.CompilerMsgMask' param (given: '%s')");
    SWAG_ERROR(Err0198, "'#run' block not for expression use");
    SWAG_ERROR(Err0348, "'#self' is for functions only");
    SWAG_ERROR(Err0744, "'#test' functions are for test modules in './tests'");
    SWAG_ERROR(Err0136, "'#up' identifier valid only within 'Swag.Macro' function");
    SWAG_ERROR(Err0617, "'#validif' validation failed for '%s'");
    SWAG_ERROR(Err0176, "'%s' (or 'using' field) doesn't implement '%s', so struct-to-interface cast not allowed");
    SWAG_ERROR(Err0089, "'%s' can't be compile-time evaluated");
    SWAG_ERROR(Err0085, "'%s' can't be dereferenced as struct or pointer to struct (type is '%s')");
    SWAG_ERROR(Err0194, "'%s' can't be dereferenced by index; pointer arithmetic not allowed");
    SWAG_ERROR(Err0788, "'%s' can't have 'null' as the first parameter");
    SWAG_ERROR(Err0498, "'%s' count must be integer, found '%s'");
    SWAG_ERROR(Err0495, "'%s' first parameter must be pointer, found '%s'");
    SWAG_ERROR(Err0127, "'%s' has call parameters but is %s, not a function");
    SWAG_ERROR(Err0138, "'%s' is for 'throw' functions, but '%s' isn't");
    SWAG_ERROR(Err0535, "'%s' is for error-raising functions");
    SWAG_ERROR(Err0139, "'%s' is for function calls, but '%s' is %s");
    SWAG_ERROR(Err0671, "'%s' is generic; '%s' lacks generic parameters");
    SWAG_ERROR(Err0705, "'%s' is not a valid enum type");
    SWAG_ERROR(Err0696, "'%s' is only valid as a function parameter");
    SWAG_ERROR(Err0600, "'%s' lacks 'Swag.AttributeUsage.File'; avoid '#global'");
    SWAG_ERROR(Err0711, "'%s' needs block pointer as first parameter");
    SWAG_ERROR(Err0787, "'%s' needs pointer as first parameter");
    SWAG_ERROR(Err0110, "'%s' not found in %s '%s'");
    SWAG_ERROR(Err0492, "'%s' not found in enum '%s' or in %s '%s'");
    SWAG_ERROR(Err0093, "'%s' not found in tuple");
    SWAG_ERROR(Err0911, "'%s' not suitable for union; contains 'opDrop'");
    SWAG_ERROR(Err0909, "'%s' not suitable for union; contains 'opPostCopy'");
    SWAG_ERROR(Err0910, "'%s' not suitable for union; contains 'opPostMove'");
    SWAG_ERROR(Err0248, "'%s' parameter can't be compiled");
    SWAG_ERROR(Err0249, "'%s' parameter must be string, found '%s'");
    SWAG_ERROR(Err0201, "'%s' references itself, causing recursion");
    SWAG_ERROR(Err0496, "'%s' second parameter must be pointer, found '%s'");
    SWAG_ERROR(Err0497, "'%s' second parameter should point to '%s', points to '%s'");
    SWAG_ERROR(Err0137, "'%s' should not be in struct special function ('%s')");
    SWAG_ERROR(Err0858, "'%s' should not have line break %s");
    SWAG_ERROR(Err0772, "expected '%s' type expression after 'return'");
    SWAG_ERROR(Err0125, "'%s' with call parameters is type '%s', not a function");
    SWAG_ERROR(Err0605, "'@abs' exceeds integer limit");
    SWAG_ERROR(Err0800, "'@countof' not allowed on tuple type");
    SWAG_ERROR(Err0801, "'@countof' requires integer, found '%s'");
    SWAG_ERROR(Err0442, "'@cvastart' must only be in a function with a final parameter of 'cvarargs'");
    SWAG_ERROR(Err0796, "'@dataof' not allowed on tuple type");
    SWAG_ERROR(Err0797, "'@dataof' not suitable for type '%s'");
    SWAG_ERROR(Err0283, "'@gettag' expects default value, found type");
    SWAG_ERROR(Err0245, "'@gettag' expects name, found type");
    SWAG_ERROR(Err0630, "'@index' limited to breakable loops");
    SWAG_ERROR(Err0489, "'@init' first parameter must be pointer, found '%s'");
    SWAG_ERROR(Err0301, "'@mixin' number range: [0, 9] (given: '%u')");
    SWAG_ERROR(Err0790, "'@mkany' can't use 'null' as first parameter");
    SWAG_ERROR(Err0792, "'@mkany' expects 'typeinfo' or type for second parameter, found '%s'");
    SWAG_ERROR(Err0789, "'@mkany' requires pointer as first parameter");
    SWAG_ERROR(Err0785, "'@mkcallback' function limit exceeded: max '%d' parameters, found '%d'");
    SWAG_ERROR(Err0786, "'@mkcallback' not allowed with function returning '%s'");
    SWAG_ERROR(Err0784, "'@mkcallback' requires lambda for first parameter");
    SWAG_ERROR(Err0783, "'@mkforeign' expects 'const *void' as second parameter");
    SWAG_ERROR(Err0782, "'@mkforeign' requires lambda type first");
    SWAG_ERROR(Err0794, "'@mkinterface' expects typeinfo second");
    SWAG_ERROR(Err0795, "'@mkinterface' requires interface third");
    SWAG_ERROR(Err0793, "'@mkinterface' requires single-dimension pointer or struct first");
    SWAG_ERROR(Err0730, "'@mkstring' requires 'u8' pointer first");
    SWAG_ERROR(Err0493, "'@postcopy' call denied on type '%s' with 'Swag.NoCopy'");
    SWAG_ERROR(Err0084, "'@runes' requires string, found '%s'");
    SWAG_ERROR(Err0806, "'@spread' only valid as function argument");
    SWAG_ERROR(Err0852, "'AttributeUsage.KindMsgGen' valid only with 'AttributeUsage.Struct' or 'AttributeUsage.Enum'");
    SWAG_ERROR(Err0596, "'Swag.Align' value must be power of two (given: '%d')");
    SWAG_ERROR(Err0753, "'Swag.Complete' attribute invalid for function '%s'");
    SWAG_ERROR(Err0297, "'Swag.Discardable' only for lambda variable; '%s' found");
    SWAG_ERROR(Err0742, "'Swag.Foreign' attributed function can't have a body");
    SWAG_ERROR(Err0811, "'Swag.Foreign' module name can't be empty");
    SWAG_ERROR(Err0813, "'Swag.Foreign' module name can't start with '.' extension");
    SWAG_ERROR(Err0595, "'Swag.Pack' value is 0 or power of two (given: '%d')");
    SWAG_ERROR(Err0745, "'Swag.Test' attributed function mustn't have a return value");
    SWAG_ERROR(Err0746, "'Swag.Test' attributed function mustn't have parameters");
    SWAG_ERROR(Err0601, "'Swag.Using' is empty");
    SWAG_ERROR(Err0253, "'\\U' escape requires 8 codes");
    SWAG_ERROR(Err0224, "'\\u' escape requires 4 codes");
    SWAG_ERROR(Err0184, "'\\x' escape requires 2 codes");
    SWAG_ERROR(Err0632, "'break' valid only in breakable block");
    SWAG_ERROR(Err0729, "'code' is valid only in 'Swag.Macro' or 'Swag.Mixin' function");
    SWAG_ERROR(Err0859, "'compileString' not executable in this context (too late)");
    SWAG_ERROR(Err0637, "'continue' valid only in breakable loop ('for', 'visit', 'loop', 'while')");
    SWAG_ERROR(Err0704, "'cstring' is not a valid enum; use 'string'");
    SWAG_ERROR(Err0446, "'cvarargs' parameter type is non-transferable");
    SWAG_ERROR(Err0635, "'fallthrough' invalid in last 'case' of 'switch'");
    SWAG_ERROR(Err0634, "'fallthrough' valid only in 'case' block");
    SWAG_ERROR(Err0633, "'fallthrough' valid only in 'switch' block");
    SWAG_ERROR(Err0289, "'impl' not within 'impl for' block");
    SWAG_ERROR(Err0559, "'move' not applicable to immutable expression (type is '%s')");
    SWAG_ERROR(Err0619, "'moveref' can't be 'const'");
    SWAG_ERROR(Err0126, "'opSlice' must return string or slice ('%s' given)");
    SWAG_ERROR(Err0075, "'opVisit' must have 'Swag.Macro' attribute");
    SWAG_ERROR(Err0342, "'orelse' operator not valid on struct");
    SWAG_ERROR(Err0332, "'orelse' operator not valid on type '%s'");
    SWAG_ERROR(Err0517, "'ref' requires pointer/reference, found type '%s'");
    SWAG_ERROR(Err0771, "'retval' type not allowed in a void return function");
    SWAG_ERROR(Err0769, "'retval' type restricted to function bodies");
    SWAG_ERROR(Err0654, "'self' required as first parameter for interface function '%s'");
    SWAG_ERROR(Err0306, "'slice' type must be 'const' given const right expression");
    SWAG_ERROR(Err0236, "expected 'string' type for '%s' message, found '%s'");
    SWAG_ERROR(Err0668, "'using' invalid on a constant");
    SWAG_ERROR(Err0695, "'using' invalid on type '%s' (expected namespace, struct, enum or variable)");
    SWAG_ERROR(Err0692, "'using' invalid on variable type '%s'");
    SWAG_ERROR(Err0669, "'using' on field valid only for struct (given: '%s')");
    SWAG_ERROR(Err0822, "'using' on pointer variable valid only for struct pointer (pointed type: '%s')");
    SWAG_ERROR(Err0689, "'using' on variable not allowed in '%s' scope");
    SWAG_ERROR(Err0486, "'void' pointer dereference not allowed");
    SWAG_ERROR(Err0149, "'void' type can't be declared as variable or constant");
    SWAG_ERROR(Err0073, "'with' invalid on enum variable (type is '%s')");
    SWAG_ERROR(Err0703, "'with' invalid on type '%s' (expected namespace, enum, struct)");
    SWAG_ERROR(Err0310, "hidden 'with' variable '%s' used only to scope function '%s'");
    SWAG_ERROR(Err0445, "@cvaarg of type '%s' promoted to '%s' at call");
    SWAG_ERROR(Err0465, "address of %s not accessible");
    SWAG_ERROR(Err0501, "address of 'let' declared local variable inaccessible");
    SWAG_ERROR(Err0469, "address of constant type '%s' not accessible");
    SWAG_ERROR(Err0462, "address of function parameter type '%s' not accessible");
    SWAG_ERROR(Err0664, "alias not supported as block name");
    SWAG_ERROR(Err0099, "aliased identifiers in non-macro/function '%s'");
    SWAG_ERROR(Err0814, "alignment inexpressible due to generic expression");
    SWAG_ERROR(Err0200, "ambiguous cast: multiple fields of type '%s' with 'using' in '%s'");
    SWAG_ERROR(Err0080, "ambiguous enum value '%s' resolution");
    SWAG_ERROR(Err0115, "ambiguous generic %s '%s' resolution");
    SWAG_ERROR(Err0182, "ambiguous special function '%s' resolution");
    SWAG_ERROR(Err0034, "ambiguous struct '%s' to interface '%s' conversion");
    SWAG_ERROR(Err0116, "ambiguous symbol '%s' resolution");
    SWAG_ERROR(Err0011, "argument '%s' already defined");
    SWAG_ERROR(Err0020, "expected arguments '()' when calling %s");
    SWAG_ERROR(Err0485, "array access requires integer type ('%s' given)");
    SWAG_ERROR(Err0021, "array dimension inevaluable at compile time");
    SWAG_ERROR(Err0023, "array dimension is 0");
    SWAG_ERROR(Err0022, "array dimension must be integer ('%s' given)");
    SWAG_ERROR(Err0148, "array of 'void' type can't be declared");
    SWAG_ERROR(Err0303, "array size undeduced; missing initialization");
    SWAG_ERROR(Err0572, "assignment not allowed; '%s' is %s");
    SWAG_ERROR(Err0588, "attribute '%s' incompatible with %s");
    SWAG_ERROR(Err0583, "attribute '%s' only applies to %s");
    SWAG_ERROR(Err0582, "expected attribute; '%s' is %s");
    SWAG_ERROR(Err0602, "attribute parameter inevaluable at compile time");
    SWAG_ERROR(Err0036, "backend error: windows sdk folder not found");
    SWAG_ERROR(Err0833, "bit inversion disallowed on type '%s'");
    SWAG_ERROR(Err0032, "bitcasting from '%s' not allowed (expected integer, pointer, rune, or float)");
    SWAG_ERROR(Err0033, "bitcasting to larger type not allowed ('%s' from '%s')");
    SWAG_ERROR(Err0261, "boolean literal to '%s' conversion not possible");
    SWAG_ERROR(Err0015, "bytecode stack overflow (limit '--stack-size:%s')");
    SWAG_ERROR(Err0571, "can't assign to %s '%s'");
    SWAG_ERROR(Err0740, "can't assign to '%s' as it's immutable");
    SWAG_ERROR(Err0875, "can't capture '%s', it's a closure");
    SWAG_ERROR(Err0884, "can't capture '%s', not a plain data struct (has 'opDrop', 'opPostCopy' or 'opPostMove')");
    SWAG_ERROR(Err0709, "can't deduce flag value of '%s' as previous value isn't power of two");
    SWAG_ERROR(Err0309, "can't deduce type of %s '%s'");
    SWAG_ERROR(Err0881, "can't find an 'enum' or a 'with' for '%s' prefixed with '.'");
    SWAG_ERROR(Err0320, "can't slice '%s'; 'opSlice' not found in type '%s'");
    SWAG_ERROR(Err0627, "can't visit variadic type by pointer");
    SWAG_ERROR(Err0237, "can't evaluate '%s' message at compile time");
    SWAG_ERROR(Err0500, "can't initialize constant array with a single value: type '%s'");
    SWAG_ERROR(Err0206, "can't reference %s '%s': different stack frame");
    SWAG_ERROR(Err0686, "can't use 'code' parameter in '%s' expression following %s '%s'");
    SWAG_ERROR(Err0177, "casting from '%s' to '%s' not allowed");
    SWAG_ERROR(Err0907, "casting from '%s' to pointer type denied (only 'u64' accepted)");
    SWAG_ERROR(Err0178, "casting from closure to lambda not allowed");
    SWAG_ERROR(Err0418, "casting from immutable ('%s') to mutable ('%s') not allowed");
    SWAG_ERROR(Err0041, "casting from value pointer ('%s') to block pointer ('%s') not allowed");
    SWAG_ERROR(Err0302, "char literal to '%s' conversion not possible");
    SWAG_ERROR(Err0287, "char literal to 'u16' exceeds max value '%u'");
    SWAG_ERROR(Err0263, "char literal to 'u8' exceeds max value '%u'");
    SWAG_ERROR(Err0262, "character literal '%s' interpreted as string");
    SWAG_ERROR(Err0185, "closure can't be assigned to a lambda type");
    SWAG_ERROR(Err0519, "cmd error: --stack-size value (%s) out of range [%s, %s]");
    SWAG_ERROR(Err0724, "cmd error: argument '%s' needs 'true' or 'false' ('%s')");
    SWAG_ERROR(Err0728, "cmd error: argument '%s' needs integer ('%s')");
    SWAG_ERROR(Err0722, "cmd error: argument '%s' requires '%s'");
    SWAG_ERROR(Err0725, "cmd error: argument '%s' requires a string");
    SWAG_ERROR(Err0727, "cmd error: argument '%s' requires integer");
    SWAG_ERROR(Err0720, "cmd error: invalid argument '%s'");
    SWAG_ERROR(Err0523, "cmd error: unsupported arch '%s' for x64 backend");
    SWAG_ERROR(Err0522, "cmd error: unsupported os '%s' for x64 backend");
    SWAG_ERROR(Err0435, "compile time execution exception");
    SWAG_ERROR(Err0091, "compile-time %s '%s' inaccessible from runtime %s");
    SWAG_ERROR(Err0107, "compile-time function '%s' called from runtime %s");
    SWAG_ERROR(Err0238, "compiler assertion failure");
    SWAG_ERROR(Err0060, "compiler constant not for runtime reference");
    SWAG_ERROR(Err0119, "complex generic type deduction (embedded tuples)");
    SWAG_ERROR(Err0147, "conflict: 'Swag.Compiler' attribute with existing 'Swag.Tls'");
    SWAG_ERROR(Err0083, "conflict: 'Swag.Inline' with existing 'Swag.NoInline'");
    SWAG_ERROR(Err0691, "conflict: 'Swag.NoInline' with existing 'Swag.Inline'");
    SWAG_ERROR(Err0159, "conflict: 'Swag.Tls' with existing 'Swag.Compiler'");
    SWAG_ERROR(Err0311, "constant creation failed due to generic type '%s'");
    SWAG_ERROR(Err0805, "constant must be unsigned; found '%I64d'");
    SWAG_ERROR(Err0802, "constant must be unsigned; found '%d'");
    SWAG_ERROR(Err0298, "constants need explicit initialization");
    SWAG_ERROR(Err0586, "context inappropriate for attribute '%s'");
    SWAG_ERROR(Err0231, "copying '%s' forbidden by 'Swag.NoCopy' on struct");
    SWAG_ERROR(Err0685, "default value for variadic parameter not allowed");
    SWAG_ERROR(Err0604, "directory creation '%s' failed");
    SWAG_ERROR(Err0150, "division by zero");
    SWAG_ERROR(Err0018, "documentation page '%s' not found");
    SWAG_ERROR(Err0591, "duplicate attribute '%s'; missing 'Swag.AttrMulti' in declaration");
    SWAG_ERROR(Err0169, "duplicate module named '%s' found (path: '%s')");
    SWAG_ERROR(Err0610, "empty 'switch' body found");
    SWAG_ERROR(Err0105, "empty function call '%s'");
    SWAG_ERROR(Err0683, "empty interface '%s' found");
    SWAG_ERROR(Err0164, "empty slice dereference");
    SWAG_ERROR(Err0142, "empty string dereference");
    SWAG_ERROR(Err0820, "enum '%s' already defined");
    SWAG_ERROR(Err0700, "enum array type '%s' must be 'const'");
    SWAG_ERROR(Err0699, "enum array type dimension unspecified ('%s' given)");
    SWAG_ERROR(Err0701, "enum slice type '%s' must be 'const'");
    SWAG_ERROR(Err0702, "expected enum type, found '%s'");
    SWAG_ERROR(Err0636, "enum visitation by pointer not allowed");
    SWAG_ERROR(Err0534, "error in '%s'; use 'try', 'assume', or 'catch'");
    SWAG_ERROR(Err0626, "excessive 'visit' aliases (max: '2', given: '%u')");
    SWAG_ERROR(Err0026, "excessive arguments ('%d' expected, '%d' given)");
    SWAG_ERROR(Err0044, "excessive generic parameters for %s '%s' ('%d' expected, '%d' given)");
    SWAG_ERROR(Err0071, "excessive generic parameters for '%s'");
    SWAG_ERROR(Err0204, "excessive initializers (%d expected, %d given)");
    SWAG_ERROR(Err0197, "excessive initializers for '%s' ('%d' expected, '%d' given)");
    SWAG_ERROR(Err0491, "excessive initializers for '%s'");
    SWAG_ERROR(Err0043, "excessive parameters for '%s' ('%d' expected, '%d' given)");
    SWAG_ERROR(Err0141, "expected '\"' or intrinsic name, found '%c'");
    SWAG_ERROR(Err0054, "expected type but got value for generic %s in %s");
    SWAG_ERROR(Err0057, "expected value but got type for generic %s in %s");
    SWAG_ERROR(Err0012, "expected expression; type found");
    SWAG_ERROR(Err0615, "expression cannot be evaluated at compile-time ('Swag.Complete')");
    SWAG_ERROR(Err0798, "expression cannot be evaluated at compile-time");
    SWAG_ERROR(Err0488, "expression of type '%s' not dereferenceable");
    SWAG_ERROR(Err0569, "expression of type 'void' not assignable");
    SWAG_ERROR(Err0240, "expression type mismatch; expected 'code', found '%s'");
    SWAG_ERROR(Err0607, "expressionless switch can't be 'Swag.Complete'");
    SWAG_ERROR(Err0051, "failed to add '%s' to 'PATH' variable");
    SWAG_ERROR(Err0045, "failed to create '%s' process (::CreatePipe)");
    SWAG_ERROR(Err0223, "failed to open #load file '%s'");
    SWAG_ERROR(Err0510, "failed to retrieve file '%s' for module dependency '%s'");
    SWAG_ERROR(Err0723, "field '%s' type mismatch; expected '%s', found '%s'");
    SWAG_ERROR(Err0050, "field '%s' type mismatch; expected '%s', found '%s'");
    SWAG_ERROR(Err0603, "file '%s' deletion failed");
    SWAG_ERROR(Err0509, "file '%s' inaccessible");
    SWAG_ERROR(Err0508, "file '%s' not found in module folder '%s'");
    SWAG_ERROR(Err0244, "file '%s' not located");
    SWAG_ERROR(Err0524, "file '%s' write access denied");
    SWAG_ERROR(Err0525, "file '%s' write failure");
    SWAG_ERROR(Err0314, "file format must be ascii, utf-8, or utf-8-bom");
    SWAG_ERROR(Err0242, "filename not compile-time evaluable");
    SWAG_ERROR(Err0258, "foreign function '%s' unresolved");
    SWAG_ERROR(Err0754, "function '%s' attribute mismatch with 'Swag.Implicit'");
    SWAG_ERROR(Err0478, "function '%s' can't have generic parameters");
    SWAG_ERROR(Err0752, "function '%s' can't be generic with 'Swag.NotGeneric' attribute");
    SWAG_ERROR(Err0280, "function '%s' in interface '%s' lacks 'impl' marker");
    SWAG_ERROR(Err0751, "function '%s' is generic despite 'Swag.NotGeneric' attribute");
    SWAG_ERROR(Err0503, "function '%s' is internal; corresponding struct is public");
    SWAG_ERROR(Err0506, "function '%s' is public; corresponding struct is internal");
    SWAG_ERROR(Err0024, "function '%s' not found in interface '%s'");
    SWAG_ERROR(Err0067, "function '%s' outside 'impl' block");
    SWAG_ERROR(Err0098, "function '%s' requires '()' not '{}' for call");
    SWAG_ERROR(Err0109, "function '%s' return value not used");
    SWAG_ERROR(Err0652, "function '%s' signature mismatch for interface '%s'");
    SWAG_ERROR(Err0004, "function '%s' unusable; '%s' failed");
    SWAG_ERROR(Err0767, "function '%s' with 'Swag.Discardable' must not return value");
    SWAG_ERROR(Err0087, "function call not allowed at global scope");
    SWAG_ERROR(Err0094, "function call returning nothing can't be discarded");
    SWAG_ERROR(Err0764, "function can't return type '%s'");
    SWAG_ERROR(Err0078, "function name '%s' is reserved");
    SWAG_ERROR(Err0102, "function param type '%s' not evaluatable at compile time");
    SWAG_ERROR(Err0090, "function parameter of type '%s' can't be evaluated at compile time");
    SWAG_ERROR(Err0160, "function pointer can't be assigned to a constant");
    SWAG_ERROR(Err0163, "function returns no value to retrieve");
    SWAG_ERROR(Err0766, "function with 'Swag.CalleeReturn' must not return value");
    SWAG_ERROR(Err0808, "generic %s '%s' can't use unsized value");
    SWAG_ERROR(Err0756, "generic %s can't have 'Swag.Implicit' attribute");
    SWAG_ERROR(Err0715, "generic function '%s' instantiation failed: missing arguments");
    SWAG_ERROR(Err0042, "generic function '%s' instantiation failed: missing type replacements");
    SWAG_ERROR(Err0352, "generic parameters deduction failed for %s '%s'");
    SWAG_ERROR(Err0049, "expected generic parameters for %s");
    SWAG_ERROR(Err0721, "generic struct '%s' instantiation failed: missing arguments");
    SWAG_ERROR(Err0039, "generic struct '%s' instantiation failed: missing type replacements");
    SWAG_ERROR(Err0618, "generic type '%s' deduction from type '%s' failed");
    SWAG_ERROR(Err0123, "generic value '%s' deduced as '%s', not '%s'");
    SWAG_ERROR(Err0313, "global variable can't be 'public'");
    SWAG_ERROR(Err0130, "identifier '%s' is %s, not function/struct");
    SWAG_ERROR(Err0776, "identifier not allowed at global scope");
    SWAG_ERROR(Err0299, "immutable variable needs explicit initialization");
    SWAG_ERROR(Err0659, "implementation block for '%s' is internal; identifier isn't");
    SWAG_ERROR(Err0660, "implementation block for '%s' isn't internal; identifier is");
    SWAG_ERROR(Err0661, "implementation block not in same scope as '%s'");
    SWAG_ERROR(Err0175, "implicit casting from '%s' to '%s' not allowed");
    SWAG_ERROR(Err0124, "improper lambda call; '%s' isn't a variable (it's %s)");
    SWAG_ERROR(Err0674, "improper struct member name '%s'");
    SWAG_ERROR(Err0791, "inconsistency in '@mkany'; value pointer and type are unrelated");
    SWAG_ERROR(Err0514, "incorrect 'location' format; expected 'location=\"mode@accesspath\"'");
    SWAG_ERROR(Err0470, "incorrect address expression");
    SWAG_ERROR(Err0597, "incorrect attribute usage");
    SWAG_ERROR(Err0132, "incorrect file scope reference");
    SWAG_ERROR(Err0226, "index access denied: 'opIndex' not found in type '%s'");
    SWAG_ERROR(Err0187, "index missing for array dereference '%s'");
    SWAG_ERROR(Err0180, "index missing for slice dereference '%s'");
    SWAG_ERROR(Err0468, "index out of bounds (given: '%I64u', max: '%I64u')");
    SWAG_ERROR(Err0906, "initial value not compile-time evaluable; 'opAffect' isn't 'Swag.ConstExpr'");
    SWAG_ERROR(Err0670, "initialization can't be evaluated at compile-time");
    SWAG_ERROR(Err0307, "initialization is 'void'");
    SWAG_ERROR(Err0848, "expected initialization of '%s'; enum '%s' lacks zero value");
    SWAG_ERROR(Err0473, "inline function address not accessible");
    SWAG_ERROR(Err0733, "inline function with variadic parameters unsupported");
    SWAG_ERROR(Err0737, "instruction '%s' invalid as default parameter");
    SWAG_ERROR(Err0016, "insufficient arguments for %s call");
    SWAG_ERROR(Err0157, "insufficient arguments for %s");
    SWAG_ERROR(Err0062, "insufficient arguments for '%s' (min: '%d', provided: '%d')");
    SWAG_ERROR(Err0061, "insufficient arguments for function '%s' (expected '%d', found '%d')");
    SWAG_ERROR(Err0035, "insufficient generic arguments for %s");
    SWAG_ERROR(Err0544, "insufficient generic parameters for function '%s'");
    SWAG_ERROR(Err0158, "insufficient hexadecimal digits: %s");
    SWAG_ERROR(Err0203, "insufficient initializers (%d expected, %d given)");
    SWAG_ERROR(Err0010, "interface can be compared to 'null' or another interface only");
    SWAG_ERROR(Err0646, "expected interface; '%s' is %s");
    SWAG_ERROR(Err0680, "interface member initialization failed");
    SWAG_ERROR(Err0682, "interface member relocation with 'Swag.Offset' not allowed");
    SWAG_ERROR(Err0676, "interface should only contain 'lambda' members ('%s' given)");
    SWAG_ERROR(Err0443, "invalid '@cvaarg' type '%s'");
    SWAG_ERROR(Err0599, "invalid 'Swag.ExportType' parameter '%s'");
    SWAG_ERROR(Err0693, "invalid 'Swag.Match' parameter '%s'");
    SWAG_ERROR(Err0594, "invalid 'Swag.Optim' parameter '%s'");
    SWAG_ERROR(Err0250, "invalid 'const' for type '%s'");
    SWAG_ERROR(Err0515, "invalid 'location' mode; choose 'swag' or 'disk' instead of '%s'");
    SWAG_ERROR(Err0621, "invalid 'moveref' for type '%s' (expected pointer/reference)");
    SWAG_ERROR(Err0563, "invalid 'moveref' on computed value");
    SWAG_ERROR(Err0531, "invalid 'moveref' on immutable expression");
    SWAG_ERROR(Err0199, "invalid 'opDrop' for struct with 'Swag.ConstExpr' marked '%s'");
    SWAG_ERROR(Err0530, "invalid 'ref' after 'moveref'");
    SWAG_ERROR(Err0694, "invalid 'using' type");
    SWAG_ERROR(Err0427, "invalid argument for '@acos'");
    SWAG_ERROR(Err0426, "invalid argument for '@asin'");
    SWAG_ERROR(Err0428, "invalid argument for '@log'");
    SWAG_ERROR(Err0424, "invalid argument for '@log10'");
    SWAG_ERROR(Err0423, "invalid argument for '@log2'");
    SWAG_ERROR(Err0425, "invalid argument for '@sqrt'");
    SWAG_ERROR(Err0731, "invalid attribute parameter type '%s'");
    SWAG_ERROR(Err0031, "invalid bitcast type '%s' (integer, rune, or float expected)");
    SWAG_ERROR(Err0655, "invalid first parameter type (expected 'self', found '%s')");
    SWAG_ERROR(Err0317, "invalid floating point suffix, found type '%s'");
    SWAG_ERROR(Err0494, "invalid function '%s' in 'impl for' block");
    SWAG_ERROR(Err0070, "invalid generic %s for %s ('%s' expected, '%s' given)");
    SWAG_ERROR(Err0135, "invalid generic parameters for %s '%s'");
    SWAG_ERROR(Err0174, "invalid hexadecimal digit '%c' in %s");
    SWAG_ERROR(Err0679, "invalid interface member type (expected 'self', found '%s')");
    SWAG_ERROR(Err0439, "invalid literal suffix type '%s'");
    SWAG_ERROR(Err0387, "invalid number conversion for literal '%I64u'");
    SWAG_ERROR(Err0593, "invalid safety value '%s'");
    SWAG_ERROR(Err0576, "invalid scope move of '%d'");
    SWAG_ERROR(Err0077, "invalid second parameter for '%s' (not type '%s')");
    SWAG_ERROR(Err0609, "invalid switch type '%s'");
    SWAG_ERROR(Err0697, "invalid type '%s' for 'Swag.EnumFlags' (unsigned integer required)");
    SWAG_ERROR(Err0698, "invalid type '%s' for 'Swag.EnumIndex' (integer required)");
    SWAG_ERROR(Err0170, "invalid type '%s' for operator '<<' (integer required)");
    SWAG_ERROR(Err0172, "invalid type '%s' for operator '>>' (integer required)");
    SWAG_ERROR(Err0815, "invalid usage of %s as generic argument ('%s')");
    SWAG_ERROR(Err0417, "invalid values for '@pow': '%.3f' and '%.3f'");
    SWAG_ERROR(Err0639, "label '%s' previously defined");
    SWAG_ERROR(Err0092, "lambda '%s' return value not used");
    SWAG_ERROR(Err0690, "lambda default parameters inconsistency");
    SWAG_ERROR(Err0564, "left expression immutable; assignment forbidden");
    SWAG_ERROR(Err0565, "left expression isn't a value; assignment forbidden");
    SWAG_ERROR(Err0558, "llvm backend failed to create target '%s'");
    SWAG_ERROR(Err0873, "local variable with 'let' requires initialization");
    SWAG_ERROR(Err0471, "macro function address not accessible");
    SWAG_ERROR(Err0076, "max call level reached; limit '--max-recurse:%d'");
    SWAG_ERROR(Err0677, "minimum of one parameter required for interface member '%s'");
    SWAG_ERROR(Err0828, "minus operation invalid for type '%s'");
    SWAG_ERROR(Err0106, "mismatched 'self' parameter ('%s' expected, '%s' given)");
    SWAG_ERROR(Err0568, "mismatched types in '%s' assignment ('%s' vs '%s')");
    SWAG_ERROR(Err0095, "mismatched UFCS argument ('%s' expected, '%s' given)");
    SWAG_ERROR(Err0304, "missing #include file '%s'");
    SWAG_ERROR(Err0227, "missing 'opIndex' for type '%s' to access '%s' by index");
    SWAG_ERROR(Err0186, "missing special function '%s' in '%s' for operator '%s'");
    SWAG_ERROR(Err0079, "missing special function '%s' in '%s'");
    SWAG_ERROR(Err0472, "mixin function address not accessible");
    SWAG_ERROR(Err0518, "module '%s' dependency error: version '%s' not found at '%s'");
    SWAG_ERROR(Err0516, "module '%s' dependency error: version mismatch");
    SWAG_ERROR(Err0592, "module '%s' load error during foreign function '%s' resolution: %s");
    SWAG_ERROR(Err0556, "module '%s' not found in workspace");
    SWAG_ERROR(Err0557, "module dependency '%s' missing in workspace");
    SWAG_ERROR(Err0513, "module dependency '%s' unresolved (empty 'location')");
    SWAG_ERROR(Err0511, "module folder dependency '%s' missing");
    SWAG_ERROR(Err0006, "name %s due to prior named arguments");
    SWAG_ERROR(Err0030, "name alias not allowed on %s");
    SWAG_ERROR(Err0393, "namespace name can't match module ('%s')");
    SWAG_ERROR(Err0225, "no 'opIndexAffect' found for indexing type '%s' to '%s'");
    SWAG_ERROR(Err0111, "no pointer arithmetic on 'void' type");
    SWAG_ERROR(Err0579, "no pointer arithmetic with operand type '%s'");
    SWAG_ERROR(Err0741, "non-contiguous '@alias' in function '%s' (missing '@alias%u')");
    SWAG_ERROR(Err0748, "not all control paths of %s yield a return value");
    SWAG_ERROR(Err0146, "null pointer dereference");
    SWAG_ERROR(Err0360, "number '%I64d' exceeds 's16' range");
    SWAG_ERROR(Err0361, "number '%I64d' exceeds 's32' range");
    SWAG_ERROR(Err0359, "number '%I64d' exceeds 's8' range");
    SWAG_ERROR(Err0832, "number '%I64d' negation invalid: '%I64u' out of 's64' range");
    SWAG_ERROR(Err0362, "number '%I64u' exceeds 'rune' range");
    SWAG_ERROR(Err0422, "number '%I64u' exceeds 's16' range");
    SWAG_ERROR(Err0429, "number '%I64u' exceeds 's32' range");
    SWAG_ERROR(Err0430, "number '%I64u' exceeds 's64' range");
    SWAG_ERROR(Err0415, "number '%I64u' exceeds 's8' range");
    SWAG_ERROR(Err0357, "number '%I64u' exceeds 'u16' range");
    SWAG_ERROR(Err0358, "number '%I64u' exceeds 'u32' range");
    SWAG_ERROR(Err0341, "number '%I64u' exceeds 'u8' range");
    SWAG_ERROR(Err0830, "number '%d' negation invalid: '%u' out of 's16' range");
    SWAG_ERROR(Err0831, "number '%d' negation invalid: '%u' out of 's32' range");
    SWAG_ERROR(Err0829, "number '%d' negation invalid: '%u' out of 's8' range");
    SWAG_ERROR(Err0707, "expected one test error; none raised");
    SWAG_ERROR(Err0580, "expected one test warning; none raised");
    SWAG_ERROR(Err0809, "operation '%s' doesn't support left type '%s'");
    SWAG_ERROR(Err0778, "operation '%s' doesn't support right type '%s'");
    SWAG_ERROR(Err0001, "operation '%s' incompatible with type '%s'");
    SWAG_ERROR(Err0005, "operation '%s' invalid for type '%s'");
    SWAG_ERROR(Err0570, "operation '%s' invalid for type '%s'");
    SWAG_ERROR(Err0037, "operation '%s' invalid; left expression is unflagged enum type ('%s')");
    SWAG_ERROR(Err0038, "operation '%s' invalid; right expression is unflagged enum type ('%s')");
    SWAG_ERROR(Err0168, "operation '%s' not supported on tuple");
    SWAG_ERROR(Err0573, "operations on tuple types unsupported");
    SWAG_ERROR(Err0143, "operator '%s' rejects operand type '%s'");
    SWAG_ERROR(Err0183, "operator '%s' rejects right expression type '%s'");
    SWAG_ERROR(Err0068, "expected parameters for special function '%s'");
    SWAG_ERROR(Err0040, "partial type alias ('%s') for generic struct not supported");
    SWAG_ERROR(Err0192, "pointer arithmetic disallowed");
    SWAG_ERROR(Err0193, "pointer slicing not allowed (no pointer arithmetic)");
    SWAG_ERROR(Err0628, "pointer type ('%s') is unvisitable with 'visit'");
    SWAG_ERROR(Err0046, "process creation '%s' failed");
    SWAG_ERROR(Err0684, "public embedded interface ('%s') disallowed");
    SWAG_ERROR(Err0675, "public embedded struct ('%s') disallowed");
    SWAG_ERROR(Err0529, "range argument lower bound '%I64u' greater than upper bound '%I64u'");
    SWAG_ERROR(Err0337, "range in switch expression not allowed");
    SWAG_ERROR(Err0528, "range lower bound '%lld' exceeds upper bound '%lld'");
    SWAG_ERROR(Err0775, "recursion detected; can't expand '%s'");
    SWAG_ERROR(Err0117, "redundant 'using' with type '%s'");
    SWAG_ERROR(Err0300, "references must be initialized");
    SWAG_ERROR(Err0549, "resolution failed for %s '%s'");
    SWAG_ERROR(Err0732, "return type 'void' unnecessary");
    SWAG_ERROR(Err0770, "return type deduced as '%s'; provided '%s'");
    SWAG_ERROR(Err0773, "return type deduced as none; provided '%s'");
    SWAG_ERROR(Err0063, "expected return type for special function '%s'");
    SWAG_ERROR(Err0064, "expected return type for special function '%s', found '%s'");
    SWAG_ERROR(Err0774, "return type mismatch (expected void, found '%s') for %s");
    SWAG_ERROR(Err0114, "return value address (type '%s') not accessible");
    SWAG_ERROR(Err0779, "return value needed; return type inferred as '%s'");
    SWAG_ERROR(Err0047, "right expression address not accessible");
    SWAG_ERROR(Err0431, "runtime variable '%s' set to zero; immutable at compile time");
    SWAG_ERROR(Err0490, "second '@init' parameter must be integer; '%s' provided");
    SWAG_ERROR(Err0419, "semantic cycle detected in %s resolution of '%s'");
    SWAG_ERROR(Err0027, "semantic resolution failure");
    SWAG_ERROR(Err0173, "shift operand should be 'u32', not '%s'");
    SWAG_ERROR(Err0450, "expected single generic parameter for function '%s'; '%d' provided");
    SWAG_ERROR(Err0882, "size exceeded: '%u' bytes vs max '%u'");
    SWAG_ERROR(Err0812, "size indeterminate; expression is generic");
    SWAG_ERROR(Err0009, "slice comparison allowed only with 'null'");
    SWAG_ERROR(Err0367, "slice lower bound type mismatch; expected integer, found '%s'");
    SWAG_ERROR(Err0059, "slice of type '%s' can't be converted to constant expression");
    SWAG_ERROR(Err0688, "slice upper bound exclusion not possible; bound is zero");
    SWAG_ERROR(Err0477, "slicing bound '%I64u' exceeds limit (max: '%I64u')");
    SWAG_ERROR(Err0475, "slicing invalid for type '%s'");
    SWAG_ERROR(Err0474, "slicing invalid on multi-dimensional array");
    SWAG_ERROR(Err0476, "slicing lower bound '%I64u' greater than upper bound '%I64u'");
    SWAG_ERROR(Err0153, "source file '%s' read error");
    SWAG_ERROR(Err0074, "special function '%s' expects 'bool', found '%s'");
    SWAG_ERROR(Err0072, "special function '%s' expects 'string', found '%s'");
    SWAG_ERROR(Err0069, "special function '%s' expects type '%s', found '%s'");
    SWAG_ERROR(Err0065, "special function '%s' return type mismatch (expected '%s', found '%s')");
    SWAG_ERROR(Err0743, "special function can't have 'Swag.Inline' attribute");
    SWAG_ERROR(Err0625, "special visit name for struct only (type is '%s')");
    SWAG_ERROR(Err0536, "stack exceeded (limit '--stack-size:%s')");
    SWAG_ERROR(Err0096, "standalone expression found");
    SWAG_ERROR(Err0765, "struct '%s' has 'Swag.NoCopy'; 'opPostCopy' redundant");
    SWAG_ERROR(Err0648, "expected struct, found '%s' as %s");
    SWAG_ERROR(Err0290, "expected struct; symbol '%s' is %s");
    SWAG_ERROR(Err0667, "struct incompatible with 'Swag.Opaque'; file globally exported");
    SWAG_ERROR(Err0673, "struct member '%s' missing for 'Swag.Offset' attribute relocation");
    SWAG_ERROR(Err0029, "struct member aliasing not allowed");
    SWAG_ERROR(Err0295, "duplicate initialization of struct");
    SWAG_ERROR(Err0281, "struct of type '%s' not 'Swag.ConstExpr'; can't evaluate at compile time");
    SWAG_ERROR(Err0662, "expected struct or enum, found '%s' as %s");
    SWAG_ERROR(Err0666, "struct requires public access for 'Swag.Opaque'");
    SWAG_ERROR(Err0532, "suffix literals like '%s' are for struct conversions only");
    SWAG_ERROR(Err0612, "switch enum value '%s' already defined");
    SWAG_ERROR(Err0620, "switch incomplete; missing '%s.%s'");
    SWAG_ERROR(Err0608, "switch type 'any' requires concrete casting");
    SWAG_ERROR(Err0613, "switch value '%d' already defined");
    SWAG_ERROR(Err0614, "switch value '%f' already defined");
    SWAG_ERROR(Err0611, "switch value '%s' already defined");
    SWAG_ERROR(Err0346, "symbol '%s' defined in parent scope");
    SWAG_ERROR(Err0108, "test function '%s' called from runtime '%s'");
    SWAG_ERROR(Err0578, "too many variadic parameters ('%d' given, max: '%d')");
    SWAG_ERROR(Err0893, "top-level declaration conflict for generic symbol '%s'");
    SWAG_ERROR(Err0574, "tuple assignment incompatible with right expression");
    SWAG_ERROR(Err0007, "tuple comparison operations unsupported");
    SWAG_ERROR(Err0195, "tuple has too many initializers ('%d' expected, '%d' given)");
    SWAG_ERROR(Err0205, "tuple initialization requires '%d' argument(s) but got '%d'");
    SWAG_ERROR(Err0713, "tuple on the right has only '%u' field(s) for '%u' variable(s)");
    SWAG_ERROR(Err0028, "tuple type mismatch");
    SWAG_ERROR(Err0624, "tuple type visitation not allowed");
    SWAG_ERROR(Err0292, "tuple unpacking failed; no fields found");
    SWAG_ERROR(Err0321, "tuple value contains non-'Swag.ConstExpr' member; can't evaluate at compile time");
    SWAG_ERROR(Err0482, "tuples can't be dereferenced as pointers or arrays");
    SWAG_ERROR(Err0252, "type '%s' and '%s' from command line for '%s' mismatch");
    SWAG_ERROR(Err0058, "type '%s' can't be converted to constant expression");
    SWAG_ERROR(Err0889, "type '%s' can't be initialized with '%s': missing 'opAffectSuffix' in '%s'");
    SWAG_ERROR(Err0481, "type '%s' dereference not allowed");
    SWAG_ERROR(Err0807, "type '%s' expression unspreadable");
    SWAG_ERROR(Err0629, "type '%s' expression unvisitable with 'visit'");
    SWAG_ERROR(Err0887, "type '%s' not capturable for '%s'");
    SWAG_ERROR(Err0161, "type '%s' not convertible to constant array; 'opCount' is '0'");
    SWAG_ERROR(Err0162, "type '%s' not convertible; 'opSlice' returns empty slice");
    SWAG_ERROR(Err0291, "type '%s' unpacking failed; expected struct or tuple");
    SWAG_ERROR(Err0181, "type 'any' without cast compared only to 'null'");
    SWAG_ERROR(Err0118, "type constraint failed on '%s'");
    SWAG_ERROR(Err0128, "type constraint not evaluable at compile-time");
    SWAG_ERROR(Err0678, "type constraint should yield 'bool' ('%s' given)");
    SWAG_ERROR(Err0017, "type declaration error; '%s' isn't a type (it's %s)");
    SWAG_ERROR(Err0810, "type is unevaluable in this context; it's generic");
    SWAG_ERROR(Err0048, "type mismatch ('*Swag.CVaList' expected, '%s' given)");
    SWAG_ERROR(Err0908, "type mismatch: unable to initialize type '%s' from type '%s'");
    SWAG_ERROR(Err0196, "type mismatch; can't %s '%s' %s '%s'");
    SWAG_ERROR(Err0053, "type mismatch; expected '%s', found '%s'");
    SWAG_ERROR(Err0537, "typeinfo '%s' conversion to runtime typeinfo not possible");
    SWAG_ERROR(Err0781, "unable to expand '%s' in global scope: sub declarations not supported");
    SWAG_ERROR(Err0502, "unable to open file '%s'");
    SWAG_ERROR(Err0002, "unexpected '%s' in range expression");
    SWAG_ERROR(Err0616, "unexpected 'default' in 'Swag.Complete' switch");
    SWAG_ERROR(Err0233, "unexpected expression type in '%s' (expected 'bool', found '%s')");
    SWAG_ERROR(Err0167, "unexpected lambda type parameter name");
    SWAG_ERROR(Err0052, "unexpected return in %s");
    SWAG_ERROR(Err0657, "unimplemented interface functions for '%s' in '%s'");
    SWAG_ERROR(Err0251, "unknown attribute '%s'");
    SWAG_ERROR(Err0140, "unknown compiler instruction '%s'");
    SWAG_ERROR(Err0228, "unknown function '%s'");
    SWAG_ERROR(Err0122, "unknown identifier '%s'");
    SWAG_ERROR(Err0129, "unknown intrinsic '%s'");
    SWAG_ERROR(Err0631, "unknown label '%s'");
    SWAG_ERROR(Err0499, "unknown module dependency '%s'");
    SWAG_ERROR(Err0008, "unknown named parameter '%s'");
    SWAG_ERROR(Err0165, "unknown type '%s'");
    SWAG_ERROR(Err0282, "unpacking mismatch: '%d' variable(s) versus '%d' element(s)");
    SWAG_ERROR(Err0293, "unpacking mismatch: '%u' variable(s) versus '%u' field(s) in tuple");
    SWAG_ERROR(Err0598, "unrecognized attribute '%s'");
    SWAG_ERROR(Err0259, "unrecognized escape sequence '%c'");
    SWAG_ERROR(Err0133, "unresolved identifier '%s'");
    SWAG_ERROR(Err0681, "unresolved interface due to generic type '%s'");
    SWAG_ERROR(Err0672, "unresolved struct '%s' due to generic type '%s'");
    SWAG_ERROR(Err0827, "unsigned type '%s' negation invalid");
    SWAG_ERROR(Err0803, "unsupported '@nameof' usage");
    SWAG_ERROR(Err0799, "unsupported '@stringof' usage");
    SWAG_ERROR(Err0056, "unsupported x64 OS '%s'");
    SWAG_ERROR(Err0780, "unused alias '%s'; consider removal");
    SWAG_ERROR(Err0101, "use '@drop' instead of 'opDrop'");
    SWAG_ERROR(Err0100, "use '@init' instead of 'opInit'");
    SWAG_ERROR(Err0103, "use '@postcopy' instead of 'opPostCopy'");
    SWAG_ERROR(Err0104, "use '@postmove' instead of 'opPostMove'");
    SWAG_ERROR(Err0717, "value '%s' exceeds 's16' range");
    SWAG_ERROR(Err0718, "value '%s' exceeds 's32' range");
    SWAG_ERROR(Err0719, "value '%s' exceeds 's64' range");
    SWAG_ERROR(Err0716, "value '%s' exceeds 's8' range");
    SWAG_ERROR(Err0710, "value '%s' exceeds 'u16' range");
    SWAG_ERROR(Err0712, "value '%s' exceeds 'u32' range");
    SWAG_ERROR(Err0714, "value '%s' exceeds 'u64' range");
    SWAG_ERROR(Err0708, "value '%s' exceeds 'u8' range");
    SWAG_ERROR(Err0144, "value '%s' not found in enum '%s'");
    SWAG_ERROR(Err0706, "value '%s' of type '%s' requires initialization");
    SWAG_ERROR(Err0687, "expected value below 256");
    SWAG_ERROR(Err0821, "variable '%s' from struct '%s' has no corresponding member");
    SWAG_ERROR(Err0312, "variable creation failed due to generic type '%s'");
    SWAG_ERROR(Err0436, "variable declared with 'let' requires explicit initialization");
    SWAG_ERROR(Err0645, "variable double initialized with type and assignment");
    SWAG_ERROR(Err0308, "variable type deduction failed; expression is 'null'");
    SWAG_ERROR(Err0734, "variadic parameter must be last");
    SWAG_ERROR(Err0880, "while condition is always true");
    SWAG_ERROR(Err0394, nullptr);
    SWAG_ERROR(Err0890, nullptr);
    SWAG_ERROR(Err0019, nullptr);
    SWAG_ERROR(Err0025, nullptr);
    SWAG_ERROR(Err0055, nullptr);
    SWAG_ERROR(Err0066, nullptr);
    SWAG_ERROR(Err0081, nullptr);
    SWAG_ERROR(Err0082, nullptr);
    SWAG_ERROR(Err0088, nullptr);
    SWAG_ERROR(Err0120, nullptr);
    SWAG_ERROR(Err0121, nullptr);
    SWAG_ERROR(Err0131, nullptr);
    SWAG_ERROR(Err0134, nullptr);
    SWAG_ERROR(Err0145, nullptr);
    SWAG_ERROR(Err0151, nullptr);
    SWAG_ERROR(Err0152, nullptr);
    SWAG_ERROR(Err0154, nullptr);
    SWAG_ERROR(Err0155, nullptr);
    SWAG_ERROR(Err0156, nullptr);
    SWAG_ERROR(Err0166, nullptr);
    SWAG_ERROR(Err0171, nullptr);
    SWAG_ERROR(Err0179, nullptr);
    SWAG_ERROR(Err0188, nullptr);
    SWAG_ERROR(Err0189, nullptr);
    SWAG_ERROR(Err0190, nullptr);
    SWAG_ERROR(Err0191, nullptr);
    SWAG_ERROR(Err0202, nullptr);
    SWAG_ERROR(Err0210, nullptr);
    SWAG_ERROR(Err0211, nullptr);
    SWAG_ERROR(Err0212, nullptr);
    SWAG_ERROR(Err0213, nullptr);
    SWAG_ERROR(Err0214, nullptr);
    SWAG_ERROR(Err0215, nullptr);
    SWAG_ERROR(Err0216, nullptr);
    SWAG_ERROR(Err0217, nullptr);
    SWAG_ERROR(Err0218, nullptr);
    SWAG_ERROR(Err0219, nullptr);
    SWAG_ERROR(Err0220, nullptr);
    SWAG_ERROR(Err0221, nullptr);
    SWAG_ERROR(Err0222, nullptr);
    SWAG_ERROR(Err0229, nullptr);
    SWAG_ERROR(Err0230, nullptr);
    SWAG_ERROR(Err0235, nullptr);
    SWAG_ERROR(Err0241, nullptr);
    SWAG_ERROR(Err0246, nullptr);
    SWAG_ERROR(Err0247, nullptr);
    SWAG_ERROR(Err0256, nullptr);
    SWAG_ERROR(Err0257, nullptr);
    SWAG_ERROR(Err0260, nullptr);
    SWAG_ERROR(Err0264, nullptr);
    SWAG_ERROR(Err0265, nullptr);
    SWAG_ERROR(Err0266, nullptr);
    SWAG_ERROR(Err0267, nullptr);
    SWAG_ERROR(Err0285, nullptr);
    SWAG_ERROR(Err0294, nullptr);
    SWAG_ERROR(Err0296, nullptr);
    SWAG_ERROR(Err0315, nullptr);
    SWAG_ERROR(Err0316, nullptr);
    SWAG_ERROR(Err0318, nullptr);
    SWAG_ERROR(Err0319, nullptr);
    SWAG_ERROR(Err0333, nullptr);
    SWAG_ERROR(Err0334, nullptr);
    SWAG_ERROR(Err0338, nullptr);
    SWAG_ERROR(Err0339, nullptr);
    SWAG_ERROR(Err0340, nullptr);
    SWAG_ERROR(Err0343, nullptr);
    SWAG_ERROR(Err0344, nullptr);
    SWAG_ERROR(Err0345, nullptr);
    SWAG_ERROR(Err0347, nullptr);
    SWAG_ERROR(Err0349, nullptr);
    SWAG_ERROR(Err0350, nullptr);
    SWAG_ERROR(Err0351, nullptr);
    SWAG_ERROR(Err0353, nullptr);
    SWAG_ERROR(Err0354, nullptr);
    SWAG_ERROR(Err0355, nullptr);
    SWAG_ERROR(Err0356, nullptr);
    SWAG_ERROR(Err0363, nullptr);
    SWAG_ERROR(Err0364, nullptr);
    SWAG_ERROR(Err0365, nullptr);
    SWAG_ERROR(Err0366, nullptr);
    SWAG_ERROR(Err0368, nullptr);
    SWAG_ERROR(Err0369, nullptr);
    SWAG_ERROR(Err0370, nullptr);
    SWAG_ERROR(Err0371, nullptr);
    SWAG_ERROR(Err0372, nullptr);
    SWAG_ERROR(Err0373, nullptr);
    SWAG_ERROR(Err0374, nullptr);
    SWAG_ERROR(Err0375, nullptr);
    SWAG_ERROR(Err0376, nullptr);
    SWAG_ERROR(Err0377, nullptr);
    SWAG_ERROR(Err0378, nullptr);
    SWAG_ERROR(Err0379, nullptr);
    SWAG_ERROR(Err0380, nullptr);
    SWAG_ERROR(Err0381, nullptr);
    SWAG_ERROR(Err0382, nullptr);
    SWAG_ERROR(Err0383, nullptr);
    SWAG_ERROR(Err0384, nullptr);
    SWAG_ERROR(Err0385, nullptr);
    SWAG_ERROR(Err0386, nullptr);
    SWAG_ERROR(Err0388, nullptr);
    SWAG_ERROR(Err0389, nullptr);
    SWAG_ERROR(Err0390, nullptr);
    SWAG_ERROR(Err0391, nullptr);
    SWAG_ERROR(Err0392, nullptr);
    SWAG_ERROR(Err0395, nullptr);
    SWAG_ERROR(Err0396, nullptr);
    SWAG_ERROR(Err0397, nullptr);
    SWAG_ERROR(Err0398, nullptr);
    SWAG_ERROR(Err0399, nullptr);
    SWAG_ERROR(Err0400, nullptr);
    SWAG_ERROR(Err0402, nullptr);
    SWAG_ERROR(Err0403, nullptr);
    SWAG_ERROR(Err0404, nullptr);
    SWAG_ERROR(Err0416, nullptr);
    SWAG_ERROR(Err0420, nullptr);
    SWAG_ERROR(Err0421, nullptr);
    SWAG_ERROR(Err0432, nullptr);
    SWAG_ERROR(Err0434, nullptr);
    SWAG_ERROR(Err0437, nullptr);
    SWAG_ERROR(Err0438, nullptr);
    SWAG_ERROR(Err0440, nullptr);
    SWAG_ERROR(Err0441, nullptr);
    SWAG_ERROR(Err0444, nullptr);
    SWAG_ERROR(Err0447, nullptr);
    SWAG_ERROR(Err0448, nullptr);
    SWAG_ERROR(Err0449, nullptr);
    SWAG_ERROR(Err0451, nullptr);
    SWAG_ERROR(Err0452, nullptr);
    SWAG_ERROR(Err0453, nullptr);
    SWAG_ERROR(Err0454, nullptr);
    SWAG_ERROR(Err0455, nullptr);
    SWAG_ERROR(Err0456, nullptr);
    SWAG_ERROR(Err0457, nullptr);
    SWAG_ERROR(Err0458, nullptr);
    SWAG_ERROR(Err0459, nullptr);
    SWAG_ERROR(Err0460, nullptr);
    SWAG_ERROR(Err0461, nullptr);
    SWAG_ERROR(Err0463, nullptr);
    SWAG_ERROR(Err0464, nullptr);
    SWAG_ERROR(Err0466, nullptr);
    SWAG_ERROR(Err0467, nullptr);
    SWAG_ERROR(Err0479, nullptr);
    SWAG_ERROR(Err0480, nullptr);
    SWAG_ERROR(Err0483, nullptr);
    SWAG_ERROR(Err0484, nullptr);
    SWAG_ERROR(Err0487, nullptr);
    SWAG_ERROR(Err0504, nullptr);
    SWAG_ERROR(Err0507, nullptr);
    SWAG_ERROR(Err0526, nullptr);
    SWAG_ERROR(Err0527, nullptr);
    SWAG_ERROR(Err0533, nullptr);
    SWAG_ERROR(Err0538, nullptr);
    SWAG_ERROR(Err0539, nullptr);
    SWAG_ERROR(Err0540, nullptr);
    SWAG_ERROR(Err0541, nullptr);
    SWAG_ERROR(Err0542, nullptr);
    SWAG_ERROR(Err0543, nullptr);
    SWAG_ERROR(Err0545, nullptr);
    SWAG_ERROR(Err0546, nullptr);
    SWAG_ERROR(Err0547, nullptr);
    SWAG_ERROR(Err0548, nullptr);
    SWAG_ERROR(Err0550, nullptr);
    SWAG_ERROR(Err0551, nullptr);
    SWAG_ERROR(Err0552, nullptr);
    SWAG_ERROR(Err0553, nullptr);
    SWAG_ERROR(Err0554, nullptr);
    SWAG_ERROR(Err0555, nullptr);
    SWAG_ERROR(Err0560, nullptr);
    SWAG_ERROR(Err0561, nullptr);
    SWAG_ERROR(Err0562, nullptr);
    SWAG_ERROR(Err0566, nullptr);
    SWAG_ERROR(Err0575, nullptr);
    SWAG_ERROR(Err0577, nullptr);
    SWAG_ERROR(Err0581, nullptr);
    SWAG_ERROR(Err0584, nullptr);
    SWAG_ERROR(Err0585, nullptr);
    SWAG_ERROR(Err0587, nullptr);
    SWAG_ERROR(Err0589, nullptr);
    SWAG_ERROR(Err0590, nullptr);
    SWAG_ERROR(Err0623, nullptr);
    SWAG_ERROR(Err0638, nullptr);
    SWAG_ERROR(Err0640, nullptr);
    SWAG_ERROR(Err0641, nullptr);
    SWAG_ERROR(Err0642, nullptr);
    SWAG_ERROR(Err0643, nullptr);
    SWAG_ERROR(Err0644, nullptr);
    SWAG_ERROR(Err0647, nullptr);
    SWAG_ERROR(Err0649, nullptr);
    SWAG_ERROR(Err0650, nullptr);
    SWAG_ERROR(Err0651, nullptr);
    SWAG_ERROR(Err0653, nullptr);
    SWAG_ERROR(Err0656, nullptr);
    SWAG_ERROR(Err0658, nullptr);
    SWAG_ERROR(Err0663, nullptr);
    SWAG_ERROR(Err0665, nullptr);
    SWAG_ERROR(Err0726, nullptr);
    SWAG_ERROR(Err0735, nullptr);
    SWAG_ERROR(Err0736, nullptr);
    SWAG_ERROR(Err0750, nullptr);
    SWAG_ERROR(Err0816, nullptr);
    SWAG_ERROR(Err0817, nullptr);
    SWAG_ERROR(Err0818, nullptr);
    SWAG_ERROR(Err0819, nullptr);
    SWAG_ERROR(Err0823, nullptr);
    SWAG_ERROR(Err0824, nullptr);
    SWAG_ERROR(Err0825, nullptr);
    SWAG_ERROR(Err0826, nullptr);
    SWAG_ERROR(Err0835, nullptr);
    SWAG_ERROR(Err0836, nullptr);
    SWAG_ERROR(Err0837, nullptr);
    SWAG_ERROR(Err0838, nullptr);
    SWAG_ERROR(Err0839, nullptr);
    SWAG_ERROR(Err0840, nullptr);
    SWAG_ERROR(Err0841, nullptr);
    SWAG_ERROR(Err0842, nullptr);
    SWAG_ERROR(Err0843, nullptr);
    SWAG_ERROR(Err0844, nullptr);
    SWAG_ERROR(Err0845, nullptr);
    SWAG_ERROR(Err0846, nullptr);
    SWAG_ERROR(Err0847, nullptr);
    SWAG_ERROR(Err0849, nullptr);
    SWAG_ERROR(Err0850, nullptr);
    SWAG_ERROR(Err0851, nullptr);
    SWAG_ERROR(Err0853, nullptr);
    SWAG_ERROR(Err0854, nullptr);
    SWAG_ERROR(Err0855, nullptr);
    SWAG_ERROR(Err0856, nullptr);
    SWAG_ERROR(Err0857, nullptr);
    SWAG_ERROR(Err0861, nullptr);
    SWAG_ERROR(Err0862, nullptr);
    SWAG_ERROR(Err0863, nullptr);
    SWAG_ERROR(Err0864, nullptr);
    SWAG_ERROR(Err0865, nullptr);
    SWAG_ERROR(Err0867, nullptr);
    SWAG_ERROR(Err0868, nullptr);
    SWAG_ERROR(Err0869, nullptr);
    SWAG_ERROR(Err0870, nullptr);
    SWAG_ERROR(Err0871, nullptr);
    SWAG_ERROR(Err0872, nullptr);
    SWAG_ERROR(Err0874, nullptr);
    SWAG_ERROR(Err0876, nullptr);
    SWAG_ERROR(Err0877, nullptr);
    SWAG_ERROR(Err0878, nullptr);
    SWAG_ERROR(Err0879, nullptr);
    SWAG_ERROR(Err0883, nullptr);
    SWAG_ERROR(Err0885, nullptr);
    SWAG_ERROR(Err0886, nullptr);
    SWAG_ERROR(Err0888, nullptr);
    SWAG_ERROR(Err0891, nullptr);
    SWAG_ERROR(Err0892, nullptr);
    SWAG_ERROR(Err0894, nullptr);
    SWAG_ERROR(Err0895, nullptr);
    SWAG_ERROR(Err0896, nullptr);
    SWAG_ERROR(Err0897, nullptr);
    SWAG_ERROR(Err0898, nullptr);
    SWAG_ERROR(Err0899, nullptr);
    SWAG_ERROR(Err0900, nullptr);
    SWAG_ERROR(Err0901, nullptr);
    SWAG_ERROR(Err0902, nullptr);
    SWAG_ERROR(Err0903, nullptr);
    SWAG_ERROR(Err0904, nullptr);
    SWAG_ERROR(Err0905, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Nte0042, "'%s' is a function missing the 'Swag.ConstExpr' attribute");
    SWAG_ERROR(Nte0041, "'%s' is a variable; variables within expressions aren't evaluated at compile-time");
    SWAG_ERROR(Nte0077, "'%s' might represent either a type or a field name");
    SWAG_ERROR(Nte0076, "'%s' might represent either a type or a parameter name");
    SWAG_ERROR(Nte0001, "'%s' serves as a %s for type '%s' that lacks a subscope");
    SWAG_ERROR(Nte0017, "'%s' was located within '%s' due to a 'using' field");
    SWAG_ERROR(Nte0108, "'==' is the comparison operator; did you intend to affect something with '='?");
    SWAG_ERROR(Nte0110, "'@alias' is only valid within a 'Swag.Macro' or 'Swag.Mixin' function");
    SWAG_ERROR(Nte0120, "'@mixin' is permitted exclusively inside a 'Swag.Mixin' function");
    SWAG_ERROR(Nte0112, "'Swag.Optim' should have either 'bytecode' or 'backend' as its value");
    SWAG_ERROR(Nte0145, "'closure' should be accompanied by capture parameters enclosed in '|...|'");
    SWAG_ERROR(Nte1019, "'discard' cannot be accociated with an intrinsic, as an intrinsic result should always be used");
    SWAG_ERROR(Nte1111, "'moveref' and 'ref' can't be used together");
    SWAG_ERROR(Nte1087, "'self' should be the first parameter");
    SWAG_ERROR(Nte0139, "'with' should be followed by a single identifier");
    SWAG_ERROR(Nte1077, "...than this");
    SWAG_ERROR(Nte1120, "a 'bool' type is expected here");
    SWAG_ERROR(Nte0005, "a 'string' is expected as the return type of an #ast block is 'string'");
    SWAG_ERROR(Nte0121, "a generic argument must be a literal or a type");
    SWAG_ERROR(Nte1114, "a return type is missing");
    SWAG_ERROR(Nte0124, "a standard function in an 'impl' block should not overshadow a function from the matching interface");
    SWAG_ERROR(Nte0115, "a struct special function should be defined within the corresponding 'impl' scope");
    SWAG_ERROR(Nte1103, "add '#type' before '%s' or specify a type if this is a field name");
    SWAG_ERROR(Nte0138, "add a 'break' if you want to exit without any action");
    SWAG_ERROR(Nte0137, "add a 'break' to exit, or use 'fallthrough' to continue to the next 'case'");
    SWAG_ERROR(Nte0062, "additionally, this can be converted");
    SWAG_ERROR(Nte0100, "an attribute is not a function; please consider removing it");
    SWAG_ERROR(Nte1121, "an implicit '@countof' is present here");
    SWAG_ERROR(Nte0045, "an instance of the generic function '%s'");
    SWAG_ERROR(Nte0067, "anticipating '%s' based on function return type");
    SWAG_ERROR(Nte0019, "applied on this %s");
    SWAG_ERROR(Nte1044, "arguments should follow in '()'");
    SWAG_ERROR(Nte0038, "associated command line option: '%s'");
    SWAG_ERROR(Nte1096, "attribute is unexpected");
    SWAG_ERROR(Nte0025, "attribute reference: '%s'");
    SWAG_ERROR(Nte0132, "both parts of an 'orelse' should be of identical type");
    SWAG_ERROR(Nte0060, "complication during the public export of '%s'");
    SWAG_ERROR(Nte0125, "consider 'typealias' to create an alias for %s");
    SWAG_ERROR(Nte1104, "consider adding '&' to get the address of this expression");
    SWAG_ERROR(Nte1130, "consider adding scope '%s' before '.'");
    SWAG_ERROR(Nte1025, "consider casting with 'cast(%s)'");
    SWAG_ERROR(Nte1026, "consider removing this");
    SWAG_ERROR(Nte0142, "consider using 'func' instead of 'mtd'");
    SWAG_ERROR(Nte0134, "consider writing 'impl %s' instead");
    SWAG_ERROR(Nte0147, "consider writing 'impl enum %s' instead");
    SWAG_ERROR(Nte1074, "copying an array of structs is not allowed here");
    SWAG_ERROR(Nte0102, "could 'self' be missing?");
    SWAG_ERROR(Nte1100, "default parameters of a lambda or closure can't be redefined");
    SWAG_ERROR(Nte1085, "detected an enum implementation block");
    SWAG_ERROR(Nte1122, "detected thrown error");
    SWAG_ERROR(Nte1131, "did you intend to use '='?");
    SWAG_ERROR(Nte0128, "consider adding 'using' before 'self' if you intend to access members of the instance directly");
    SWAG_ERROR(Nte1034, "doesn't return any value");
    SWAG_ERROR(Nte1080, "either remove this or replace with the scope '%s'");
    SWAG_ERROR(Nte0153, "employ '{}' for an intentional empty statement");
    SWAG_ERROR(Nte0053, "entity %s '%s' awaits the generation of type '%s'");
    SWAG_ERROR(Nte0050, "entity %s of type '%s'");
    SWAG_ERROR(Nte0049, "entity reference: '%s'");
    SWAG_ERROR(Nte0010, "entity status: '%s' is %s");
    SWAG_ERROR(Nte0033, "error during the '#validifx' validation of the call to '%s'");
    SWAG_ERROR(Nte0070, "evaluation failed during compile time");
    SWAG_ERROR(Nte0087, "execute swag with '--callstack' to obtain contextual details");
    SWAG_ERROR(Nte0009, "execute swag with '--dbg-catch' to initiate the bytecode debugger when an exception arises");
    SWAG_ERROR(Nte0002, "expected match");
    SWAG_ERROR(Nte1035, "expecting an identifier, but found an alias");
    SWAG_ERROR(Nte0130, "for an infinite loop, use 'loop { ... }'");
    SWAG_ERROR(Nte0136, "force the evaluation using '#run'");
    SWAG_ERROR(Nte0114, "function names that start with 'op' followed by an uppercase letter are reserved for struct special functions");
    SWAG_ERROR(Nte0116, "function parameters are immutable and can't be modified");
    SWAG_ERROR(Nte0048, "function reference: '%s'");
    SWAG_ERROR(Nte0068, "generic parameter '%s' of %s can be found here");
    SWAG_ERROR(Nte0008, "here is %s '%s'");
    SWAG_ERROR(Nte0090, "here is %s '%s'");
    SWAG_ERROR(Nte0040, "here is '%s'");
    SWAG_ERROR(Nte0016, "here is an alternative reference");
    SWAG_ERROR(Nte0021, "here is another reference");
    SWAG_ERROR(Nte0000, "here is its declaration");
    SWAG_ERROR(Nte0026, "here is the %s");
    SWAG_ERROR(Nte0028, "here is the declaration");
    SWAG_ERROR(Nte0031, "here is the deprecated definition");
    SWAG_ERROR(Nte0023, "here is the immutable value reference");
    SWAG_ERROR(Nte0007, "here is the item '%s'");
    SWAG_ERROR(Nte0035, "here is the other '#import'");
    SWAG_ERROR(Nte0036, "here is the other definition");
    SWAG_ERROR(Nte0063, "here is the other return statement");
    SWAG_ERROR(Nte0014, "here is the other value reference");
    SWAG_ERROR(Nte0037, "here is the preceding definition");
    SWAG_ERROR(Nte0024, "here is the prior declaration");
    SWAG_ERROR(Nte0032, "here is the problematic attribute");
    SWAG_ERROR(Nte0015, "here is the reference");
    SWAG_ERROR(Nte0030, "here is the tuple's definition");
    SWAG_ERROR(Nte0039, "here is the variable's declaration");
    SWAG_ERROR(Nte0064, "here's the field causing the recursion");
    SWAG_ERROR(Nte1047, "hidden call to '%s' detected");
    SWAG_ERROR(Nte1119, "identified an enum value");
    SWAG_ERROR(Nte1059, "identified as the first usage");
    SWAG_ERROR(Nte1005, "if intended, consider initializing with 'undefined'");
    SWAG_ERROR(Nte1124, "if intended, consider add 'impl' before this");
    SWAG_ERROR(Nte1092, "if this is intentional, consider renaming it to '_%s' to indicate it's unused");
    SWAG_ERROR(Nte1023, "if you don't need the return value, prefix this call with 'discard'");
    SWAG_ERROR(Nte0104, "if you want to declare a lambda type, use 'func(' or 'closure('");
    SWAG_ERROR(Nte0135, "if you were trying to compare values, you should use '==' instead");
    SWAG_ERROR(Nte1007, "initial initialization noted here");
    SWAG_ERROR(Nte0127, "internal structs should not export their special functions");
    SWAG_ERROR(Nte1001, "invalid arguments passed to this intrinsic");
    SWAG_ERROR(Nte0072, "issue detected during compile-time evaluation");
    SWAG_ERROR(Nte0078, "issue during the '#validif' validation of struct '%s'");
    SWAG_ERROR(Nte0059, "issue during the inline expansion of '%s'");
    SWAG_ERROR(Nte0004, "issue identified in auto-generated code");
    SWAG_ERROR(Nte0057, "literal suffix reference: '%s'");
    SWAG_ERROR(Nte1050, "local variable declared with 'let' is immutable");
    SWAG_ERROR(Nte0089, "missing %s of specified type '%s'");
    SWAG_ERROR(Nte0088, "missing item '%s' of type '%s'");
    SWAG_ERROR(Nte1071, "missing parameter identified");
    SWAG_ERROR(Nte0034, "missing value reference can be found here");
    SWAG_ERROR(Nte0012, "note: Use '-w:<path>' or '--workspace:<path>' to specify a valid workspace folder or run swag from an appropriate workspace");
    SWAG_ERROR(Nte1106, "observed an immutable struct parameter");
    SWAG_ERROR(Nte1115, "one function declares 'throw' while the other doesn't");
    SWAG_ERROR(Nte1112, "only the address of a returned reference can be taken, and this is %s");
    SWAG_ERROR(Nte0150, "only variables can be initialized in this manner");
    SWAG_ERROR(Nte1110, "operation not allowed because 'void' doesn't have a size");
    SWAG_ERROR(Nte1109, "operation not allowed on non-pointer types");
    SWAG_ERROR(Nte1105, "operation not allowed on type '%s'");
    SWAG_ERROR(Nte1061, "operation not allowed");
    SWAG_ERROR(Nte0075, "origin of instantiation type '%s' is here");
    SWAG_ERROR(Nte0066, "parameter '%s' of %s can be found here");
    SWAG_ERROR(Nte1113, "parameter mismatch detected");
    SWAG_ERROR(Nte1088, "parameter set with a default value");
    SWAG_ERROR(Nte0146, "pointer arithmetic is only valid for pointers declared with '^', not '*'");
    SWAG_ERROR(Nte1037, "pointer can be dereferenced using 'dref'");
    SWAG_ERROR(Nte0086, "possibly derived from enum '%s'");
    SWAG_ERROR(Nte0022, "potential issue detected in your program's compile-time component");
    SWAG_ERROR(Nte1046, "prefix with '#run' to enforce a compile-time call");
    SWAG_ERROR(Nte1081, "primary instance noted here");
    SWAG_ERROR(Nte0054, "problem arose during the '#validif' validation of the call to '%s'");
    SWAG_ERROR(Nte0061, "problem encountered during generic instantiation of '%s'");
    SWAG_ERROR(Nte0055, "problem matching type with the other part of the conditional expression");
    SWAG_ERROR(Nte0126, "public structs should export all their special functions");
    SWAG_ERROR(Nte1055, "requires explicit initialization");
    SWAG_ERROR(Nte1012, "return (%s) should be of type '%s'");
    SWAG_ERROR(Nte0069, "runtime argument corresponding to '%s' can be found here");
    SWAG_ERROR(Nte1045, "second initialization observed");
    SWAG_ERROR(Nte1009, "secondary instance observed");
    SWAG_ERROR(Nte1053, "this should be 'const' but isn't");
    SWAG_ERROR(Nte1021, "this should be a pointer type");
    SWAG_ERROR(Nte1058, "this should be an integer type");
    SWAG_ERROR(Nte1004, "this should be designated as 'const %s'");
    SWAG_ERROR(Nte1056, "should be succeeded by generic arguments");
    SWAG_ERROR(Nte1052, "should cast to a sized integer like 's32', 's64', etc.");
    SWAG_ERROR(Nte1051, "should cast to either 'f32' or 'f64'");
    SWAG_ERROR(Nte1116, "should cast to the base 'any' type");
    SWAG_ERROR(Nte0081, "should conform to type '%s'");
    SWAG_ERROR(Nte1108, "should point to '%s'");
    SWAG_ERROR(Nte1094, "should this be removed?")
    SWAG_ERROR(Nte0109, "struct member names that begin with 'item' are reserved by the language");
    SWAG_ERROR(Nte0043, "the %s '%s' wasn't found in '%s'. The alternative from '%s' was selected");
    SWAG_ERROR(Nte1060, "the 'dref' operation isn't possible here");
    SWAG_ERROR(Nte0074, "the UFCS argument is derived from 'this'");
    SWAG_ERROR(Nte0084, "the UFCS argument is derived from an implicit 'using const self' parameter");
    SWAG_ERROR(Nte0073, "the UFCS argument originates from an implicit 'using self' parameter");
    SWAG_ERROR(Nte0113, "the acceptable values for 'Swag.ExportType' are 'methods' and 'nozero'");
    SWAG_ERROR(Nte0111, "the allowed safety values are 'boundcheck|overflow|math|switch|unreachable|any|bool|nan|sanity|null'");
    SWAG_ERROR(Nte1123, "the array has %d elements of type '%s', which doesn't match a slice of type '%s'");
    SWAG_ERROR(Nte0018, "the concealed call to '%s' returns type '%s', lacking a subscope");
    SWAG_ERROR(Nte0148, "the correct values for 'Swag.Match' are 'validif|self'");
    SWAG_ERROR(Nte0056, "the counterpart is an implicit 'using self' as an initial parameter");
    SWAG_ERROR(Nte1000, "the divisor expression evaluates to zero");
    SWAG_ERROR(Nte0046, "the entity %s '%s' awaits resolution of %s '%s'");
    SWAG_ERROR(Nte0011, "the entity %s is tagged with 'Swag.CalleeReturn', implying the return is utilized within %s");
    SWAG_ERROR(Nte1039, "the function call returns an immutable '%s'");
    SWAG_ERROR(Nte1093, "the function doesn't accept type '%s' as its first argument");
    SWAG_ERROR(Nte1062, "the initial value suggests that all other types should be '%s'");
    SWAG_ERROR(Nte0083, "the interface declaration returns type '%s'");
    SWAG_ERROR(Nte0082, "the interface declaration yields no return");
    SWAG_ERROR(Nte0131, "the interface member can also be declared with 'mtd' instead of 'func'");
    SWAG_ERROR(Nte0154, "the keyword '%s' can't be used as an identifier");
    SWAG_ERROR(Nte1086, "the parent scope for 'impl' is '%s', however the parent scope for '%s' is '%s'");
    SWAG_ERROR(Nte0047, "the resulting type is '%s'");
    SWAG_ERROR(Nte0044, "the symbol '%s' is already present in the interface scope '%s'");
    SWAG_ERROR(Nte0013, "the symbol '%s' was located through a 'using' statement");
    SWAG_ERROR(Nte1128, "the tuple is represented as %s");
    SWAG_ERROR(Nte0079, "the type '%s' doesn't meet the constraint '%s'");
    SWAG_ERROR(Nte0080, "the type '%s' fails to meet the given constraint");
    SWAG_ERROR(Nte1063, "the type evaluates to '%s'");
    SWAG_ERROR(Nte1032, "the type is '%s' (consider an explicit 'cast(%s)' if needed)");
    SWAG_ERROR(Nte1011, "the type is identified as '%s'");
    SWAG_ERROR(Nte0085, "the version format should be 'version.revision.buildnum', where each number is either >= 0 or the '?' character");
    SWAG_ERROR(Nte0051, "there's a concealed call to '%s' for the type '%s'");
    SWAG_ERROR(Nte1083, "there's a missing '%s' of type '%s'");
    SWAG_ERROR(Nte1049, "there's an implied first parameter 'self'");
    SWAG_ERROR(Nte1070, "this %s has the 'Swag.Compiler' attribute");
    SWAG_ERROR(Nte1084, "this %s is of type '%s'");
    SWAG_ERROR(Nte1127, "this %s has '%s' access");
    SWAG_ERROR(Nte0006, "this 'using' field is convertible");
    SWAG_ERROR(Nte0144, "this appears to be a potentially invalid UFCS call");
    SWAG_ERROR(Nte1030, "this argument has been named");
    SWAG_ERROR(Nte1031, "this argument lacks a name");
    SWAG_ERROR(Nte1072, "this array is empty");
    SWAG_ERROR(Nte1024, "this denotes a pointer type declaration due to '*'");
    SWAG_ERROR(Nte1010, "this denotes a tuple type");
    SWAG_ERROR(Nte1006, "this element can't be accessed");
    SWAG_ERROR(Nte1090, "this expression evaluates to '%f'");
    SWAG_ERROR(Nte1091, "this expression evaluates to '%lld'");
    SWAG_ERROR(Nte1033, "this expression results in 0");
    SWAG_ERROR(Nte0071, "this function call couldn't be evaluated at compile time");
    SWAG_ERROR(Nte1057, "this function can't be instantiated");
    SWAG_ERROR(Nte1073, "this function doesn't support UFCS of type '%s'");
    SWAG_ERROR(Nte1078, "this function doesn't support aliased names");
    SWAG_ERROR(Nte1064, "this function is tagged with the 'Swag.Compiler' attribute");
    SWAG_ERROR(Nte1017, "this function is tagged with the 'Swag.Inline' attribute");
    SWAG_ERROR(Nte1015, "this function is tagged with the 'Swag.Macro' attribute");
    SWAG_ERROR(Nte1016, "this function is tagged with the 'Swag.Mixin' attribute");
    SWAG_ERROR(Nte1065, "this function is tagged with the 'Swag.Test' attribute");
    SWAG_ERROR(Nte1018, "this is a constant");
    SWAG_ERROR(Nte1079, "this is a lambda expression");
    SWAG_ERROR(Nte1028, "this is a literal, but a type was expected");
    SWAG_ERROR(Nte1029, "this is a parameter");
    SWAG_ERROR(Nte1036, "this is a pointer and can't be accessed");
    SWAG_ERROR(Nte1027, "this is a type but a literal was expected");
    SWAG_ERROR(Nte1054, "this is a type, not a value");
    SWAG_ERROR(Nte0143, "this is ambiguous; consider removing one 'using'");
    SWAG_ERROR(Nte1099, "this is an unnamed '?' parameter");
    SWAG_ERROR(Nte0106, "this is unexpected in global scope");
    SWAG_ERROR(Nte1038, "this isn't a constant");
    SWAG_ERROR(Nte1076, "this needs to be in lowercase");
    SWAG_ERROR(Nte1089, "this parameter should also have a default value");
    SWAG_ERROR(Nte0141, "this parameter type doesn't have related memory storage");
    SWAG_ERROR(Nte1003, nullptr);
    SWAG_ERROR(Nte1075, "this should be a namespace, function, or variable instead of a type");
    SWAG_ERROR(Nte1125, "this slice appears to be null or empty");
    SWAG_ERROR(Nte0122, "this specific constant doesn't have associated memory storage");
    SWAG_ERROR(Nte1126, "this string seems to be null or empty");
    SWAG_ERROR(Nte1068, "this tuple has '%d' field(s)");
    SWAG_ERROR(Nte1069, "this tuple seems to be empty");
    SWAG_ERROR(Nte1022, "this type is immutable");
    SWAG_ERROR(Nte1067, "this unpacks into '%d' variable(s)");
    SWAG_ERROR(Nte1002, "this value can only be converted to type '%s' with a dynamic call to 'opAffect'");
    SWAG_ERROR(Nte1040, "this value is a 'typeinfo'");
    SWAG_ERROR(Nte0003, "this variable might leave the current frame");
    SWAG_ERROR(Nte0152, "to begin a new block, consider moving '{' to a new line");
    SWAG_ERROR(Nte0020, "to close this you need '%s'");
    SWAG_ERROR(Nte0105, "to dereference variable '%s' as in C, employ 'dref %s'");
    SWAG_ERROR(Nte0151, "to initiate a struct initialization of '%s', remove spaces between '%s' and '{'");
    SWAG_ERROR(Nte1066, "here is the tuple unpacking");
    SWAG_ERROR(Nte0052, "the type '%s' is expected due to %s");
    SWAG_ERROR(Nte0058, "unable to resolve type '%s'");
    SWAG_ERROR(Nte0065, "unable to resolve %s '%s'");
    SWAG_ERROR(Nte1097, "unnamed parameters ('?') should not have an explicitly specified type");
    SWAG_ERROR(Nte1101, "use '#type' before '%s' if it's a type, or specify a type with ':' if this is a parameter name");
    SWAG_ERROR(Nte0140, "use '++' to append strings at compile-time");
    SWAG_ERROR(Nte0133, "use '?' to unpack and ignore a variable");
    SWAG_ERROR(Nte0129, "use 'mtd' instead of 'func' to implicitly declare 'using self' as the first parameter");
    SWAG_ERROR(Nte0103, "you can assign a lambda to a closure type, but not vice versa");
    SWAG_ERROR(Nte1095, "you can't reference this runtime %s from the %s");
    SWAG_ERROR(Nte0149, "you might want to get the address of '%s' using '&'");
    SWAG_ERROR(Nte1020, "the symbol '...' is used to declare variadic function parameters, which is not valid in this context");
    SWAG_ERROR(Nte1102, "occured while parsing the default value of the generic type '%s'");
    SWAG_ERROR(Nte1043, "if you want to declare a generic constant, consider adding 'const' before '%s'");
    SWAG_ERROR(Nte1082, "if you want to retrieve the type of an expression, consider using '@decltype' instead")
    SWAG_ERROR(Nte1013, "it seems like you're trying to access a nested property of '%s', but '%s' itself isn't a value");
    SWAG_ERROR(Nte1129, nullptr);
    SWAG_ERROR(Nte1014, nullptr);
    SWAG_ERROR(Nte1098, nullptr);
    SWAG_ERROR(Nte1008, nullptr);
    SWAG_ERROR(Nte1118, nullptr);
    SWAG_ERROR(Nte1107, nullptr);
    SWAG_ERROR(Nte1042, nullptr);
    SWAG_ERROR(Nte1117, nullptr);
    SWAG_ERROR(Nte1048, nullptr);
    SWAG_ERROR(Nte1041, nullptr);
    SWAG_ERROR(Nte1132, nullptr);
    SWAG_ERROR(Nte1133, nullptr);
    SWAG_ERROR(Nte1134, nullptr);
    SWAG_ERROR(Nte1135, nullptr);
    SWAG_ERROR(Nte0029, nullptr);
    SWAG_ERROR(Nte0027, nullptr);
    SWAG_ERROR(Nte0118, nullptr);
    SWAG_ERROR(Nte0119, nullptr);
    SWAG_ERROR(Nte0101, nullptr);
    SWAG_ERROR(Nte0117, nullptr);
    SWAG_ERROR(Nte0107, nullptr);
    SWAG_ERROR(Nte0123, nullptr);
    SWAG_ERROR(Nte0091, nullptr);
    SWAG_ERROR(Nte0092, nullptr);
    SWAG_ERROR(Nte0093, nullptr);
    SWAG_ERROR(Nte0094, nullptr);
    SWAG_ERROR(Nte0095, nullptr);
    SWAG_ERROR(Nte0096, nullptr);
    SWAG_ERROR(Nte0097, nullptr);
    SWAG_ERROR(Nte0098, nullptr);
    SWAG_ERROR(Nte0099, nullptr);
}

Utf8 Err(ErrorID idx)
{
    return Fmt("[%s] %s", g_EI[idx], g_E[idx].c_str());
}

Utf8 ErrNte(ErrorID idx, bool forNote)
{
    if (forNote)
        return Nte(idx);
    return Err(idx);
}

Utf8 Nte(ErrorID idx)
{
    return g_E[idx];
}
