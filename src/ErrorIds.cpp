#include "pch.h"
#include "pch.h"
#include "pch.h"
#include "Utf8.h"
#include "ErrorIds.h"

#undef SWAG_ERROR
#define SWAG_ERROR(__enum) #__enum
const char* g_EI[] = {
#include "ErrorList.h"
};

Utf8 g_E[MAX_ERRORS];
#undef SWAG_ERROR
#define SWAG_ERROR(__n, __msg) g_E[(int) __n] = __msg;
void initErrors()
{
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Fat0003, "[fatal error] cannot create the cache directory '%s'");
    SWAG_ERROR(Fat0004, "[fatal error] cannot create the directory '%s'");
    SWAG_ERROR(Fat0005, "[fatal error] cannot create the file '%s'");
    SWAG_ERROR(Fat0006, "[fatal error] cannot create the public directory '%s'");
    SWAG_ERROR(Fat0007, "[fatal error] cannot create the script file '%s'");
    SWAG_ERROR(Fat0008, "[fatal error] cannot create the target directory '%s'");
    SWAG_ERROR(Fat0009, "[fatal error] cannot delete the directory '%s'");
    SWAG_ERROR(Fat0010, "[fatal error] cannot delete the file '%s'");
    SWAG_ERROR(Fat0011, "[fatal error] expected a workspace folder '--workspace'");
    SWAG_ERROR(Fat0012, "[fatal error] invalid module '%s', the configuration file '%s' is missing");
    SWAG_ERROR(Fat0013, "[fatal error] invalid script file extension, should be '.swgs' instead of '%s'");
    SWAG_ERROR(Fat0014, "[fatal error] invalid swag command '%s'");
    SWAG_ERROR(Fat0015, "[fatal error] invalid value for '--tag:%s' (%s)");
    SWAG_ERROR(Fat0016, "[fatal error] invalid workspace '%s', subfolder 'modules/' or 'tests/' does not exist");
    SWAG_ERROR(Fat0017, "[fatal error] missing script file, use '--file:<filename>.swgs' to specify a script to run");
    SWAG_ERROR(Fat0019, "[fatal error] not enough memory !");
    SWAG_ERROR(Fat0021, "[fatal error] some problems have been found in the compiler bootstrap !!!");
    SWAG_ERROR(Fat0022, "[fatal error] some problems have been found in the compiler runtime !!!");
    SWAG_ERROR(Fat0002, "[fatal error] the cache directory '%s' does not exist");
    SWAG_ERROR(Fat0018, "[fatal error] the module '%s' already exists in the '/modules' folder");
    SWAG_ERROR(Fat0020, "[fatal error] the script file '%s' does not exist");
    SWAG_ERROR(Fat0025, "[fatal error] the workspace folder '%s' already exists");
    SWAG_ERROR(Fat0026, "[fatal error] the workspace folder '%s' does not exist");
    SWAG_ERROR(Fat0023, "[fatal error] unexpected compile tag value '%s' (command is '--tag:%s')");
    SWAG_ERROR(Fat0024, "[fatal error] unknown compile tag type '%s' (command is '--tag:%s')");

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Saf0003, "[safety] '@abs' integer overflow (type is '%s')");
    SWAG_ERROR(Saf0027, "[safety] '@acos' invalid argument (type is '%s')");
    SWAG_ERROR(Saf0026, "[safety] '@asin' invalid argument (type is '%s')");
    SWAG_ERROR(Saf0023, "[safety] '@log' invalid argument (type is '%s')");
    SWAG_ERROR(Saf0025, "[safety] '@log10' invalid argument (type is '%s')");
    SWAG_ERROR(Saf0024, "[safety] '@log2' invalid argument (type is '%s')");
    SWAG_ERROR(Saf0022, "[safety] '@sqrt' invalid argument (type is '%s')");
    SWAG_ERROR(Saf0006, "[safety] cast from a negative value of type '%s' to an unsigned type '%s'");
    SWAG_ERROR(Saf0007, "[safety] division by zero");
    SWAG_ERROR(Saf0008, "[safety] index out of range");
    SWAG_ERROR(Saf0010, "[safety] integer overflow during '*' operation (type is '%s')");
    SWAG_ERROR(Saf0009, "[safety] integer overflow during '*=' operation (type is '%s')");
    SWAG_ERROR(Saf0012, "[safety] integer overflow during '+' operation (type is '%s')");
    SWAG_ERROR(Saf0011, "[safety] integer overflow during '+=' operation (type is '%s')");
    SWAG_ERROR(Saf0014, "[safety] integer overflow during '-' operation (type is '%s')");
    SWAG_ERROR(Saf0013, "[safety] integer overflow during '-=' operation (type is '%s')");
    SWAG_ERROR(Saf0015, "[safety] integer overflow during '<<' operation (type is '%s')");
    SWAG_ERROR(Saf0016, "[safety] integer overflow during '>>' operation (type is '%s')");
    SWAG_ERROR(Saf0017, "[safety] integer overflow when taking the negative value of type '%s'");
    SWAG_ERROR(Saf0020, "[safety] invalid boolean value (neither 'true' nor 'false')");
    SWAG_ERROR(Saf0021, "[safety] invalid float value (NaN)");
    SWAG_ERROR(Saf0004, "[safety] invalid slicing, the lower bound is greater than the upper bound");
    SWAG_ERROR(Saf0005, "[safety] invalid slicing, the upper bound is out of range");
    SWAG_ERROR(Saf0018, "[safety] truncated bits when casting expression from '%s' to '%s'");
    SWAG_ERROR(Saf0019, "[safety] unexpected switch value (switch is marked with 'Swag.Complete')");
    SWAG_ERROR(Saf0001, nullptr);
    SWAG_ERROR(Saf0002, nullptr);
    SWAG_ERROR(Saf0028, nullptr);
    SWAG_ERROR(Saf0029, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Tkn0020, "a digit separator '_' should not be followed by another digit separator");
    SWAG_ERROR(Tkn0021, "a digit separator '_' should not end a literal number");
    SWAG_ERROR(Tkn0023, "a digit separator '_' should not start a fractional part");
    SWAG_ERROR(Tkn0022, "a digit separator '_' should not start a literal number");
    SWAG_ERROR(Tkn0024, "a digit separator '_' should not start an exponent part");
    SWAG_ERROR(Tkn0002, "a floating point number exponent should have at least one digit");
    SWAG_ERROR(Tkn0003, "expected a binary digit, found '%s'");
    SWAG_ERROR(Tkn0004, "expected an hexadecimal digit, found '%s'");
    SWAG_ERROR(Tkn0001, "expected at least one digit in the binary number");
    SWAG_ERROR(Tkn0007, "expected at least one digit in the hexadecimal number");
    SWAG_ERROR(Tkn0008, "the literal number cannot fit in 64 bits");
    SWAG_ERROR(Tkn0009, "too many digits in the literal number");
    SWAG_ERROR(Tkn0017, "unexpected end of file found in the string literal");
    SWAG_ERROR(Tkn0018, "unexpected end of line found in the string literal");
    SWAG_ERROR(Tkn0019, "unexpected literal number prefix '%s' (should be '0x' or '0b')");

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Syn0182, "'#dependencies' should only be declared at the file level");
    SWAG_ERROR(Syn0183, "'#dependencies' should only be used in the module configuration file ('module.swg')");
    SWAG_ERROR(Syn0001, "'#global export' already defined");
    SWAG_ERROR(Syn0002, "'#global foreignlib' should be followed by a string");
    SWAG_ERROR(Syn0003, "'#global testerror' is invalid outside a test module (in the './tests' folder of the workspace)");
    SWAG_ERROR(Syn0004, "'#global testwarning' is invalid outside a test module (in the './tests' folder of the workspace)");
    SWAG_ERROR(Syn0005, "'#global using' can only be used in a module configuration file");
    SWAG_ERROR(Syn0006, "'#global' should be defined first, at the top of the file");
    SWAG_ERROR(Syn0007, "'#import' should be followed by a string");
    SWAG_ERROR(Syn0008, "'#import' should only be declared at the top level scope");
    SWAG_ERROR(Syn0009, "'#import' should only be used in the module configuration file ('module.swg')");
    SWAG_ERROR(Syn0010, "'#import' should only be used inside a '#dependencies' block");
    SWAG_ERROR(Syn0011, "'#include' should be followed by a string");
    SWAG_ERROR(Syn0012, "'#include' should only be declared at the top level scope");
    SWAG_ERROR(Syn0013, "'#include' should only be used in the module configuration file ('module.swg')");
    SWAG_ERROR(Syn0014, "'#include' should only be used inside a '#dependencies' block");
    SWAG_ERROR(Syn0015, "'#mixin' has an empty replacement block");
    SWAG_ERROR(Syn0016, "'#mixin' invalid replacement '%s'");
    SWAG_ERROR(Syn0017, "'#placeholder' should be followed by an identifier");
    SWAG_ERROR(Syn0018, "'%s' attribute should not be used in a file marked with '#global export' because the whole file is implicitly public");
    SWAG_ERROR(Syn0019, "'%s' should be immediatly followed by an identifier");
    SWAG_ERROR(Syn0020, "'%s' should not be used as an expression");
    SWAG_ERROR(Syn0021, "'%s' should only be used inside a function");
    SWAG_ERROR(Syn0022, "'.' in a 'with' statement should be followed by an identifier");
    SWAG_ERROR(Syn0023, "'@alias' special variable name should be followed by a number");
    SWAG_ERROR(Syn0024, "']' should not be followed by a line break when declaring an array type");
    SWAG_ERROR(Syn0181, "'default' already defined");
    SWAG_ERROR(Syn0025, "'mtd' or 'mtdc' can only be used in a struct or in an interface context");
    SWAG_ERROR(Syn0026, "'self' should only be used inside a struct or 'impl' block");
    SWAG_ERROR(Syn0027, "'self' should only be used inside an 'impl' block");
    SWAG_ERROR(Syn0028, "'throw' should only be used inside a function");
    SWAG_ERROR(Syn0029, "'using' on a member is invalid in an interface definition");
    SWAG_ERROR(Syn0030, "'var' is not necessary to declare a field inside a struct");
    SWAG_ERROR(Syn0031, "'{' is expected instead of '%s'");
    SWAG_ERROR(Syn0032, "a %s definition should appear at file or namespace scope");
    SWAG_ERROR(Syn0033, "a '#message' function should have a parameter of type 'Swag.CompilerMsgMask'");
    SWAG_ERROR(Syn0034, "a '#mixin' replacement block should only be used inside a breakable statement ('loop', 'visit', 'for' ...)");
    SWAG_ERROR(Syn0035, "a '#placeholder' should only be declared in a top level scope");
    SWAG_ERROR(Syn0036, "a global 'using' should be declared at the top of the file");
    SWAG_ERROR(Syn0037, "a line break or ';' is expected before '%s' to close the %s");
    SWAG_ERROR(Syn0038, "a method should not be declared inside an 'enum impl' block");
    SWAG_ERROR(Syn0039, "a method should only be declared inside an 'impl' block");
    SWAG_ERROR(Syn0040, "a namespace definition should appear either at file scope or immediately within another namespace definition");
    SWAG_ERROR(Syn0041, "a namespace name should be an identifier ('%s' provided)");
    SWAG_ERROR(Syn0042, "a variable name or '?' is expected in a tuple unpacking, found '%s'");
    SWAG_ERROR(Syn0043, "an '@alias' number should be in the range [0, 31] ('%u' provided)");
    SWAG_ERROR(Syn0044, "an intrinsic parameter expression cannot be empty");
    SWAG_ERROR(Syn0045, "const before a function parameter name can only be followed by 'self'");
    SWAG_ERROR(Syn0046, "empty tuple definition");
    SWAG_ERROR(Syn0047, "end of file reached, expected '%s' %s");
    SWAG_ERROR(Syn0048, "expected '%s' instead of '%s' %s");
    SWAG_ERROR(Syn0049, "expected '(' to start the closure parameters");
    SWAG_ERROR(Syn0050, "expected ',' or ']', found '%s'");
    SWAG_ERROR(Syn0051, "expected ':' after the variable name '%s', found a literal");
    SWAG_ERROR(Syn0052, "expected ':' or '=' in the variable declaration, found '%s'");
    SWAG_ERROR(Syn0053, "expected 'case' or 'default'");
    SWAG_ERROR(Syn0054, "expected '{' to start the %s body, found ';'");
    SWAG_ERROR(Syn0055, "expected a 'case' expression before ':'");
    SWAG_ERROR(Syn0056, "expected a 'case' expression before 'break'");
    SWAG_ERROR(Syn0057, "expected a closure capture argument after ',' and before '|'");
    SWAG_ERROR(Syn0184, "expected a constant name, found '%s'");
    SWAG_ERROR(Syn0058, "expected a generic name or a type");
    SWAG_ERROR(Syn0059, "expected a left expression");
    SWAG_ERROR(Syn0060, "expected a literal type qualifier after '''");
    SWAG_ERROR(Syn0061, "expected a pointer declaration '*' or '^' after 'const'");
    SWAG_ERROR(Syn0062, "expected a single identifier %s");
    SWAG_ERROR(Syn0063, "expected a struct name, found '%s'");
    SWAG_ERROR(Syn0064, "expected a top level instruction");
    SWAG_ERROR(Syn0065, "expected a tuple field name before ':', found '%s'");
    SWAG_ERROR(Syn0066, "expected a type declaration, found '%s'");
    SWAG_ERROR(Syn0067, "expected a type inside the tuple type definition, found '%s'");
    SWAG_ERROR(Syn0068, "expected a variable declaration");
    SWAG_ERROR(Syn0069, "expected a variable name, found '%s'");
    SWAG_ERROR(Syn0070, "expected a variable type or an assignment (':' or '=')");
    SWAG_ERROR(Syn0071, "expected an alias name, found '%s'");
    SWAG_ERROR(Syn0072, "expected an attribute name, found '%s'");
    SWAG_ERROR(Syn0073, "expected an embedded instruction or a curly block");
    SWAG_ERROR(Syn0074, "expected an enum name, found '%s'");
    SWAG_ERROR(Syn0075, "expected an enum value identifier, found '%s'");
    SWAG_ERROR(Syn0076, "expected an expression");
    SWAG_ERROR(Syn0077, "expected an identifier");
    SWAG_ERROR(Syn0078, "expected an identifier, found '%s'");
    SWAG_ERROR(Syn0079, "expected an identifier, found a literal");
    SWAG_ERROR(Syn0082, "expected the '#global if' expression");
    SWAG_ERROR(Syn0083, "expected the '#if' expression");
    SWAG_ERROR(Syn0084, "expected the 'if' boolean expression before '{'");
    SWAG_ERROR(Syn0085, "expected the 'loop' expression to evaluate before '{'");
    SWAG_ERROR(Syn0086, "expected the 'visit' expression to evaluate before '{'");
    SWAG_ERROR(Syn0087, "expected the 'while' boolean expression before '{'");
    SWAG_ERROR(Syn0088, "expected the array type declaration, found '%s'");
    SWAG_ERROR(Syn0089, "expected the function name instead of '%s'");
    SWAG_ERROR(Syn0090, "expected the function parameter type or assignment (':' or '=')");
    SWAG_ERROR(Syn0091, "expected the function parameters before '{'");
    SWAG_ERROR(Syn0092, "expected the generic parameters");
    SWAG_ERROR(Syn0093, "expected the namespace name before ';'");
    SWAG_ERROR(Syn0094, "expected the namespace name before '{'");
    SWAG_ERROR(Syn0095, "expected the slice type declaration, found '%s'");
    SWAG_ERROR(Syn0096, "expected the type of the array after the dimensions, but found '%s'");
    SWAG_ERROR(Syn0097, "found '#elif' without a corresponding '#if'");
    SWAG_ERROR(Syn0098, "found '#else' without a corresponding '#if'");
    SWAG_ERROR(Syn0099, "found ')' without a corresponding opening '('");
    SWAG_ERROR(Syn0100, "found ']' without a corresponding opening '['");
    SWAG_ERROR(Syn0101, "found 'elif' without a corresponding 'if'");
    SWAG_ERROR(Syn0102, "found 'else' without a corresponding 'if'");
    SWAG_ERROR(Syn0103, "found '}' without a corresponding opening '{'");
    SWAG_ERROR(Syn0104, "generating an 'impl' block is only possible in a '#message' with 'Swag.CompilerMsgMask.AttributeGen'");
    SWAG_ERROR(Syn0105, "invalid '%s', use '%s' instead to do a logical test");
    SWAG_ERROR(Syn0106, "invalid function name '%s'");
    SWAG_ERROR(Syn0107, "invalid label name, identifier expected");
    SWAG_ERROR(Syn0108, "invalid label name, you should add ';' or put a valid label identifier");
    SWAG_ERROR(Syn0109, "invalid location '%s'");
    SWAG_ERROR(Syn0110, "invalid named parameter '%s'");
    SWAG_ERROR(Syn0111, "invalid variable name '%s' (cannot start with '@')");
    SWAG_ERROR(Syn0112, "invalid variable name '%s'");
    SWAG_ERROR(Syn0113, "invalid version '%s'");
    SWAG_ERROR(Syn0114, "mismatched types for the upper bound of the slice, integer expected ('%s' provided)");
    SWAG_ERROR(Syn0115, "opVisit special name expected");
    SWAG_ERROR(Syn0116, "the '#import' location is defined twice");
    SWAG_ERROR(Syn0117, "the '#import' version is defined twice");
    SWAG_ERROR(Syn0118, "the '%s' namespace is reserved by the compiler");
    SWAG_ERROR(Syn0119, "the '@mixin' special variable name should be followed by a number");
    SWAG_ERROR(Syn0120, "the array size should be defined before the type name");
    SWAG_ERROR(Syn0121, "the expose attribute '%s' should only be used in a global scope");
    SWAG_ERROR(Syn0122, "the identifier '%s' starts with '__', and this is reserved by the language");
    SWAG_ERROR(Syn0123, "the implementation block kind (%s) does not match the type of '%s' (%s)");
    SWAG_ERROR(Syn0124, "the initializer list is empty");
    SWAG_ERROR(Syn0125, "the instruction modifier '%s' is already used once");
    SWAG_ERROR(Syn0126, "the instruction modifier '%s' is invalid for '%s'");
    SWAG_ERROR(Syn0127, "the return value of intrinsic '%s' cannot be discarded");
    SWAG_ERROR(Syn0128, "the struct '%s' should be initialized in place with '{}' and not parenthesis");
    SWAG_ERROR(Syn0131, "the variable should have a type or should be initialized");
    SWAG_ERROR(Syn0132, "too many array dimensions (maximum is '254')");
    SWAG_ERROR(Syn0133, "too many pointer dimensions (maximum is '%u')");
    SWAG_ERROR(Syn0134, "tuple types in generic parameters are not (yet?) supported");
    SWAG_ERROR(Syn0135, "type 'Self' should not be used outside an 'impl', 'struct' or 'interface' block");
    SWAG_ERROR(Syn0136, "unexpected '#global' instruction '%s'");
    SWAG_ERROR(Syn0137, "unexpected '#selectif' or '#checkif' on special function '%s'");
    SWAG_ERROR(Syn0138, "unexpected '->' in attribute declaration");
    SWAG_ERROR(Syn0139, "unexpected '[' when accessing an array with multiple dimensions");
    SWAG_ERROR(Syn0140, "unexpected 'assume' inside '%s' expression");
    SWAG_ERROR(Syn0142, "unexpected 'defer' mode '%s'");
    SWAG_ERROR(Syn0143, "unexpected 'for' in an enum implementation block");
    SWAG_ERROR(Syn0144, "unexpected 'retval' as a function return type");
    SWAG_ERROR(Syn0146, "unexpected 'throw' inside '%s' expression");
    SWAG_ERROR(Syn0147, "unexpected 'try' inside '%s' expression");
    SWAG_ERROR(Syn0148, "unexpected affect expression in 'with'");
    SWAG_ERROR(Syn0149, "unexpected affect operator '==', do you mean '=' ?");
    SWAG_ERROR(Syn0150, "unexpected attribute usage ('%s') after the '%s' expose attribute");
    SWAG_ERROR(Syn0153, "unexpected closure definition at global scope");
    SWAG_ERROR(Syn0157, "unexpected declaration of multiple variables in 'with'");
    SWAG_ERROR(Syn0158, "unexpected empty 'case' statement");
    SWAG_ERROR(Syn0159, "unexpected empty attribute usage");
    SWAG_ERROR(Syn0160, "unexpected empty expression");
    SWAG_ERROR(Syn0161, "unexpected generic parameters for the variable '%s'");
    SWAG_ERROR(Syn0162, "unexpected generic parameters, should be naked");
    SWAG_ERROR(Syn0163, "unexpected interface lambda declaration");
    SWAG_ERROR(Syn0164, "unexpected label identifier '%s'");
    SWAG_ERROR(Syn0165, "unexpected lambda return type");
    SWAG_ERROR(Syn0166, "unexpected parameter name '%s'");
    SWAG_ERROR(Syn0167, "unexpected pass name '%s'");
    SWAG_ERROR(Syn0168, "unexpected special variable name '%s', '@alias' should be followed by a number ('%s' provided)");
    SWAG_ERROR(Syn0169, "unexpected special variable name '%s', '@mixin' should be followed by a number ('%s' provided)");
    SWAG_ERROR(Syn0170, "unexpected specified lambda parameter type");
    SWAG_ERROR(Syn0171, "unexpected symbol '%s' after the %s");
    SWAG_ERROR(Syn0172, "unexpected symbol '%s' in a type declaration");
    SWAG_ERROR(Syn0173, "unexpected token '%s' after 'discard'");
    SWAG_ERROR(Syn0174, "unexpected token '%s' after the '%s' expose attribute");
    SWAG_ERROR(Syn0175, "unexpected token '%s' in tuple type, ',' or '}' are expected here");
    SWAG_ERROR(Syn0176, "unexpected token, ',' expected");
    SWAG_ERROR(Syn0177, "unexpected tuple unpacking in %s");
    SWAG_ERROR(Syn0178, "unknown operator modifier '%s'");
    SWAG_ERROR(Syn0179, "unused return value of intrinsic '%s'");
    SWAG_ERROR(Syn0180, "usage of '.' in a statement is only valid inside a 'with' block");
    SWAG_ERROR(Syn0185, "the slicing operator '..<' should be followed by the upper bound expression");

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Err0013, "%s '%s' cannot be referenced in that context because it's not a value");
    SWAG_ERROR(Err0097, "%s '%s' has not been used as the first parameter to call '%s'");
    SWAG_ERROR(Err0316, "%s '%s' should be public because it is referenced in a public context");
    SWAG_ERROR(Err0747, "%s cannot be public");
    SWAG_ERROR(Err0505, "%s overflow, the maximum supported size is '0x%I64x' bytes");
    SWAG_ERROR(Err0006, "%s should be named because some arguments before are named");
    SWAG_ERROR(Err0738, "%s should have a default value because the parameter before have one");
    SWAG_ERROR(Err0606, "%s should return a value");
    SWAG_ERROR(Err0834, "%s size overflow");
    SWAG_ERROR(Err0255, "'#callerfunction' should only be used in a function parameter declaration");
    SWAG_ERROR(Err0254, "'#callerlocation' should only be used in a function parameter declaration");
    SWAG_ERROR(Err0336, "'#import' has a specific build number ('%d') but an undefined revision ('?')");
    SWAG_ERROR(Err0335, "'#import' has a specific revision ('%d') but an undefined major version ('?')");
    SWAG_ERROR(Err0286, "'#import' version already defined as '%s'");
    SWAG_ERROR(Err0288, "'#import' version invalid format");
    SWAG_ERROR(Err0239, "'#macro' should only be used inside a 'Swag.Macro' function");
    SWAG_ERROR(Err0348, "'#self' should only be used inside a function");
    SWAG_ERROR(Err0744, "'#test' functions should only be used in a test module (in the './tests' folder of the workspace)");
    SWAG_ERROR(Err0089, "'%s' cannot be evaluated at compile time");
    SWAG_ERROR(Err0788, "'%s' cannot have 'null' as a first parameter");
    SWAG_ERROR(Err0498, "'%s' count parameter should be an integer, but is '%s'");
    SWAG_ERROR(Err0495, "'%s' first parameter should be a pointer, but is '%s'");
    SWAG_ERROR(Err0248, "'%s' parameter cannot be evaluated at compile time");
    SWAG_ERROR(Err0249, "'%s' parameter should be a string, but is '%s'");
    SWAG_ERROR(Err0497, "'%s' second parameter should be a pointer to type '%s', but points to '%s'");
    SWAG_ERROR(Err0496, "'%s' second parameter should be a pointer, but is '%s'");
    SWAG_ERROR(Err0787, "'%s' should have a pointer as a first parameter");
    SWAG_ERROR(Err0711, "'%s' should have an arithmetic pointer as a first parameter");
    SWAG_ERROR(Err0858, "'%s' should not be followed by a line break %s");
    SWAG_ERROR(Err0137, "'%s' should not be used inside a struct special function ('%s' in that case)");
    SWAG_ERROR(Err0535, "'%s' should only be used before a function call that can raise errors (a function marked with 'throw')");
    SWAG_ERROR(Err0139, "'%s' should only be used before a function call, and '%s' is %s");
    SWAG_ERROR(Err0138, "'%s' should only be used inside a function marked with 'throw', and '%s' is not");
    SWAG_ERROR(Err0225, "cannot affect by index a type '%s' to '%s' because no corresponding function 'opIndexAffect' has been found in '%s'");
    SWAG_ERROR(Err0605, "'@abs' integer overflow");
    SWAG_ERROR(Err0427, "'@acos' is called with an invalid value");
    SWAG_ERROR(Err0426, "'@asin' is called with an invalid value");
    SWAG_ERROR(Err0800, "'@countof' should not be used on a tuple type");
    SWAG_ERROR(Err0797, "'@dataof' should not be applied to expression of type '%s'");
    SWAG_ERROR(Err0796, "'@dataof' should not be used on a tuple type");
    SWAG_ERROR(Err0283, "'@gettag' default value expected, found a type");
    SWAG_ERROR(Err0245, "'@gettag' name expected, found a type");
    SWAG_ERROR(Err0630, "'@index' should only be used inside a breakable loop ('visit', 'loop' ...)");
    SWAG_ERROR(Err0428, "'@log' is called with an invalid value");
    SWAG_ERROR(Err0424, "'@log10' is called with an invalid value");
    SWAG_ERROR(Err0423, "'@log2' is called with an invalid value");
    SWAG_ERROR(Err0790, "'@mkany' cannot have 'null' as a first parameter");
    SWAG_ERROR(Err0792, "'@mkany' should have a 'typeinfo' or a type value as a second parameter ('%s' provided)");
    SWAG_ERROR(Err0789, "'@mkany' should have a pointer as a first parameter");
    SWAG_ERROR(Err0784, "'@mkcallback' should have a lambda value as a first parameter");
    SWAG_ERROR(Err0786, "'@mkcallback' should not be used with a function that returns type '%s' (only simple types are supported)");
    SWAG_ERROR(Err0785, "'@mkcallback' should not be used with a function with more than '%d' parameters ('%d' provided)");
    SWAG_ERROR(Err0783, "'@mkforeign' should have a 'const *void' as a second parameter");
    SWAG_ERROR(Err0782, "'@mkforeign' should have a lambda type as a first parameter");
    SWAG_ERROR(Err0793, "'@mkinterface' should have a one dimension pointer or a struct as a first parameter");
    SWAG_ERROR(Err0794, "'@mkinterface' should have a typeinfo as a second parameter");
    SWAG_ERROR(Err0795, "'@mkinterface' should have an interface as a third parameter");
    SWAG_ERROR(Err0730, "'@mkstring' should have a pointer to 'u8' as a first parameter");
    SWAG_ERROR(Err0417, "'@pow' is called with some invalid values ('%.3f' and '%.3f')");
    SWAG_ERROR(Err0084, "'@runes' should have a string as a parameter ('%s' provided)");
    SWAG_ERROR(Err0806, "'@spread' can only be called as a function parameter");
    SWAG_ERROR(Err0425, "'@sqrt' is called with an invalid value");
    SWAG_ERROR(Err0852, "'AttributeUsage.KindMsgGen' can only be used with 'AttributeUsage.Struct' or 'AttributeUsage.Enum'");
    SWAG_ERROR(Err0253, "'\\U' escape code needs 8 of them");
    SWAG_ERROR(Err0224, "'\\u' escape code needs 4 of them");
    SWAG_ERROR(Err0184, "'\\x' escape code needs 2 of them");
    SWAG_ERROR(Err0632, "'break' should only be used inside a breakable block");
    SWAG_ERROR(Err0859, "'compileString' cannot be executed in the current context (this is too late)");
    SWAG_ERROR(Err0637, "'continue' should only be used inside a breakable loop ('for', 'visit', 'loop', 'while' ...)");
    SWAG_ERROR(Err0635, "'fallthrough' should not be used in the last 'case' of a 'switch'");
    SWAG_ERROR(Err0634, "'fallthrough' should only be used inside a 'case' block");
    SWAG_ERROR(Err0633, "'fallthrough' should only be used inside a 'switch' block");
    SWAG_ERROR(Err0559, "'move' cannot be applied to an immutable expression (type is '%s')");
    SWAG_ERROR(Err0075, "'opVisit' should have the 'Swag.Macro' attribute");
    SWAG_ERROR(Err0668, "'using' is not possible on a constant");
    SWAG_ERROR(Err0692, "'using' is not possible on a variable of type '%s'");
    SWAG_ERROR(Err0695, "'using' is not possible on type '%s' (expected a namespace, a struct, an enum or a variable)");
    SWAG_ERROR(Err0669, "'using' on a field is only valid for a struct type ('%s' provided)");
    SWAG_ERROR(Err0689, "'using' on a variable should not be used in '%s' scope");
    SWAG_ERROR(Err0822, "'using' on a variable with a pointer type is only possible for a pointer to a struct (and pointed type is '%s')");
    SWAG_ERROR(Err0703, "'with' should not be used on type '%s' (expected a namespace, an enum or a struct)");
    SWAG_ERROR(Err0763, "a %s cannot be marked with the 'Swag.Inline' attribute");
    SWAG_ERROR(Err0761, "a %s cannot be marked with the 'Swag.Macro' attribute");
    SWAG_ERROR(Err0762, "a %s cannot be marked with the 'Swag.Mixin' attribute");
    SWAG_ERROR(Err0512, "a %s cannot be marked with the 'Swag.NoReturn' attribute");
    SWAG_ERROR(Err0860, "a %s cannot be marked with the 'Swag.NotGeneric' attribute");
    SWAG_ERROR(Err0804, "a '#message' block should have a parameter of type 'Swag.CompilerMsgMask' ('%s' provided)");
    SWAG_ERROR(Err0198, "a '#run' block should not be used as an expression");
    SWAG_ERROR(Err0233, "a '#selectif' expression should be of type 'bool' ('%s' provided)");
    SWAG_ERROR(Err0301, "a '@mixin' number should be in the range [0, 9] ('%u' provided)");
    SWAG_ERROR(Err0596, "a 'Swag.Align' value should be a power of two ('%d' provided)");
    SWAG_ERROR(Err0811, "a 'Swag.Foreign' module name should not be empty");
    SWAG_ERROR(Err0813, "a 'Swag.Foreign' module name should not have a file extension starting with '.'");
    SWAG_ERROR(Err0595, "a 'Swag.Pack' value should be 0 or a power of two ('%d' provided)");
    SWAG_ERROR(Err0833, "a bit inversion operation is not allowed on type '%s'");
    SWAG_ERROR(Err0060, "a compiler constant cannot be referenced at runtime");
    SWAG_ERROR(Err0298, "a constant should be explicitly initialized");
    SWAG_ERROR(Err0419, "a cycle has been detected during resolution of %s '%s'");
    SWAG_ERROR(Err0764, "a function cannot return a value of type '%s'");
    SWAG_ERROR(Err0742, "a function with the 'Swag.Foreign' attribute cannot have a body");
    SWAG_ERROR(Err0745, "a function with the 'Swag.Test' attribute cannot have a return value");
    SWAG_ERROR(Err0746, "a function with the 'Swag.Test' attribute cannot have parameters");
    SWAG_ERROR(Err0313, "a global variable cannot be declared as 'public'");
    SWAG_ERROR(Err0532, "a literal with a suffix (in that case '%s') should only be used in a struct conversion");
    SWAG_ERROR(Err0393, "a namespace cannot have the same name as the module ('%s')");
    SWAG_ERROR(Err0299, "a non mutable variable should be explicitly initialized");
    SWAG_ERROR(Err0446, "a parameter of type 'cvarargs' cannot be passed from function to function");
    SWAG_ERROR(Err0040, "a partial type alias ('%s') for a generic struct instantiation is not supported");
    SWAG_ERROR(Err0024, "a pointer to 'Swag.TypeInfo' should be 'const'");
    SWAG_ERROR(Err0628, "a pointer type ('%s') cannot be visited with 'visit'");
    SWAG_ERROR(Err0300, "a reference should be explicitly initialized");
    SWAG_ERROR(Err0173, "a shift operand should be of type 'u32' and not '%s'");
    SWAG_ERROR(Err0009, "a slice can only be compared to 'null'");
    SWAG_ERROR(Err0625, "a special visit name is only valid for a struct (and type is '%s')");
    SWAG_ERROR(Err0295, "a struct cannot be initialized twice");
    SWAG_ERROR(Err0607, "a switch without an expression cannot be marked as 'Swag.Complete'");
    SWAG_ERROR(Err0734, "a variadic parameter should be the last one");
    SWAG_ERROR(Err0030, "alias should not be used on %s");
    SWAG_ERROR(Err0034, "ambiguous conversion of struct '%s' to interface '%s'");
    SWAG_ERROR(Err0115, "ambiguous resolution of generic %s '%s'");
    SWAG_ERROR(Err0182, "ambiguous resolution of special function '%s'");
    SWAG_ERROR(Err0116, "ambiguous resolution of symbol '%s'");
    SWAG_ERROR(Err0027, "an alias should only be used with a type or an identifier");
    SWAG_ERROR(Err0485, "an array access value should be of type integer ('%s' provided)");
    SWAG_ERROR(Err0684, "an embedded interface ('%s') cannot be public");
    SWAG_ERROR(Err0675, "an embedded struct ('%s') cannot be public");
    SWAG_ERROR(Err0488, "an expression of type '%s' cannot be dereferenced like a pointer");
    SWAG_ERROR(Err0807, "an expression of type '%s' cannot be spreaded");
    SWAG_ERROR(Err0629, "an expression of type '%s' cannot be visited with 'visit'");
    SWAG_ERROR(Err0136, "an identifier with a backtick should only be used inside a 'Swag.Macro' function or an '#inline' block");
    SWAG_ERROR(Err0010, "an interface can only be compared to 'null' or to another interface");
    SWAG_ERROR(Err0676, "an interface can only contain members of type 'lambda' ('%s' provided)");
    SWAG_ERROR(Err0682, "an interface member cannot be relocated with 'Swag.Offset'");
    SWAG_ERROR(Err0282, "attempt to unpack '%d' variable(s), but the expression on the right contains '%d' element(s)");
    SWAG_ERROR(Err0293, "attempt to unpack '%u' variable(s), but the tuple on the right contains '%u' field(s)");
    SWAG_ERROR(Err0713, "attempt to unpack '%u' variable(s), but the tuple on the right only contains '%u' field(s)");
    SWAG_ERROR(Err0015, "bytecode stack overflow (maximum stack size is '--stack-size:%s')");
    SWAG_ERROR(Err0227, "cannot access '%s' by index because special function 'opIndex' cannot be found in type '%s'");
    SWAG_ERROR(Err0226, "cannot access by index because special function 'opIndex' cannot be found in type '%s'");
    SWAG_ERROR(Err0509, "cannot access file '%s'");
    SWAG_ERROR(Err0051, "cannot add '%s' to the 'PATH' environment variable");
    SWAG_ERROR(Err0185, "cannot affect a closure to a lambda type");
    SWAG_ERROR(Err0569, "cannot affect an expression of type 'void'");
    SWAG_ERROR(Err0819, "cannot alias a pointer or an array reference");
    SWAG_ERROR(Err0029, "cannot alias a struct member");
    SWAG_ERROR(Err0160, "cannot assign a function pointer to a constant");
    SWAG_ERROR(Err0032, "cannot bitcast from type '%s' (should be integer, pointer, rune or float)");
    SWAG_ERROR(Err0033, "cannot bitcast to a type with a bigger size ('%s' from '%s')");
    SWAG_ERROR(Err0493, "cannot call '@postcopy' on type '%s' because it is marked with the 'Swag.NoCopy' attribute");
    SWAG_ERROR(Err0875, "cannot capture '%s' because it is a closure");
    SWAG_ERROR(Err0884, "cannot capture '%s' because it's not a plain old data struct (the type implements 'opDrop', 'opPostCopy' or 'opPostMove')");
    SWAG_ERROR(Err0887, "cannot capture '%s' because type '%s' is not supported");
    SWAG_ERROR(Err0200, "cannot cast from '%s' to '%s' because '%s' has multiple fields of type '%s' with 'using'");
    SWAG_ERROR(Err0177, "cannot cast from '%s' to '%s'");
    SWAG_ERROR(Err0178, "cannot cast from a closure type to a lambda");
    SWAG_ERROR(Err0418, "cannot cast from an immutable type ('%s') to a mutable one ('%s')");
    SWAG_ERROR(Err0176, "cannot cast from struct to interface because '%s' (or one of its 'using' fields) does not implement '%s'");
    SWAG_ERROR(Err0907, "cannot cast from type '%s' to a pointer type (only type 'uint' is accepted)");
    SWAG_ERROR(Err0175, "cannot cast implicitly from '%s' to '%s'");
    SWAG_ERROR(Err0203, "cannot cast, not enough initializers ('%d' expected, '%d' provided)");
    SWAG_ERROR(Err0204, "cannot cast, too many initializers ('%d' expected, '%d' provided)");
    SWAG_ERROR(Err0261, "cannot convert a boolean literal to '%s'");
    SWAG_ERROR(Err0302, "cannot convert from 'string' to '%s'");
    SWAG_ERROR(Err0287, "cannot convert the character literal to 'u16', value '%u' is too big");
    SWAG_ERROR(Err0263, "cannot convert the character literal to 'u8', value '%u' is too big");
    SWAG_ERROR(Err0059, "cannot convert the slice of type '%s' to a constant expression");
    SWAG_ERROR(Err0058, "cannot convert the type '%s' to a constant expression");
    SWAG_ERROR(Err0537, "cannot convert typeinfo '%s' to runtime typeinfo");
    SWAG_ERROR(Err0045, "cannot create '%s' process (::CreatePipe)");
    SWAG_ERROR(Err0604, "cannot create directory '%s'");
    SWAG_ERROR(Err0046, "cannot create process '%s'");
    SWAG_ERROR(Err0311, "cannot create the constant because the type '%s' is generic");
    SWAG_ERROR(Err0312, "cannot create the variable because the type '%s' is generic");
    SWAG_ERROR(Err0709, "cannot deduce the flag value of '%s' because the previous value is not a power of two");
    SWAG_ERROR(Err0352, "cannot deduce the generic parameters when calling %s");
    SWAG_ERROR(Err0308, "cannot deduce the variable type because the expression is 'null'");
    SWAG_ERROR(Err0603, "cannot delete file '%s'");
    SWAG_ERROR(Err0194, "cannot dereference '%s' by index because its type does not allow pointer arithmetic");
    SWAG_ERROR(Err0486, "cannot dereference a pointer to 'void'");
    SWAG_ERROR(Err0482, "cannot dereference a tuple like a pointer or an array");
    SWAG_ERROR(Err0481, "cannot dereference type '%s'");
    SWAG_ERROR(Err0094, "cannot discard a function call that returns nothing");
    SWAG_ERROR(Err0090, "cannot evaluate function parameter at compile time (type is '%s')");
    SWAG_ERROR(Err0280, "cannot evaluate the constant expression of type '%s' at compile time");
    SWAG_ERROR(Err0321, "cannot evaluate the tuple value at compile time because one of its members is not 'Swag.ConstExpr'");
    SWAG_ERROR(Err0281, "cannot evaluate the value of type '%s' at compile time because the struct is not marked with 'Swag.ConstExpr'");
    SWAG_ERROR(Err0775, "cannot expand '%s' because this is recursive");
    SWAG_ERROR(Err0781, "cannot expand '%s' in global scope because it contains sub declarations, this is not (yet?) supported");
    SWAG_ERROR(Err0510, "cannot fetch file '%s' for module dependency '%s'");
    SWAG_ERROR(Err0304, "cannot find #include file '%s'");
    SWAG_ERROR(Err0508, "cannot find '%s' in module folder '%s'");
    SWAG_ERROR(Err0244, "cannot find file '%s'");
    SWAG_ERROR(Err0186, "cannot find special function '%s' in '%s' when solving operator '%s'");
    SWAG_ERROR(Err0079, "cannot find special function '%s' in '%s'");
    SWAG_ERROR(Err0673, "cannot find the struct member '%s' to compute the relocation ('Swag.Offset' attribute)");
    SWAG_ERROR(Err0908, "cannot initialize a type '%s' from a type '%s' because no corresponding 'opAffect' can be found");
    SWAG_ERROR(Err0889, "cannot initialize a type '%s' with '%s' because no corresponding 'opAffectSuffix' function can be found in '%s'");
    SWAG_ERROR(Err0680, "cannot initialize an interface member");
    SWAG_ERROR(Err0808, "cannot instantiate generic %s '%s' with an unsized value");
    SWAG_ERROR(Err0042, "cannot instantiate the generic function '%s' because of missing contextual types replacements");
    SWAG_ERROR(Err0041, "cannot instantiate the generic function '%s' because of missing generic arguments");
    SWAG_ERROR(Err0715, "cannot instantiate the generic function '%s' because of missing generic arguments");
    SWAG_ERROR(Err0039, "cannot instantiate the generic struct '%s' because of missing contextual types replacements");
    SWAG_ERROR(Err0721, "cannot instantiate the generic struct '%s' because of missing generic arguments");
    SWAG_ERROR(Err0018, "cannot make %s public because %s '%s' is not public");
    SWAG_ERROR(Err0832, "cannot negate number '%I64d' because '%I64u' is not in the range of 's64'");
    SWAG_ERROR(Err0830, "cannot negate number '%d' because '%u' is not in the range of 's16'");
    SWAG_ERROR(Err0831, "cannot negate number '%d' because '%u' is not in the range of 's32'");
    SWAG_ERROR(Err0829, "cannot negate number '%d' because '%u' is not in the range of 's8'");
    SWAG_ERROR(Err0223, "cannot open #load file '%s'");
    SWAG_ERROR(Err0524, "cannot open file '%s' for writing");
    SWAG_ERROR(Err0502, "cannot open file '%s'");
    SWAG_ERROR(Err0091, "cannot reference the compile time %s '%s' from runtime %s");
    SWAG_ERROR(Err0206, "cannot reference the %s '%s' because it is in another stack frame");
    SWAG_ERROR(Err0549, "cannot resolve %s '%s'");
    SWAG_ERROR(Err0516, "cannot resolve the dependency to module '%s' because of two different major versions ('%d' and '%d')");
    SWAG_ERROR(Err0518, "cannot resolve the dependency to module '%s', version '%s' cannot be found at location '%s'");
    SWAG_ERROR(Err0258, "cannot resolve the foreign function call to '%s'");
    SWAG_ERROR(Err0133, "cannot resolve the identifier '%s'");
    SWAG_ERROR(Err0681, "cannot resolve the interface because the type '%s' is generic");
    SWAG_ERROR(Err0513, "cannot resolve the module dependency '%s' ('location' is empty)");
    SWAG_ERROR(Err0672, "cannot resolve the struct '%s' because the type '%s' is generic");
    SWAG_ERROR(Err0320, "cannot slice '%s' because the special function 'opSlice' has not been found in type '%s'");
    SWAG_ERROR(Err0193, "cannot slice a pointer which does not allow pointer arithmetic");
    SWAG_ERROR(Err0465, "cannot take the address of %s");
    SWAG_ERROR(Err0469, "cannot take the address of a constant of type '%s'");
    SWAG_ERROR(Err0462, "cannot take the address of a function parameter of type '%s'");
    SWAG_ERROR(Err0471, "cannot take the address of a macro function");
    SWAG_ERROR(Err0472, "cannot take the address of a mixin function");
    SWAG_ERROR(Err0473, "cannot take the address of an inline function");
    SWAG_ERROR(Err0114, "cannot take the address of the function return value (type is '%s')");
    SWAG_ERROR(Err0161, "cannot transform the type '%s' to a constant array because 'opCount' returns '0'");
    SWAG_ERROR(Err0162, "cannot transform the type '%s' to a constant array because 'opSlice' returns an empty slice");
    SWAG_ERROR(Err0292, "cannot unpack the tuple because it does not contain any field");
    SWAG_ERROR(Err0291, "cannot unpack the type '%s' (expected a struct or a tuple)");
    SWAG_ERROR(Err0821, "cannot unpack the variable '%s' from the struct '%s' because there's no corresponding member");
    SWAG_ERROR(Err0337, "cannot use a range in a switch with an expression");
    SWAG_ERROR(Err0004, "cannot use the function '%s' because '%s' has failed");
    SWAG_ERROR(Err0342, "cannot use the operator 'orelse' on a struct");
    SWAG_ERROR(Err0332, "cannot use the operator 'orelse' on type '%s'");
    SWAG_ERROR(Err0624, "cannot visit a tuple type");
    SWAG_ERROR(Err0627, "cannot visit a variadic type by pointer");
    SWAG_ERROR(Err0636, "cannot visit an enum by pointer");
    SWAG_ERROR(Err0525, "cannot write to file '%s'");
    SWAG_ERROR(Err0882, "capture size overflow (total size is '%u' bytes but maximum authorized is '%u')");
    SWAG_ERROR(Err0722, "command line error: argument '%s' should be followed by '%s'");
    SWAG_ERROR(Err0724, "command line error: argument '%s' should be followed by 'true' or 'false' ('%s')");
    SWAG_ERROR(Err0725, "command line error: argument '%s' should be followed by a string");
    SWAG_ERROR(Err0728, "command line error: argument '%s' should be followed by an integer value ('%s')");
    SWAG_ERROR(Err0727, "command line error: argument '%s' should be followed by an integer value");
    SWAG_ERROR(Err0519, "command line error: invalid --stack-size value (%s), valid range is [%s, %s]");
    SWAG_ERROR(Err0523, "command line error: invalid arch '%s' for x64 backend");
    SWAG_ERROR(Err0720, "command line error: invalid argument '%s'");
    SWAG_ERROR(Err0522, "command line error: invalid os '%s' for x64 backend");
    SWAG_ERROR(Err0007, "comparison operations are not (yet?) supported on tuples");
    SWAG_ERROR(Err0238, "compiler assertion failed");
    SWAG_ERROR(Err0737, "compiler instruction '%s' is invalid as a default parameter value");
    SWAG_ERROR(Err0743, "compiler special function cannot have the 'Swag.Inline' attribute");
    SWAG_ERROR(Err0557, "dependency module '%s' cannot be found in that workspace");
    SWAG_ERROR(Err0511, "dependency module folder '%s' does not exist");
    SWAG_ERROR(Err0150, "division by zero");
    SWAG_ERROR(Err0153, "error reading source file '%s'");
    SWAG_ERROR(Err0036, "error: backend: cannot locate windows sdk folder");
    SWAG_ERROR(Err0102, "evaluation of a function parameter of type '%s' is not supported at compile time");
    SWAG_ERROR(Err0435, "exception during compile time execution !");
    SWAG_ERROR(Err0500, "expected '%d' test errors (%d raised)");
    SWAG_ERROR(Err0501, "expected '%d' test warnings (%d raised)");
    SWAG_ERROR(Err0141, "expected '\"' or an intrinsic name, found character '%c'");
    SWAG_ERROR(Err0654, "expected 'self' as a first parameter for the interface function '%s'");
    SWAG_ERROR(Err0779, "expected a return value because the return type has already been deduced to be '%s'");
    SWAG_ERROR(Err0662, "expected a struct or an enum, but '%s' is %s");
    SWAG_ERROR(Err0648, "expected a struct, but '%s' is %s");
    SWAG_ERROR(Err0290, "expected a struct, but symbol '%s' is %s");
    SWAG_ERROR(Err0236, "expected a type 'string' as an '#assert' message ('%s' provided)");
    SWAG_ERROR(Err0582, "expected an attribute, but '%s' is %s");
    SWAG_ERROR(Err0702, "expected an enum type, found '%s'");
    SWAG_ERROR(Err0772, "expected an expression of type '%s' after 'return'");
    SWAG_ERROR(Err0012, "expected an expression, found a type");
    SWAG_ERROR(Err0398, "expected an identifier, found symbol '%s'");
    SWAG_ERROR(Err0848, "expected an initialization of '%s' because the enum '%s' does not contain a value for zero");
    SWAG_ERROR(Err0646, "expected an interface, but '%s' is %s");
    SWAG_ERROR(Err0404, "expected another 'visit' variable name after ',' and before ':'");
    SWAG_ERROR(Err0020, "expected arguments '()' when calling function '%s'");
    SWAG_ERROR(Err0677, "expected at least one parameter for the interface member '%s'");
    SWAG_ERROR(Err0707, "expected at least one test error but nothing was raised");
    SWAG_ERROR(Err0580, "expected at least one test warning but nothing was raised");
    SWAG_ERROR(Err0450, "expected one single generic parameter for special function '%s' ('%d' provided)");
    SWAG_ERROR(Err0269, "expected the '#main' function (executable entry point)");
    SWAG_ERROR(Err0049, "expected the generic parameters of %s");
    SWAG_ERROR(Err0068, "expected the parameters of the special function '%s'");
    SWAG_ERROR(Err0064, "expected the return type of the special function '%s' ('%s' expected)");
    SWAG_ERROR(Err0063, "expected the return type of the special function '%s'");
    SWAG_ERROR(Err0592, "failed to load the module '%s' while resolving the foreign function '%s': %s");
    SWAG_ERROR(Err0113, "found %d overloads for '%s' but no one could match");
    SWAG_ERROR(Err0893, "generic symbol '%s' is already declared in a top level context");
    SWAG_ERROR(Err0514, "invalid 'location' format; should have the form 'location=\"mode@accesspath\"'");
    SWAG_ERROR(Err0515, "invalid 'location' mode; should be 'swag' or 'disk', not '%s'");
    SWAG_ERROR(Err0470, "invalid address expression");
    SWAG_ERROR(Err0598, "invalid attribute '%s'");
    SWAG_ERROR(Err0124, "invalid lambda call, '%s' is not a variable (it is %s)");
    SWAG_ERROR(Err0387, "invalid literal number conversion of '%I64u'");
    SWAG_ERROR(Err0132, "invalid reference to file scope");
    SWAG_ERROR(Err0674, "invalid struct member name '%s'");
    SWAG_ERROR(Err0017, "invalid type declaration, symbol '%s' is not a type (it is %s)");
    SWAG_ERROR(Err0639, "label name '%s' already defined in the hierarchy");
    SWAG_ERROR(Err0437, "literal suffix type must be native ('%s' provided)");
    SWAG_ERROR(Err0558, "llvm backend cannot create target '%s'");
    SWAG_ERROR(Err0723, "mismatched types for field '%s', '%s' expected but '%s' provided");
    SWAG_ERROR(Err0367, "mismatched types for the lower bound of the slice, integer expected ('%s' provided)");
    SWAG_ERROR(Err0791, "mismatched types in '@mkany', the pointer to the value and the type are not related");
    SWAG_ERROR(Err0053, "mismatched types, '%s' is expected ('%s' provided)");
    SWAG_ERROR(Err0050, "mismatched types, '%s' is expected for field '%s' ('%s' provided)");
    SWAG_ERROR(Err0196, "mismatched types, cannot %s '%s' %s '%s'");
    SWAG_ERROR(Err0047, "mismatched types, generic type '%s' is assigned to '%s' ('%s' provided)");
    SWAG_ERROR(Err0187, "missing index when dereferencing array '%s'");
    SWAG_ERROR(Err0169, "more than one module with the name '%s' is present in the workspace (path is '%s')");
    SWAG_ERROR(Err0061, "no enough arguments for special function '%s' ('%d' expected, '%d' provided)");
    SWAG_ERROR(Err0748, "not all control paths of %s return a value");
    SWAG_ERROR(Err0035, "not enough generic arguments for %s");
    SWAG_ERROR(Err0158, "not enough hexadecimal digit, %s");
    SWAG_ERROR(Err0016, "not enough parameters for %s");
    SWAG_ERROR(Err0205, "not enough parameters in tuple initialization ('%d' expected, '%d' provided)");
    SWAG_ERROR(Err0157, "operator '%' does not accept type '%s'");
    SWAG_ERROR(Err0144, "pointer arithmetic is not allowed on 'typeinfo'");
    SWAG_ERROR(Err0111, "pointer arithmetic is not allowed on type 'void'");
    SWAG_ERROR(Err0579, "pointer arithmetic is not allowed with operand type '%s'");
    SWAG_ERROR(Err0192, "pointer arithmetic is not allowed");
    SWAG_ERROR(Err0078, "reserved function name '%s'");
    SWAG_ERROR(Err0741, "some '@alias' names in the function '%s' are not contiguous (missing '@alias%u')");
    SWAG_ERROR(Err0657, "some functions of the interface '%s' are not implemented for '%s'");
    SWAG_ERROR(Err0536, "stack overflow (maximum stack size is '--stack-size:%s')");
    SWAG_ERROR(Err0112, "the %s '%s' cannot be found in '%s'");
    SWAG_ERROR(Err0096, "the %s '%s' is used alone as an expression");
    SWAG_ERROR(Err0756, "the %s cannot have the 'Swag.Implicit' attribute because it is generic");
    SWAG_ERROR(Err0755, "the %s cannot have the 'Swag.NoReturn' attribute without 'Swag.Macro' or 'Swag.Mixin'");
    SWAG_ERROR(Err0757, "the %s is marked with 'Swag.Macro' and 'Swag.Inline' attributes at the same time");
    SWAG_ERROR(Err0758, "the %s is marked with 'Swag.Macro' and 'Swag.Mixin' attributes at the same time");
    SWAG_ERROR(Err0759, "the %s is marked with 'Swag.Mixin' and 'Swag.Inline' attributes at the same time");
    SWAG_ERROR(Err0760, "the %s is marked with 'Swag.Mixin' and 'Swag.Macro' attributes at the same time");
    SWAG_ERROR(Err0749, "the %s returns a type '%s', but the body is missing a 'return'");
    SWAG_ERROR(Err0237, "the '#assert' message string cannot be evaluated at compile time");
    SWAG_ERROR(Err0234, "the '#ast' expression should be of type 'string' ('%s' provided)");
    SWAG_ERROR(Err0284, "the '#import' location is already defined as '%s'");
    SWAG_ERROR(Err0243, "the '#load' parameter should be of type string ('%s' provided)");
    SWAG_ERROR(Err0739, "the '#main' function has already been defined");
    SWAG_ERROR(Err0201, "the '%s' is referencing itself, which makes it recursive");
    SWAG_ERROR(Err0442, "the '@cvastart' intrinsic should only be used in a function with a last parameter of type 'cvarargs'");
    SWAG_ERROR(Err0028, "the 'Swag.Strict' attribute should only be used on a type alias");
    SWAG_ERROR(Err0159, "the 'Swag.Tls' and 'Swag.Compiler' attributes are exclusive");
    SWAG_ERROR(Err0601, "the 'Swag.Using' is empty");
    SWAG_ERROR(Err0126, "the 'opSlice' special function should return a string or a slice ('%s' provided)");
    SWAG_ERROR(Err0771, "the 'retval' type should not be used in a function that returns nothing");
    SWAG_ERROR(Err0769, "the 'retval' type should only be used in a function body");
    SWAG_ERROR(Err0306, "the 'slice' type should be declared as immutable with 'const' because the right expression is const");
    SWAG_ERROR(Err0740, "the affectation is not allowed because the function parameter '%s' is immutable");
    SWAG_ERROR(Err0564, "the affectation is not allowed because the left expression is immutable");
    SWAG_ERROR(Err0565, "the affectation is not allowed because the left expression is not a value");
    SWAG_ERROR(Err0571, "the affectation is not allowed on %s '%s'");
    SWAG_ERROR(Err0566, "the affectation is not allowed");
    SWAG_ERROR(Err0572, "the affectation is not allowed, '%s' is %s");
    SWAG_ERROR(Err0574, "the affectation to the tuple is not possible because the right expression is not compatible");
    SWAG_ERROR(Err0025, "the alias is public but '%s' is not");
    SWAG_ERROR(Err0780, "the alias name '%s' is unused and should be removed");
    SWAG_ERROR(Err0814, "the alignement cannot be computed because the expression is generic");
    SWAG_ERROR(Err0021, "the array dimension cannot be evaluated at compile time");
    SWAG_ERROR(Err0023, "the array dimension is 0");
    SWAG_ERROR(Err0022, "the array dimension should be of type integer (and '%s' is provided)");
    SWAG_ERROR(Err0583, "the attribute '%s' can only be applied to %s");
    SWAG_ERROR(Err0588, "the attribute '%s' cannot be applied to %s");
    SWAG_ERROR(Err0600, "the attribute '%s' does not have the 'Swag.AttributeUsage.File' usage, so it should not be used with '#global'");
    SWAG_ERROR(Err0591, "the attribute '%s' is assigned twice, but 'Swag.AttrMulti' is not present in the declaration");
    SWAG_ERROR(Err0586, "the attribute '%s' should not be used in that context");
    SWAG_ERROR(Err0297, "the attribute 'Swag.Discardable' should only be used on a lambda variable (provided type is '%s')");
    SWAG_ERROR(Err0602, "the attribute parameter cannot be evaluated at compile time");
    SWAG_ERROR(Err0076, "the call level limit has been reached (the maximum level is '--max-recurse:%d')");
    SWAG_ERROR(Err0809, "the comparison operation '%s' does not accept type '%s' as the left argument");
    SWAG_ERROR(Err0778, "the comparison operation '%s' does not accept type '%s' as the right argument");
    SWAG_ERROR(Err0001, "the comparison operation '%s' does not accept type '%s'");
    SWAG_ERROR(Err0805, "the constant value should be unsigned, but is '%I64d'");
    SWAG_ERROR(Err0802, "the constant value should be unsigned, but is '%d'");
    SWAG_ERROR(Err0231, "the copy of type '%s' is disabled because the struct is marked with 'Swag.NoCopy'");
    SWAG_ERROR(Err0310, "the deduced 'with' variable '%s' has only been used to find function '%s'; use the scope '%s' instead");
    SWAG_ERROR(Err0699, "the dimension of the enum array type should be specified (type is '%s')");
    SWAG_ERROR(Err0820, "the enum '%s' is already defined");
    SWAG_ERROR(Err0700, "the enum array type '%s' should be 'const'");
    SWAG_ERROR(Err0701, "the enum slice type '%s' should be 'const'");
    SWAG_ERROR(Err0717, "the enum value '%s' is out of range of 's16'");
    SWAG_ERROR(Err0718, "the enum value '%s' is out of range of 's32'");
    SWAG_ERROR(Err0719, "the enum value '%s' is out of range of 's64'");
    SWAG_ERROR(Err0716, "the enum value '%s' is out of range of 's8'");
    SWAG_ERROR(Err0710, "the enum value '%s' is out of range of 'u16'");
    SWAG_ERROR(Err0712, "the enum value '%s' is out of range of 'u32'");
    SWAG_ERROR(Err0714, "the enum value '%s' is out of range of 'u64'");
    SWAG_ERROR(Err0708, "the enum value '%s' is out of range of 'u8'");
    SWAG_ERROR(Err0706, "the enum value '%s' of type '%s' should be explicitly initialized");
    SWAG_ERROR(Err0798, "the expression cannot be evaluated at compile time");
    SWAG_ERROR(Err0615, "the expression cannot be evaluated at compile time, and the switch is marked with 'Swag.Complete'");
    SWAG_ERROR(Err0240, "the expression should be of type 'code', but is '%s'");
    SWAG_ERROR(Err0242, "the filename cannot be evaluated at compile time");
    SWAG_ERROR(Err0489, "the first parameter of '@init' should be a pointer ('%s' provided)");
    SWAG_ERROR(Err0752, "the function '%s' cannot have generic parameters because it is flagged with the 'Swag.NotGeneric' attribute");
    SWAG_ERROR(Err0753, "the function '%s' cannot have the 'Swag.Complete' attribute, this is reserved for 'opAffect' or 'opAffectSuffix'");
    SWAG_ERROR(Err0767, "the function '%s' cannot have the 'Swag.Discardable' attribute because it returns nothing");
    SWAG_ERROR(Err0754, "the function '%s' cannot have the 'Swag.Implicit' attribute, this is reserved for 'opAffect', 'opAffectSuffix' and 'opCast'");
    SWAG_ERROR(Err0652, "the function '%s' has an incorrect signature for interface '%s'");
    SWAG_ERROR(Err0751, "the function '%s' has the 'Swag.NotGeneric' attribute but seems to be generic");
    SWAG_ERROR(Err0098, "the function '%s' should be called with '()' and not curlies (this is reserved for struct initialization)");
    SWAG_ERROR(Err0766, "the function cannot have a return type because it is flagged with the 'Swag.NoReturn' attribute");
    SWAG_ERROR(Err0777, "the generic type replacement for %s of %s has generated an invalid type ('%s' becomes '%s')");
    SWAG_ERROR(Err0123, "the generic value '%s' has already been deduced from parameters to be '%s' (and '%s' is provided here)");
    SWAG_ERROR(Err0085, "the identifier '%s' cannot be dereferenced like a struct or a pointer (type is '%s')");
    SWAG_ERROR(Err0110, "the identifier '%s' cannot be found in %s '%s'");
    SWAG_ERROR(Err0492, "the identifier '%s' cannot be found in enum '%s' or in %s '%s'");
    SWAG_ERROR(Err0093, "the identifier '%s' cannot be found in the tuple");
    SWAG_ERROR(Err0127, "the identifier '%s' has call parameters, but is %s and not a function");
    SWAG_ERROR(Err0125, "the identifier '%s' has call parameters, but is a variable of type '%s' and not a function");
    SWAG_ERROR(Err0881, "the identifier '%s' is preceeded with '.' but no corresponding enum or 'with' can be deduced");
    SWAG_ERROR(Err0660, "the implementation block for '%s' is not private but the corresponding identifier is");
    SWAG_ERROR(Err0659, "the implementation block for '%s' is private but the corresponding identifier is not");
    SWAG_ERROR(Err0661, "the implementation block is not defined in the same scope as '%s')");
    SWAG_ERROR(Err0468, "the index is out of range (index is '%I64u' but the maximum value is '%I64u')");
    SWAG_ERROR(Err0670, "the initialization expression cannot be evaluated at compile time");
    SWAG_ERROR(Err0307, "the initialization expression is 'void'");
    SWAG_ERROR(Err0906, "the initialization value cannot be evaluated at compile time because 'opAffect' is not 'Swag.ConstExpr'");
    SWAG_ERROR(Err0733, "the inline function has variadic parameters, this is not (yet?) supported");
    SWAG_ERROR(Err0360, "the literal number '%I64d' is not in the range of 's16'");
    SWAG_ERROR(Err0361, "the literal number '%I64d' is not in the range of 's32'");
    SWAG_ERROR(Err0359, "the literal number '%I64d' is not in the range of 's8'");
    SWAG_ERROR(Err0362, "the literal number '%I64u' is not in the range of 'rune'");
    SWAG_ERROR(Err0422, "the literal number '%I64u' is not in the range of 's16'");
    SWAG_ERROR(Err0429, "the literal number '%I64u' is not in the range of 's32'");
    SWAG_ERROR(Err0430, "the literal number '%I64u' is not in the range of 's64'");
    SWAG_ERROR(Err0415, "the literal number '%I64u' is not in the range of 's8'");
    SWAG_ERROR(Err0357, "the literal number '%I64u' is not in the range of 'u16'");
    SWAG_ERROR(Err0358, "the literal number '%I64u' is not in the range of 'u32'");
    SWAG_ERROR(Err0341, "the literal number '%I64u' is not in the range of 'u8'");
    SWAG_ERROR(Err0476, "the lower bound '%I64u' of the slicing arguments is greater than the upper bound '%I64u'");
    SWAG_ERROR(Err0828, "the minus operation is not allowed on type '%s'");
    SWAG_ERROR(Err0556, "the module '%s' cannot be found in that workspace");
    SWAG_ERROR(Err0011, "the named argument '%s' is already defined");
    SWAG_ERROR(Err0037, "the operation '%s' is not allowed because the left expression is an enum type ('%s') not marked with 'Swag.EnumFlags'");
    SWAG_ERROR(Err0038, "the operation '%s' is not allowed because the right expression is an enum type ('%s') not marked with 'Swag.EnumFlags'");
    SWAG_ERROR(Err0005, "the operation '%s' is not allowed on type '%s'");
    SWAG_ERROR(Err0143, "the operator '%s' does not accept a left expression of type '%s'");
    SWAG_ERROR(Err0164, "the operator '&' does not accept type '%s' as a left expression");
    SWAG_ERROR(Err0142, "the operator '+' does not accept an operand of type '%s'");
    SWAG_ERROR(Err0146, "the operator '-' does not accept an operand of type '%s'");
    SWAG_ERROR(Err0163, "the operator '|' does not accept type '%s' as a left expression");
    SWAG_ERROR(Err0770, "the return type has already been deduced to be '%s' (and '%s' is now provided)");
    SWAG_ERROR(Err0773, "the return type has already been deduced to be nothing (and '%s' is now provided)");
    SWAG_ERROR(Err0431, "the runtime variable '%s' is initialized to zero and cannot be changed at compile time; initialize it with '?' if this is intended");
    SWAG_ERROR(Err0490, "the second parameter of '@init' should be an integer ('%s' provided)");
    SWAG_ERROR(Err0812, "the size cannot be computed because the expression is generic");
    SWAG_ERROR(Err0303, "the size of the array cannot be deduced because there's no initialization expression");
    SWAG_ERROR(Err0474, "the slicing operator cannot be applied on an array with multiple dimensions");
    SWAG_ERROR(Err0475, "the slicing operator cannot be applied on type '%s'");
    SWAG_ERROR(Err0478, "the special function '%s' cannot have generic parameters");
    SWAG_ERROR(Err0503, "the special function '%s' is private but the corresponding struct is public");
    SWAG_ERROR(Err0506, "the special function '%s' is public but the corresponding struct is private");
    SWAG_ERROR(Err0765, "the struct '%s' has the 'Swag.NoCopy' attribute, so 'opPostCopy' is irrelevant");
    SWAG_ERROR(Err0666, "the struct cannot be marked with 'Swag.Opaque' because it is not public");
    SWAG_ERROR(Err0667, "the struct cannot be marked with 'Swag.Opaque' because the whole file is exported ('#global export')");
    SWAG_ERROR(Err0612, "the switch enum value '%s' has already been defined");
    SWAG_ERROR(Err0620, "the switch is incomplete (missing '%s.%s')");
    SWAG_ERROR(Err0613, "the switch value '%d' has already been defined");
    SWAG_ERROR(Err0614, "the switch value '%f' has already been defined");
    SWAG_ERROR(Err0611, "the switch value '%s' has already been defined");
    SWAG_ERROR(Err0394, "the symbol '%s' is already defined as %s in an accessible scope");
    SWAG_ERROR(Err0890, "the symbol '%s' is already defined as a name alias in an accessible scope");
    SWAG_ERROR(Err0305, "the symbol '%s' is already defined in an accessible scope");
    SWAG_ERROR(Err0346, "the symbol '%s' is already defined in the parent scope");
    SWAG_ERROR(Err0705, "the type '%s' cannot be used as an enum type");
    SWAG_ERROR(Err0671, "the type '%s' is generic, but struct '%s' does not declare generic parameters");
    SWAG_ERROR(Err0002, "the type '%s' should not be used in a range expression");
    SWAG_ERROR(Err0911, "the type '%s' should not be used in an union because it contains 'opDrop' (or one of its members does)");
    SWAG_ERROR(Err0909, "the type '%s' should not be used in an union because it contains 'opPostCopy' (or one of its members does)");
    SWAG_ERROR(Err0910, "the type '%s' should not be used in an union because it contains 'opPostMove' (or one of its members does)");
    SWAG_ERROR(Err0729, "the type 'code' is only valid in a 'Swag.Macro' or 'Swag.Mixin' function");
    SWAG_ERROR(Err0736, "the type 'code' should only be used for a function parameter");
    SWAG_ERROR(Err0704, "the type 'cstring' cannot be used as an enum type, use 'string' instead");
    SWAG_ERROR(Err0735, "the type 'cvarargs' should only be used for a function parameter");
    SWAG_ERROR(Err0810, "the type cannot be evaluated in that context because it is generic");
    SWAG_ERROR(Err0477, "the upper bound '%I64u' of the slicing arguments is out of range (maximum value is '%I64u')");
    SWAG_ERROR(Err0086, "the variable '%s' has only been used as a scope to find function '%s'");
    SWAG_ERROR(Err0645, "the variable is initialized twice, first with type arguments, and then with an assignment");
    SWAG_ERROR(Err0289, "the version should be of the form 'version.revision.buildnum', with each number >= 0 or the '?' character");
    SWAG_ERROR(Err0880, "the while expression is always true");
    SWAG_ERROR(Err0062, "too few arguments for special function '%s' (at least '%d' expected, only '%d' provided)");
    SWAG_ERROR(Err0626, "too many 'visit' alias names (maximum is '2', but '%u' are provided)");
    SWAG_ERROR(Err0026, "too many arguments ('%d' expected, '%d' provided)");
    SWAG_ERROR(Err0195, "too many arguments in the tuple initialization ('%d' expected, '%d' provided)");
    SWAG_ERROR(Err0044, "too many generic parameters for %s '%s' ('%d' expected, '%d' provided)");
    SWAG_ERROR(Err0071, "too many generic parameters for special function '%s'");
    SWAG_ERROR(Err0491, "too many initialization parameters for type '%s'");
    SWAG_ERROR(Err0197, "too many initializers for '%s' ('%d' expected, '%d' provided)");
    SWAG_ERROR(Err0043, "too many parameters for special function '%s' ('%d' expected, '%d' provided)");
    SWAG_ERROR(Err0578, "too many variadic parameters ('%d' provided, maximum is '%d')");
    SWAG_ERROR(Err0252, "type '%s' and type '%s' defined in the command line for '%s' are incompatible");
    SWAG_ERROR(Err0873, "ufcs on closure is not (yet?) supported");
    SWAG_ERROR(Err0309, "unable to deduce type of %s '%s'");
    SWAG_ERROR(Err0534, "uncatched error when calling '%s' (expected 'try', 'assume' or 'catch')");
    SWAG_ERROR(Err0568, "unexpected '%s' affectation, the left and right types should be the same ('%s' and '%s' provided)");
    SWAG_ERROR(Err0801, "unexpected '@countof' expression type '%s' (should be integer)");
    SWAG_ERROR(Err0445, "unexpected '@cvaarg' type '%s' (type has been promoted to '%s' at the call site)");
    SWAG_ERROR(Err0443, "unexpected '@cvaarg' type '%s'");
    SWAG_ERROR(Err0599, "unexpected 'Swag.ExportType' parameter '%s'");
    SWAG_ERROR(Err0594, "unexpected 'Swag.Optim' parameter '%s'");
    SWAG_ERROR(Err0401, "unexpected 'catch' inside '%s' expression");
    SWAG_ERROR(Err0616, "unexpected 'default' statement in a switch marked with 'Swag.Complete'");
    SWAG_ERROR(Err0199, "unexpected 'opDrop' special function for '%s' because the struct is marked with 'Swag.ConstExpr'");
    SWAG_ERROR(Err0517, "unexpected 'ref' because the right expression type is not a reference or a pointer (type is '%s')");
    SWAG_ERROR(Err0849, "unexpected 'throw' in attribute declaration");
    SWAG_ERROR(Err0117, "unexpected 'using' on two variables with the same type ('%s')");
    SWAG_ERROR(Err0694, "unexpected 'using' type");
    SWAG_ERROR(Err0099, "unexpected aliased identifiers because the function '%s' is not a macro or a mixin");
    SWAG_ERROR(Err0597, "unexpected attribute usage");
    SWAG_ERROR(Err0031, "unexpected bitcast type '%s' (should be integer, rune or float)");
    SWAG_ERROR(Err0189, "unexpected block after 'discard try/assume/catch'");
    SWAG_ERROR(Err0105, "unexpected call of an empty function ('%s')");
    SWAG_ERROR(Err0433, "unexpected call parameters for the variable '%s'");
    SWAG_ERROR(Err0101, "unexpected call to the 'opDrop' special function (use '@drop' instead)");
    SWAG_ERROR(Err0100, "unexpected call to the 'opInit' special function (use '@init' instead)");
    SWAG_ERROR(Err0103, "unexpected call to the 'opPostCopy' special function (use '@postcopy' instead)");
    SWAG_ERROR(Err0104, "unexpected call to the 'opPostMove' special function (use '@postmove' instead)");
    SWAG_ERROR(Err0081, "unexpected character '%s'");
    SWAG_ERROR(Err0260, "unexpected character '['");
    SWAG_ERROR(Err0262, "unexpected character literal '%s' (this is a string, not a character)");
    SWAG_ERROR(Err0066, "unexpected comma, expecting ')' or another function argument");
    SWAG_ERROR(Err0188, "unexpected comma, expecting ')' or another function parameter");
    SWAG_ERROR(Err0432, "unexpected compare operator '='");
    SWAG_ERROR(Err0610, "unexpected empty 'switch' body");
    SWAG_ERROR(Err0683, "unexpected empty interface '%s'");
    SWAG_ERROR(Err0080, "unexpected end of file found in the comment");
    SWAG_ERROR(Err0314, "unexpected file format, should be ascii, utf-8 or utf-8-bom");
    SWAG_ERROR(Err0069, "unexpected first parameter type for special function '%s' ('%s' expected, '%s' provided)");
    SWAG_ERROR(Err0317, "unexpected floating point number suffix (type is '%s')");
    SWAG_ERROR(Err0087, "unexpected function call at global scope");
    SWAG_ERROR(Err0732, "unexpected function return type 'void', this is not necessary");
    SWAG_ERROR(Err0054, "unexpected generic %s for %s (a type is expected but a value is provided)");
    SWAG_ERROR(Err0057, "unexpected generic %s for %s (a value is expected but a type is provided)");
    SWAG_ERROR(Err0074, "unexpected generic parameter for special function '%s' ('bool' expected, '%s' provided)");
    SWAG_ERROR(Err0072, "unexpected generic parameter for special function '%s' ('string' expected, '%s' provided)");
    SWAG_ERROR(Err0135, "unexpected generic parameters for %s '%s'");
    SWAG_ERROR(Err0130, "unexpected generic parameters, the identifier '%s' is %s and not a function or a struct");
    SWAG_ERROR(Err0174, "unexpected hexadecimal digit '%c', %s");
    SWAG_ERROR(Err0776, "unexpected identifier at global scope");
    SWAG_ERROR(Err0439, "unexpected literal suffix type ('%s')");
    SWAG_ERROR(Err0827, "unexpected negation of an unsigned type ('%s')");
    SWAG_ERROR(Err0168, "unexpected operation '%s' on a tuple type");
    SWAG_ERROR(Err0570, "unexpected operation '%s' on type '%s'");
    SWAG_ERROR(Err0573, "unexpected operation on a tuple type");
    SWAG_ERROR(Err0107, "unexpected reference to compile time function '%s' from runtime %s");
    SWAG_ERROR(Err0108, "unexpected reference to test function '%s' from runtime '%s'");
    SWAG_ERROR(Err0065, "unexpected return type of special function '%s' ('%s' expected, '%s' provided)");
    SWAG_ERROR(Err0052, "unexpected return value in a %s");
    SWAG_ERROR(Err0774, "unexpected return value of type '%s', the %s returns nothing");
    SWAG_ERROR(Err0593, "unexpected safety value '%s'");
    SWAG_ERROR(Err0077, "unexpected second parameter for special function '%s' (cannot be of type '%s')");
    SWAG_ERROR(Err0494, "unexpected special function '%s' inside an interface implementation block 'impl for'");
    SWAG_ERROR(Err0067, "unexpected special function '%s' outside an 'impl' block");
    SWAG_ERROR(Err0609, "unexpected switch type '%s'");
    SWAG_ERROR(Err0608, "unexpected switch type 'any', you need to cast to a concrete type");
    SWAG_ERROR(Err0697, "unexpected type '%s' for an enum marked with 'Swag.EnumFlags' (should be an unsigned integer)");
    SWAG_ERROR(Err0698, "unexpected type '%s' for an enum marked with 'Swag.EnumIndex' (should be an integer)");
    SWAG_ERROR(Err0731, "unexpected type '%s' for attribute parameter");
    SWAG_ERROR(Err0170, "unexpected type '%s' for operator '<<' (integer expected)");
    SWAG_ERROR(Err0172, "unexpected type '%s' for operator '>>' (integer expected)");
    SWAG_ERROR(Err0048, "unexpected type ('*Swag.CVaList' expected, '%s' provided");
    SWAG_ERROR(Err0655, "unexpected type for the first parameter of interface function implementation ('self' expected, '%s' provided)");
    SWAG_ERROR(Err0679, "unexpected type for the first parameter of interface member ('self' expected, '%s' provided)");
    SWAG_ERROR(Err0106, "unexpected type of 'self' parameter ('%s' expected, '%s' provided)");
    SWAG_ERROR(Err0070, "unexpected type of generic %s for %s ('%s' expected, '%s' provided)");
    SWAG_ERROR(Err0095, "unexpected type of ufcs first parameter ('%s' expected, '%s' provided)");
    SWAG_ERROR(Err0815, "unexpected usage of %s ('%s') as a generic argument");
    SWAG_ERROR(Err0259, "unrecognized character escape sequence '%c'");
    SWAG_ERROR(Err0803, "unsupported '@nameof' expression");
    SWAG_ERROR(Err0799, "unsupported '@stringof' expression");
    SWAG_ERROR(Err0664, "unsupported alias as an implementation block name");
    SWAG_ERROR(Err0119, "unsupported generic type deduction, this is too complicated (embedded tuples)");
    SWAG_ERROR(Err0109, "unused return value of function '%s'");
    SWAG_ERROR(Err0092, "unused return value of lambda '%s'");
    SWAG_ERROR(Err0140, "use of an unknown compiler instruction '%s'");
    SWAG_ERROR(Err0228, "use of an unknown function '%s'");
    SWAG_ERROR(Err0129, "use of an unknown intrinsic '%s'");
    SWAG_ERROR(Err0631, "use of an unknown label '%s'");
    SWAG_ERROR(Err0499, "use of an unknown module dependency '%s'");
    SWAG_ERROR(Err0008, "use of an unknown named parameter '%s'");
    SWAG_ERROR(Err0122, "use of undeclared identifier '%s'");
    SWAG_ERROR(Err0165, "use of undeclared type '%s'");
    SWAG_ERROR(Err0180, "value '%I64d' is negative and does not fit in the unsigned type '%s'");
    SWAG_ERROR(Err0181, "value '%I64u' does not fit in the type '%s'");
    SWAG_ERROR(Err0183, "value '%s' ('%I64u' in decimal) does not fit in the type '%s'");
    SWAG_ERROR(Err0056, "x64 backend unsupported os '%s'");
    SWAG_ERROR(Err0083, "unexpected #[Swag.Inline] attribute as #[Swag.NoInline] is already defined");
    SWAG_ERROR(Err0691, "unexpected #[Swag.NoInline] attribute as #[Swag.Inline] is already defined");
    SWAG_ERROR(Err0693, "expected a literal of type '%s' but a dynamic value was provided");
    SWAG_ERROR(Err0690, "unexpected type '%s' for a #[Swag.ConstExpr] parameter");
    SWAG_ERROR(Err0688, nullptr);
    SWAG_ERROR(Err0504, nullptr);
    SWAG_ERROR(Err0577, nullptr);
    SWAG_ERROR(Err0576, nullptr);
    SWAG_ERROR(Err0575, nullptr);
    SWAG_ERROR(Err0687, nullptr);
    SWAG_ERROR(Err0686, nullptr);
    SWAG_ERROR(Err0685, nullptr);
    SWAG_ERROR(Err0567, nullptr);
    SWAG_ERROR(Err0617, nullptr);
    SWAG_ERROR(Err0167, nullptr);
    SWAG_ERROR(Err0533, nullptr);
    SWAG_ERROR(Err0128, nullptr);
    SWAG_ERROR(Err0118, nullptr);
    SWAG_ERROR(Err0678, nullptr);
    SWAG_ERROR(Err0618, nullptr);
    SWAG_ERROR(Err0696, nullptr);
    SWAG_ERROR(Err0619, nullptr);
    SWAG_ERROR(Err0621, nullptr);
    SWAG_ERROR(Err0531, nullptr);
    SWAG_ERROR(Err0563, nullptr);
    SWAG_ERROR(Err0530, nullptr);
    SWAG_ERROR(Err0562, nullptr);
    SWAG_ERROR(Err0663, nullptr);
    SWAG_ERROR(Err0658, nullptr);
    SWAG_ERROR(Err0656, nullptr);
    SWAG_ERROR(Err0529, nullptr);
    SWAG_ERROR(Err0528, nullptr);
    SWAG_ERROR(Err0653, nullptr);
    SWAG_ERROR(Err0073, nullptr);
    SWAG_ERROR(Err0651, nullptr);
    SWAG_ERROR(Err0590, nullptr);
    SWAG_ERROR(Err0650, nullptr);
    SWAG_ERROR(Err0649, nullptr);
    SWAG_ERROR(Err0521, nullptr);
    SWAG_ERROR(Err0553, nullptr);
    SWAG_ERROR(Err0647, nullptr);
    SWAG_ERROR(Err0644, nullptr);
    SWAG_ERROR(Err0251, nullptr);
    SWAG_ERROR(Err0250, nullptr);
    SWAG_ERROR(Err0551, nullptr);
    SWAG_ERROR(Err0643, nullptr);
    SWAG_ERROR(Err0520, nullptr);
    SWAG_ERROR(Err0642, nullptr);
    SWAG_ERROR(Err0149, nullptr);
    SWAG_ERROR(Err0550, nullptr);
    SWAG_ERROR(Err0641, nullptr);
    SWAG_ERROR(Err0640, nullptr);
    SWAG_ERROR(Err0548, nullptr);
    SWAG_ERROR(Err0638, nullptr);
    SWAG_ERROR(Err0589, nullptr);
    SWAG_ERROR(Err0587, nullptr);
    SWAG_ERROR(Err0148, nullptr);
    SWAG_ERROR(Err0147, nullptr);
    SWAG_ERROR(Err0585, nullptr);
    SWAG_ERROR(Err0544, nullptr);
    SWAG_ERROR(Err0581, nullptr);
    SWAG_ERROR(Err0823, nullptr);
    SWAG_ERROR(Err0436, nullptr);
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Hlp0034, "'#selectif' and '#checkif' cannot be used on 'opDrop', 'opPostCopy' and 'opPostMove'");
    SWAG_ERROR(Hlp0010, "'@alias' should only be used inside a 'Swag.Macro' or a 'Swag.Mixin' function");
    SWAG_ERROR(Hlp0020, "'@mixin' should only be used inside a 'Swag.Mixin' function");
    SWAG_ERROR(Hlp0013, "'Swag.ExportType' valid values are 'methods' and 'nozero'");
    SWAG_ERROR(Hlp0012, "'Swag.Optim' valid values are 'bytecode' and 'backend'");
    SWAG_ERROR(Hlp0045, "'closure' should be followed by the capture parameters between '|...|'");
    SWAG_ERROR(Hlp0039, "'with' should be followed by one single variable");
    SWAG_ERROR(Hlp0017, "a closure can only be defined in a function");
    SWAG_ERROR(Hlp0008, "a function name starting with '@' is reserved for intrinsics");
    SWAG_ERROR(Hlp0014, "a function name starting with 'op' and followed by a letter in upper case is reserved for struct special functions");
    SWAG_ERROR(Hlp0021, "a generic argument must be either a literal or a type");
    SWAG_ERROR(Hlp0027, "a private struct should not export its special functions");
    SWAG_ERROR(Hlp0026, "a public struct should export all its special functions");
    SWAG_ERROR(Hlp0009, "a struct member name starting with 'item' is reserved by the language");
    SWAG_ERROR(Hlp0015, "a struct special function should be defined in a corresponding 'impl' scope");
    SWAG_ERROR(Hlp0016, "all function parameters are immutable and cannot be changed");
    SWAG_ERROR(Hlp0001, "an attribute declaration cannot be marked with 'throw'");
    SWAG_ERROR(Hlp0000, "an attribute declaration should not have a return value starting with '->'");
    SWAG_ERROR(Hlp0032, "both sides of an 'orelse' must have the same type");
    SWAG_ERROR(Hlp0030, "if you want an infinite loop, use 'loop { ... }' instead");
    SWAG_ERROR(Hlp0004, "if you want to declare a lambda, you should use 'func(' or 'closure('");
    SWAG_ERROR(Hlp0005, "if you want to dereference variable '%s' like in C, use 'dref %s'");
    SWAG_ERROR(Hlp0002, "is there a missing 'self' ?");
    SWAG_ERROR(Hlp0028, "is there a missing 'using' before 'self' ?");
    SWAG_ERROR(Hlp0044, "it looks like it could be an invalid ufcs call");
    SWAG_ERROR(Hlp0007, "methods ('mtd' and 'mtdc') are reserved for structs and interfaces");
    SWAG_ERROR(Hlp0043, "this is ambiguous, so you should remove one 'using'");
    SWAG_ERROR(Hlp0035, "this is reserved for function calls");
    SWAG_ERROR(Hlp0022, "this kind of constant does not have an associated memory storage");
    SWAG_ERROR(Hlp0041, "this type of parameter does not have an associated memory storage");
    SWAG_ERROR(Hlp0006, "to access an array with multiple dimensions, the syntax is [x, y], not [x][y]");
    SWAG_ERROR(Hlp0024, "to declare a multi dimensional array, syntax is [N1, N2, ...] and not [N1][N2][...]");
    SWAG_ERROR(Hlp0023, "valid modes are 'defer(err)' and 'defer(noerr)'");
    SWAG_ERROR(Hlp0011, "valid safety values are 'bound|over|math|switch|any|bool|nan|sanity'");
    SWAG_ERROR(Hlp0018, "when the parameter types of a lambda are inferred, the return type will be inferred too");
    SWAG_ERROR(Hlp0003, "you can affect a lambda to a closure type, but not the other way around");
    SWAG_ERROR(Hlp0033, "you can unpack a variable with '?' if you don't want to retreive it");
    SWAG_ERROR(Hlp0029, "you can use 'mtd' or 'mtdc' instead of 'func' to declare an implicit 'using self' as a first parameter");
    SWAG_ERROR(Hlp0025, "you cannot declare a slice or a static array of another slice or array");
    SWAG_ERROR(Hlp0019, "you cannot mix inferred and specified types in lambda parameters");
    SWAG_ERROR(Hlp0031, "you could also declare the interface member with 'mtd' or 'mtdc' instead of 'func'");
    SWAG_ERROR(Hlp0036, "you could force the evaluation with a '#run'");
    SWAG_ERROR(Hlp0040, "you could use '++' if you want to append strings at compile time");
    SWAG_ERROR(Hlp0042, "you could use 'func' instead of 'mtd' or 'mtdc'");
    SWAG_ERROR(Hlp0037, "you should add a 'break' or a 'fallthrough'");
    SWAG_ERROR(Hlp0038, "you should add a 'break'");
    SWAG_ERROR(Hlp0046, "only basic parameters (integers, float, string...) can be marked with the #[Swag.ConstExpr] attribute");
    SWAG_ERROR(Hlp0047, "if you want to slice to the end, use '..' instead");
    SWAG_ERROR(Hlp0048, nullptr);
    SWAG_ERROR(Hlp0049, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Hnt0086, "'impl' parent scope is '%s' but '%s' parent scope is '%s'");
    SWAG_ERROR(Hnt0087, "'self' is expected as a first parameter");
    SWAG_ERROR(Hnt0077, "...than this");
    SWAG_ERROR(Hnt0082, "do you mean '==' ?");
    SWAG_ERROR(Hnt0083, "missing '%s' of type '%s'");
    SWAG_ERROR(Hnt0094, "should this be removed ?");
    SWAG_ERROR(Hnt0070, "this %s has the 'Swag.Compiler' attribute");
    SWAG_ERROR(Hnt0084, "this %s has type '%s'");
    SWAG_ERROR(Hnt0060, "this 'dref' is not possible");
    SWAG_ERROR(Hnt0048, "this argument (type is '%s') does not match");
    SWAG_ERROR(Hnt0031, "this argument has a missing name");
    SWAG_ERROR(Hnt0030, "this argument is named");
    SWAG_ERROR(Hnt0023, "this call should be preceeded by 'discard' if you do not want to use the return value");
    SWAG_ERROR(Hnt0006, "this cannot be visited");
    SWAG_ERROR(Hnt0041, "this comment does not end");
    SWAG_ERROR(Hnt0074, "this copy of an array of struct is disabled");
    SWAG_ERROR(Hnt0005, "this could be casted to 'uint'");
    SWAG_ERROR(Hnt0025, "this could be casted with 'cast(%s)'");
    SWAG_ERROR(Hnt0043, "this could be moved before '%s'");
    SWAG_ERROR(Hnt0046, "this could be preceeded by '#run' to force the call at compile time");
    SWAG_ERROR(Hnt0000, "this divisor expression is zero");
    SWAG_ERROR(Hnt0090, "this evaluates to '%f'");
    SWAG_ERROR(Hnt0091, "this evaluates to '%lld'");
    SWAG_ERROR(Hnt0033, "this evaluates to 0");
    SWAG_ERROR(Hnt0062, "this first value implies that all other types should also be '%s'");
    SWAG_ERROR(Hnt0039, "this function call returns an immutable '%s'");
    SWAG_ERROR(Hnt0057, "this function cannot be instantiated");
    SWAG_ERROR(Hnt0078, "this function does not accept aliased names");
    SWAG_ERROR(Hnt0093, "this function does not accept type '%s' as a first argument");
    SWAG_ERROR(Hnt0073, "this function does not accept ufcs");
    SWAG_ERROR(Hnt0064, "this function has the 'Swag.Compiler' attribute");
    SWAG_ERROR(Hnt0065, "this function has the 'Swag.Test' attribute");
    SWAG_ERROR(Hnt0017, "this function is marked with the 'Swag.Inline' attribute");
    SWAG_ERROR(Hnt0015, "this function is marked with the 'Swag.Macro' attribute");
    SWAG_ERROR(Hnt0016, "this function is marked with the 'Swag.Mixin' attribute");
    SWAG_ERROR(Hnt0050, "this implies a first parameter 'const self'");
    SWAG_ERROR(Hnt0049, "this implies a first parameter 'self'");
    SWAG_ERROR(Hnt0001, "this intrinsic is called with invalid parameters");
    SWAG_ERROR(Hnt0008, "this intrinsic is not discardable, so the return value should always be used");
    SWAG_ERROR(Hnt0040, "this is a 'typeinfo' value");
    SWAG_ERROR(Hnt0018, "this is a constant");
    SWAG_ERROR(Hnt0079, "this is a lambda");
    SWAG_ERROR(Hnt0028, "this is a literal and should be a type");
    SWAG_ERROR(Hnt0029, "this is a parameter");
    SWAG_ERROR(Hnt0036, "this is a pointer and cannot be visited");
    SWAG_ERROR(Hnt0024, "this is a pointer type declaration because of '*'");
    SWAG_ERROR(Hnt0003, "this is a static reference to a struct member of '%s'");
    SWAG_ERROR(Hnt0010, "this is a tuple type");
    SWAG_ERROR(Hnt0054, "this is a type and not a value");
    SWAG_ERROR(Hnt0027, "this is a type and should be a literal");
    SWAG_ERROR(Hnt0035, "this is an alias and should be an identifier");
    SWAG_ERROR(Hnt0072, "this is an empty array");
    SWAG_ERROR(Hnt0085, "this is an enum implementation block");
    SWAG_ERROR(Hnt0047, "this is an hidden call to '%s'");
    SWAG_ERROR(Hnt0014, "this is invalid in global scope");
    SWAG_ERROR(Hnt0053, "this is not 'const' but should be");
    SWAG_ERROR(Hnt0038, "this is not a constant");
    SWAG_ERROR(Hnt0061, "this is not allowed");
    SWAG_ERROR(Hnt0007, "this is the first initialization");
    SWAG_ERROR(Hnt0081, "this is the first one");
    SWAG_ERROR(Hnt0059, "this is the first usage");
    SWAG_ERROR(Hnt0045, "this is the second initialization");
    SWAG_ERROR(Hnt0009, "this is the second one");
    SWAG_ERROR(Hnt0066, "this is the tuple unpacking");
    SWAG_ERROR(Hnt0075, "this is unexpected in an alias");
    SWAG_ERROR(Hnt0088, "this parameter has a default value");
    SWAG_ERROR(Hnt0071, "this parameter is missing");
    SWAG_ERROR(Hnt0089, "this parameter should have one too");
    SWAG_ERROR(Hnt0037, "this pointer could be dereferenced with 'dref'");
    SWAG_ERROR(Hnt0012, "this return (%s) should have type '%s'");
    SWAG_ERROR(Hnt0034, "this returns nothing");
    SWAG_ERROR(Hnt0004, "this should be 'const %s'");
    SWAG_ERROR(Hnt0020, "this should be 'impl %s'");
    SWAG_ERROR(Hnt0019, "this should be 'impl enum %s'");
    SWAG_ERROR(Hnt0021, "this should be a pointer");
    SWAG_ERROR(Hnt0058, "this should be an integer");
    SWAG_ERROR(Hnt0051, "this should be casted to 'f32' or 'f64'");
    SWAG_ERROR(Hnt0052, "this should be casted to a sized type like 's32', 's64' etc...");
    SWAG_ERROR(Hnt0055, "this should be explicitly initialized");
    SWAG_ERROR(Hnt0056, "this should be followed by generic arguments");
    SWAG_ERROR(Hnt0044, "this should be followed by the arguments between '()'");
    SWAG_ERROR(Hnt0076, "this should be lower");
    SWAG_ERROR(Hnt0013, "this should be on another line, or separated with ';'");
    SWAG_ERROR(Hnt0080, "this should be removed or replaced by the scope '%s'");
    SWAG_ERROR(Hnt0026, "this should be removed");
    SWAG_ERROR(Hnt0092, "this should be renamed to '_%s' if this is intentional");
    SWAG_ERROR(Hnt0042, "this should be replaced by 'func'");
    SWAG_ERROR(Hnt0068, "this tuple contains '%d' field(s)");
    SWAG_ERROR(Hnt0069, "this tuple is empty");
    SWAG_ERROR(Hnt0032, "this type is '%s' (could be casted with 'cast(%s)')");
    SWAG_ERROR(Hnt0011, "this type is '%s'");
    SWAG_ERROR(Hnt0063, "this type is evaluated to '%s'");
    SWAG_ERROR(Hnt0022, "this type is immutable");
    SWAG_ERROR(Hnt0067, "this unpacks '%d' variable(s)");
    SWAG_ERROR(Hnt0002, "this value can only be converted to type '%s' with a dynamic call to 'opAffect'");
    SWAG_ERROR(Hnt0095, "you cannot reference this runtime %s from the %s");
    SWAG_ERROR(Hnt0096, "unexpected attribute");
    SWAG_ERROR(Hnt0097, "this should be a compile time constant");
    SWAG_ERROR(Hnt0098, "missing upper bound");
    SWAG_ERROR(Hnt0099, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Wrn0001, "unreachable code");
    SWAG_ERROR(Wrn0002, "the %s '%s' is unused");
    SWAG_ERROR(Wrn0003, "the %s '%s' is deprecated (marked with 'Swag.Deprecated')");
    SWAG_ERROR(Wrn0004, "the %s '%s' is unused");
    SWAG_ERROR(Wrn0005, "the %s '%s' is unused");
    SWAG_ERROR(Wrn0006, "the %s '%s' is unused");
    SWAG_ERROR(Wrn0007, "the %s '%s' is unused");
    SWAG_ERROR(Wrn0008, nullptr);
    SWAG_ERROR(Wrn0009, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Nte0046, "%s '%s' is waiting for %s '%s' to be solved");
    SWAG_ERROR(Nte0053, "%s '%s' is waiting for type '%s' to be generated");
    SWAG_ERROR(Nte0011, "%s is marked with 'Swag.NoReturn', so the return is used inside %s");
    SWAG_ERROR(Nte0050, "%s of type '%s'");
    SWAG_ERROR(Nte0017, "'%s' has been found in '%s' because of a using field");
    SWAG_ERROR(Nte0001, "'%s' is %s of type '%s' which does not contain a subscope");
    SWAG_ERROR(Nte0010, "'%s' is %s");
    SWAG_ERROR(Nte0042, "'%s' is a function without the 'Swag.ConstExpr' attribute");
    SWAG_ERROR(Nte0041, "'%s' is a variable and variables inside expressions cannot be evaluated at compile time");
    SWAG_ERROR(Nte0049, "'%s'");
    SWAG_ERROR(Nte0045, "an instance of generic function '%s' ");
    SWAG_ERROR(Nte0062, "and this one could also be converted");
    SWAG_ERROR(Nte0065, "cannot resolve %s '%s'");
    SWAG_ERROR(Nte0058, "cannot resolve type '%s'");
    SWAG_ERROR(Nte0067, "expected '%s' because of the function return type");
    SWAG_ERROR(Nte0052, "expected the type '%s' because of %s");
    SWAG_ERROR(Nte0048, "function '%s'");
    SWAG_ERROR(Nte0008, "here is %s");
    SWAG_ERROR(Nte0040, "here is '%s'");
    SWAG_ERROR(Nte0024, "here is a previous declaration");
    SWAG_ERROR(Nte0021, "here is another one");
    SWAG_ERROR(Nte0016, "here is another");
    SWAG_ERROR(Nte0025, "here is attribute '%s'");
    SWAG_ERROR(Nte0000, "here is its declaration");
    SWAG_ERROR(Nte0015, "here is one");
    SWAG_ERROR(Nte0026, "here is the %s");
    SWAG_ERROR(Nte0007, "here is the '%s'");
    SWAG_ERROR(Nte0027, "here is the declaration of '%s'");
    SWAG_ERROR(Nte0028, "here is the declaration");
    SWAG_ERROR(Nte0029, "here is the definition of '%s'");
    SWAG_ERROR(Nte0030, "here is the definition of the tuple");
    SWAG_ERROR(Nte0031, "here is the deprecated definition");
    SWAG_ERROR(Nte0032, "here is the faulty attribute");
    SWAG_ERROR(Nte0064, "here is the field where the recursion occurs");
    SWAG_ERROR(Nte0068, "here is the generic parameter '%s' of %s");
    SWAG_ERROR(Nte0023, "here is the immutable value");
    SWAG_ERROR(Nte0057, "here is the literal suffix '%s'");
    SWAG_ERROR(Nte0034, "here is the missing value");
    SWAG_ERROR(Nte0035, "here is the other '#import'");
    SWAG_ERROR(Nte0036, "here is the other definition");
    SWAG_ERROR(Nte0063, "here is the other return");
    SWAG_ERROR(Nte0014, "here is the other value");
    SWAG_ERROR(Nte0066, "here is the parameter '%s' of %s");
    SWAG_ERROR(Nte0037, "here is the previous definition");
    SWAG_ERROR(Nte0038, "here is the related command line option: '%s'");
    SWAG_ERROR(Nte0020, "here is the start");
    SWAG_ERROR(Nte0039, "here is the variable declaration");
    SWAG_ERROR(Nte0022, "it could be a bug in the compile time part of your program");
    SWAG_ERROR(Nte0019, "it is applied on this %s");
    SWAG_ERROR(Nte0012, "note: use '-w:<path>' or '--workspace:<path>' to specifiy a valid workspace folder, or execute swag from a valid workspace folder");
    SWAG_ERROR(Nte0061, "occurred during generic expansion of '%s'");
    SWAG_ERROR(Nte0059, "occurred during inline expansion of '%s'");
    SWAG_ERROR(Nte0060, "occurred during public export of '%s'");
    SWAG_ERROR(Nte0033, "occurred during the '#checkif' validation of the function call to '%s'");
    SWAG_ERROR(Nte0054, "occurred during the '#selectif' validation of the function call to '%s'");
    SWAG_ERROR(Nte0004, "occurred in generated code");
    SWAG_ERROR(Nte0055, "occurred when trying to match the type of the other part of the conditional expression");
    SWAG_ERROR(Nte0047, "resulting type is '%s'");
    SWAG_ERROR(Nte0002, "should be");
    SWAG_ERROR(Nte0018, "the hidden call to '%s' returns type '%s' which does not contain a subscope");
    SWAG_ERROR(Nte0056, "the other one is an implicit 'using self' as a first parameter");
    SWAG_ERROR(Nte0044, "the symbol '%s' exists in interface scope '%s'");
    SWAG_ERROR(Nte0043, "the %s '%s' was not found in '%s', so the one from '%s' has been choosen instead");
    SWAG_ERROR(Nte0013, "the symbol has been found thanks to a 'using'");
    SWAG_ERROR(Nte0051, "there is an hidden call to '%s' for type '%s'");
    SWAG_ERROR(Nte0006, "this 'using' field can be converted");
    SWAG_ERROR(Nte0003, "this variable can escape the current frame");
    SWAG_ERROR(Nte0009, "you can run swag with --dbg-catch to attach the bytecode debugger when the error occurs");
    SWAG_ERROR(Nte0005, "expected 'string' because the return type of an #ast block is 'string'");
    SWAG_ERROR(Nte0069, "here is the runtime argument that corresponds to '%s'");
    SWAG_ERROR(Nte0070, "this fails to evaluate at compile time");
    SWAG_ERROR(Nte0071, "this function call fails to evaluate at compile time");

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(San0005, "[sanity] dereferencing a null pointer");
    SWAG_ERROR(San0006, "[sanity] dereferencing null %s '%s'");
    SWAG_ERROR(San0008, "[sanity] division by zero (%s '%s')");
    SWAG_ERROR(San0007, "[sanity] division by zero");
    SWAG_ERROR(San0001, "[sanity] return of a stack local variable or temporary");
    SWAG_ERROR(San0002, "[sanity] return of stack %s '%s'");
    SWAG_ERROR(San0010, "[sanity] stack overflow (offset is '%lld', stack size is '%lld')");
    SWAG_ERROR(San0004, "[sanity] usage of non initialized %s '%s'");
    SWAG_ERROR(San0003, "[sanity] usage of non initialized stack memory");
    SWAG_ERROR(San0009, nullptr);
    SWAG_ERROR(San0011, nullptr);
    SWAG_ERROR(San0012, nullptr);
    SWAG_ERROR(San0013, nullptr);
    SWAG_ERROR(San0014, nullptr);
}

Utf8 Err(ErrorID idx)
{
    return Fmt("[%s] %s", g_EI[idx], g_E[idx].c_str());
}

Utf8 ErrNte(ErrorID idx, bool forNote)
{
    if (forNote)
        return Nte(idx);
    return Err(idx);
}

Utf8 Nte(ErrorID idx)
{
    return g_E[idx];
}

Utf8 Hnt(ErrorID idx)
{
    return g_E[idx];
}

Utf8 Hlp(ErrorID idx)
{
    return g_E[idx];
}
