#include "pch.h"
#include "Utf8.h"
#include "ErrorIds.h"

#undef SWAG_ERROR
#define SWAG_ERROR(__enum) #__enum
const char* g_EI[] = {
#include "ErrorList.h"
};

Utf8 g_E[MAX_ERRORS];
#undef SWAG_ERROR
#define SWAG_ERROR(__n, __msg)               \
    {                                        \
        SWAG_ASSERT(g_E[(int) __n].empty()); \
        g_E[(int) __n] = __msg;              \
    }
void initErrors()
{
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Fat0002, "[fatal] cache directory '%s' not found");
    SWAG_ERROR(Fat0021, "[fatal] failed due to compiler bootstrap issues");
    SWAG_ERROR(Fat0022, "[fatal] failed due to compiler runtime issues");
    SWAG_ERROR(Fat0003, "[fatal] failed to create cache directory '%s'");
    SWAG_ERROR(Fat0004, "[fatal] failed to create directory '%s'");
    SWAG_ERROR(Fat0005, "[fatal] failed to create file '%s'");
    SWAG_ERROR(Fat0006, "[fatal] failed to create public directory '%s'");
    SWAG_ERROR(Fat0007, "[fatal] failed to create script file '%s'");
    SWAG_ERROR(Fat0008, "[fatal] failed to create target directory '%s'");
    SWAG_ERROR(Fat0009, "[fatal] failed to delete directory '%s'");
    SWAG_ERROR(Fat0010, "[fatal] failed to delete file '%s'");
    SWAG_ERROR(Fat0019, "[fatal] not enough memory");
    SWAG_ERROR(Fat0015, "[fatal] invalid '--tag:%s' value (%s)");
    SWAG_ERROR(Fat0012, "[fatal] invalid module '%s'; missing configuration file '%s'");
    SWAG_ERROR(Fat0013, "[fatal] invalid script file extension; expected '.swgs' found '%s'");
    SWAG_ERROR(Fat0014, "[fatal] invalid swag command '%s'");
    SWAG_ERROR(Fat0016, "[fatal] invalid workspace '%s'; missing 'modules/' or 'tests/' subfolder");
    SWAG_ERROR(Fat0018, "[fatal] module '%s' already exists in '/modules'");
    SWAG_ERROR(Fat0020, "[fatal] script file '%s' not found");
    SWAG_ERROR(Fat0017, "[fatal] script file missing (use '--file:<filename>.swgs')");
    SWAG_ERROR(Fat0023, "[fatal] unexpected compile tag value '%s' (use '--tag:%s')");
    SWAG_ERROR(Fat0024, "[fatal] unknown compile tag type '%s' (use '--tag:%s')");
    SWAG_ERROR(Fat0025, "[fatal] workspace folder '%s' already exists");
    SWAG_ERROR(Fat0026, "[fatal] workspace folder '%s' not found");
    SWAG_ERROR(Fat0011, "[fatal] expected workspace folder '--workspace'");
    SWAG_ERROR(Fat0030, "[cmdline] '--stack-size' out of range (%s provided, range is [%s, %s])");
    SWAG_ERROR(Fat0031, "[cmdline] '%s' needs 'true' or 'false' as argument ('%s' provided)");
    SWAG_ERROR(Fat0032, "[cmdline] '%s' needs an integer argument ('%s' provided)");
    SWAG_ERROR(Fat0033, "[cmdline] '%s' requires '%s'");
    SWAG_ERROR(Fat0034, "[cmdline] '%s' needs a string argument");
    SWAG_ERROR(Fat0035, "[cmdline] '%s' needs an integer argument");
    SWAG_ERROR(Fat0036, "[cmdline] unknown argument '%s'");
    SWAG_ERROR(Fat0037, "[cmdline] unsupported '--arch' '%s' for x64 backend");
    SWAG_ERROR(Fat0038, "[cmdline] unsupported '--os' '%s' for x64 backend");
    SWAG_ERROR(Fat0027, "[fatal] duplicated module name; more than one module with the name '%s' is present in the workspace (path is '%s')");
    SWAG_ERROR(Fat0028, nullptr);
    SWAG_ERROR(Fat0029, nullptr);
    SWAG_ERROR(Fat0039, nullptr);
    SWAG_ERROR(Fat0040, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Saf0002, "failed safety 'any' $ invalid cast from 'any' to '%s'");
    SWAG_ERROR(Saf0028, "failed safety 'any' $ invalid cast of a null value to '%s'");
    SWAG_ERROR(Saf0020, "failed safety 'bool' $ invalid boolean value");
    SWAG_ERROR(Saf0008, "failed safety 'boundcheck' $ index out of bounds");
    SWAG_ERROR(Saf0034, "failed safety 'boundcheck' $ range error, lower > upper");
    SWAG_ERROR(Saf0004, "failed safety 'boundcheck' $ slice error, lower > upper");
    SWAG_ERROR(Saf0005, "failed safety 'boundcheck' $ slice error, upper out of bounds");
    SWAG_ERROR(Saf0003, "failed safety 'math' $ '@abs' overflow (type is '%s')");
    SWAG_ERROR(Saf0027, "failed safety 'math' $ '@acos' invalid argument (type is '%s')");
    SWAG_ERROR(Saf0026, "failed safety 'math' $ '@asin' invalid argument (type is '%s')");
    SWAG_ERROR(Saf0023, "failed safety 'math' $ '@log' invalid argument (type is '%s')");
    SWAG_ERROR(Saf0025, "failed safety 'math' $ '@log10' invalid argument (type is '%s')");
    SWAG_ERROR(Saf0024, "failed safety 'math' $ '@log2' invalid argument (type is '%s')");
    SWAG_ERROR(Saf0022, "failed safety 'math' $ '@sqrt' invalid argument (type is '%s')");
    SWAG_ERROR(Saf0007, "failed safety 'math' $ division by zero");
    SWAG_ERROR(Saf0021, "failed safety 'nan' $ invalid float (NaN)");
    SWAG_ERROR(Saf0001, "failed safety 'null' $ dereferencing a null pointer");
    SWAG_ERROR(Saf0032, "failed safety 'overflow' $ negative value '%I64d' on unsigned type '%s'");
    SWAG_ERROR(Saf0006, "failed safety 'overflow' $ negative value '%s' on unsigned type '%s'");
    SWAG_ERROR(Saf0030, "failed safety 'overflow' $ negative value '%g' on unsigned type '%s'");
    SWAG_ERROR(Saf0029, "failed safety 'overflow' $ value '%s' ('%I64u' in decimal) does not fit in type '%s'");
    SWAG_ERROR(Saf0033, "failed safety 'overflow' $ value '%I64u' does not fit in type '%s'");
    SWAG_ERROR(Saf0035, "failed safety 'overflow' $ value '%I64d' does not fit in type '%s'");
    SWAG_ERROR(Saf0031, "failed safety 'overflow' $ value '%g' does not fit in type '%s'");
    SWAG_ERROR(Saf0010, "failed safety 'overflow' $ overflow in '*' (type is '%s')");
    SWAG_ERROR(Saf0009, "failed safety 'overflow' $ overflow in '*=' (type is '%s')");
    SWAG_ERROR(Saf0012, "failed safety 'overflow' $ overflow in '+' (type is '%s')");
    SWAG_ERROR(Saf0011, "failed safety 'overflow' $ overflow in '+=' (type is '%s')");
    SWAG_ERROR(Saf0014, "failed safety 'overflow' $ overflow in '-' (type is '%s')");
    SWAG_ERROR(Saf0013, "failed safety 'overflow' $ overflow in '-=' (type is '%s')");
    SWAG_ERROR(Saf0015, "failed safety 'overflow' $ overflow in '<<' (type is '%s')");
    SWAG_ERROR(Saf0016, "failed safety 'overflow' $ overflow in '>>' (type is '%s')");
    SWAG_ERROR(Saf0017, "failed safety 'overflow' $ overflow in '-' (type is '%s')");
    SWAG_ERROR(Saf0018, "failed safety 'overflow' $ truncation from '%s' to '%s'");
    SWAG_ERROR(Saf0019, "failed safety 'switch' $ unexpected switch value ('Swag.Complete')");

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(San0010, "[sanity] stack overwrite     $ attempt to overrite the stack memory at offset '%lld' (stack size is '%lld')");
    SWAG_ERROR(San0006, "[sanity] null dereference    $ attempt to dereference null %s '%s'");
    SWAG_ERROR(San0005, "[sanity] null dereference    $ attempt to dereference a null pointer");
    SWAG_ERROR(San0002, "[sanity] frame escape        $ attempt to return of %s '%s'");
    SWAG_ERROR(San0001, "[sanity] frame escape        $ attempt to return a local or a temporary variable");
    SWAG_ERROR(San0004, "[sanity] uninitialized usage $ attempt to use uninitialized %s '%s'");
    SWAG_ERROR(San0003, "[sanity] uninitialized usage $ attempt to use uninitialized stack memory");
    SWAG_ERROR(San0007, "[sanity] division by zero    $ division by zero");
    SWAG_ERROR(San0008, "[sanity] division by zero    $ division by zero of %s '%s'");
    SWAG_ERROR(San0009, nullptr);
    SWAG_ERROR(San0011, nullptr);
    SWAG_ERROR(San0012, nullptr);
    SWAG_ERROR(San0013, nullptr);
    SWAG_ERROR(San0014, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Wrn0003, "deprecated usage          $ %s '%s' is deprecated (attribute 'Swag.Deprecated')");
    SWAG_ERROR(Wrn0002, "unused %s                 $ %s '%s' is not used");
    SWAG_ERROR(Wrn0001, "unreachable code          $ this code is not reachable and will never execute");
    SWAG_ERROR(Wrn0009, "unchanged local variable  $ the variable '%s' remains unchanged after its declaration $ if you don't intend to modify it, consider declaring it with 'let' instead of 'var' for immutability");
    SWAG_ERROR(Wrn0010, "unchanged local variable  $ the variable 'a' is declared but its value is never set or modified");
    SWAG_ERROR(Wrn0011, "%s");
    SWAG_ERROR(Wrn0004, nullptr);
    SWAG_ERROR(Wrn0005, nullptr);
    SWAG_ERROR(Wrn0006, nullptr);
    SWAG_ERROR(Wrn0007, nullptr);
    SWAG_ERROR(Wrn0008, nullptr);
    SWAG_ERROR(Wrn0012, nullptr);
    SWAG_ERROR(Wrn0013, nullptr);
    SWAG_ERROR(Wrn0014, nullptr);
    SWAG_ERROR(Wrn0015, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Err0433, "%s");
    SWAG_ERROR(Err0567, "%s");
    SWAG_ERROR(Err0401, "%s");
    SWAG_ERROR(Err1001, "'#global export' already defined                  $ only one '#global export' is allowed per file");
    SWAG_ERROR(Err0739, "'#main' already defined                           $ only one '#main' function is allowed per module");
    SWAG_ERROR(Err0791, "'@mkany' inconsistency                            $ the pointer type '%s' and the '@mkany' second argument '%s' are unrelated");
    SWAG_ERROR(Err1181, "'default' already defined                         $ only one 'default' statement is allowed per 'switch'");
    SWAG_ERROR(Err1123, "'impl' kind mismatch                              $ this implementation kind (%s) and the type of '%s' (%s) are not the same");
    SWAG_ERROR(Err0613, "'switch' value already defined                    $ the 'switch' value '%d' has already been defined");
    SWAG_ERROR(Err0614, "'switch' value already defined                    $ the 'switch' value '%f' has already been defined");
    SWAG_ERROR(Err0611, "'switch' value already defined                    $ the 'switch' value '%s' has already been defined");
    SWAG_ERROR(Err1031, "access modifier already defined                   $ invalid use of '%s' access modifier previously specifying '%s'");
    SWAG_ERROR(Err1200, "ambiguous syntax                                  $ ambiguity arises between initializing '%s' and starting a new block");
    SWAG_ERROR(Err1195, "ambiguous syntax                                  $ ambiguous declaration within lambda type parameters");
    SWAG_ERROR(Err0011, "argument already defined                          $ the named argument '%s' has already been defined");
    SWAG_ERROR(Err0242, "compile-time evaluation required                  $ '@include' requited its filename argument to be evaluated at compile-time");
    SWAG_ERROR(Err0021, "compile-time evaluation required                  $ the array dimension can't be evaluated at compile-time");
    SWAG_ERROR(Err0602, "compile-time evaluation required                  $ the attribute parameter can't be evaluated at compile-time");
    SWAG_ERROR(Err0237, "compile-time evaluation required                  $ the '%s' message can't be evaluated at compile-time");
    SWAG_ERROR(Err0615, "compile-time evaluation required                  $ the 'case' expression can't be evaluated at compile-time $ the 'switch' is marked as '#[Swag.Complete]', so the expression must be constant");
    SWAG_ERROR(Err0798, "compile-time evaluation required                  $ the expression can't be evaluated at compile-time");
    SWAG_ERROR(Err0102, "compile-time evaluation required                  $ the function parameter of type '%s' can't be evaluated at compile-time");
    SWAG_ERROR(Err0670, "compile-time evaluation required                  $ the initialization expression can't be evaluated at compile-time");
    SWAG_ERROR(Err0128, "compile-time evaluation required                  $ the type constraint can't be evaluated at compile-time");
    SWAG_ERROR(Err0906, "compile-time evaluation required                  $ the initial value can't be evaluated at compile-time $ in order to make that kind of compile-time evaluation, 'opAffect' should be '#[Swag.ConstExpr]'");
    SWAG_ERROR(Err0281, "compile-time evaluation required                  $ the operation on struct '%s' cannot be done compile-time $ in order to make that kind of compile-time evaluation, the struct should be '#[Swag.ConstExpr]'");
    SWAG_ERROR(Err0321, "compile-time evaluation required                  $ the operation on the tuple cannot be done compile-time $ in order to make that kind of compile-time evaluation, the tuple should be '#[Swag.ConstExpr]'");
    SWAG_ERROR(Err0089, "compile-time evaluation required                  $ '%s' can't be evaluated at compile-time");
    SWAG_ERROR(Err0248, "compile-time evaluation required                  $ the '%s' argument can't be evaluated at compile-time");
    SWAG_ERROR(Err0238, "compiler assertion failed                         $ the '#assert' expression was evaluated to false");
    SWAG_ERROR(Err0505, "compiler limit reached                            $ the size of the %s is too big (maximum size is '0x%I64x' bytes)");
    SWAG_ERROR(Err0834, "compiler limit reached                            $ the size of the data segment '%s' is too big (maximum size is '0x%I64x' bytes)");
    SWAG_ERROR(Err1217, "conflicting 'moveref' qualifier                   $ the 'moveref' qualifier can't be combined with an immutable ('const') expression");
    SWAG_ERROR(Err0757, "conflicting attributes                            $ the '#[Swag.Macro]' and '#[Swag.Inline]' attributes are mutually exclusive, the %s can't have both");
    SWAG_ERROR(Err0759, "conflicting attributes                            $ the '#[Swag.Mixin]' and '#[Swag.Inline]' attributes are mutually exclusive, the %s can't have both");
    SWAG_ERROR(Err0758, "conflicting attributes                            $ the '#[Swag.Macro]' and '#[Swag.Mixin]' attributes are mutually exclusive, the %s can't have both");
    SWAG_ERROR(Err0147, "conflicting attributes                            $ the '#[Swag.Compiler]' and '#[Swag.Tls]' attributes are mutually exclusive");
    SWAG_ERROR(Err0083, "conflicting attributes                            $ the '#[Swag.Inline]' and '#[Swag.NoInline]' attributes are mutually exclusive");
    SWAG_ERROR(Err1186, "conflicting cast modifiers                        $ the '%s' and '%s' cast modifiers are mutually exclusive and can't be used together");
    SWAG_ERROR(Err0518, "dependency error                                  $ cannot resolve the dependency to the module '%s' because version '%s' was not found at '%s'");
    SWAG_ERROR(Err2030, "dependency error                                  $ cannot resolve the dependency to the module '%s' because version '%s' was not found");
    SWAG_ERROR(Err0516, "dependency error                                  $ cannot resolve the dependency to the module '%s' because of a version mismatched");
    SWAG_ERROR(Err1116, "duplicated '#import' location                     $ the '#import' location has already been defined");
    SWAG_ERROR(Err1117, "duplicated '#import' version                      $ the '#import' version has already been defined");
    SWAG_ERROR(Err0284, "duplicated import                                 $ the '#import' location of the module '%s' is already defined as '%s'");
    SWAG_ERROR(Err0286, "duplicated import                                 $ the '#import' version of the module '%s' is already defined as '%s'");
    SWAG_ERROR(Err1125, "duplicated instruction modifier                   $ the instruction modifier '%s' has already been defined");
    SWAG_ERROR(Err1015, "empty '#mixin' replacement block                  $ an empty 'mixin' block is useless $ add some content to the '#mixin' block or consider removing it");
    SWAG_ERROR(Err1158, "empty 'case' statement                            $ a 'case' statement should never be empty");
    SWAG_ERROR(Err1052, "empty 'default' statement                         $ a 'default' statement should never be empty");
    SWAG_ERROR(Err1124, "empty array literal                               $ an array literal should contain at least one value");
    SWAG_ERROR(Err1054, "empty compiler function body                      $ %s requires a body; expected '{' but found ';' instead");
    SWAG_ERROR(Err1093, "empty namespace name                              $ expected the namespace name before '%s'");
    SWAG_ERROR(Err0435, "exception!                                        $ compile-time execution exception");
    SWAG_ERROR(Err1048, "expected '%s'                                     $ expected '%s' %s, found '%s' instead");
    SWAG_ERROR(Err0027, "failed semantic                                   $ cannot resolve this");
    SWAG_ERROR(Err0603, "file error                                        $ failed to delete file '%s'");
    SWAG_ERROR(Err0509, "file error                                        $ failed to access file '%s'");
    SWAG_ERROR(Err0508, "file error                                        $ the file '%s' can't be found in the module folder '%s'");
    SWAG_ERROR(Err0524, "file error                                        $ failed to open file '%s' for writing");
    SWAG_ERROR(Err0525, "file error                                        $ failed to write to file '%s'");
    SWAG_ERROR(Err0314, "file error                                        $ the file format must be ASCII, UTF-8, or UTF-8-BOM");
    SWAG_ERROR(Err0223, "file open error                                   $ failed to open the '@include' file '%s'");
    SWAG_ERROR(Err0493, "forbidden '@postcopy'                             $ the intrinsic '@postcopy' cannot be called on type '%s' because of '#[Swag.NoCopy]'");
    SWAG_ERROR(Err0101, "forbidden call                                    $ a direct call to 'opDrop' is forbidden $ consider using '@drop' instead'");
    SWAG_ERROR(Err0100, "forbidden call                                    $ a direct call to 'opInit' is forbidden $ consider using '@init' instead'");
    SWAG_ERROR(Err0103, "forbidden call                                    $ a direct call to 'opPostCopy' is forbidden $ consider using '@postcopy' instead'");
    SWAG_ERROR(Err0104, "forbidden call                                    $ a direct call to 'opPostMove' is forbidden $ consider using '@postmove' instead'");
    SWAG_ERROR(Err1019, "identifier expected                               $ expected a function call after '%s', found '%s' instead");
    SWAG_ERROR(Err0431, "immutable global variable                         $ the global variable '%s' is immutable at compile-time because it's initialized to 0");
    SWAG_ERROR(Err1056, "incomplete 'case' expression list                 $ expected another expression after ',' and before ':' $ ',' indicates a list of 'case' expressions; provide the next expression or consider removing the ','");
    SWAG_ERROR(Err1199, "incomplete alias list                             $ expected another alias name after ',' $ either provide an additional alias name or remove the trailing ','");
    SWAG_ERROR(Err1201, "incomplete arguments list                         $ expected another call argument after ',' $ either provide an additional argument or remove the trailing ','");
    SWAG_ERROR(Err1213, "incomplete array dimensions                       $ expected another dimension after ',' $ either provide an additional dimension or remove the trailing ','");
    SWAG_ERROR(Err2001, "incomplete binary number format                   $ binary literals require at least one '0' or '1' digit");
    SWAG_ERROR(Err2007, "incomplete hexadecimal number format              $ hexadecimal literals require at least one valid digit (0-9, A-F, a-f)");
    SWAG_ERROR(Err0336, "incomplete import version                         $ the '#import' version has build number '%d' but lacks a revision");
    SWAG_ERROR(Err0335, "incomplete import version                         $ the '#import' version has revision '%d' but lacks a major version");
    SWAG_ERROR(Err1047, "incomplete indexing                               $ expected another expression after ',' $ either provide an additional expression or remove the trailing ','");
    SWAG_ERROR(Err1202, "incomplete parameters list                        $ expected another parameter after ',' $ either provide an additional parameter or remove the trailing ','");
    SWAG_ERROR(Err0620, "incomplete switch                                 $ the value '%s.%s' is missing");
    SWAG_ERROR(Err1176, "incomplete tuple unpacking                        $ expected another variable name after ',' $ either provide an additional variable name or remove the trailing ','");
    SWAG_ERROR(Err1171, "incomplete variables list                         $ expected another variable name after ',' $ either provide an additional variable name or remove the trailing ','");
    SWAG_ERROR(Err0514, "incorrect import location                         $ the '#import' location has an incorrect format $ expecting 'location=\"mode@accesspath\"' where mode is 'swag' or 'disk'");
    SWAG_ERROR(Err0880, "infinite 'while'                                  $ the while condition is always 'true', which creates an infinite loop $ if you intentionally want to create an infinite loop, consider using a loop without argument 'loop { ... }'");
    SWAG_ERROR(Err1136, "invalid '#global' instruction                     $ '%s' is not recognized as a valid '#global' instruction");
    SWAG_ERROR(Err1109, "invalid '#import' location                        $ expected a '#import' location path, found '%' instead");
    SWAG_ERROR(Err1113, "invalid '#import' location                        $ expected a '#import' version as a string, found '%' instead");
    SWAG_ERROR(Err1016, "invalid '#mixin' replacement keyword              $ a '#mixin' block accepts only 'break' and 'continue' as replacements, found '%s' instead");
    SWAG_ERROR(Err1164, "invalid '#scope' identifier                       $ expected the '#scope' identifier, found '%s' instead");
    SWAG_ERROR(Err1211, "invalid '#up' count                               $ expected an integer literal for the '#up' count, found '%s' instead");
    SWAG_ERROR(Err1082, "invalid '#up' count                               $ the '#up' count can't be zero");
    SWAG_ERROR(Err1210, "invalid '#up' count                               $ the '#up' count should be an untype integer in the range [1, 255], found '%s'");
    SWAG_ERROR(Err1169, "invalid '@alias' number                           $ '@alias' variable names should end with a number, found '%s' instead");
    SWAG_ERROR(Err0801, "invalid '@countof' argument                       $ the intrinsic '@countof' requires an integer argument, got '%s' instead");
    SWAG_ERROR(Err0802, "invalid '@countof' argument                       $ the intrinsic '@countof' requires a positive argument, got '%d' instead");
    SWAG_ERROR(Err0805, "invalid '@countof' argument                       $ the intrinsic '@countof' requires a positive argument, got '%I64d'");
    SWAG_ERROR(Err1168, "invalid '@mixin' number                           $ '@mixin' variable names should end with a number, found '%s' instead");
    SWAG_ERROR(Err1108, "invalid 'break' scope name                        $ expected the scope name after 'break', found '%' instead");
    SWAG_ERROR(Err1142, "invalid 'defer' mode                              $ '%s' is not a valid 'defer' mode $ the valid defer modes are 'defer(err)' and 'defer(noerr)'");
    SWAG_ERROR(Err1173, "invalid 'discard' call                            $ expected a discardable call after 'discard', found '%s' instead");
    SWAG_ERROR(Err0342, "invalid 'orelse' type                             $ the 'orelse' operator does not accept the type 'struct' as an argument");
    SWAG_ERROR(Err0332, "invalid 'orelse' type                             $ the 'orelse' operator dnoes not accept the type '%s' as an argument");
    SWAG_ERROR(Err0771, "invalid 'retval'                                  $ the 'retval' special type is not allowed in a function that returns nothing");
    SWAG_ERROR(Err1053, "invalid 'switch' block content                    $ expected 'case' or 'default', found '%s' instead");
    SWAG_ERROR(Err0609, "invalid 'switch' type                             $ 'switch' does not accept an expression of type '%s'");
    SWAG_ERROR(Err1115, "invalid 'visit' name                              $ expected a 'visit' specialized name, found '%s' instead");
    SWAG_ERROR(Err0073, "invalid 'with'                                    $ 'with' is invalid on an enum variable (type is '%s')");
    SWAG_ERROR(Err0703, "invalid 'with'                                    $ 'with' is invalid on type '%s' $ expected a namespace, an enum, a struct or a pointer to struct");
    SWAG_ERROR(Err1148, "invalid 'with' expression                         $ expected a 'with' valid expression");
    SWAG_ERROR(Err1071, "invalid alias name                                $ expected the alias name after '%s', found '%s' instead");
    SWAG_ERROR(Err1218, "invalid alias name                                $ expected an identifier for name aliasing, found '%s' instead");
    SWAG_ERROR(Err0596, "invalid align value                               $ the '#[Swag.Align]' argument must be a power of two, got '%d'");
    SWAG_ERROR(Err0283, "invalid argument                                  $ the intrinsic '@gettag' expects a default value of type '%s' as the last argument");
    SWAG_ERROR(Err0790, "invalid argument                                  $ the intrinsic '@mkany' can't have 'null' as a first argument");
    SWAG_ERROR(Err0792, "invalid argument                                  $ the intrinsic '@mkany' expects a type as the second argument, got '%s' instead");
    SWAG_ERROR(Err0784, "invalid argument                                  $ the intrinsic '@mkcallback' requires a pointer to function argument, got '%s' instead");
    SWAG_ERROR(Err0498, "invalid argument                                  $ the '%s' count must be an integer, got '%s' instead");
    SWAG_ERROR(Err0023, "invalid array dimension                           $ the array dimension is 0");
    SWAG_ERROR(Err0022, "invalid array dimension                           $ the array dimension must be an integer, got '%s' instead");
    SWAG_ERROR(Err1190, "invalid assignment                                $ assignments are not allowed for unnamed parameters ('?')");
    SWAG_ERROR(Err1072, "invalid attribute name                            $ expected an attribute name, found '%s' instead");
    SWAG_ERROR(Err1050, "invalid attribute usage                           $ expected ',' for a new attribute name, or ']' to end the list, found '%s' instead");
    SWAG_ERROR(Err0512, "invalid attribute use                             $ a %s can't have the '#[Swag.CalleeReturn]' attribute");
    SWAG_ERROR(Err0860, "invalid attribute use                             $ a %s can't have the '#[Swag.NotGeneric]' attribute");
    SWAG_ERROR(Err0763, "invalid attribute use                             $ a %s can't have the '#[Swag.Inline]' attribute");
    SWAG_ERROR(Err0761, "invalid attribute use                             $ a %s can't have the '#[Swag.Macro]' attribute");
    SWAG_ERROR(Err0762, "invalid attribute use                             $ a %s can't have the '#[Swag.Mixin]' attribute");
    SWAG_ERROR(Err1104, "invalid auto-generated 'impl' block               $ 'impl' block generation is permissible only within a '#message' with 'Swag.CompilerMsgMask.AttributeGen'");
    SWAG_ERROR(Err2003, "invalid binary number format                      $ binary literals should only contain '0' or '1', found '%s' instead");
    SWAG_ERROR(Err1207, "invalid block start                               $ a block start '{' is not allowed after 'discard try/assume/catch'");
    SWAG_ERROR(Err0875, "invalid capture                                   $ can't capture '%s' because it's a closure $ capturing a closure type is not supported");
    SWAG_ERROR(Err0884, "invalid capture                                   $ can't capture '%s' because it's not a plain old data struct $ a struct is not plain old data if it contains 'opDrop', 'opPostCopy' or 'opPostMove'");
    SWAG_ERROR(Err2028, "invalid character                                 $ the character '%s' is not recognized in this context");
    SWAG_ERROR(Err0302, "invalid character literal                         $ can't convert a character literal to type '%s'");
    SWAG_ERROR(Err0287, "invalid character literal                         $ can't convert the character literal '0x%x' to 'u16', this is out of range");
    SWAG_ERROR(Err0263, "invalid character literal                         $ can't convert the character literal '0x%x' to 'u8', this is out of range");
    SWAG_ERROR(Err0262, "invalid character literal                         $ the character literal '%s' seems to be a string and not a character");
    SWAG_ERROR(Err1094, "invalid character syntax                          $ characters should be delimited with backticks '`' and not quotes $ consider using the syntax `%s` instead");
    SWAG_ERROR(Err1049, "invalid closure parameters                        $ expected '(' to start the list of parameters of the closure, found '%s' instead");
    SWAG_ERROR(Err2017, "invalid compiler directive                        $ '%s' is not a valid compiler directive starting with '#'");
    SWAG_ERROR(Err1062, "invalid compound name                             $ expected a single identifier %s $ consider using a single name without the '.' character");
    SWAG_ERROR(Err1184, "invalid constant name                             $ expected a constant name, found '%s' instead");
    SWAG_ERROR(Err1193, "invalid default value                             $ 'self' can't have a default value");
    SWAG_ERROR(Err1194, "invalid default value                             $ lambda parameters can't have a default value");
    SWAG_ERROR(Err0481, "invalid dereference                               $ derefencing type '%s' is not valid");
    SWAG_ERROR(Err0486, "invalid dereference                               $ dereferencing a pointer to 'void' is not valid");
    SWAG_ERROR(Err0085, "invalid dereference                               $ '%s' has type '%s' and can't be dereferenced like a struct or a pointer to struct");
    SWAG_ERROR(Err0194, "invalid dereference                               $ '%s' has type '%s' and can't be dereferenced by index because pointer arithmetic is not allowed");
    SWAG_ERROR(Err1073, "invalid embedded instruction                      $ expected an embedded instruction or a curly block, found '%s' instead");
    SWAG_ERROR(Err1159, "invalid empty attribute                           $ an attribute should contain at least one value $ you should specify the attribute name between '[]'");
    SWAG_ERROR(Err1187, "invalid empty statement ';'                       $ a semicolon ';' can't be used alone to mark an empty statement");
    SWAG_ERROR(Err1075, "invalid enum identifier                           $ expected an enum value identifier, found '%s' instead");
    SWAG_ERROR(Err1074, "invalid enum name                                 $ expected the enum name, found '%s' instead");
    SWAG_ERROR(Err0705, "invalid enum type                                 $ the type '%s' is not a valid enum type");
    SWAG_ERROR(Err0704, "invalid enum type                                 $ the type 'cstring' is not a valid enum type $ consider using 'string' instead");
    SWAG_ERROR(Err0253, "invalid escape format                             $ the '\\U' escape code requires 8 hexadecimal digits");
    SWAG_ERROR(Err0224, "invalid escape format                             $ the '\\u' escape code requires 4 hexadecimal digits");
    SWAG_ERROR(Err0184, "invalid escape format                             $ the '\\x' escape code requires 2 hexadecimal digits");
    SWAG_ERROR(Err1059, "invalid expression                                $ expected an expression, found '%s' instead");
    SWAG_ERROR(Err1076, "invalid expression                                $ expected an expression after %s, found '%s' instead");
    SWAG_ERROR(Err1020, "invalid expression                                $ the directive '%s' can't be used as an expression $ this directive can only be used as a statement");
    SWAG_ERROR(Err2023, "invalid float number format                       $ the fractional part should not start with '_'");
    SWAG_ERROR(Err2024, "invalid float number format                       $ the exponent part should not start with '_'");
    SWAG_ERROR(Err2002, "invalid float number format                       $ exponent in the scientific notation must contain at least one digit");
    SWAG_ERROR(Err0105, "invalid function call                             $ can't call '%s' because the function is declared but not defined");
    SWAG_ERROR(Err0125, "invalid function call                             $ '%s' has call parameters but the type '%s' is not a function");
    SWAG_ERROR(Err0127, "invalid function call                             $ '%s' has call parameters but is %s, not a function");
    SWAG_ERROR(Err1133, "invalid function declaration                      $ expected 'func' or 'mtd' to declare an interface function, found '%s' instead $ to declare a function within an interface, use 'func' or 'mtd'");
    SWAG_ERROR(Err1106, "invalid function name                             $ a function name ('%s') can't start with '@', this is reserved for intrinsics");
    SWAG_ERROR(Err1089, "invalid function name                             $ expected a function name, found '%s'");
    SWAG_ERROR(Err1058, "invalid generic parameter name                    $ expected an identifier as the generic name, found '%s' instead");
    SWAG_ERROR(Err2004, "invalid hexadecimal number format                 $ hexadecimal literals can only contain digits 0-9, A-F, and a-f, found '%s' instead");
    SWAG_ERROR(Err1078, "invalid identifier                                $ expected an identifier, found '%s' instead");
    SWAG_ERROR(Err1077, "invalid identifier                                $ expected an identifier here");
    SWAG_ERROR(Err1157, "invalid identifier list                           $ 'with' does not support multiple identifiers");
    SWAG_ERROR(Err0288, "invalid import version                            $ the '#import' version format is invalid");
    SWAG_ERROR(Err2027, "invalid intrinsic                                 $ '%s' is not a valid intrinsic starting with '@'");
    SWAG_ERROR(Err0387, "invalid literal                                   $ invalid number conversion for literal '%I64u'");
    SWAG_ERROR(Err1105, "invalid logical operator                          $ expected '%s' for logical test, found '%s' instead");
    SWAG_ERROR(Err0811, "invalid module name                               $ the '#[Swag.Foreign]' module name can't be empty");
    SWAG_ERROR(Err0813, "invalid module name                               $ unexpected symbol '.' in the '#[Swag.Foreign]' module name $ a '#[Swag.Foreign]' module name can't have an extension, consider removing it");
    SWAG_ERROR(Err1110, "invalid named argument                            $ expected a named argument before ':', found '%s' instead");
    SWAG_ERROR(Err1041, "invalid namespace name                            $ expected the namespace name, found '%s' instead");
    SWAG_ERROR(Err2020, "invalid number format                             $ consecutive digit separators '_' are not allowed");
    SWAG_ERROR(Err2009, "invalid number format                             $ this hexadecimal number has too many digits to fit within a 64-bit representation");
    SWAG_ERROR(Err2029, "invalid number format                             $ this binary number has too many digits to fit within a 64-bit representation");
    SWAG_ERROR(Err2021, "invalid number format                             $ a number should not end with a digit separator '_'");
    SWAG_ERROR(Err2022, "invalid number format                             $ a number should not start with a digit separator '_'");
    SWAG_ERROR(Err2019, "invalid number prefix                             $ expected '0x' for hexadecimal or '0b' for binary, found '%s' instead");
    SWAG_ERROR(Err1178, "invalid operator modifier                         $ '%s' is not recognized as a valid operator modifier");
    SWAG_ERROR(Err0595, "invalid packing value                             $ the '#[Swag.Pack]' argument must be 0 or a power of two, got '%d'");
    SWAG_ERROR(Err0804, "invalid parameter                                 $ the '#message' block needs a parameter of type 'Swag.CompilerMsgMask', got '%s'");
    SWAG_ERROR(Err1112, "invalid parameter name                            $ expected a parameter name, found '%s' instead");
    SWAG_ERROR(Err1167, "invalid pass name                                 $ '%s' is not recognized as a valid compiler pass name");
    SWAG_ERROR(Err1022, "invalid reference to 'with' block                 $ an identifier is expected after '.', found '%s' instead");
    SWAG_ERROR(Err0126, "invalid return type                               $ the function 'opSlice' must return a string or a slice, got '%s' instead");
    SWAG_ERROR(Err0206, "invalid stack frame reference                     $ you can't reference %s '%s' because it's in a different stack frame");
    SWAG_ERROR(Err1128, "invalid struct initialization                     $ expected '{}' to initialize a struct, and not '()' which is reserved for function calls");
    SWAG_ERROR(Err1063, "invalid struct name                               $ expected the struct name, found '%s' instead");
    SWAG_ERROR(Err1064, "invalid top-level instruction                     $ expected a top-level instruction, found '%s' instead");
    SWAG_ERROR(Err1066, "invalid type declaration                          $ expected a type declaration, found '%s' instead");
    SWAG_ERROR(Err1096, "invalid type declaration                          $ expected the array type after its dimensions, found '%s' instead");
    SWAG_ERROR(Err1067, "invalid type declaration                          $ expected a type in the tuple definition, found '%s' instead");
    SWAG_ERROR(Err1060, "invalid type suffix                               $ expected an identifier or a type after the start of a type suffix ''', found '%s' instead");
    SWAG_ERROR(Err0909, "invalid unicode value                             $ value '0x%x is not a valid unicode code point, and can't be converted to UTF8");
    SWAG_ERROR(Err1065, "invalid variable list                             $ 'if' does not support multiples variable declarations");
    SWAG_ERROR(Err1111, "invalid variable name                             $ a variable name ('%s') can't start with '@', this is reserved for intrinsics $ only '@mixin' and '@alias' are possible in that case");
    SWAG_ERROR(Err1069, "invalid variable name                             $ expected a variable name, found '%s' instead");
    SWAG_ERROR(Err1161, "invalid variable name                             $ unexpected generic parameters after variable name '%s'");
    SWAG_ERROR(Err1216, "invalid variable name                             $ unexpected parameters after variable name '%s'");
    SWAG_ERROR(Err0149, "invalid variable type                             $ a variable can't be declared with a 'void' type");
    SWAG_ERROR(Err0308, "invalid variable type                             $ cannot deduce the type of the variable because the expression is 'null'");
    SWAG_ERROR(Err0309, "invalid variable type                             $ failed to deduce the type of %s '%s'");
    SWAG_ERROR(Err0359, "literal overflow                                  $ the number '%I64d' is too large for type '%s'");
    SWAG_ERROR(Err0415, "literal overflow                                  $ the number '%I64u' is too large for type 's8'");
    SWAG_ERROR(Err0829, "literal overflow                                  $ cannot negate number '%d' because '%u' is too large for type 's8'");
    SWAG_ERROR(Err0832, "literal overflow                                  $ cannot negate number '%I64d' because '%I64u' is too large for type 's64'");
    SWAG_ERROR(Err0234, "mismatch return type                              $ an '#ast' block must return a string, got '%s'");
    SWAG_ERROR(Err0243, "mismatch type                                     $ '@include' requires an argument of type 'string', got '%s' instead");
    SWAG_ERROR(Err1183, "misplaced '#dependencies'                         $ '#dependencies' can only be used within 'module.swg' or '.swgs' files");
    SWAG_ERROR(Err1182, "misplaced '#dependencies'                         $ '#dependencies' must be placed at the file level");
    SWAG_ERROR(Err1003, "misplaced '#global testerror'                     $ '#global testerror' is only valid in a test file from the './tests' folder");
    SWAG_ERROR(Err1004, "misplaced '#global testwarning'                   $ '#global testwarning' is only valid in a test file from the './tests' folder");
    SWAG_ERROR(Err1005, "misplaced '#global using'                         $ '#global using' can only be used within 'module.swg' or '.swgs' files");
    SWAG_ERROR(Err1006, "misplaced '#global' directive                     $ '#global' should be placed at the very top of the file");
    SWAG_ERROR(Err1009, "misplaced '#import'                               $ '#import' can only be used within 'module.swg' or '.swgs' files");
    SWAG_ERROR(Err1008, "misplaced '#import'                               $ '#import' must be placed just under a '#dependencies' block");
    SWAG_ERROR(Err1010, "misplaced '#import'                               $ '#import' must be placed within the '#dependencies' block");
    SWAG_ERROR(Err1013, "misplaced '#load'                                 $ '#load' can only be used within 'module.swg' or '.swgs' files");
    SWAG_ERROR(Err1012, "misplaced '#load'                                 $ '#load' must be placed just under a '#dependencies' block");
    SWAG_ERROR(Err1014, "misplaced '#load'                                 $ '#load' must be placed within the '#dependencies' block");
    SWAG_ERROR(Err0239, "misplaced '#macro'                                $ '#macro' can only be used within a '#[Swag.Macro]' function");
    SWAG_ERROR(Err1034, "misplaced '#mixin' block                          $ a '#mixin' block is only valid within a breakable block such as 'loop', 'visit', 'for', etc.");
    SWAG_ERROR(Err1035, "misplaced '#placeholder'                          $ '#placeholder' must be placed within a top level scope");
    SWAG_ERROR(Err0348, "misplaced '#self'                                 $ '#self' can only be used within functions");
    SWAG_ERROR(Err0744, "misplaced '#test' function                        $ #test' functions can only be declared in test modules (in the './tests' folder)");
    SWAG_ERROR(Err0136, "misplaced '#up'                                   $ '#up' can only be used within a '#[Swag.Macro]' function");
    SWAG_ERROR(Err0137, "misplaced '%s'                                    $ '%s' can't be used in a struct special function ('%s')");
    SWAG_ERROR(Err0138, "misplaced '%s'                                    $ '%s' can only be used inside a function marked with 'throw', but '%s' isn't");
    SWAG_ERROR(Err0442, "misplaced '@cvastart'                             $ the intrinsic '@cvastart' can only be used in a function with a final parameter of type 'cvarargs'");
    SWAG_ERROR(Err0630, "misplaced '@index'                                $ the intrinsic '@index' is only valid within a breakable block such as 'loop', 'visit', 'for', etc.");
    SWAG_ERROR(Err0806, "misplaced '@spread'                               $ the intrinsic '@spread' can only be used as a function argument");
    SWAG_ERROR(Err1135, "misplaced 'Self' type                             $ the 'Self' type is only valid within an 'impl', 'struct', or 'interface' block");
    SWAG_ERROR(Err0632, "misplaced 'break'                                 $ 'break' is only valid within a breakable block such as 'loop', 'visit', 'for', etc.");
    SWAG_ERROR(Err0729, "misplaced 'code'                                  $ 'code' is only valid within a '#[Swag.Macro]' or '#[Swag.Mixin]' function");
    SWAG_ERROR(Err1045, "misplaced 'const'                                 $ expected 'self' after 'const' when declaring a function parameter, found '%s' instead");
    SWAG_ERROR(Err1061, "misplaced 'const' qualifier                       $ the 'const' qualifier is not allowed for 'func', but only for 'mtd'");
    SWAG_ERROR(Err0637, "misplaced 'continue'                              $ 'continue' is only valid within a breakable block such as 'loop', 'visit', 'for', etc.");
    SWAG_ERROR(Err0635, "misplaced 'fallthrough'                           $ 'fallthrough' is invalid in the last 'case' of a 'switch'");
    SWAG_ERROR(Err0634, "misplaced 'fallthrough'                           $ 'fallthrough' is only valid within a 'case' block");
    SWAG_ERROR(Err0633, "misplaced 'fallthrough'                           $ 'fallthrough' is only valid within a 'switch'");
    SWAG_ERROR(Err1039, "misplaced 'mtd'                                   $ 'mtd' is only valid within a struct implementation block $ you could replace 'mtd' with 'func'");
    SWAG_ERROR(Err1038, "misplaced 'mtd' in enum                           $ 'mtd' is only valid within a struct implementation block $ you could replace 'mtd' with 'func'");
    SWAG_ERROR(Err0769, "misplaced 'retval'                                $ the 'retval' special type can only be used within a function body");
    SWAG_ERROR(Err1027, "misplaced 'self'                                  $ the 'self' keyword is only valid within an 'impl' block of an enum or a struct");
    SWAG_ERROR(Err1028, "misplaced 'throw'                                 $ raising an error with 'throw' is only valid within a function, macro or mixin");
    SWAG_ERROR(Err1029, "misplaced 'using' in interface                    $ 'using' can't be associated with an interface member");
    SWAG_ERROR(Err1121, "misplaced access modifier                         $ the '%s' access modifier can only be used at the global scope");
    SWAG_ERROR(Err1174, "misplaced access modifier                         $ misuse of '%s' before '%s' $ '%s' can't be prefixed with an access modifier");
    SWAG_ERROR(Err1120, "misplaced array size                              $ the size of the array must be placed before the type name");
    SWAG_ERROR(Err1150, "misplaced attribute                               $ unexpected start of an attribute after '%s' $ attributes should be placed before access modifiers; consider moving the attribute before '%s'");
    SWAG_ERROR(Err0297, "misplaced attribute                               $ the '#[Swag.Discardable]' attribute can only be applied to lambda variables, got '%s'");
    SWAG_ERROR(Err1153, "misplaced closure                                 $ a closure definition is not valid at the global level $ closures can only be defined within functions");
    SWAG_ERROR(Err0255, "misplaced compiler directive                      $ '#callerfunction' can only be used when declaring a function parameter");
    SWAG_ERROR(Err0254, "misplaced compiler directive                      $ '#callerlocation' can only be used when declaring a function parameter");
    SWAG_ERROR(Err1147, "misplaced error catching                          $ '%s' can't be nested in a '%s' expression $ you should use only one 'try', 'catch' or 'assume'");
    SWAG_ERROR(Err1021, "misplaced error catching                          $ treating a return error with '%s' can only be done inside a function, macro or mixin");
    SWAG_ERROR(Err1163, "misplaced function declaration                    $ functions can't be directly declared inside structs $ functions associated with structs should be declared inside 'impl' blocks");
    SWAG_ERROR(Err1040, "misplaced namespace                               $ a namespace should be defined in the top-level scope or within another namespace");
    SWAG_ERROR(Err1180, "misplaced reference to 'with' block               $ statements starting with the '.' operator are only valid within a 'with' block");
    SWAG_ERROR(Err1036, "misplaced top-level 'using'                       $ a top-level 'using' must be placed before any other declarations");
    SWAG_ERROR(Err1177, "misplaced tuple unpacking                         $ tuple unpacking is not allowed in %s");
    SWAG_ERROR(Err0734, "misplaced variadic parameter                      $ a variadic parameter must be the last one");
    SWAG_ERROR(Err1002, "missing '#foreignlib' string argument             $ expected the library name after '#foreignlib', found '%s' instead $ use '#foreignlib \"path/to/library\"' to specify the library to import");
    SWAG_ERROR(Err1204, "missing '#global testerror' string argument       $ expected the error string to check after '#global testerror', found '%s' instead");
    SWAG_ERROR(Err1205, "missing '#global testwarning' string argument     $ expected the warning string to check after '#global testwarning', found '%s' instead");
    SWAG_ERROR(Err1083, "missing '#if' boolean expression                  $ expected a boolean expression before '%s'");
    SWAG_ERROR(Err1007, "missing '#import' string argument                 $ expected the module name to import after '#import', found '%s' instead");
    SWAG_ERROR(Err0269, "missing '#main'                                   $ the program entry point '#main' is missing");
    SWAG_ERROR(Err1033, "missing '#message' parameter                      $ '#message' requests a parameter of type 'Swag.CompilerMsgMask'");
    SWAG_ERROR(Err1017, "missing '#placeholder' identifier                 $ expected an identifier after '#placeholder', found '%s' instead");
    SWAG_ERROR(Err1196, "missing '#type' type                              $ expected a valid type after '#type', found '%s' instead");
    SWAG_ERROR(Err1175, "missing '(' before arguments                      $ expected '(' to start the list of arguments, found '%s' instead");
    SWAG_ERROR(Err1203, "missing '(' before parameters                     $ expected '(' to start the list of parameters, found '%s' instead");
    SWAG_ERROR(Err1051, "missing ':'                                       $ a ':' is expected here after the 'loop' variable name '%s' $ syntax is 'loop [variable:] count'");
    SWAG_ERROR(Err1023, "missing '@alias' number                           $ '@alias' variable names should end with a number such as '@alias0', '@alias1', etc.");
    SWAG_ERROR(Err1011, "missing '@include' string argument                $ expected the file name to include after '@include', found '%s' instead");
    SWAG_ERROR(Err1119, "missing '@mixin' number                           $ '@mixin' variable names should end with a number such as '@mixin0', '@mixin1', etc.");
    SWAG_ERROR(Err1055, "missing 'case' expression                         $ expected the 'case' expression before '%s'");
    SWAG_ERROR(Err1057, "missing 'closure' capture variable                $ expected another capture variable between ',' and '|' $ add another variable or consider removing the trailing comma");
    SWAG_ERROR(Err1084, "missing 'if' boolean expression                   $ expected a boolean expression before '%s'");
    SWAG_ERROR(Err1085, "missing 'loop' count                              $ expected the 'loop' count expression before '%s'");
    SWAG_ERROR(Err1086, "missing 'visit' expression                        $ expected the element to visit before '%s'");
    SWAG_ERROR(Err1214, "missing 'visit' name                              $ expected the 'visit' specialized name between '()' $ if you are using the default 'visit', consider removing the parenthesis");
    SWAG_ERROR(Err1212, "missing 'visit' variable                          $ expected another 'visit' variable between ',' and ':' $ the first 'visit' variable is the value, the second one is the index");
    SWAG_ERROR(Err1087, "missing 'while' boolean expression                $ expected a boolean expression before '%s'");
    SWAG_ERROR(Err0020, "missing arguments                                 $ %s has missing arguments");
    SWAG_ERROR(Err0601, "missing arguments                                 $ the '#[Swag.Using]' attribute should have at least one argument");
    SWAG_ERROR(Err0075, "missing attribute                                 $ 'opVisit' functions must have the '#[Swag.Macro]' attribute");
    SWAG_ERROR(Err1026, "missing attribute name                            $ expected an attribute name before '('");
    SWAG_ERROR(Err1107, "missing call arguments                            $ missing the call arguments after '%s' $ only mixin calls with arguments are valid at global scope");
    SWAG_ERROR(Err2026, "missing character literal closing backtick        $ expected a closing backtick '`' before the end of the line");
    SWAG_ERROR(Err1068, "missing closing '%s'                              $ expected '%s' %s, found '%s' instead");
    SWAG_ERROR(Err1070, "missing constant type                             $ expected ':' followed by the type or an assignment with '=', found '%s' instead");
    SWAG_ERROR(Err0738, "missing default value                             $ the %s needs a default value as a preceding parameter has one");
    SWAG_ERROR(Err1037, "missing end of line                               $ expected a line break or a ';' to close the %s, found '%s' instead $ consider adding a line break or separating the previous statement with a ';'");
    SWAG_ERROR(Err1140, "missing enum name                                 $ expected the enum name before the start of the body '{'");
    SWAG_ERROR(Err1146, "missing enum name                                 $ expected the enum name before the start of the type definition ':'");
    SWAG_ERROR(Err1091, "missing function parameters                       $ expected the function parameters between '()' before the start of the body '{' $ if you want to declare a function without parameters, consider adding '()' after the name");
    SWAG_ERROR(Err1092, "missing generic parameters                        $ expected at least one generic parameter between '()' $ consider removing '()' if this is not generic");
    SWAG_ERROR(Err1044, "missing intrinsic arguments                       $ expected the intrinsic arguments between '()'");
    SWAG_ERROR(Err1090, "missing lambda parameter type                     $ expected ':' followed by the type or an assignment with '=' $ when declaring lambda parameters, you should not combined inferred and explicit types");
    SWAG_ERROR(Err0748, "missing return value                              $ not all control paths of %s returns a value");
    SWAG_ERROR(Err0749, "missing return value                              $ the %s returns type '%s' but lacks a 'return' in its body");
    SWAG_ERROR(Err0772, "missing return value                              $ expected an expression of type '%s' after 'return'");
    SWAG_ERROR(Err1185, "missing slicing upper bound                       $ expected an upper bound expression after '..<' $ if you want to slice to the end, consider using '..' instead");
    SWAG_ERROR(Err1025, "missing struct name                               $ expected the struct name before the start of the body '{'");
    SWAG_ERROR(Err0707, "missing test error                                $ expected at least one error, but none was raised");
    SWAG_ERROR(Err0580, "missing test warning                              $ expected at least one warning, but none was raised");
    SWAG_ERROR(Err1172, "missing variable type                             $ expected ':' followed by the type or an assignment with '=', found '%s' instead");
    SWAG_ERROR(Err0097, "misused UFCS                                      $ the %s '%s' is not used as the first argument when calling '%s'");
    SWAG_ERROR(Err0310, "misused UFCS                                      $ the hidden 'with' variable '%s' is not used as the first argument when calling '%s'");
    SWAG_ERROR(Err0446, "non-transferable 'cvarargs' type                  $ a parameter with the type 'cvarargs' cannot be passed to another function");
    SWAG_ERROR(Err0013, "not a value                                       $ %s '%s' is not a valid value in this context");
    SWAG_ERROR(Err0003, "not a value                                       $ this is an implicit reference to a static struct member of '%s'");
    SWAG_ERROR(Err2008, "number out of range                               $ this literal number exceeds 64 bits and is out of allowable range");
    SWAG_ERROR(Err1209, "out of range '#up' count                          $ the '#up' count should be in the range [1, 255], found '%u'");
    SWAG_ERROR(Err1043, "out of range '@alias' number                      $ an '@alias' number should be in the range [0, 31], found '%u'");
    SWAG_ERROR(Err1032, "out of range '@mixin' number                      $ a '@mixin' number should be in the range [0, 31], found '%u'");
    SWAG_ERROR(Err1132, "out of range array dimensions                     $ array dimensions can't exceed '254'");
    SWAG_ERROR(Err0708, "out of range enum value                           $ the enum value '%s' exceeds the valid range of type '%s'");
    SWAG_ERROR(Err0113, "overload ambiguity                                $ %d overloads found for '%s', but none matched the provided arguments");
    SWAG_ERROR(Err0201, "recursive evaluation                              $ the struct '%s' references itself, which is causing a recursion");
    SWAG_ERROR(Err1018, "redundant access modifier                         $ the '%s' access modifier is unnecessary because of '#global export' $ consider removing the 'public' modifier, as '#global export' ensures all declarations in this file are publicly accessible");
    SWAG_ERROR(Err1122, "reserved identifier                               $ the identifier '%s' starts with '__', this is language-reserved $ identifiers starting with '__' are typically reserved for compiler-internal or system use");
    SWAG_ERROR(Err1118, "reserved namespace name                           $ the namespace '%s' is reserved by the compiler");
    SWAG_ERROR(Err0419, "semantic cycle                                    $ a cycle has been detected during the resolution of %s '%s'");
    SWAG_ERROR(Err2018, "string literal is missing its closing '\"'        $ expected a closing quotation mark '\"' before the end of the line $ if you want a multi-line string, use the syntax \"\"\"string\"\"\"");
    SWAG_ERROR(Err0305, "symbol already defined                            $ the %s '%s' has already been defined %s");
    SWAG_ERROR(Err0723, "type mismatch                                     $ type mismatch for field '%s'; expected '%s', found '%s'");
    SWAG_ERROR(Err1097, "unexpected '#elif'                                $ '#elif' found without a preceding '#if' directive");
    SWAG_ERROR(Err1098, "unexpected '#else'                                $ '#else' found without a preceding '#if' or '#elif' directive");
    SWAG_ERROR(Err1137, "unexpected '#validif/#validifx'                   $ the '#validif/#validifx' directive is not allowed on special function '%s' $ '#validif' and '#validifx' are not valid for 'opDrop', 'opPostCopy', and 'opPostMove'");
    SWAG_ERROR(Err1215, "unexpected '#validifx' in struct                  $ '#validifx' is not allowed for a struct, this is only valid for functions $ consider using '#validif' instead");
    SWAG_ERROR(Err1099, "unexpected ')'                                    $ symbol ')' found without a preceding '('");
    SWAG_ERROR(Err1139, "unexpected '['                                    $ nested square brackets '[..][..]' are not allowed for multi-dimensional array access $ to access elements in a multi-dimensional array, use the format [x, y] and not [x][y]");
    SWAG_ERROR(Err1100, "unexpected ']'                                    $ symbol ']' found without a preceding '['");
    SWAG_ERROR(Err1192, "unexpected 'const'                                $ unexpected 'const' before a lambda parameter name");
    SWAG_ERROR(Err1101, "unexpected 'elif'                                 $ 'elif' found without a preceding 'if'");
    SWAG_ERROR(Err1102, "unexpected 'else'                                 $ 'else' found without a preceding 'if' or 'elif'");
    SWAG_ERROR(Err1143, "unexpected 'for'                                  $ the 'for' keyword is not valid in an enum implementation");
    SWAG_ERROR(Err1095, "unexpected 'mtd'                                  $ expected 'func' or 'closure' instead of 'mtd' to declare a lambda type");
    SWAG_ERROR(Err1144, "unexpected 'retval' return type                   $ 'retval' is only valid as a local variable type");
    SWAG_ERROR(Err1088, "unexpected 'throw' qualifier                      $ an attribute can't have the 'throw' qualifier as it can't raise errors");
    SWAG_ERROR(Err1030, "unexpected 'var' in struct                        $ 'var' is unnecessary in struct variable declarations $ struct variables should be declared as 'fieldName: Type' without 'var'");
    SWAG_ERROR(Err1103, "unexpected '}'                                    $ symbol '}' found without a preceding '{'");
    SWAG_ERROR(Err1208, "unexpected affectation                            $ unexpected usage of the assignement operator '=' inside an expression");
    SWAG_ERROR(Err1138, "unexpected attribute return type                  $ an attribute can't have a return type starting with '->'");
    SWAG_ERROR(Err1149, "unexpected comparison                             $ expected an affectation with '=' but found the comparison operator '==' instead");
    SWAG_ERROR(Err1160, "unexpected empty expression                       $ the expression '()' is empty and not allowed here");
    SWAG_ERROR(Err1188, "unexpected end of comment                         $ unexpected end of multi-line comment '*/' after %s $ beginning '/*' of multi-line comment is missing");
    SWAG_ERROR(Err2025, "unexpected end of file within comment             $ this multi-line comment is missing its closing '*/'");
    SWAG_ERROR(Err0742, "unexpected function body                          $ a function tagged with the '#[Swag.Foreign]' attribute can't have a body");
    SWAG_ERROR(Err1162, "unexpected generic parameters                     $ expected an non-generic name without generic parameters starting with '''");
    SWAG_ERROR(Err1046, "unexpected identifier                             $ unexpected identifier '%s' after '%s' at global scope");
    SWAG_ERROR(Err1191, "unexpected lambda parameter name                  $ unexpected name when declaring a lambda type $ consider removing the name");
    SWAG_ERROR(Err1170, "unexpected lambda parameter type                  $ unexpected type $ when declaring lambda parameters, you should not combined inferred and explicit types");
    SWAG_ERROR(Err1165, "unexpected lambda return type                     $ unexpected return type when parameters type are inferred $ when inferring lambda parameter types, the return type should also be inferred");
    SWAG_ERROR(Err1024, "unexpected line break in array type declaration   $ the type of the array should be placed on the same line as the array dimensions");
    SWAG_ERROR(Err1126, "unexpected operator modifier                      $ the operator modifier '%s' can't be applied to '%s'");
    SWAG_ERROR(Err1198, "unexpected symbol                                 $ unexpected symbol '%s' after the identifier '%s' $ did you forget 'var' or 'const' to declare a global variable or constant?");
    SWAG_ERROR(Err1042, "unexpected tuple unpacking name                   $ expected a variable name or '?' when unpacking a tuple, found '%s' instead");
    SWAG_ERROR(Err1197, "unexpected type declaration                       $ unexpected type declaration after 'self' $ 'self' is implicitly typed; consider removing the redundant type");
    SWAG_ERROR(Err1189, "unexpected type declaration                       $ unexpected type declaration after unnamed parameters");
    SWAG_ERROR(Err1219, "unexpected type suffix                            $ %s should not be followed by a type suffix");
    SWAG_ERROR(Err0244, "unknown file                                      $ the file named '%s' can't be located or accessed");
    SWAG_ERROR(Err0140, "unknown identifier                                $ the compiler instruction '%s' can't be found");
    SWAG_ERROR(Err0129, "unknown identifier                                $ the intrinsic '%s' can't be found");
    SWAG_ERROR(Err0228, "unknown identifier                                $ the function '%s' can't be found");
    SWAG_ERROR(Err0251, "unknown identifier                                $ the attribute '%s' can't be found");
    SWAG_ERROR(Err0122, "unknown identifier                                $ the identifier '%s' can't be found");
    SWAG_ERROR(Err0165, "unknown identifier                                $ the type '%s' can't be found");
    SWAG_ERROR(Err0093, "unknown identifier                                $ the identifier '%s' can't be found in the tuple");
    SWAG_ERROR(Err0492, "unknown identifier                                $ the identifier '%s' can't be found in the enum '%s' or in %s '%s'");
    SWAG_ERROR(Err0112, "unknown identifier                                $ the identifier '%s' can't be found in '%s'");
    SWAG_ERROR(Err0110, "unknown identifier                                $ the identifier '%s' can't be found in %s '%s'");
    SWAG_ERROR(Err0821, "unknown identifier                                $ the variable '%s' from the struct '%s' has no corresponding member");
    SWAG_ERROR(Err0133, "unresolved identifier                             $ the identifier '%s' can't be solved");
    SWAG_ERROR(Err0911, "unsuitable struct for union                       $ the struct '%s' is not suitable for union because it contains an '%s' function");
    SWAG_ERROR(Err0056, "unsupported OS                                    $ the OS '%s' is not supported by the x64 backend");
    SWAG_ERROR(Err0785, "unsupported callback                              $ the intrinsic '@mkcallback' does not allow a function with more than '%d' parameters, found '%d'");
    SWAG_ERROR(Err0786, "unsupported callback                              $ the intrinsic '@mkcallback' does not allow a function returning '%s'");
    SWAG_ERROR(Err1134, "unsupported tuple type                            $ tuple types are not supported for generic parameters");
    SWAG_ERROR(Err0800, "unsupported type                                  $ the intrinsic '@countof' does not accept an argument of type 'tuple'");
    SWAG_ERROR(Err0796, "unsupported type                                  $ the intrinsic '@dataof' does not accept an argument of type 'tuple'");
    SWAG_ERROR(Err0797, "unsupported type                                  $ the intrinsic '@dataof' does not accept an argument of type '%s'");
    SWAG_ERROR(Err0084, "invalid argument                                  $ the intrinsic '@runes' requires an argument of type 'string', got '%s' instead");
    SWAG_ERROR(Err0730, "invalid argument                                  $ the intrinsic '@mkstring' requires a pointer to 'u8' as a first argument, got '%s' instead");
    SWAG_ERROR(Err0793, "invalid argument                                  $ the intrinsic '@mkinterface' requires a pointer or a struct as first argument, got '%s' instead");
    SWAG_ERROR(Err0794, "invalid argument                                  $ the intrinsic '@mkinterface' requires a type as a second argument, got '%s' instead");
    SWAG_ERROR(Err0795, "invalid argument                                  $ the intrinsic '@mkinterface' requires an interface name as a third argument, got '%s' instead");
    SWAG_ERROR(Err0249, "invalid argument                                  $ the intrinsic '%s' requires an argument of type 'string', got '%s' instead");
    SWAG_ERROR(Err0598, "invalid attribute                                 $ '%s' is not an attribute but is %s");
    SWAG_ERROR(Err0259, "invalid escape code                               $ '%c' is not a valid escape code");
    SWAG_ERROR(Err0787, "invalid argument                                  $ the intrinsic '%s' requires a pointer as a first argument, got '%s' instead");
    SWAG_ERROR(Err0711, "invalid argument                                  $ the intrinsic '%s' requires a block pointer as a first argument, got '%s' instead");
    SWAG_ERROR(Err0139, "misplaced error catching                          $ '%s' can only be associated with function calls, but '%s' is %s");
    SWAG_ERROR(Err0535, "misplaced error catching                          $ unexpected '%s' because function '%s' cannot raise an error");
    SWAG_ERROR(Err0696, "misplaced type                                    $ '%s' is only valid when declaring a function parameter");
    SWAG_ERROR(Err0668, "misplaced 'using'                                 $ 'using' is not valid on a constant");
    SWAG_ERROR(Err0692, "misplaced 'using'                                 $ 'using' is not valid on a variable with type '%s'");
    SWAG_ERROR(Err0669, "misplaced 'using'                                 $ 'using' on a field is only valid for struct and pointer to struct, got '%s' instead");
    SWAG_ERROR(Err0822, "misplaced 'using'                                 $ 'using' on a pointer variable is only valid for struct pointers, got a pointer to '%s' instead");
    SWAG_ERROR(Err0695, "misplaced 'using'                                 $ 'using' cannot be associated with type '%s' $ expected a namespace, a struct, an enum or a variable");
    SWAG_ERROR(Err0689, "misplaced 'using'                                 $ 'using' on a variable is not allowed in '%s' scope");
    SWAG_ERROR(Err0485, "unsupported type                                  $ the array access index must be an integer, got '%s' instead");
    SWAG_ERROR(Err0148, "unsupported array type                            $ cannot declare a static array of type 'void'");
    SWAG_ERROR(Err0303, "invalid array size                                $ the size of the array can't be deduced because of a missing initialization");
    SWAG_ERROR(Err0465, "invalid address                                   $ can't take the address of %s $ this is not a variable");
    SWAG_ERROR(Err0469, "invalid address                                   $ can't take the address of a constant of type '%s' $ this type of constant does not have an associated memory storage");
    SWAG_ERROR(Err0462, "invalid address                                   $ can't take the address of a function parameter of type '%s' $ this type of parameter does not have an associated memory storage");
    SWAG_ERROR(Err0501, "invalid address                                   $ can't take the address of a variable declared with 'let'");
    SWAG_ERROR(Err0588, "misplaced attribute                               $ the attribute '%s' can't be associated with %s");
    SWAG_ERROR(Err0583, "misplaced attribute                               $ the attribute '%s' can only be applied to %s");
    SWAG_ERROR(Err0582, "invalid attribute                                 $ expected an attribute, but '%s' is %s");
    SWAG_ERROR(Err0586, "misplaced attribute                               $ unexpected usage of the attribute '%s' in this context");
    SWAG_ERROR(Err0099, "unexpected aliased names                          $ unexpected alias when calling '%s' because it's not a macro or a mixin");
    SWAG_ERROR(Err0664, "unexpected type alias                             $ expected a direct type as an 'impl' block name, got a type alias instead");
    SWAG_ERROR(Err0709, "missing enum flag value                           $ can't deduce the value of flag '%s' as the previous value isn't a power of two");
    SWAG_ERROR(Err0091, "invalid access from runtime                       $ the compile-time %s '%s' can't be accessed from runtime function '%s'");
    SWAG_ERROR(Err0107, "invalid access from runtime                       $ the compile-time function '%s' can't be accessed from runtime function '%s'");
    SWAG_ERROR(Err0060, "invalid access from runtime                       $ this compile-time constant can't be accessed from runtime");
    SWAG_ERROR(Err0144, "unknown enum value                                $ the enumeration value '%s' was not found in the enum '%s'");
    SWAG_ERROR(Err0706, "missing initialization                            $ the enumeration value '%s' has type '%s' which requires an initialization");
    SWAG_ERROR(Err0032, "invalid bitcast                                   $ bitcasting from type '%s' is not allowed $ expected an integer, a rune, a float or a pointer");
    SWAG_ERROR(Err0033, "invalid bitcast                                   $ bitcasting to a larger type is not allowed ('%s' to '%s')");
    SWAG_ERROR(Err0031, "invalid bitcast                                   $ bitcasting to type '%s' is not allowed $ expected integer, rune, or float");
    SWAG_ERROR(Err0536, "bytecode stack overflow                           $ the required size exceeds the limit given by '--stack-size:%s'");
    SWAG_ERROR(Err0187, "missing dereference index                         $ an index is missing to dereference the array '%s' of type '%s' $ consider adding the index between brackets '[index]'");
    SWAG_ERROR(Err0180, "missing dereference index                         $ an index is missing to dereference the slice '%s' of type '%s' $ consider adding the index between brackets '[index]'");
    SWAG_ERROR(Err0009, "invalid comparison                                $ slice comparison is only allowed with 'null', got '%s'");
    SWAG_ERROR(Err0010, "invalid comparison                                $ interface comparison is only allowed with 'null' or another interface, got '%s'");
    SWAG_ERROR(Err0181, "invalid comparison                                $ 'any' comparison is only allowed with 'null', got '%s'");
    SWAG_ERROR(Err0059, "compile-time evaluation required                  $ a slice of type '%s' can't be converted to a compile-time value");
    SWAG_ERROR(Err0688, "invalid slicing                                   $ the slicing upper bound exclusion with '..<' is not possible because it is zero");
    SWAG_ERROR(Err0477, "invalid slicing                                   $ the slicing bound '%I64u' is out of range (max is '%I64u')");
    SWAG_ERROR(Err0475, "invalid slicing                                   $ slicing is invalid for type '%s'");
    SWAG_ERROR(Err0474, "invalid slicing                                   $ slicing is invalid on a multi-dimensional array");
    SWAG_ERROR(Err0476, "invalid slicing                                   $ the slicing lower bound '%I64u' is greater than the upper bound '%I64u'");
    SWAG_ERROR(Err0320, "invalid slicing                                   $ can't slice '%s' because 'opSlice' was not found in type '%s'");
    SWAG_ERROR(Err0701, "invalid enum type                                 $ the enum slice type '%s' should be declared as 'const' $ consider declaring the type with 'const %s' instead");
    SWAG_ERROR(Err0833, "invalid operation                                 $ the bit inversion operation '~' is not allowed on type '%s'");
    SWAG_ERROR(Err0559, "invalid move                                      $ 'move' is not applicable on an immutable expression (type is '%s')");
    SWAG_ERROR(Err0517, "invalid reference                                 $ 'ref' requires a pointer or a reference as an expression, got '%s' instead");
    SWAG_ERROR(Err0740, "forbidden assign                                  $ can't assign to '%s' because it's immutable");
    SWAG_ERROR(Err0572, "forbidden assign                                  $ can't assign to '%s' is %s");
    SWAG_ERROR(Err0571, "forbidden assign                                  $ can't assign from'%s' is %s");
    SWAG_ERROR(Err0150, "division by zero                                  $ this expression evaluates to 0");
    SWAG_ERROR(Err0610, "empty 'switch'                                    $ the body of the 'switch' is empty $ consider adding some cases, or removing it");
    SWAG_ERROR(Err0683, "empty 'interface'                                 $ the interface '%s' should contain at least one function declaration");
    SWAG_ERROR(Err0677, "incomplete interface function                     $ the interface member '%s' should have at least 'self' as the first parameter $ consider declaring the interface function with 'mtd' instead of 'func'");
    SWAG_ERROR(Err0679, "invalid interface function                        $ the first parameter should be 'self', got '%s' instead $ consider declaring the interface function with 'mtd' instead of 'func'");
    SWAG_ERROR(Err0685, "unexpected default value                          $ default value for variadic parameters are not allowed");
    SWAG_ERROR(Err0116, "ambiguous symbol                                  $ ambiguous resolution of the symbol '%s'");
    SWAG_ERROR(Err0080, "ambiguous symbol                                  $ ambiguous resolution of the enum value '%s'");
    SWAG_ERROR(Err0182, "ambiguous symbol                                  $ ambiguous resolution of the special function '%s'");
    SWAG_ERROR(Err0671, "missing generic parameters                        $ '%s' is generic, so '%s' should declare generic parameters");
    SWAG_ERROR(Err0600, "misplaced attribute                               $ the attribute '%s' can't be used in a '#global' statement $ the attribute does not have the 'Swag.AttributeUsage.File' usage");
    SWAG_ERROR(Err0702, "invalid enum type                                 $ the type '%s' cannot be used as an enum type");
    SWAG_ERROR(Err0087, "misplaced function call                           $ a function call can't be done at global scope");
    SWAG_ERROR(Err0078, "reserved function name                            $ the function name '%s' is reserved by the compiler");
    SWAG_ERROR(Err0520, "mismatch access                                   $ %s '%s' can't be public due to %s '%s' with '%s' access");
    SWAG_ERROR(Err0098, "invalid function call                             $ call to function '%s' requires arguments between '()' and not '{}'");
    SWAG_ERROR(Err1179, "unused return value                               $ the return value of the intrinsic '%s' should be used");
    SWAG_ERROR(Err0109, "unused return value                               $ the return value of the function '%s' should be used $ if you don't need the return value, consider prefixing the call with 'discard'");
    SWAG_ERROR(Err0092, "unused return value                               $ the return value of the lambda '%s' should be used $ if you don't need the return value, consider prefixing the call with 'discard'");
    SWAG_ERROR(Err0163, "invalid return value assignment                   $ the function does not return a value");
    SWAG_ERROR(Err0766, "unexpected return value                           $ a function with the '#[Swag.CalleeReturn]' attribute must not declare a return value");
    SWAG_ERROR(Err0024, "unknown interface function                        $ the function '%s' is not part of the interface '%s'");
    SWAG_ERROR(Err0258, "unknown foreign function                          $ the foreign function '%s' was not found");
    SWAG_ERROR(Err0017, "invalid type declaration                          $ '%s' is not a type, it's %s");
    SWAG_ERROR(Err0764, "invalid return type                               $ a function can't return type '%s'");
    SWAG_ERROR(Err0094, "invalid 'discard' call                            $ a function returning nothing can't be discarded");
    SWAG_ERROR(Err0767, "missing return type                               $ the function '%s' has the '#[Swag.Discardable]' attribute and should return something");
    SWAG_ERROR(Err0617, "failed '#validif'                                 $ the '#validif' validation has failed for '%s'");
    SWAG_ERROR(Err0004, "failed '%s'                                       $ the function '%s' can't be used because of a failed '%s'");
    SWAG_ERROR(Err0160, "invalid assignement                               $ a function pointer can't be assigned to a constant");
    SWAG_ERROR(Err0652, "mismatch function signature                       $ function '%s' has an incorrect signature for interface '%s'");
    SWAG_ERROR(Err0753, "misplaced attribute                               $ the '#[Swag.Complete]' attribute can't be applied to function '%s' $ #[Swag.Complete] can only be applied to 'opAffect' and 'opAffectSuffix'");
    SWAG_ERROR(Err0755, "misplaced attribute                               $ the '#[Swag.CalleeReturn]' attribute can't be applied to function '%s' $ '#[Swag.CalledReturn]' can only be applied to a macro ('#[Swag.Macro]') or a mixin ('#[Swag.Mixin]')");
    SWAG_ERROR(Err0754, "misplaced attribute                               $ the '#[Swag.Implicit]' attribute can't be applied to function '%s' $ #[Swag.Implicit] can only be applied to 'opAffect', 'opAffectSuffix' and 'opCast'");
    SWAG_ERROR(Err0478, "unexpected generic parameters                     $ the special function '%s' can't have generic parameters");
    SWAG_ERROR(Err0752, "unexpected generic parameters                     $ the function '%s' can't have generic parameters because of the '#[Swag.NotGeneric]' attribute");
    SWAG_ERROR(Err0751, "unexpected generic function                       $ the function '%s' appears to be generic despite the '#[Swag.NotGeneric]' attribute");
    SWAG_ERROR(Err0280, "missing 'impl'                                    $ the function '%s' is part of the interface '%s' but lacks an 'impl' marker");
    SWAG_ERROR(Err0503, "mismatch access                                   $ special function '%s' can't be internal because the struct has 'public' access");
    SWAG_ERROR(Err0506, "mismatch access                                   $ special function '%s' can't be public because the struct has 'internal' access");
    SWAG_ERROR(Err0067, "misplaced special function                        $ the struct special function '%s' should de declared within the corresponding 'impl' block");
    SWAG_ERROR(Err0494, "misplaced special function                        $ the struct special function '%s' should de declared within the corresponding 'impl' block $ an 'impl for' block can only be used to implement interfaces");
    SWAG_ERROR(Err0803, "unsupported '@nameof' argument                    $ cannot evaluate the '@nameof' argument");
    SWAG_ERROR(Err0799, "unsupported '@stringof' argument                  $ cannot evaluate the '@stringof' argument");
    SWAG_ERROR(Err0780, "unused alias name                                 $ the alias name '%s' has no corresponding variable $ consider removing it");
    SWAG_ERROR(Err0012, "invalid expression                                $ expected an expression, but found a type instead");
    SWAG_ERROR(Err0307, "invalid type                                      $ the initialization expression has type 'void'");
    SWAG_ERROR(Err0569, "invalid type                                      $ the affect expression has type 'void'");
    SWAG_ERROR(Err0240, "invalid argument                                  $ '#mixin' requires an argument of type 'code', got '%s' instead");
    SWAG_ERROR(Err0607, "misplaced attribute                               $ a 'switch' without an expression can't be '#[Swag.Complete]'");
    SWAG_ERROR(Err0002, "invalid range type                                $ unexpected type '%s' in a range expression");
    SWAG_ERROR(Err0616, "unexpected 'default'                              $ a 'switch' marked with the '#[Swag.Complete]' attribute can't have a 'default' statement");
    SWAG_ERROR(Err0233, "invalid argument                                  $ '#%s' requires an argument of type 'bool', got '%s' instead");
    SWAG_ERROR(Err0052, "unexpected return value                           $ a %s can't return something");
    SWAG_ERROR(Err0176, "invalid interface conversion                      $ '%s' (or a 'using' field) doesn't implement '%s', so struct-to-interface cast is not allowed");
    SWAG_ERROR(Err0852, "invalid attribute usage                           $ the 'AttributeUsage.Gen' can only be associated with 'AttributeUsage.Struct' or 'AttributeUsage.Enum'");
    SWAG_ERROR(Err0645, "double variable initialization                    $ you cannot initialize a variable with both the type syntax and an assignment");
    SWAG_ERROR(Err0312, "failed generic instantiation                      $ the variable creation failed due to the generic type '%s'");
    SWAG_ERROR(Err0859, "forbidden call to 'compileString'                 $ the 'compileString' function is not accessible in this context $ this compiler stage does not allow meta-programmation");
    SWAG_ERROR(Err0289, "unexpected 'impl'                                 $ 'impl' associated with a function should only be used within an 'impl for' block");
    SWAG_ERROR(Err0445, "invalid '@cvaarg' type                            $ a variadic argument of type '%s' has been promoted to type '%s' at the call site");
    SWAG_ERROR(Err0812, "invalid '@sizeof'                                 $ can't compute the size of a generic expression");
    SWAG_ERROR(Err0814, "invalid '@alignof'                                $ can't compute the alignment of a generic expression");
    SWAG_ERROR(Err0298, "missing initialization                            $ a constant requires an explicit initialization");
    SWAG_ERROR(Err0311, "invalid constant                                  $ the constant creation failed due to the generic type '%s'");
    SWAG_ERROR(Err0820, "enum already defined                              $ the enum '%s' has already been defined");
    SWAG_ERROR(Err0700, "invalid enum type                                 $ the enum array type '%s' should be 'const'");
    SWAG_ERROR(Err0699, "invalid enum type                                 $ the enum array type '%s' should have specified dimensions");
    SWAG_ERROR(Err0636, "invalid visit                                     $ can't visit an enum content by pointer is not allowed");
    SWAG_ERROR(Err0627, "invalid visit                                     $ can't visit a variadic type by pointer");
    SWAG_ERROR(Err0628, "invalid visit                                     $ can't visit a pointer of type '%s'");
    SWAG_ERROR(Err0629, "invalid visit                                     $ can't visit type '%s'");
    SWAG_ERROR(Err0293, "unpacking number mismatch                         $ trying to unpack '%u' variable(s) but the tuple has '%u' field(s)");
    SWAG_ERROR(Err0713, "unpacking number mismatch                         $ trying to unpack '%u' variable(s) but the tuple has only '%u' field(s)");
    SWAG_ERROR(Err0436, "missing initialization                            $ a variable declared with 'let' requires an explicit initialization");
    SWAG_ERROR(Err0299, "missing initialization                            $ an immutable variable requires an explicit initialization");
    SWAG_ERROR(Err0164, "null dereference                                  $ attempt to dereference a null pointer");
    SWAG_ERROR(Err0827, "invalid negation                                  $ cannot negate an unsigned type '%s'");
    SWAG_ERROR(Err0828, "invalid negation                                  $ cannot negate type '%s'");
    SWAG_ERROR(Err0604, "i/o error                                         $ failed to create directory '%s'");
    SWAG_ERROR(Err0471, "invalid address                                   $ can't take the address of a macro");
    SWAG_ERROR(Err0472, "invalid address                                   $ can't take the address of a mixin");
    SWAG_ERROR(Err0473, "invalid address                                   $ can't take the address of an inlined function");
    SWAG_ERROR(Err0733, "unsupported variadic parameters                   $ an inline function can't have variadic parameters");
    SWAG_ERROR(Err0045, "system error                                      $ failed to create '%s' process (::CreatePipe)");
    SWAG_ERROR(Err0051, "system error                                      $ failed to add '%s' to the 'PATH' variable");
    SWAG_ERROR(Err0204, "too many initializers                             $ expected '%d' value(s) to initialize the array, got '%d' instead");
    SWAG_ERROR(Err0197, "too many initializers                             $ expected '%d' value(s) to initialize '%s', got '%d' instead");
    SWAG_ERROR(Err0491, "too many initializers                             $ too many initializers for type '%s'");
    SWAG_ERROR(Err0490, "invalid argument                                  $ the intrinsic '@init' expects an integer as a second argument, got '%s' instead");
    SWAG_ERROR(Err0142, "invalid type                                      $ the intrinsic '@init' requires a 'pointer to memory' as a first argument if the count is greater than one");
    SWAG_ERROR(Err0500, "invalid initialization                            $ can't initialize a constant array (type is '%s') with one single value");
    SWAG_ERROR(Err0737, "invalid default parameter                         $ '%s' can't be used as a default parameter");
    SWAG_ERROR(Err0200, "ambiguous cast                                    $ there are multiple 'using' fields of type '%s' in '%s'");
    SWAG_ERROR(Err0177, "mismatch types                                    $ casting from '%s' to '%s' is not allowed");
    SWAG_ERROR(Err0907, "mismatch types                                    $ casting from '%s' to pointer type is not allowed $ only conversion from type 'u64' is accepted");
    SWAG_ERROR(Err0178, "mismatch types                                    $ casting from closure to lambda is not allowed");
    SWAG_ERROR(Err0418, "mismatch types                                    $ casting from an immutable type '%s' to a mutable one '%s' is not allowed");
    SWAG_ERROR(Err0041, "mismatch types                                    $ casting from a value pointer '%s' to a block pointer '%s' is not allowed");
    SWAG_ERROR(Err0468, "index out of bounds                               $ the given index '%I64u' exceeds the maximum value '%I64u'");
    SWAG_ERROR(Err0313, "misplaced access modifier                         $ a global variable can't be 'public'");
    SWAG_ERROR(Err0682, "misplaced attribute                               $ an interface member relocation with '#[Swag.Offset]' is not allowed");
    SWAG_ERROR(Err0534, "missing catch error                               $ expected 'try', 'assume' or 'catch' to deal with the errors of '%s'");
    SWAG_ERROR(Err0130, "unexpected generic arguments                      $ the identifier '%s' is %s and not a function or a struct");
    SWAG_ERROR(Err0681, "unresolved interface                              $ the interface can't be solved due to the generic type '%s'");
    SWAG_ERROR(Err0672, "unresolved struct                                 $ the struct '%s' can't be solved due to the generic type '%s'");
    SWAG_ERROR(Err0686, "invalid 'code' append                             $ the %s '%s' wants to interpret the next statement as a 'code' parameter but this is not possible inside a '%s' expression");
    SWAG_ERROR(Err0008, "unknown identifier                                $ the named parameter '%s' can't be found");
    SWAG_ERROR(Err0115, "ambiguous symbol                                  $ ambiguous resolution of the generic %s '%s'");
    SWAG_ERROR(Err0034, "ambiguous symbol                                  $ ambiguous conversion of struct '%s' to interface '%s'");
    SWAG_ERROR(Err0646, "invalid interface                                 $ expected an interface name after 'impl' but '%s' is %s");
    SWAG_ERROR(Err0599, "invalid argument                                  $ invalid argument '%s' for the attribute '#[Swag.ExportType]' $ the acceptable values for '#[Swag.ExportType]' are 'methods' and 'nozero'");
    SWAG_ERROR(Err0693, "invalid argument                                  $ invalid argument '%s' for the attribute '#[Swag.Match]' $ the acceptable values for '#[Swag.Match]' are 'validif' and 'self'");
    SWAG_ERROR(Err0594, "invalid argument                                  $ invalid argument '%s' for the attribute '#[Swag.Optim]' $ the acceptable values for '#[Swag.Optim]' are 'bytecode' and 'backend'");
    SWAG_ERROR(Err0593, "invalid argument                                  $ invalid safety value '%s' $ the acceptable safety values are 'boundcheck|overflow|math|switch|unreachable|any|bool|nan|sanity|null'");
    SWAG_ERROR(Err0439, "invalid literal suffix                            $ the type '%s' can't be used as a literal type suffix");
    SWAG_ERROR(Err0175, "invalid literal suffix                            $ the symbol '%s' is %s and can't be used as a literal type suffix");

    SWAG_ERROR(Err0317, "invalid literal suffix      $ the type '%s' can't be used as suffix for a float literal $ only 'f32' and 'f64' are accepted");
    SWAG_ERROR(Err0731, "invalid type                $ the type '%s' can't be used as a type for an attribute parameter");
    SWAG_ERROR(Err0881, "unknown identifier          $ the identifier '%s' is preceeded with '.' but no corresponding 'enum' or 'with' can be deduced");
    SWAG_ERROR(Err0185, "mismatch types              $ a closure can't be assigned to a lambda type");
    SWAG_ERROR(Err0119, "unsupported generic         $ unsupported generic type deduction, this is too complicated (embedded tuples)");
    SWAG_ERROR(Err0231, "forbidden copy              $ the copy of '%s' is disabled because the struct is marked with '#[Swag.NoCopy]'");
    SWAG_ERROR(Err0018, "file not found              $ the documentation page '%s' can't be found");
    SWAG_ERROR(Err0591, "duplicated attribute        $ the attribute '%s' is assigned twice, but 'Swag.AttrMulti' is not present in the declaration");
    SWAG_ERROR(Err0626, "unexpected name             $ too many 'visit' alias names (maximum is '2', but '%u' are provided)");
    SWAG_ERROR(Err0625, "unexpected visit name       $ a special visit name is only valid to visit a struct, got '%s' instead");
    SWAG_ERROR(Err0044, "too many generic arguments  $ too many generic arguments for %s '%s' ('%d' expected, '%d' provided)");
    SWAG_ERROR(Err0071, "too many generic arguments  $ too many generic arguments for '%s'");
    SWAG_ERROR(Err0026, "too many arguments          $ too many arguments ('%d' expected, '%d' provided)");
    SWAG_ERROR(Err0043, "too many parameters         $ too many parameters for '%s' ('%d' expected, '%d' provided)");
    SWAG_ERROR(Err0054, "invalid generic argument    $ unexpected generic %s for %s (a type is expected but a value is provided) $ this is a literal but a type was expected");
    SWAG_ERROR(Err0057, "invalid generic argument    $ unexpected generic %s for %s (a value is expected but a type is provided) $ this is a type but a literal was expected");
    SWAG_ERROR(Err0510, "i/o error                   $ cannot fetch file '%s' for module dependency '%s'");
    SWAG_ERROR(Err0808, "invalid generic             $ cannot instantiate the generic %s '%s' with an unsized value");
    SWAG_ERROR(Err0756, "misplaced attribute         $ the %s can't have the '#[Swag.Implicit]' attribute because it is generic");
    SWAG_ERROR(Err0715, "invalid generic             $ can't instantiate the generic function '%s' because of missing generic arguments");
    SWAG_ERROR(Err0042, "invalid generic             $ cannot instantiate the generic function '%s' because of missing contextual types replacements");
    SWAG_ERROR(Err0352, "invalid generic             $ cannot deduce the generic arguments when calling %s '%s'");
    SWAG_ERROR(Err0721, "invalid generic             $ cannot instantiate the generic struct '%s' because of missing generic arguments");
    SWAG_ERROR(Err0049, "invalid generic             $ expected the generic arguments for %s");
    SWAG_ERROR(Err0039, "invalid generic             $ cannot instantiate the generic struct '%s' because of missing contextual types replacements");
    SWAG_ERROR(Err0618, "invalid generic             $ cannot deduce the generic type '%s' from type '%s'");
    SWAG_ERROR(Err0123, "invalid generic             $ the generic value '%s' has already been deduced from arguments to be '%s', and '%s' is provided here");
    SWAG_ERROR(Err0661, "mismatch scopes             $ the 'impl' block is not defined in the same scope as '%s'");
    SWAG_ERROR(Err0124, "invalid lambda call         $ invalid lambda call because '%s' is not a variable, it is %s");
    SWAG_ERROR(Err0674, "invalid struct member name  $ the struct member name '%s' is invalid $ struct member names beginning with 'item' are reserved by the language");
    SWAG_ERROR(Err0597, "misplaced attribute         $ incorrect attribute usage");
    SWAG_ERROR(Err0132, "invalid reference           $ invalid reference to the current file scope name");
    SWAG_ERROR(Err0226, "invalid dereference         $ can't dereference by index because the special function 'opIndex' can't be found in type '%s'");
    SWAG_ERROR(Err0227, "invalid dereference         $ can't dereference '%s' by index because the special function 'opIndex' can't be found in type '%s'");

    SWAG_ERROR(Err0848, "expected initialization of '%s'; enum '%s' lacks zero value");
    SWAG_ERROR(Err0016, "insufficient arguments for %s call");
    SWAG_ERROR(Err0157, "insufficient arguments for %s");
    SWAG_ERROR(Err0062, "insufficient arguments for '%s' (min: '%d', provided: '%d')");
    SWAG_ERROR(Err0061, "insufficient arguments for function '%s' (expected '%d', found '%d')");
    SWAG_ERROR(Err0035, "insufficient generic arguments for %s");
    SWAG_ERROR(Err0544, "insufficient generic parameters for function '%s'");
    SWAG_ERROR(Err0203, "insufficient initializers (%d expected, %d given)");
    SWAG_ERROR(Err0443, "invalid '@cvaarg' type '%s'");
    SWAG_ERROR(Err0250, "invalid 'const' for type '%s'");
    SWAG_ERROR(Err0515, "invalid 'location' mode; choose 'swag' or 'disk' instead of '%s'");
    SWAG_ERROR(Err0621, "invalid 'moveref' for type '%s' (expected pointer/reference)");
    SWAG_ERROR(Err0563, "invalid 'moveref' on computed value");
    SWAG_ERROR(Err0531, "invalid 'moveref' on immutable expression");
    SWAG_ERROR(Err0199, "invalid 'opDrop' for struct with 'Swag.ConstExpr' marked '%s'");
    SWAG_ERROR(Err0530, "invalid 'ref' after 'moveref'");
    SWAG_ERROR(Err0694, "invalid 'using' type");
    SWAG_ERROR(Err0070, "invalid generic %s for %s ('%s' expected, '%s' given)");
    SWAG_ERROR(Err0135, "invalid generic parameters for %s '%s'");
    SWAG_ERROR(Err0576, "invalid scope move of '%d'");
    SWAG_ERROR(Err0077, "invalid second parameter for '%s' (not type '%s')");
    SWAG_ERROR(Err0697, "invalid type '%s' for 'Swag.EnumFlags' (unsigned integer required)");
    SWAG_ERROR(Err0698, "invalid type '%s' for 'Swag.EnumIndex' (integer required)");
    SWAG_ERROR(Err0170, "invalid type '%s' for operator '<<' (integer required)");
    SWAG_ERROR(Err0172, "invalid type '%s' for operator '>>' (integer required)");
    SWAG_ERROR(Err0815, "invalid usage of %s as generic argument ('%s')");
    SWAG_ERROR(Err0639, "label '%s' previously defined");
    SWAG_ERROR(Err0690, "lambda default parameters inconsistency");
    SWAG_ERROR(Err0564, "left expression immutable; assignment forbidden");
    SWAG_ERROR(Err0565, "left expression isn't a value; assignment forbidden");
    SWAG_ERROR(Err0558, "llvm backend failed to create target '%s'");
    SWAG_ERROR(Err0873, "local variable with 'let' requires initialization");
    SWAG_ERROR(Err0076, "max call level reached; limit '--max-recurse:%d'");
    SWAG_ERROR(Err0106, "mismatched 'self' parameter ('%s' expected, '%s' given)");
    SWAG_ERROR(Err0568, "mismatched types in '%s' assignment ('%s' vs '%s')");
    SWAG_ERROR(Err0095, "mismatched UFCS argument ('%s' expected, '%s' given)");
    SWAG_ERROR(Err0304, "missing #include file '%s'");
    SWAG_ERROR(Err0186, "missing special function '%s' in '%s' for operator '%s'");
    SWAG_ERROR(Err0079, "missing special function '%s' in '%s'");
    SWAG_ERROR(Err0592, "module '%s' load error during foreign function '%s' resolution: %s");
    SWAG_ERROR(Err0556, "module '%s' not found in workspace");
    SWAG_ERROR(Err0557, "module dependency '%s' missing in workspace");
    SWAG_ERROR(Err0513, "module dependency '%s' unresolved (empty 'location')");
    SWAG_ERROR(Err0511, "module folder dependency '%s' missing");
    SWAG_ERROR(Err0006, "name %s due to prior named arguments");
    SWAG_ERROR(Err0030, "name alias not allowed on %s");
    SWAG_ERROR(Err0393, "namespace name can't match module ('%s')");
    SWAG_ERROR(Err0225, "no 'opIndexAffect' found for indexing type '%s' to '%s'");
    SWAG_ERROR(Err0111, "no pointer arithmetic on 'void' type");
    SWAG_ERROR(Err0579, "no pointer arithmetic with operand type '%s'");
    SWAG_ERROR(Err0741, "non-contiguous '@alias' in function '%s' (missing '@alias%u')");
    SWAG_ERROR(Err0809, "operation '%s' doesn't support left type '%s'");
    SWAG_ERROR(Err0778, "operation '%s' doesn't support right type '%s'");
    SWAG_ERROR(Err0001, "operation '%s' incompatible with type '%s'");
    SWAG_ERROR(Err0005, "operation '%s' invalid for type '%s'");
    SWAG_ERROR(Err0570, "operation '%s' invalid for type '%s'");
    SWAG_ERROR(Err0037, "operation '%s' invalid; left expression is unflagged enum type ('%s')");
    SWAG_ERROR(Err0038, "operation '%s' invalid; right expression is unflagged enum type ('%s')");
    SWAG_ERROR(Err0168, "operation '%s' not supported on tuple");
    SWAG_ERROR(Err0573, "operations on tuple types unsupported");
    SWAG_ERROR(Err0143, "operator '%s' rejects operand type '%s'");
    SWAG_ERROR(Err0183, "operator '%s' rejects right expression type '%s'");
    SWAG_ERROR(Err0068, "expected parameters for special function '%s'");
    SWAG_ERROR(Err0040, "partial type alias ('%s') for generic struct not supported");
    SWAG_ERROR(Err0192, "pointer arithmetic disallowed");
    SWAG_ERROR(Err0193, "pointer slicing not allowed (no pointer arithmetic)");
    SWAG_ERROR(Err0046, "process creation '%s' failed");
    SWAG_ERROR(Err0684, "public embedded interface ('%s') disallowed");
    SWAG_ERROR(Err0675, "public embedded struct ('%s') disallowed");
    SWAG_ERROR(Err0529, "range argument lower bound '%I64u' greater than upper bound '%I64u'");
    SWAG_ERROR(Err0337, "range in switch expression not allowed");
    SWAG_ERROR(Err0528, "range lower bound '%lld' exceeds upper bound '%lld'");
    SWAG_ERROR(Err0775, "recursion detected; can't expand '%s'");
    SWAG_ERROR(Err0117, "redundant 'using' with type '%s'");
    SWAG_ERROR(Err0300, "references must be initialized");
    SWAG_ERROR(Err0549, "resolution failed for %s '%s'");
    SWAG_ERROR(Err0732, "return type 'void' unnecessary");
    SWAG_ERROR(Err0770, "return type deduced as '%s'; provided '%s'");
    SWAG_ERROR(Err0773, "return type deduced as none; provided '%s'");
    SWAG_ERROR(Err0063, "expected return type for special function '%s'");
    SWAG_ERROR(Err0064, "expected return type for special function '%s', found '%s'");
    SWAG_ERROR(Err0774, "return type mismatch (expected void, found '%s') for %s");
    SWAG_ERROR(Err0114, "return value address (type '%s') not accessible");
    SWAG_ERROR(Err0779, "return value needed; return type inferred as '%s'");
    SWAG_ERROR(Err0047, "right expression address not accessible");
    SWAG_ERROR(Err0173, "shift operand should be 'u32', not '%s'");
    SWAG_ERROR(Err0450, "expected single generic parameter for function '%s'; '%d' provided");
    SWAG_ERROR(Err0882, "size exceeded: '%u' bytes vs max '%u'");
    SWAG_ERROR(Err0153, "source file '%s' read error");
    SWAG_ERROR(Err0074, "special function '%s' expects 'bool', found '%s'");
    SWAG_ERROR(Err0072, "special function '%s' expects 'string', found '%s'");
    SWAG_ERROR(Err0069, "special function '%s' expects type '%s', found '%s'");
    SWAG_ERROR(Err0065, "special function '%s' return type mismatch (expected '%s', found '%s')");
    SWAG_ERROR(Err0096, "standalone expression found");
    SWAG_ERROR(Err0765, "struct '%s' has 'Swag.NoCopy'; 'opPostCopy' redundant");
    SWAG_ERROR(Err0648, "expected struct, found '%s' as %s");
    SWAG_ERROR(Err0290, "expected struct; symbol '%s' is %s");
    SWAG_ERROR(Err0667, "struct incompatible with 'Swag.Opaque'; file globally exported");
    SWAG_ERROR(Err0673, "struct member '%s' missing for 'Swag.Offset' attribute relocation");
    SWAG_ERROR(Err0029, "struct member aliasing not allowed");
    SWAG_ERROR(Err0295, "duplicate initialization of struct");
    SWAG_ERROR(Err0662, "expected struct or enum, found '%s' as %s");
    SWAG_ERROR(Err0666, "struct requires public access for 'Swag.Opaque'");
    SWAG_ERROR(Err0532, "suffix literals like '%s' are for struct conversions only");
    SWAG_ERROR(Err0346, "symbol '%s' defined in parent scope");
    SWAG_ERROR(Err0578, "too many variadic parameters ('%d' given, max: '%d')");
    SWAG_ERROR(Err0893, "top-level declaration conflict for generic symbol '%s'");
    SWAG_ERROR(Err0574, "tuple assignment incompatible with right expression");
    SWAG_ERROR(Err0007, "tuple comparison operations unsupported");
    SWAG_ERROR(Err0195, "tuple has too many initializers ('%d' expected, '%d' given)");
    SWAG_ERROR(Err0205, "tuple initialization requires '%d' argument(s) but got '%d'");
    SWAG_ERROR(Err0028, "tuple type mismatch");
    SWAG_ERROR(Err0624, "tuple type visitation not allowed");
    SWAG_ERROR(Err0292, "tuple unpacking failed; no fields found");
    SWAG_ERROR(Err0482, "tuples can't be dereferenced as pointers or arrays");
    SWAG_ERROR(Err0252, "type '%s' and '%s' from command line for '%s' mismatch");
    SWAG_ERROR(Err0058, "type '%s' can't be converted to constant expression");
    SWAG_ERROR(Err0889, "type '%s' can't be initialized with '%s': missing 'opAffectSuffix' in '%s'");
    SWAG_ERROR(Err0807, "type '%s' expression unspreadable");
    SWAG_ERROR(Err0887, "type '%s' not capturable for '%s'");
    SWAG_ERROR(Err0161, "type '%s' not convertible to constant array; 'opCount' is '0'");
    SWAG_ERROR(Err0162, "type '%s' not convertible; 'opSlice' returns empty slice");
    SWAG_ERROR(Err0291, "type '%s' unpacking failed; expected struct or tuple");
    SWAG_ERROR(Err0118, "type constraint failed on '%s'");
    SWAG_ERROR(Err0678, "type constraint should yield 'bool' ('%s' given)");
    SWAG_ERROR(Err0810, "type is unevaluable in this context; it's generic");
    SWAG_ERROR(Err0048, "type mismatch ('*Swag.CVaList' expected, '%s' given)");
    SWAG_ERROR(Err0908, "type mismatch: unable to initialize type '%s' from type '%s'");
    SWAG_ERROR(Err0196, "type mismatch; can't %s '%s' %s '%s'");
    SWAG_ERROR(Err0053, "type mismatch; expected '%s', found '%s'");
    SWAG_ERROR(Err0537, "typeinfo '%s' conversion to runtime typeinfo not possible");
    SWAG_ERROR(Err0781, "unable to expand '%s' in global scope: sub declarations not supported");
    SWAG_ERROR(Err0502, "unable to open file '%s'");
    SWAG_ERROR(Err0657, "unimplemented interface functions for '%s' in '%s'");
    SWAG_ERROR(Err0631, "unknown label '%s'");
    SWAG_ERROR(Err0499, "unknown module dependency '%s'");
    SWAG_ERROR(Err0470, nullptr);
    SWAG_ERROR(Err0659, nullptr);
    SWAG_ERROR(Err0660, nullptr);
    SWAG_ERROR(Err0141, nullptr);
    SWAG_ERROR(Err0169, nullptr);
    SWAG_ERROR(Err0776, nullptr);
    SWAG_ERROR(Err0676, nullptr);
    SWAG_ERROR(Err0680, nullptr);
    SWAG_ERROR(Err0367, nullptr);
    SWAG_ERROR(Err0282, nullptr);
    SWAG_ERROR(Err0236, nullptr);
    SWAG_ERROR(Err0858, nullptr);
    SWAG_ERROR(Err0306, nullptr);
    SWAG_ERROR(Err0167, nullptr);
    SWAG_ERROR(Err0488, nullptr);
    SWAG_ERROR(Err0777, nullptr);
    SWAG_ERROR(Err0654, nullptr);
    SWAG_ERROR(Err0655, nullptr);
    SWAG_ERROR(Err0619, nullptr);
    SWAG_ERROR(Err0261, nullptr);
    SWAG_ERROR(Err0146, nullptr);
    SWAG_ERROR(Err0015, nullptr);
    SWAG_ERROR(Err0687, nullptr);
    SWAG_ERROR(Err0108, nullptr);
    SWAG_ERROR(Err0496, nullptr);
    SWAG_ERROR(Err0497, nullptr);
    SWAG_ERROR(Err0789, nullptr);
    SWAG_ERROR(Err0495, nullptr);
    SWAG_ERROR(Err0788, nullptr);
    SWAG_ERROR(Err0489, nullptr);
    SWAG_ERROR(Err0036, nullptr);
    SWAG_ERROR(Err0090, nullptr);
    SWAG_ERROR(Err0612, nullptr);
    SWAG_ERROR(Err0608, nullptr);
    SWAG_ERROR(Err0910, nullptr);
    SWAG_ERROR(Err0086, nullptr);
    SWAG_ERROR(Err0521, nullptr);
    SWAG_ERROR(Err0159, nullptr);
    SWAG_ERROR(Err0691, nullptr);
    SWAG_ERROR(Err0830, nullptr);
    SWAG_ERROR(Err0831, nullptr);
    SWAG_ERROR(Err0360, nullptr);
    SWAG_ERROR(Err0361, nullptr);
    SWAG_ERROR(Err0422, nullptr);
    SWAG_ERROR(Err0429, nullptr);
    SWAG_ERROR(Err0430, nullptr);
    SWAG_ERROR(Err0362, nullptr);
    SWAG_ERROR(Err0341, nullptr);
    SWAG_ERROR(Err0357, nullptr);
    SWAG_ERROR(Err0358, nullptr);
    SWAG_ERROR(Err0519, nullptr);
    SWAG_ERROR(Err0724, nullptr);
    SWAG_ERROR(Err0728, nullptr);
    SWAG_ERROR(Err0722, nullptr);
    SWAG_ERROR(Err0725, nullptr);
    SWAG_ERROR(Err0727, nullptr);
    SWAG_ERROR(Err0720, nullptr);
    SWAG_ERROR(Err0523, nullptr);
    SWAG_ERROR(Err0522, nullptr);
    SWAG_ERROR(Err0198, nullptr);
    SWAG_ERROR(Err0717, nullptr);
    SWAG_ERROR(Err0718, nullptr);
    SWAG_ERROR(Err0719, nullptr);
    SWAG_ERROR(Err0716, nullptr);
    SWAG_ERROR(Err0710, nullptr);
    SWAG_ERROR(Err0712, nullptr);
    SWAG_ERROR(Err0714, nullptr);
    SWAG_ERROR(Err0606, nullptr);
    SWAG_ERROR(Err0427, nullptr);
    SWAG_ERROR(Err0426, nullptr);
    SWAG_ERROR(Err0428, nullptr);
    SWAG_ERROR(Err0424, nullptr);
    SWAG_ERROR(Err0423, nullptr);
    SWAG_ERROR(Err0425, nullptr);
    SWAG_ERROR(Err0417, nullptr);
    SWAG_ERROR(Err0605, nullptr);
    SWAG_ERROR(Err0245, nullptr);
    SWAG_ERROR(Err0301, nullptr);
    SWAG_ERROR(Err0782, nullptr);
    SWAG_ERROR(Err0783, nullptr);
    SWAG_ERROR(Err1114, nullptr);
    SWAG_ERROR(Err1166, nullptr);
    SWAG_ERROR(Err1079, nullptr);
    SWAG_ERROR(Err1206, nullptr);
    SWAG_ERROR(Err1131, nullptr);
    SWAG_ERROR(Err1220, nullptr);
    SWAG_ERROR(Err1080, nullptr);
    SWAG_ERROR(Err1081, nullptr);
    SWAG_ERROR(Err1129, nullptr);
    SWAG_ERROR(Err1130, nullptr);
    SWAG_ERROR(Err1141, nullptr);
    SWAG_ERROR(Err1145, nullptr);
    SWAG_ERROR(Err1151, nullptr);
    SWAG_ERROR(Err1152, nullptr);
    SWAG_ERROR(Err1154, nullptr);
    SWAG_ERROR(Err1155, nullptr);
    SWAG_ERROR(Err1156, nullptr);
    SWAG_ERROR(Err1127, nullptr);
    SWAG_ERROR(Err0158, nullptr);
    SWAG_ERROR(Err0174, nullptr);
    SWAG_ERROR(Err0745, nullptr);
    SWAG_ERROR(Err0746, nullptr);
    SWAG_ERROR(Err0747, nullptr);
    SWAG_ERROR(Err0743, nullptr);
    SWAG_ERROR(Err0760, nullptr);
    SWAG_ERROR(Err0050, nullptr);
    SWAG_ERROR(Err0394, nullptr);
    SWAG_ERROR(Err0890, nullptr);
    SWAG_ERROR(Err0019, nullptr);
    SWAG_ERROR(Err0025, nullptr);
    SWAG_ERROR(Err0055, nullptr);
    SWAG_ERROR(Err0066, nullptr);
    SWAG_ERROR(Err0081, nullptr);
    SWAG_ERROR(Err0082, nullptr);
    SWAG_ERROR(Err0088, nullptr);
    SWAG_ERROR(Err0120, nullptr);
    SWAG_ERROR(Err0121, nullptr);
    SWAG_ERROR(Err0131, nullptr);
    SWAG_ERROR(Err0134, nullptr);
    SWAG_ERROR(Err0145, nullptr);
    SWAG_ERROR(Err0151, nullptr);
    SWAG_ERROR(Err0152, nullptr);
    SWAG_ERROR(Err0154, nullptr);
    SWAG_ERROR(Err0155, nullptr);
    SWAG_ERROR(Err0156, nullptr);
    SWAG_ERROR(Err0166, nullptr);
    SWAG_ERROR(Err0171, nullptr);
    SWAG_ERROR(Err0179, nullptr);
    SWAG_ERROR(Err0188, nullptr);
    SWAG_ERROR(Err0189, nullptr);
    SWAG_ERROR(Err0190, nullptr);
    SWAG_ERROR(Err0191, nullptr);
    SWAG_ERROR(Err0202, nullptr);
    SWAG_ERROR(Err0210, nullptr);
    SWAG_ERROR(Err0211, nullptr);
    SWAG_ERROR(Err0212, nullptr);
    SWAG_ERROR(Err0213, nullptr);
    SWAG_ERROR(Err0214, nullptr);
    SWAG_ERROR(Err0215, nullptr);
    SWAG_ERROR(Err0216, nullptr);
    SWAG_ERROR(Err0217, nullptr);
    SWAG_ERROR(Err0218, nullptr);
    SWAG_ERROR(Err0219, nullptr);
    SWAG_ERROR(Err0220, nullptr);
    SWAG_ERROR(Err0221, nullptr);
    SWAG_ERROR(Err0222, nullptr);
    SWAG_ERROR(Err0229, nullptr);
    SWAG_ERROR(Err0230, nullptr);
    SWAG_ERROR(Err0235, nullptr);
    SWAG_ERROR(Err0241, nullptr);
    SWAG_ERROR(Err0246, nullptr);
    SWAG_ERROR(Err0247, nullptr);
    SWAG_ERROR(Err0256, nullptr);
    SWAG_ERROR(Err0257, nullptr);
    SWAG_ERROR(Err0260, nullptr);
    SWAG_ERROR(Err0264, nullptr);
    SWAG_ERROR(Err0265, nullptr);
    SWAG_ERROR(Err0266, nullptr);
    SWAG_ERROR(Err0267, nullptr);
    SWAG_ERROR(Err0285, nullptr);
    SWAG_ERROR(Err0294, nullptr);
    SWAG_ERROR(Err0296, nullptr);
    SWAG_ERROR(Err0315, nullptr);
    SWAG_ERROR(Err0316, nullptr);
    SWAG_ERROR(Err0318, nullptr);
    SWAG_ERROR(Err0319, nullptr);
    SWAG_ERROR(Err0333, nullptr);
    SWAG_ERROR(Err0334, nullptr);
    SWAG_ERROR(Err0338, nullptr);
    SWAG_ERROR(Err0339, nullptr);
    SWAG_ERROR(Err0340, nullptr);
    SWAG_ERROR(Err0343, nullptr);
    SWAG_ERROR(Err0344, nullptr);
    SWAG_ERROR(Err0345, nullptr);
    SWAG_ERROR(Err0347, nullptr);
    SWAG_ERROR(Err0349, nullptr);
    SWAG_ERROR(Err0350, nullptr);
    SWAG_ERROR(Err0351, nullptr);
    SWAG_ERROR(Err0353, nullptr);
    SWAG_ERROR(Err0354, nullptr);
    SWAG_ERROR(Err0355, nullptr);
    SWAG_ERROR(Err0356, nullptr);
    SWAG_ERROR(Err0363, nullptr);
    SWAG_ERROR(Err0364, nullptr);
    SWAG_ERROR(Err0365, nullptr);
    SWAG_ERROR(Err0366, nullptr);
    SWAG_ERROR(Err0368, nullptr);
    SWAG_ERROR(Err0369, nullptr);
    SWAG_ERROR(Err0370, nullptr);
    SWAG_ERROR(Err0371, nullptr);
    SWAG_ERROR(Err0372, nullptr);
    SWAG_ERROR(Err0373, nullptr);
    SWAG_ERROR(Err0374, nullptr);
    SWAG_ERROR(Err0375, nullptr);
    SWAG_ERROR(Err0376, nullptr);
    SWAG_ERROR(Err0377, nullptr);
    SWAG_ERROR(Err0378, nullptr);
    SWAG_ERROR(Err0379, nullptr);
    SWAG_ERROR(Err0380, nullptr);
    SWAG_ERROR(Err0381, nullptr);
    SWAG_ERROR(Err0382, nullptr);
    SWAG_ERROR(Err0383, nullptr);
    SWAG_ERROR(Err0384, nullptr);
    SWAG_ERROR(Err0385, nullptr);
    SWAG_ERROR(Err0386, nullptr);
    SWAG_ERROR(Err0388, nullptr);
    SWAG_ERROR(Err0389, nullptr);
    SWAG_ERROR(Err0390, nullptr);
    SWAG_ERROR(Err0391, nullptr);
    SWAG_ERROR(Err0392, nullptr);
    SWAG_ERROR(Err0395, nullptr);
    SWAG_ERROR(Err0396, nullptr);
    SWAG_ERROR(Err0397, nullptr);
    SWAG_ERROR(Err0398, nullptr);
    SWAG_ERROR(Err0399, nullptr);
    SWAG_ERROR(Err0400, nullptr);
    SWAG_ERROR(Err0402, nullptr);
    SWAG_ERROR(Err0403, nullptr);
    SWAG_ERROR(Err0404, nullptr);
    SWAG_ERROR(Err0416, nullptr);
    SWAG_ERROR(Err0420, nullptr);
    SWAG_ERROR(Err0421, nullptr);
    SWAG_ERROR(Err0432, nullptr);
    SWAG_ERROR(Err0434, nullptr);
    SWAG_ERROR(Err0437, nullptr);
    SWAG_ERROR(Err0438, nullptr);
    SWAG_ERROR(Err0440, nullptr);
    SWAG_ERROR(Err0441, nullptr);
    SWAG_ERROR(Err0444, nullptr);
    SWAG_ERROR(Err0447, nullptr);
    SWAG_ERROR(Err0448, nullptr);
    SWAG_ERROR(Err0449, nullptr);
    SWAG_ERROR(Err0451, nullptr);
    SWAG_ERROR(Err0452, nullptr);
    SWAG_ERROR(Err0453, nullptr);
    SWAG_ERROR(Err0454, nullptr);
    SWAG_ERROR(Err0455, nullptr);
    SWAG_ERROR(Err0456, nullptr);
    SWAG_ERROR(Err0457, nullptr);
    SWAG_ERROR(Err0458, nullptr);
    SWAG_ERROR(Err0459, nullptr);
    SWAG_ERROR(Err0460, nullptr);
    SWAG_ERROR(Err0461, nullptr);
    SWAG_ERROR(Err0463, nullptr);
    SWAG_ERROR(Err0464, nullptr);
    SWAG_ERROR(Err0466, nullptr);
    SWAG_ERROR(Err0467, nullptr);
    SWAG_ERROR(Err0479, nullptr);
    SWAG_ERROR(Err0480, nullptr);
    SWAG_ERROR(Err0483, nullptr);
    SWAG_ERROR(Err0484, nullptr);
    SWAG_ERROR(Err0487, nullptr);
    SWAG_ERROR(Err0504, nullptr);
    SWAG_ERROR(Err0507, nullptr);
    SWAG_ERROR(Err0526, nullptr);
    SWAG_ERROR(Err0527, nullptr);
    SWAG_ERROR(Err0533, nullptr);
    SWAG_ERROR(Err0538, nullptr);
    SWAG_ERROR(Err0539, nullptr);
    SWAG_ERROR(Err0540, nullptr);
    SWAG_ERROR(Err0541, nullptr);
    SWAG_ERROR(Err0542, nullptr);
    SWAG_ERROR(Err0543, nullptr);
    SWAG_ERROR(Err0545, nullptr);
    SWAG_ERROR(Err0546, nullptr);
    SWAG_ERROR(Err0547, nullptr);
    SWAG_ERROR(Err0548, nullptr);
    SWAG_ERROR(Err0550, nullptr);
    SWAG_ERROR(Err0551, nullptr);
    SWAG_ERROR(Err0552, nullptr);
    SWAG_ERROR(Err0553, nullptr);
    SWAG_ERROR(Err0554, nullptr);
    SWAG_ERROR(Err0555, nullptr);
    SWAG_ERROR(Err0560, nullptr);
    SWAG_ERROR(Err0561, nullptr);
    SWAG_ERROR(Err0562, nullptr);
    SWAG_ERROR(Err0566, nullptr);
    SWAG_ERROR(Err0575, nullptr);
    SWAG_ERROR(Err0577, nullptr);
    SWAG_ERROR(Err0581, nullptr);
    SWAG_ERROR(Err0584, nullptr);
    SWAG_ERROR(Err0585, nullptr);
    SWAG_ERROR(Err0587, nullptr);
    SWAG_ERROR(Err0589, nullptr);
    SWAG_ERROR(Err0590, nullptr);
    SWAG_ERROR(Err0623, nullptr);
    SWAG_ERROR(Err0638, nullptr);
    SWAG_ERROR(Err0640, nullptr);
    SWAG_ERROR(Err0641, nullptr);
    SWAG_ERROR(Err0642, nullptr);
    SWAG_ERROR(Err0643, nullptr);
    SWAG_ERROR(Err0644, nullptr);
    SWAG_ERROR(Err0647, nullptr);
    SWAG_ERROR(Err0649, nullptr);
    SWAG_ERROR(Err0650, nullptr);
    SWAG_ERROR(Err0651, nullptr);
    SWAG_ERROR(Err0653, nullptr);
    SWAG_ERROR(Err0656, nullptr);
    SWAG_ERROR(Err0658, nullptr);
    SWAG_ERROR(Err0663, nullptr);
    SWAG_ERROR(Err0665, nullptr);
    SWAG_ERROR(Err0726, nullptr);
    SWAG_ERROR(Err0735, nullptr);
    SWAG_ERROR(Err0736, nullptr);
    SWAG_ERROR(Err0750, nullptr);
    SWAG_ERROR(Err0816, nullptr);
    SWAG_ERROR(Err0817, nullptr);
    SWAG_ERROR(Err0818, nullptr);
    SWAG_ERROR(Err0819, nullptr);
    SWAG_ERROR(Err0823, nullptr);
    SWAG_ERROR(Err0824, nullptr);
    SWAG_ERROR(Err0825, nullptr);
    SWAG_ERROR(Err0826, nullptr);
    SWAG_ERROR(Err0835, nullptr);
    SWAG_ERROR(Err0836, nullptr);
    SWAG_ERROR(Err0837, nullptr);
    SWAG_ERROR(Err0838, nullptr);
    SWAG_ERROR(Err0839, nullptr);
    SWAG_ERROR(Err0840, nullptr);
    SWAG_ERROR(Err0841, nullptr);
    SWAG_ERROR(Err0842, nullptr);
    SWAG_ERROR(Err0843, nullptr);
    SWAG_ERROR(Err0844, nullptr);
    SWAG_ERROR(Err0845, nullptr);
    SWAG_ERROR(Err0846, nullptr);
    SWAG_ERROR(Err0847, nullptr);
    SWAG_ERROR(Err0849, nullptr);
    SWAG_ERROR(Err0850, nullptr);
    SWAG_ERROR(Err0851, nullptr);
    SWAG_ERROR(Err0853, nullptr);
    SWAG_ERROR(Err0854, nullptr);
    SWAG_ERROR(Err0855, nullptr);
    SWAG_ERROR(Err0856, nullptr);
    SWAG_ERROR(Err0857, nullptr);
    SWAG_ERROR(Err0861, nullptr);
    SWAG_ERROR(Err0862, nullptr);
    SWAG_ERROR(Err0863, nullptr);
    SWAG_ERROR(Err0864, nullptr);
    SWAG_ERROR(Err0865, nullptr);
    SWAG_ERROR(Err0867, nullptr);
    SWAG_ERROR(Err0868, nullptr);
    SWAG_ERROR(Err0869, nullptr);
    SWAG_ERROR(Err0870, nullptr);
    SWAG_ERROR(Err0871, nullptr);
    SWAG_ERROR(Err0872, nullptr);
    SWAG_ERROR(Err0874, nullptr);
    SWAG_ERROR(Err0876, nullptr);
    SWAG_ERROR(Err0877, nullptr);
    SWAG_ERROR(Err0878, nullptr);
    SWAG_ERROR(Err0879, nullptr);
    SWAG_ERROR(Err0883, nullptr);
    SWAG_ERROR(Err0885, nullptr);
    SWAG_ERROR(Err0886, nullptr);
    SWAG_ERROR(Err0888, nullptr);
    SWAG_ERROR(Err0891, nullptr);
    SWAG_ERROR(Err0892, nullptr);
    SWAG_ERROR(Err0894, nullptr);
    SWAG_ERROR(Err0895, nullptr);
    SWAG_ERROR(Err0896, nullptr);
    SWAG_ERROR(Err0897, nullptr);
    SWAG_ERROR(Err0898, nullptr);
    SWAG_ERROR(Err0899, nullptr);
    SWAG_ERROR(Err0900, nullptr);
    SWAG_ERROR(Err0901, nullptr);
    SWAG_ERROR(Err0902, nullptr);
    SWAG_ERROR(Err0903, nullptr);
    SWAG_ERROR(Err0904, nullptr);
    SWAG_ERROR(Err0905, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Nte0050, "%s of type '%s'");
    SWAG_ERROR(Nte0010, "'%s' is %s does not have a subscope");
    SWAG_ERROR(Nte0001, "'%s' is %s of type '%s' and does not have a subscope");
    SWAG_ERROR(Nte0041, "'%s' is a variable and variables within expressions can't be evaluated at compile-time");
    SWAG_ERROR(Nte0067, "'%s' is needed because of the function return type");
    SWAG_ERROR(Nte0077, "'%s' might represent either a type or a field name");
    SWAG_ERROR(Nte0076, "'%s' might represent either a type or a parameter name");
    SWAG_ERROR(Nte0017, "'%s' was located within '%s' due to a 'using' field");
    SWAG_ERROR(Nte0108, "'==' is the comparison operator; did you intend to affect something with '='?");
    SWAG_ERROR(Nte0110, "'@alias' is only valid within a 'Swag.Macro' or 'Swag.Mixin' function");
    SWAG_ERROR(Nte0120, "'@mixin' is permitted exclusively inside a 'Swag.Mixin' function");
    SWAG_ERROR(Nte0145, "'closure' should be accompanied by capture parameters enclosed in '|...|'");
    SWAG_ERROR(Nte1019, "'discard' can't be accociated with an intrinsic, as an intrinsic result should always be used");
    SWAG_ERROR(Nte1111, "'moveref' and 'ref' can't be used together");
    SWAG_ERROR(Nte0139, "'with' should be followed by a single identifier");
    SWAG_ERROR(Nte1120, "a 'bool' type is expected here");
    SWAG_ERROR(Nte0005, "a 'string' is expected as the return type of an #ast block is 'string'");
    SWAG_ERROR(Nte0048, "a function of type '%s'");
    SWAG_ERROR(Nte0121, "a generic argument must be a literal or a type");
    SWAG_ERROR(Nte1114, "a return type is missing");
    SWAG_ERROR(Nte0124, "a standard function in an 'impl' block should not shadow a function from the matching interface");
    SWAG_ERROR(Nte1103, "add '#type' before '%s' or specify a type if this is a field name");
    SWAG_ERROR(Nte0138, "add a 'break' if you want to exit without any action");
    SWAG_ERROR(Nte0137, "add a 'break' to exit, or use 'fallthrough' to continue to the next 'case'");
    SWAG_ERROR(Nte0062, "this can be converted too");
    SWAG_ERROR(Nte0100, "an attribute is not a function; please consider removing it");
    SWAG_ERROR(Nte1121, "an implicit '@countof' is present here");
    SWAG_ERROR(Nte0045, "an instance of the generic function '%s'");
    SWAG_ERROR(Nte0038, "associated command line option: '%s'");
    SWAG_ERROR(Nte0025, "attribute reference: '%s'");
    SWAG_ERROR(Nte0132, "both parts of an 'orelse' should be of identical type");
    SWAG_ERROR(Nte0019, "but it is applied on this %s");
    SWAG_ERROR(Nte0060, "complication during the public export of '%s'");
    SWAG_ERROR(Nte0125, "consider 'typealias' to create an alias for %s");
    SWAG_ERROR(Nte1104, "consider adding '&' to get the address of this expression");
    SWAG_ERROR(Nte0128, "consider adding 'using' before 'self' if you intend to access members of the instance directly");
    SWAG_ERROR(Nte1130, "consider adding scope '%s' before '.'");
    SWAG_ERROR(Nte1116, "consider casting to the underlying 'any' type");
    SWAG_ERROR(Nte1025, "consider casting with 'cast(%s)'");
    SWAG_ERROR(Nte1080, "consider removing the %s or replace it with the scope '%s'");
    SWAG_ERROR(Nte1026, "consider removing this");
    SWAG_ERROR(Nte0142, "consider using 'func' instead of 'mtd'");
    SWAG_ERROR(Nte0134, "consider writing 'impl %s' instead");
    SWAG_ERROR(Nte0147, "consider writing 'impl enum %s' instead");
    SWAG_ERROR(Nte1074, "copying an array of structs is not allowed here");
    SWAG_ERROR(Nte0102, "could 'self' be missing?");
    SWAG_ERROR(Nte1100, "default parameters of a lambda or closure can't be redefined");
    SWAG_ERROR(Nte1085, "detected an enum implementation block");
    SWAG_ERROR(Nte1122, "detected thrown error");
    SWAG_ERROR(Nte1131, "did you intend to use '='?");
    SWAG_ERROR(Nte0153, "employ '{}' for an intentional empty statement");
    SWAG_ERROR(Nte0053, "entity %s '%s' awaits the generation of type '%s'");
    SWAG_ERROR(Nte0033, "error during the '#validifx' validation of the call to '%s'");
    SWAG_ERROR(Nte0070, "evaluation failed during compile-time");
    SWAG_ERROR(Nte0136, "force the evaluation using '#run'");
    SWAG_ERROR(Nte0114, "function names that start with 'op' followed by an uppercase letter are reserved for struct special functions");
    SWAG_ERROR(Nte0116, "function parameters are immutable and can't be modified");
    SWAG_ERROR(Nte0068, "generic parameter '%s' of %s can be found here");
    SWAG_ERROR(Nte0008, "here is %s '%s'");
    SWAG_ERROR(Nte0090, "here is %s '%s'");
    SWAG_ERROR(Nte0040, "here is '%s'");
    SWAG_ERROR(Nte0016, "here is another one");
    SWAG_ERROR(Nte0021, "here is another reference");
    SWAG_ERROR(Nte0000, "here is its declaration");
    SWAG_ERROR(Nte0026, "here is the %s");
    SWAG_ERROR(Nte0028, "here is the declaration");
    SWAG_ERROR(Nte0031, "here is the deprecated definition");
    SWAG_ERROR(Nte0064, "here is the field causing the recursion");
    SWAG_ERROR(Nte0023, "here is the immutable value reference");
    SWAG_ERROR(Nte0035, "here is the other '#import'");
    SWAG_ERROR(Nte0036, "here is the other definition");
    SWAG_ERROR(Nte0014, "here is the other definition");
    SWAG_ERROR(Nte0063, "here is the other return statement");
    SWAG_ERROR(Nte0037, "here is the previous definition");
    SWAG_ERROR(Nte0024, "here is the prior declaration");
    SWAG_ERROR(Nte0032, "here is the problematic attribute");
    SWAG_ERROR(Nte0015, "here is one");
    SWAG_ERROR(Nte0069, "here is the runtime argument corresponding to '%s'");
    SWAG_ERROR(Nte1066, "here is the tuple unpacking");
    SWAG_ERROR(Nte0030, "here is the tuple's definition");
    SWAG_ERROR(Nte1124, "if this is intended, consider adding 'impl' before this");
    SWAG_ERROR(Nte1005, "if this is intended, consider initializing the global variable with 'undefined' instead of zero");
    SWAG_ERROR(Nte1092, "if this is intentional, consider renaming it to '_%s' to indicate it's unused");
    SWAG_ERROR(Nte1023, "if you don't need the return value, prefix this call with 'discard'");
    SWAG_ERROR(Nte1043, "if you want to declare a generic constant, consider adding 'const' before '%s'");
    SWAG_ERROR(Nte0104, "if you want to declare a lambda type, use 'func(' or 'closure('");
    SWAG_ERROR(Nte1082, "if you want to retrieve the type of an expression, consider using '@decltype' instead")
    SWAG_ERROR(Nte0135, "if you were trying to compare values, you should use '==' instead");
    SWAG_ERROR(Nte1007, "this is the first initialization");
    SWAG_ERROR(Nte0127, "internal structs should not export their special functions");
    SWAG_ERROR(Nte1013, "it seems like you're trying to access a nested property of '%s', but '%s' itself isn't a value");
    SWAG_ERROR(Nte0057, "literal suffix reference: '%s'");
    SWAG_ERROR(Nte1050, "local variable declared with 'let' is immutable");
    SWAG_ERROR(Nte0089, "missing %s of specified type '%s'");
    SWAG_ERROR(Nte0088, "missing parameter '%s' of type '%s'");
    SWAG_ERROR(Nte1071, "missing parameter identified");
    SWAG_ERROR(Nte0012, "note: Use '-w:<path>' or '--workspace:<path>' to specify a valid workspace folder or run swag from an appropriate workspace");
    SWAG_ERROR(Nte1106, "observed an immutable struct parameter");
    SWAG_ERROR(Nte0072, "occured during compile-time evaluation");
    SWAG_ERROR(Nte0078, "occured during the '#validif' validation of struct '%s'");
    SWAG_ERROR(Nte0054, "occured during the '#validif' validation of the call to '%s'");
    SWAG_ERROR(Nte0061, "occured during the generic instantiation of '%s'");
    SWAG_ERROR(Nte0059, "occured during the inline expansion of '%s'");
    SWAG_ERROR(Nte0004, "occured in auto-generated code");
    SWAG_ERROR(Nte1102, "occured while parsing the default value of the generic type '%s'");
    SWAG_ERROR(Nte1115, "one function declares 'throw' while the other doesn't");
    SWAG_ERROR(Nte1112, "only the address of a returned reference can be taken, and this is %s");
    SWAG_ERROR(Nte0150, "only variables can be initialized that way");
    SWAG_ERROR(Nte1110, "operation not allowed because 'void' doesn't have a size");
    SWAG_ERROR(Nte1109, "operation not allowed on non-pointer types");
    SWAG_ERROR(Nte1061, "operation not allowed");
    SWAG_ERROR(Nte0075, "origin of instantiation type '%s' is here");
    SWAG_ERROR(Nte0066, "parameter '%s' of %s can be found here");
    SWAG_ERROR(Nte1113, "parameter mismatch detected");
    SWAG_ERROR(Nte0146, "pointer arithmetic is only valid for pointers declared with '^', not '*'");
    SWAG_ERROR(Nte0086, "possibly comes from enum '%s'");
    SWAG_ERROR(Nte0022, "potential issue detected in your program's compile-time component");
    SWAG_ERROR(Nte1081, "primary instance noted here");
    SWAG_ERROR(Nte0055, "trying to match the type of the other part of the conditional expression");
    SWAG_ERROR(Nte0126, "public structs should export all their special functions");
    SWAG_ERROR(Nte1055, "requires explicit initialization");
    SWAG_ERROR(Nte1012, "return (%s) should be of type '%s'");
    SWAG_ERROR(Nte1045, "second initialization observed");
    SWAG_ERROR(Nte1009, "secondary instance observed");
    SWAG_ERROR(Nte1056, "this should be followed by generic arguments");
    SWAG_ERROR(Nte1052, "should be casted to a sized integer like 's32', 's64', etc.");
    SWAG_ERROR(Nte1051, "should be casted to either 'f32' or 'f64'");
    SWAG_ERROR(Nte0081, "should conform to type '%s'");
    SWAG_ERROR(Nte1108, "should point to '%s'");
    SWAG_ERROR(Nte1094, "should this be removed?")
    SWAG_ERROR(Nte1001, "the % s '%s' has only been used as a scope to find function '%s'");
    SWAG_ERROR(Nte0046, "the %s '%s' is waiting for %s '%s' to be solved");
    SWAG_ERROR(Nte0043, "the %s '%s' wasn't found in '%s'. The alternative from '%s' was selected");
    SWAG_ERROR(Nte1060, "the 'dref' operation isn't possible here");
    SWAG_ERROR(Nte0074, "the UFCS argument is derived from 'this'");
    SWAG_ERROR(Nte0084, "the UFCS argument is derived from an implicit 'using const self' parameter");
    SWAG_ERROR(Nte0073, "the UFCS argument originates from an implicit 'using self' parameter");
    SWAG_ERROR(Nte1123, "the array has %d elements of type '%s', which doesn't match a slice of type '%s'");
    SWAG_ERROR(Nte0018, "the concealed call to '%s' returns type '%s', lacking a subscope");
    SWAG_ERROR(Nte0056, "the counterpart is an implicit 'using self' as an initial parameter");
    SWAG_ERROR(Nte1000, "the divisor expression evaluates to zero");
    SWAG_ERROR(Nte0011, "the entity %s is tagged with 'Swag.CalleeReturn', implying the return is utilized within %s");
    SWAG_ERROR(Nte0042, "the function '%s' is not marked with the '#[Swag.ConstExpr]' attribute");
    SWAG_ERROR(Nte1039, "the function call returns an immutable '%s'");
    SWAG_ERROR(Nte1093, "the function doesn't accept type '%s' as its first argument");
    SWAG_ERROR(Nte1062, "the initial value suggests that all other types should be '%s'");
    SWAG_ERROR(Nte0083, "the interface declaration returns type '%s'");
    SWAG_ERROR(Nte0082, "the interface declaration yields no return");
    SWAG_ERROR(Nte0154, "the keyword '%s' can't be used as an identifier");
    SWAG_ERROR(Nte0034, "the missing value can be found here");
    SWAG_ERROR(Nte1086, "the parent scope for 'impl' is '%s', but the parent scope for '%s' is '%s'");
    SWAG_ERROR(Nte0047, "the resulting type is '%s'");
    SWAG_ERROR(Nte0049, "the struct '%s'");
    SWAG_ERROR(Nte0044, "the symbol '%s' is already present in the interface scope '%s'");
    SWAG_ERROR(Nte0013, "the symbol '%s' was located through a 'using' statement");
    SWAG_ERROR(Nte1020, "the symbol '...' is used to declare variadic function parameters, which is not valid in this context");
    SWAG_ERROR(Nte1128, "the tuple is represented as %s");
    SWAG_ERROR(Nte0079, "the type '%s' doesn't meet the constraint '%s'");
    SWAG_ERROR(Nte0080, "the type '%s' fails to meet the given constraint");
    SWAG_ERROR(Nte0052, "the type '%s' is expected due to %s");
    SWAG_ERROR(Nte1032, "consider adding an explicit 'cast(%s)' if necessary");
    SWAG_ERROR(Nte0085, "the version format should be 'version.revision.buildnum', where each number is either >= 0 or the '?' character");
    SWAG_ERROR(Nte1083, "there's a missing '%s' of type '%s'");
    SWAG_ERROR(Nte0051, "there's an hidden call to '%s' for the type '%s'");
    SWAG_ERROR(Nte1047, "there's an hidden call to '%s'");
    SWAG_ERROR(Nte1049, "there's an implied first parameter 'self'");
    SWAG_ERROR(Nte1127, "this %s has '%s' access");
    SWAG_ERROR(Nte1070, "this %s has the '#[Swag.Compiler]' attribute, which makes it compile-time only");
    SWAG_ERROR(Nte1084, "this %s is of type '%s'");
    SWAG_ERROR(Nte0006, "this 'using' field is convertible");
    SWAG_ERROR(Nte0144, "this appears to be a potentially invalid UFCS call");
    SWAG_ERROR(Nte1030, "this argument has been named");
    SWAG_ERROR(Nte1031, "this argument lacks a name");
    SWAG_ERROR(Nte1090, "this expression evaluates to '%f'");
    SWAG_ERROR(Nte1091, "this expression evaluates to '%lld'");
    SWAG_ERROR(Nte0071, "this function call can't be evaluated at compile-time");
    SWAG_ERROR(Nte1057, "this function can't be instantiated");
    SWAG_ERROR(Nte1073, "this function does not support UFCS of type '%s'");
    SWAG_ERROR(Nte1078, "this function does not support aliased names");
    SWAG_ERROR(Nte1064, "this function has the '#[Swag.Compiler]' attribute, which makes it compile-time only");
    SWAG_ERROR(Nte1017, "the function is tagged with the '#[Swag.Inline]' attribute");
    SWAG_ERROR(Nte1015, "the function is tagged with the '#[Swag.Macro]' attribute");
    SWAG_ERROR(Nte1016, "the function is tagged with the '#[Swag.Mixin]' attribute");
    SWAG_ERROR(Nte1018, "this is a constant");
    SWAG_ERROR(Nte1079, "this is a lambda expression");
    SWAG_ERROR(Nte1029, "this is a parameter");
    SWAG_ERROR(Nte1024, "this is a pointer type declaration due to '*'");
    SWAG_ERROR(Nte1010, "this is a tuple type");
    SWAG_ERROR(Nte0143, "this is ambiguous; consider removing one 'using'");
    SWAG_ERROR(Nte1099, "this is an unnamed '?' parameter");
    SWAG_ERROR(Nte0002, "this is the expected signature");
    SWAG_ERROR(Nte1059, "this is the first usage");
    SWAG_ERROR(Nte0106, "this is unexpected in global scope");
    SWAG_ERROR(Nte1038, "this isn't a constant");
    SWAG_ERROR(Nte1076, "this needs to be in lowercase");
    SWAG_ERROR(Nte1088, "this previous parameter has a default value");
    SWAG_ERROR(Nte1053, "this should be 'const' but isn't");
    SWAG_ERROR(Nte1075, "this should be a namespace, function, or variable instead of a type");
    SWAG_ERROR(Nte1004, "this should be designated as 'const %s'");
    SWAG_ERROR(Nte1077, "this should be lower than this");
    SWAG_ERROR(Nte1125, "this slice appears to be null or empty");
    SWAG_ERROR(Nte1068, "this tuple has '%d' field(s)");
    SWAG_ERROR(Nte1069, "this tuple seems to be empty");
    SWAG_ERROR(Nte1011, "this type is '%s'");
    SWAG_ERROR(Nte1022, "this type is immutable");
    SWAG_ERROR(Nte1067, "this unpacks into '%d' variable(s)");
    SWAG_ERROR(Nte1002, "this value can only be converted to type '%s' with a dynamic call to 'opAffect'");
    SWAG_ERROR(Nte1040, "this value is a 'typeinfo'");
    SWAG_ERROR(Nte0003, "this variable might leave the current frame");
    SWAG_ERROR(Nte0152, "to begin a new block, consider moving '{' to a new line");
    SWAG_ERROR(Nte0020, "to close this you need '%s'");
    SWAG_ERROR(Nte0105, "to dereference variable '%s' as in C, employ 'dref %s'");
    SWAG_ERROR(Nte0151, "to initiate a struct initialization of '%s', remove spaces between '%s' and '{'");
    SWAG_ERROR(Nte0065, "unable to resolve %s '%s'");
    SWAG_ERROR(Nte0058, "unable to resolve type '%s'");
    SWAG_ERROR(Nte1097, "unnamed parameters ('?') should not have an explicitly specified type");
    SWAG_ERROR(Nte1101, "use '#type' before '%s' if it's a type, or specify a type with ':' if this is a parameter name");
    SWAG_ERROR(Nte0140, "consider using '++' to append strings at compile-time");
    SWAG_ERROR(Nte0133, "consider using '?' to unpack and ignore a variable");
    SWAG_ERROR(Nte0129, "consider using 'mtd' instead of 'func' to implicitly declare 'using self' as the first parameter");
    SWAG_ERROR(Nte0103, "you can assign a lambda to a closure type, but not vice versa");
    SWAG_ERROR(Nte0087, "you can execute swag with '--callstack' to obtain more contextual details");
    SWAG_ERROR(Nte0009, "you can execute swag with '--dbg-catch' to initiate the bytecode debugger when an exception is raised");
    SWAG_ERROR(Nte1046, "you can prefix with '#run' to force a compile-time call");
    SWAG_ERROR(Nte1095, "you can't reference this runtime %s from the %s");
    SWAG_ERROR(Nte0149, "you might want to get the address of '%s' using '&'");
    SWAG_ERROR(Nte1126, "this string appears to be null or empty");
    SWAG_ERROR(Nte1006, "the number of values to initialize ('%d') is greater than one");
    SWAG_ERROR(Nte1037, "the slicing lower bound type is invalid, expected an integer, got '%s' instead");
    SWAG_ERROR(Nte0109, nullptr);
    SWAG_ERROR(Nte1028, nullptr);
    SWAG_ERROR(Nte0111, nullptr);
    SWAG_ERROR(Nte1027, nullptr);
    SWAG_ERROR(Nte0148, nullptr);
    SWAG_ERROR(Nte0112, nullptr);
    SWAG_ERROR(Nte0113, nullptr);
    SWAG_ERROR(Nte1036, nullptr);
    SWAG_ERROR(Nte1119, nullptr);
    SWAG_ERROR(Nte1021, nullptr);
    SWAG_ERROR(Nte0115, nullptr);
    SWAG_ERROR(Nte0007, nullptr);
    SWAG_ERROR(Nte0039, nullptr);
    SWAG_ERROR(Nte1034, nullptr);
    SWAG_ERROR(Nte1063, nullptr);
    SWAG_ERROR(Nte0131, nullptr);
    SWAG_ERROR(Nte1087, nullptr);
    SWAG_ERROR(Nte1033, nullptr);
    SWAG_ERROR(Nte1105, nullptr);
    SWAG_ERROR(Nte1065, nullptr);
    SWAG_ERROR(Nte1035, nullptr);
    SWAG_ERROR(Nte1096, nullptr);
    SWAG_ERROR(Nte0141, nullptr);
    SWAG_ERROR(Nte0122, nullptr);
    SWAG_ERROR(Nte1054, nullptr);
    SWAG_ERROR(Nte1072, nullptr);
    SWAG_ERROR(Nte1058, nullptr);
    SWAG_ERROR(Nte1089, nullptr);
    SWAG_ERROR(Nte0130, nullptr);
    SWAG_ERROR(Nte1003, nullptr);
    SWAG_ERROR(Nte1044, nullptr);
    SWAG_ERROR(Nte1129, nullptr);
    SWAG_ERROR(Nte1014, nullptr);
    SWAG_ERROR(Nte1098, nullptr);
    SWAG_ERROR(Nte1008, nullptr);
    SWAG_ERROR(Nte1118, nullptr);
    SWAG_ERROR(Nte1107, nullptr);
    SWAG_ERROR(Nte1042, nullptr);
    SWAG_ERROR(Nte1117, nullptr);
    SWAG_ERROR(Nte1048, nullptr);
    SWAG_ERROR(Nte1041, nullptr);
    SWAG_ERROR(Nte1132, nullptr);
    SWAG_ERROR(Nte1133, nullptr);
    SWAG_ERROR(Nte1134, nullptr);
    SWAG_ERROR(Nte1135, nullptr);
    SWAG_ERROR(Nte0029, nullptr);
    SWAG_ERROR(Nte0027, nullptr);
    SWAG_ERROR(Nte0118, nullptr);
    SWAG_ERROR(Nte0119, nullptr);
    SWAG_ERROR(Nte0101, nullptr);
    SWAG_ERROR(Nte0117, nullptr);
    SWAG_ERROR(Nte0107, nullptr);
    SWAG_ERROR(Nte0123, nullptr);
    SWAG_ERROR(Nte0091, nullptr);
    SWAG_ERROR(Nte0092, nullptr);
    SWAG_ERROR(Nte0093, nullptr);
    SWAG_ERROR(Nte0094, nullptr);
    SWAG_ERROR(Nte0095, nullptr);
    SWAG_ERROR(Nte0096, nullptr);
    SWAG_ERROR(Nte0097, nullptr);
    SWAG_ERROR(Nte0098, nullptr);
    SWAG_ERROR(Nte0099, nullptr);
}

Utf8 Err(ErrorID idx)
{
    return Fmt("[%s] %s", g_EI[idx], g_E[idx].c_str());
}

Utf8 ErrNte(ErrorID idx, bool forNote)
{
    if (forNote)
        return Nte(idx);
    return Err(idx);
}

Utf8 Nte(ErrorID idx)
{
    return g_E[idx];
}
