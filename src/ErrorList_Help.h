SWAG_ERROR(Hlp0000, "an attribute declaration, unlike function, should not have a return value starting with `->`")
SWAG_ERROR(Hlp0001, "an attribute declaration, unlike function, cannot be marked with `throw`")
SWAG_ERROR(Hlp0002, "if this is an array literal and not a type declaration, use `@[` instead of `[`")
SWAG_ERROR(Hlp0003, "if this is a tuple literal and not a type declaration, use `@{` instead of `{`")
SWAG_ERROR(Hlp0004, "if you want to declare a lambda, you should use `func(`")
SWAG_ERROR(Hlp0005, "if you want to dereference variable `%s` like in C, use `dref %s`")
SWAG_ERROR(Hlp0006, "to access an array with multiple dimensions, the syntax is [x, y], not [x][y]")
SWAG_ERROR(Hlp0007, "methods (`mtd` and `mtdc`) are reserved for struct`and interface")
SWAG_ERROR(Hlp0008, "a function name starting with `@` is reserved for intrinsics")
SWAG_ERROR(Hlp0009, "a struct member name starting with `item` is reserved by the language")
SWAG_ERROR(Hlp0010, "`@alias` should only be used inside a `Swag.Macro` or a `Swag.Mixin` function")
SWAG_ERROR(Hlp0011, "`Swag.Safety` valid values are `boundcheck`, `overflow`, `math` and `castany`")
SWAG_ERROR(Hlp0012, "`Swag.Optim` valid values are `bytecode` and `backend`")
SWAG_ERROR(Hlp0013, "`Swag.ExportType` valid values are `methods` and `nozero`")
SWAG_ERROR(Hlp0014, "a function name starting with `op` and followed by a letter in upper case is reserved for struct special functions")
SWAG_ERROR(Hlp0015, "a struct special function should be defined in a `impl` scope")
SWAG_ERROR(Hlp0016, "all function arguments are immutable and cannot be changed")
SWAG_ERROR(Hlp0017, "a closure can only be defined in a function")
SWAG_ERROR(Hlp0018, "a lambda with its parameters deduced must deduce its return type too")
SWAG_ERROR(Hlp0019, "you cannot mix deduced and specified types in lambda parameters")
SWAG_ERROR(Hlp0020, "`@mixin` should only be used inside a `Swag.Mixin` function")




