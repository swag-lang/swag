#include "pch.h"
#include "Report/ErrorIds.h"

#undef SWAG_ERROR
#define SWAG_ERROR(__enum) #__enum
const char* g_ErrList[] = {
#include "ErrorList.h"

};

Utf8 g_E[MaxErrors];
#undef SWAG_ERROR
#define SWAG_ERROR(__n, __msg)                 \
    do                                         \
    {                                          \
        SWAG_ASSERT(g_E[(int) (__n)].empty()); \
        g_E[(int) (__n)] = __msg;              \
    } while (0)

void initErrors()
{
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Fat0001, "[cmdline] [[%s]] needs [[true]] or [[false]] as argument ([[%s]] provided)");
    SWAG_ERROR(Fat0002, "[cmdline] [[%s]] needs a string argument");
    SWAG_ERROR(Fat0003, "[cmdline] [[%s]] needs an integer argument ([[%s]] provided)");
    SWAG_ERROR(Fat0004, "[cmdline] [[%s]] needs an integer argument");
    SWAG_ERROR(Fat0005, "[cmdline] [[%s]] requires [[%s]]");
    SWAG_ERROR(Fat0006, "[cmdline] [[--stack-size]] out of range (%s provided, range is [%s, %s])");
    SWAG_ERROR(Fat0007, "[cmdline] unknown argument [[%s]]");
    SWAG_ERROR(Fat0008, "[cmdline] unsupported [[--arch]] [[%s]] for SCBE backend");
    SWAG_ERROR(Fat0009, "[cmdline] unsupported [[--os]] [[%s]] for SCBE backend");
    SWAG_ERROR(Fat0010, "[fatal] cache directory [[%s]] not found");
    SWAG_ERROR(Fat0011, "[fatal] can't find the dependency module [[%s]] in that workspace");
    SWAG_ERROR(Fat0012, "[fatal] duplicated module name; more than one module with the name [[%s]] is present in the workspace (path is [[%s]])");
    SWAG_ERROR(Fat0013, "[fatal] expected workspace folder [[--workspace]]");
    SWAG_ERROR(Fat0014, "[fatal] failed due to compiler bootstrap issues");
    SWAG_ERROR(Fat0015, "[fatal] failed due to compiler runtime issues");
    SWAG_ERROR(Fat0016, "[fatal] failed to create cache directory [[%s]]");
    SWAG_ERROR(Fat0017, "[fatal] failed to create directory [[%s]]");
    SWAG_ERROR(Fat0018, "[fatal] failed to create file [[%s]]");
    SWAG_ERROR(Fat0019, "[fatal] failed to create public directory [[%s]]");
    SWAG_ERROR(Fat0020, "[fatal] failed to create script file [[%s]]");
    SWAG_ERROR(Fat0021, "[fatal] failed to create target directory [[%s]]");
    SWAG_ERROR(Fat0022, "[fatal] failed to delete directory [[%s]]");
    SWAG_ERROR(Fat0023, "[fatal] failed to delete file [[%s]]");
    SWAG_ERROR(Fat0024, "[fatal] invalid [[--tag:%s]] value (%s)");
    SWAG_ERROR(Fat0025, "[fatal] invalid script file extension; expected [[.swgs]], got [[%s]] instead");
    SWAG_ERROR(Fat0026, "[fatal] invalid [[Swag]] command [[%s]]");
    SWAG_ERROR(Fat0027, "[fatal] invalid workspace [[%s]]; missing [[modules/]] or [[tests/]] sub-folder");
    SWAG_ERROR(Fat0028, "[fatal] module [[%s]] already exists in [[/modules]]");
    SWAG_ERROR(Fat0029, "[fatal] can't find the module [[%s]] in that workspace");
    SWAG_ERROR(Fat0030, "[fatal] can't find the file [[%s]]");
    SWAG_ERROR(Fat0031, "[fatal] script file missing (use [[--file:<filename>.swgs]])");
    SWAG_ERROR(Fat0032, "[fatal] unexpected compile tag value [[%s]] (use [[--tag:%s]])");
    SWAG_ERROR(Fat0033, "[fatal] unknown compile tag type [[%s]] (use [[--tag:%s]])");
    SWAG_ERROR(Fat0034, "[fatal] workspace folder [[%s]] already exists");
    SWAG_ERROR(Fat0035, "[fatal] can't find the workspace folder [[%s]]");
    SWAG_ERROR(Fat0036, "[fatal] unable to locate the windows sdk folder");
    SWAG_ERROR(Fat0037, "[fatal] missing file or folder to format (use [[--file]])");
    SWAG_ERROR(Fat0038, "[fatal] [[%s]] is not a valid swag file");

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Saf0001, "safety failed any $ invalid dynamic cast from [[any]] to [[%s]] $ [[#[Swag.Safety(\"any\")]]] is true");
    SWAG_ERROR(Saf0002, "safety failed any $ invalid dynamic cast of a null value to [[%s]] $ [[#[Swag.Safety(\"any\")]]] is true");
    SWAG_ERROR(Saf0003, "safety failed bool $ invalid boolean value $ [[#[Swag.Safety(\"bool\")]]] is true");
    SWAG_ERROR(Saf0004, "safety failed boundcheck $ index out of bounds $ [[#[Swag.Safety(\"boundcheck\")]]] is true");
    SWAG_ERROR(Saf0005, "safety failed boundcheck $ range error, lower bound exceeds upper bound $ [[#[Swag.Safety(\"boundcheck\")]]] is true");
    SWAG_ERROR(Saf0006, "safety failed boundcheck $ slice error, lower bound exceeds upper bound $ [[#[Swag.Safety(\"boundcheck\")]]] is true");
    SWAG_ERROR(Saf0007, "safety failed boundcheck $ slice error, upper bound out of bounds $ [[#[Swag.Safety(\"boundcheck\")]]] is true");
    SWAG_ERROR(Saf0008, "safety failed math $ [[@abs]] overflow (type is [[%s]]) $ [[#[Swag.Safety(\"math\")]]] is true");
    SWAG_ERROR(Saf0009, "safety failed math $ [[@acos]] invalid argument (type is [[%s]]) $ [[#[Swag.Safety(\"math\")]]] is true");
    SWAG_ERROR(Saf0010, "safety failed math $ [[@asin]] invalid argument (type is [[%s]]) $ [[#[Swag.Safety(\"math\")]]] is true");
    SWAG_ERROR(Saf0011, "safety failed math $ [[@log]] invalid argument (type is [[%s]]) $ [[#[Swag.Safety(\"math\")]]] is true");
    SWAG_ERROR(Saf0012, "safety failed math $ [[@log10]] invalid argument (type is [[%s]]) $ [[#[Swag.Safety(\"math\")]]] is true");
    SWAG_ERROR(Saf0013, "safety failed math $ [[@log2]] invalid argument (type is [[%s]]) $ [[#[Swag.Safety(\"math\")]]] is true");
    SWAG_ERROR(Saf0014, "safety failed math $ [[@sqrt]] invalid argument (type is [[%s]]) $ [[#[Swag.Safety(\"math\")]]] is true");
    SWAG_ERROR(Saf0015, "safety failed math $ division by zero $ [[#[Swag.Safety(\"math\")]]] is true");
    SWAG_ERROR(Saf0016, "safety failed NaN $ invalid float (NaN) $ [[#[Swag.Safety(\"nan\")]]] is true");
    SWAG_ERROR(Saf0017, "safety failed null $ dereferencing a null pointer $ [[#[Swag.Safety(\"null\")]]] is true");
    SWAG_ERROR(Saf0018, "safety failed null $ trying to throw a non existing error $ [[#[Swag.Safety(\"null\")]]] is true");
    SWAG_ERROR(Saf0019, "safety failed overflow $ negative value [[%I64d]] on unsigned type [[%s]] $ [[#[Swag.Safety(\"overflow\")]]] is true");
    SWAG_ERROR(Saf0020, "safety failed overflow $ negative value [[%s]] on unsigned type [[%s]] $ [[#[Swag.Safety(\"overflow\")]]] is true");
    SWAG_ERROR(Saf0021, "safety failed overflow $ negative value [[%g]] on unsigned type [[%s]] $ [[#[Swag.Safety(\"overflow\")]]] is true");
    SWAG_ERROR(Saf0022, "safety failed overflow $ value [[%s]] ([[%I64u]] in decimal) does not fit in type [[%s]] $ [[#[Swag.Safety(\"overflow\")]]] is true");
    SWAG_ERROR(Saf0023, "safety failed overflow $ value [[%I64u]] does not fit in type [[%s]] $ [[#[Swag.Safety(\"overflow\")]]] is true");
    SWAG_ERROR(Saf0024, "safety failed overflow $ value [[%I64d]] does not fit in type [[%s]] $ [[#[Swag.Safety(\"overflow\")]]] is true");
    SWAG_ERROR(Saf0025, "safety failed overflow $ value [[%g]] does not fit in type [[%s]] $ [[#[Swag.Safety(\"overflow\")]]] is true");
    SWAG_ERROR(Saf0026, "safety failed overflow $ overflow in [[%s]] (type is [[%s]]) $ [[#[Swag.Safety(\"overflow\")]]] is true");
    SWAG_ERROR(Saf0027, "safety failed overflow $ truncation from [[%s]] to [[%s]] $ [[#[Swag.Safety(\"overflow\")]]] is true");
    SWAG_ERROR(Saf0028, "safety failed switch $ unexpected switch value $ [[#[Swag.Safety(\"switch\")]]] is true");

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(San0001, "[sanity] division by zero    $ possible division by zero");
    SWAG_ERROR(San0002, "[sanity] division by zero    $ possible division by zero of %s [[%s]]");
    SWAG_ERROR(San0003, "[sanity] frame escape        $ attempt to return a local or a temporary variable");
    SWAG_ERROR(San0004, "[sanity] frame escape        $ attempt to return of %s [[%s]]");
    SWAG_ERROR(San0005, "[sanity] null dereference    $ attempt to dereference a null pointer");
    SWAG_ERROR(San0006, "[sanity] null dereference    $ attempt to dereference null %s [[%s]]");
    SWAG_ERROR(San0007, "[sanity] stack overwrite     $ attempt to overwrite the stack memory at offset [[%lld]] (stack size is [[%lld]])");
    SWAG_ERROR(San0008, "[sanity] uninitialized usage $ attempt to use uninitialized %s [[%s]]");
    SWAG_ERROR(San0009, "[sanity] uninitialized usage $ attempt to use uninitialized stack memory");
    SWAG_ERROR(San0010, "[sanity] overflow            $ possible overflow in [[%s]] (type is [[%s]])");

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Wrn0001, "%s");
    SWAG_ERROR(Wrn0002, "deprecated usage         $ %s [[%s]] is deprecated (attribute [[Swag.Deprecated]])");
    SWAG_ERROR(Wrn0003, "unchanged local variable $ the variable [[%s]] remains unchanged after its declaration $ if you don't intend to modify it, consider declaring it with [[let]] instead of [[var]] for immutability");
    SWAG_ERROR(Wrn0004, "unchanged local variable $ the variable [[%s]] is declared to its default value, and is never modified after that $ are you sure this variable is necessary?");
    SWAG_ERROR(Wrn0005, "unreachable code         $ this code is not reachable and will never be executed");
    SWAG_ERROR(Wrn0006, "unused %s                $ %s [[%s]] is not used");

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Err0001, "%s");
    SWAG_ERROR(Err0002, "%s");
    SWAG_ERROR(Err0003, "%s");
    SWAG_ERROR(Err0004, "type mismatch [[@mkany]]                          $ can't match the pointer type [[%s]] to the second argument [[%s]] $ you should have a pointer to [[%s]] as a first argument, or [[%s]] as the second");
    SWAG_ERROR(Err0005, "[[impl]] kind mismatch                            $ can't use this implementation syntax because it is meant for [[%s]], and [[%s]] is [[%s]]");
    SWAG_ERROR(Err0006, "already defined [[#global export]]                $ can't have more than one [[#global export]] per file");
    SWAG_ERROR(Err0007, "already defined [[#import]] location              $ can't redefine an [[#import]] location");
    SWAG_ERROR(Err0008, "already defined [[#import]] location              $ can't redefine the [[#import]] location of the module [[%s]] $ already defined as [[%s]]");
    SWAG_ERROR(Err0009, "already defined [[#import]] version               $ can't redefine an [[#import]] version");
    SWAG_ERROR(Err0010, "already defined [[#import]] version               $ can't redefine the [[#import]] version of the module [[%s]] $ already defined as [[%s]]");
    SWAG_ERROR(Err0011, "already defined [[#main]]                         $ can't have more than one [[#main]] function per module");
    SWAG_ERROR(Err0012, "already defined [[default]]                       $ can't have more than one [[default]] statement per [[switch]]");
    SWAG_ERROR(Err0013, "already defined access specifier                  $ can't use the access specifier [[%s]] after [[%s]]");
    SWAG_ERROR(Err0014, "already defined named argument                    $ can't have more than one named argument [[%s]]");
    SWAG_ERROR(Err0015, "already defined enum                              $ can't redefine the enum [[%s]] because it already exists");
    SWAG_ERROR(Err0016, "already defined enum value                        $ can't redefine the enum value [[%s]] because it already exists with the same underlying value");
    SWAG_ERROR(Err0017, "already defined generic symbol                    $ can't redefine the generic symbol [[%s]] because it already exists");
    SWAG_ERROR(Err0018, "already defined instruction modifier              $ can't have more than one [[%s]] instruction modifier");
    SWAG_ERROR(Err0019, "already defined switch value                      $ can't use the [[switch]] value [[%d]] because it already exists in another [[case]]");
    SWAG_ERROR(Err0020, "already defined switch value                      $ can't use the [[switch]] value [[%f]] because it already exists in another [[case]]");
    SWAG_ERROR(Err0021, "already defined switch value                      $ can't use the [[switch]] value [[%s]] because it already exists in another [[case]]");
    SWAG_ERROR(Err0022, "already defined switch value                      $ can't use the [[switch]] value [[\"%s\"]] because it already exists in another [[case]]");
    SWAG_ERROR(Err0023, "already defined %s                                $ can't redefine the %s [[%s]] because it already exists %s");
    SWAG_ERROR(Err0024, "already defined symbol                            $ can't redefine the %s [[%s]] because it already exists");
    SWAG_ERROR(Err0025, "ambiguous [[using]]                               $ can't declare with [[using]] two variables of the same type ([[%s]])");
    SWAG_ERROR(Err0026, "ambiguous cast                                    $ can't cast from the type [[%s]] to the type [[%s]] because it is ambiguous");
    SWAG_ERROR(Err0027, "ambiguous interface conversion                    $ can't cast from the type [[%s]] to the interface [[%s]] because it is ambiguous");
    SWAG_ERROR(Err0028, "ambiguous resolution                              $ can't resolve the %s [[%s]] because it is ambiguous");
    SWAG_ERROR(Err0029, "ambiguous resolution enum                         $ can't resolve the enum value [[%s]] because it is ambiguous");
    SWAG_ERROR(Err0030, "ambiguous resolution                              $ can't resolve the generic %s [[%s]] because it is ambiguous");
    SWAG_ERROR(Err0031, "ambiguous resolution                              $ can't resolve the special function [[%s]] because it is ambiguous");
    SWAG_ERROR(Err0032, "ambiguous syntax                                  $ can't determine if this is an initialization of [[%s]] or the start of a new block");
    SWAG_ERROR(Err0033, "ambiguous syntax                                  $ can't resolve ambiguous declaration within lambda parameters");
    SWAG_ERROR(Err0034, "compile-time assertion failed                     $ can't proceed because the [[#assert]] expression was evaluated to false");
    SWAG_ERROR(Err0035, "compile-time evaluation required                  $ can't evaluate the [[#include]] filename argument at compile-time");
    SWAG_ERROR(Err0036, "compile-time evaluation required                  $ can't transform the function return slice (a slice of type [[%s]]) to a compile-time value");
    SWAG_ERROR(Err0037, "compile-time evaluation required                  $ can't transform the function return value (type is [[%s]]) to a constant array because [[opCount]] returns [[0]]");
    SWAG_ERROR(Err0038, "compile-time evaluation required                  $ can't transform the function return value (type is [[%s]]) to a constant array because [[opSlice]] returns an empty slice");
    SWAG_ERROR(Err0039, "compile-time evaluation required                  $ can't evaluate the [[%s]] argument at compile-time");
    SWAG_ERROR(Err0040, "compile-time evaluation required                  $ can't evaluate the [[%s]] message at compile-time");
    SWAG_ERROR(Err0041, "compile-time evaluation required                  $ can't evaluate the [[case]] expression at compile-time $ the [[switch]] is marked with the [[#[Swag.Complete]]] attribute, so the expression must be constant");
    SWAG_ERROR(Err0042, "compile-time evaluation required                  $ can't evaluate the array dimension at compile-time");
    SWAG_ERROR(Err0043, "compile-time evaluation required                  $ can't evaluate the attribute parameter at compile-time");
    SWAG_ERROR(Err0044, "compile-time evaluation required                  $ can't evaluate the expression at compile-time");
    SWAG_ERROR(Err0045, "compile-time evaluation required                  $ can't evaluate the function parameter [[%s]] of type [[%s]] at compile-time");
    SWAG_ERROR(Err0046, "compile-time evaluation required                  $ can't evaluate the initialization expression at compile-time $ in order to make that kind of compile-time evaluation, [[opAffect]] should be [[#[Swag.ConstExpr]]]");
    SWAG_ERROR(Err0047, "compile-time evaluation required                  $ can't evaluate the initialization expression at compile-time");
    SWAG_ERROR(Err0048, "compile-time evaluation required                  $ can't evaluate this operation on [[%s]] at compile-time $ in order to make that kind of compile-time evaluation, the struct should be [[#[Swag.ConstExpr]]]");
    SWAG_ERROR(Err0049, "compile-time evaluation required                  $ can't evaluate this operation on the tuple at compile-time $ in order to make that kind of compile-time evaluation, the tuple should be [[#[Swag.ConstExpr]]]");
    SWAG_ERROR(Err0050, "compile-time evaluation required                  $ can't convert the type [[%s]] to a constant expression");
    SWAG_ERROR(Err0051, "conflicting attributes                            $ can't use the [[#[Swag.Compiler]]] and [[#[Swag.Tls]]] attributes together because they are mutually exclusive");
    SWAG_ERROR(Err0052, "conflicting attributes                            $ can't use the [[#[Swag.Inline]]] and [[#[Swag.NoInline]]] attributes together because they are mutually exclusive");
    SWAG_ERROR(Err0053, "conflicting attributes                            $ can't use the [[#[Swag.Macro]]] and [[#[Swag.Inline]]] attributes together because they are mutually exclusive");
    SWAG_ERROR(Err0054, "conflicting attributes                            $ can't use the [[#[Swag.Macro]]] and [[#[Swag.Mixin]]] attributes together because they are mutually exclusive");
    SWAG_ERROR(Err0055, "conflicting attributes                            $ can't use the [[#[Swag.Mixin]]] and [[#[Swag.Inline]]] attributes together because they are mutually exclusive");
    SWAG_ERROR(Err0056, "conflicting cast modifiers                        $ can't use the [[%s]] and [[%s]] cast modifiers together because they are mutually exclusive");
    SWAG_ERROR(Err0057, "defer escape throw                                $ can't have an error escape a [[defer]] or [[defer:err]] block");
    SWAG_ERROR(Err0058, "division by zero                                  $ can't divide because the divider expression evaluates to 0");
    SWAG_ERROR(Err0059, "duplicated attribute                              $ can't assign twice the attribute [[%s]] because [[Swag.AttrMulti]] is not present in the declaration");
    SWAG_ERROR(Err0060, "duplicated initialization                         $ can't initialize a struct with both the type syntax and an assignment");
    SWAG_ERROR(Err0061, "duplicated operator                               $ can't use another [[%s]] $ expected an expression instead");
    SWAG_ERROR(Err0062, "empty [[#mixin]] replacement block                $ can't have an empty [[mixin]] block $ consider adding some content to the block, or removing it");
    SWAG_ERROR(Err0063, "empty [[case]] statement                          $ can't have an empty [[case]] statement");
    SWAG_ERROR(Err0064, "empty [[default]] statement                       $ can't have an empty [[default]] statement");
    SWAG_ERROR(Err0065, "empty [[interface]]                               $ can't have an empty interface declaration ([[%s]])");
    SWAG_ERROR(Err0066, "empty [[switch]]                                  $ can't have an empty [[switch]] body $ consider adding some cases, or removing it");
    SWAG_ERROR(Err0067, "empty array literal                               $ can't use an array literal without at least one value");
    SWAG_ERROR(Err0068, "empty attribute                                   $ can't use an attribute without at least one value $ you should specify an attribute name");
    SWAG_ERROR(Err0069, "empty compiler function body                      $ can't proceed because a %s requires a body; expected [[{]] but found [[;]] instead");
    SWAG_ERROR(Err0070, "empty expression                                  $ can't have an empty expression [[()]] $ consider removing it");
    SWAG_ERROR(Err0071, "empty statement [[;]]                             $ can't use [[;]] alone to mark an empty statement");
    SWAG_ERROR(Err0072, "escaping stack frame                              $ can't reference the %s [[%s]] because it is in a different stack frame");
    SWAG_ERROR(Err0073, "exception!                                        $ can't proceed due to a compile-time execution exception");
    SWAG_ERROR(Err0074, "expected [[%s]]                                   $ can't proceed because [[%s]] %s is expected, got $$TKN$$ instead");
    SWAG_ERROR(Err0075, "expected ending [[;]]                             $ can't proceed because the interface member definition of [[%s]] should end with a [[;]] $ you can instead define a function body if you want to declare a default implementation");
    SWAG_ERROR(Err0076, "expected function body                            $ can't proceed because a function body starting with [[{]], [[=]] or [[=>]] is expected");
    SWAG_ERROR(Err0077, "failed [[%s]] constraint                          $ can't use the %s [[%s]] because of a failed [[%s]] constraint");
    SWAG_ERROR(Err0078, "failed generic instantiation                      $ can't create the variable due to the generic type [[%s]]");
    SWAG_ERROR(Err0079, "fetch error                                       $ can't fetch the file [[%s]] for module dependency [[%s]]");
    SWAG_ERROR(Err0080, "file delete error                                 $ can't delete the file [[%s]]");
    SWAG_ERROR(Err0081, "file format error                                 $ can't process the file because the format must be ASCII, UTF-8, or UTF-8-BOM");
    SWAG_ERROR(Err0082, "file not found                                    $ can't find the documentation page [[%s]]");
    SWAG_ERROR(Err0083, "file not found                                    $ can't find the file [[%s]] in the module folder [[%s]]");
    SWAG_ERROR(Err0084, "file open error                                   $ can't access the file [[%s]]");
    SWAG_ERROR(Err0085, "file open error                                   $ can't open the file [[%s]] for writing");
    SWAG_ERROR(Err0086, "file open error                                   $ can't open the file [[%s]]");
    SWAG_ERROR(Err0087, "file open error                                   $ can't open the [[#include]] file [[%s]]");
    SWAG_ERROR(Err0088, "file read error                                   $ can't read the source file [[%s]]");
    SWAG_ERROR(Err0089, "file write error                                  $ can't write to the file [[%s]]");
    SWAG_ERROR(Err0090, "folder error                                      $ can't create the directory [[%s]]");
    SWAG_ERROR(Err0091, "folder error dependency                           $ can't find the dependency module folder [[\"%s\"]]");
    SWAG_ERROR(Err0092, "forbidden [[@postcopy]]                           $ can't call the intrinsic [[@postcopy]] on type [[%s]] because of [[#[Swag.NoCopy]]]");
    SWAG_ERROR(Err0093, "forbidden [[opDrop]]                              $ can't use [[opDrop]] for [[%s]] because the struct is marked with the [[#[Swag.ConstExpr]]] attribute");
    SWAG_ERROR(Err0094, "forbidden [[opPostCopy]]                          $ can't use [[opPostCopy]] for [[%s]] because the struct is marked with the [[#[Swag.NoCopy]]] attribute");
    SWAG_ERROR(Err0095, "forbidden call                                    $ can't make a direct call to [[opDrop]] $ consider using [[@drop]] instead]]");
    SWAG_ERROR(Err0096, "forbidden call                                    $ can't make a direct call to [[opPostCopy]] $ consider using [[@postcopy]] instead]]");
    SWAG_ERROR(Err0097, "forbidden call                                    $ can't make a direct call to [[opPostMove]] $ consider using [[@postmove]] instead]]");
    SWAG_ERROR(Err0098, "forbidden call                                    $ can't call [[compileString]] because it is not accessible in this context $ this compiler stage does not allow meta-programmation");
    SWAG_ERROR(Err0099, "forbidden const assign                            $ can't assign to the left expression because it is immutable");
    SWAG_ERROR(Err0100, "forbidden const assign                            $ can't assign to [[%s]] because it is immutable");
    SWAG_ERROR(Err0101, "forbidden const assign                            $ can't change the global variable [[%s]] at compile-time because it is initialized to 0");
    SWAG_ERROR(Err0102, "forbidden copy                                    $ can't copy [[%s]] because the struct is marked with the [[#[Swag.NoCopy]]] attribute");
    SWAG_ERROR(Err0103, "incomplete import version                         $ can't proceed because the [[#import]] version has build number [[%d]] but lacks a revision");
    SWAG_ERROR(Err0104, "incomplete import version                         $ can't proceed because the [[#import]] version has revision [[%d]] but lacks a major version");
    SWAG_ERROR(Err0105, "incomplete list [[case]]                          $ expected another expression after [[,]] and before the [[:]] $ a [[,]] indicates a list of [[case]] expressions; provide the next expression or consider removing the [[,]]");
    SWAG_ERROR(Err0106, "incomplete list alias                             $ expected another alias variable after [[,]] $ either provide an additional alias variable name or remove the trailing [[,]]");
    SWAG_ERROR(Err0107, "incomplete list arguments                         $ expected another call argument after [[,]] $ either provide an additional argument or remove the trailing [[,]]");
    SWAG_ERROR(Err0108, "incomplete list array dimensions                  $ expected another dimension after [[,]] $ either provide an additional dimension or remove the trailing [[,]]");
    SWAG_ERROR(Err0109, "incomplete list index                             $ expected another expression after the [[,]] $ either provide an additional expression or remove the trailing [[,]]");
    SWAG_ERROR(Err0110, "incomplete list parameters                        $ expected another parameter after the [[,]] $ either provide an additional parameter or remove the trailing [[,]]");
    SWAG_ERROR(Err0111, "incomplete list variables                         $ expected another variable name after the [[,]] $ either provide an additional variable name or remove the trailing [[,]]");
    SWAG_ERROR(Err0112, "incomplete tuple unpacking                        $ expected another variable name after the [[,]] $ either provide an additional variable name or remove the trailing [[,]]");
    SWAG_ERROR(Err0113, "infinite [[while]]                                $ can't create a [[while]] infinite loop with the condition always [[true]] $ if you intentionally want to create an infinite loop, consider using a loop without argument [[loop { ... }]]");
    SWAG_ERROR(Err0114, "invalid [[#alias]] number                         $ can't use [[%s]] because a [[#alias]] variable name should end with a number");
    SWAG_ERROR(Err0115, "invalid [[#global]] instruction                   $ can't recognize [[%s]] as a valid [[#global]] instruction");
    SWAG_ERROR(Err0116, "invalid [[#import]] location                      $ can't process $$TKN$$ because a [[#import]] location path was expected");
    SWAG_ERROR(Err0117, "invalid [[#import]] location                      $ can't process $$TKN$$ because a [[#import]] version was expected");
    SWAG_ERROR(Err0118, "invalid [[#mix]] number                           $ can't use [[%s]] because a [[#mix]] variable name should end with a number");
    SWAG_ERROR(Err0119, "invalid [[#mixin]] replacement keyword            $ can't use $$TKN$$ because a [[#mixin]] block accepts only [[break]] and [[continue]] as replacements");
    SWAG_ERROR(Err0120, "invalid [[#up]] count                             $ can't process $$TKN$$ because an integer literal was expected for the [[#up]] count");
    SWAG_ERROR(Err0121, "invalid [[#up]] count                             $ can't proceed because the [[#up]] count can't be zero");
    SWAG_ERROR(Err0122, "invalid [[#up]] count                             $ can't use [[%s]] because the [[#up]] count should be an untyped integer in the range [1, 255]");
    SWAG_ERROR(Err0123, "invalid [[#up]] move                              $ can't move [[%d]] scopes up with [[#up]]");
    SWAG_ERROR(Err0124, "invalid [[@alignof]]                              $ can't compute the alignment of a generic expression");
    SWAG_ERROR(Err0125, "invalid [[@sizeof]]                               $ can't compute the size of a generic expression");
    SWAG_ERROR(Err0126, "invalid [[break]] scope name                      $ expected a scope name or a end of line after [[break]], got $$TKN$$ instead");
    SWAG_ERROR(Err0127, "invalid [[code]] append                           $ the %s [[%s]] wants to interpret the next statement as a [[code]] parameter but this is not possible inside a [[%s]] expression");
    SWAG_ERROR(Err0128, "invalid [[defer]] mode                            $ [[%s]] is not a valid [[defer]] mode $ the only valid modes are [[err]] and [[noerr]]");
    SWAG_ERROR(Err0129, "invalid [[discard]] call                          $ can't discard a function that returns nothing");
    SWAG_ERROR(Err0130, "invalid [[discard]] call                          $ expected a discard-able call after [[discard]], got $$TKN$$ instead");
    SWAG_ERROR(Err0131, "invalid [[impl]]                                  $ expected a struct name after [[for]] but [[%s]] is %s");
    SWAG_ERROR(Err0132, "invalid [[impl]]                                  $ expected a struct name or an enum name after [[impl]] but [[%s]] is [[%s]]");
    SWAG_ERROR(Err0133, "invalid [[impl]]                                  $ expected an interface name after [[impl]] but [[%s]] is %s");
    SWAG_ERROR(Err0134, "invalid [[namealias]]                             $ can't alias a struct member");
    SWAG_ERROR(Err0135, "invalid [[retval]]                                $ can't use the [[retval]] special type in a function that returns nothing");
    SWAG_ERROR(Err0136, "invalid [[switch]] block content                  $ expected [[case]] or [[default]], got $$TKN$$ instead");
    SWAG_ERROR(Err0137, "invalid [[where]] mode                            $ can't use [[%s]] because it is not a valid [[where]] mode $ the only valid mode is [[call]]");
    SWAG_ERROR(Err0138, "invalid [[with]]                                  $ can't use [[with]] on an enum variable (type is [[%s]])");
    SWAG_ERROR(Err0139, "invalid [[with]]                                  $ can't use [[with]] on type [[%s]] $ expected a namespace, an enum, a struct or a pointer to struct");
    SWAG_ERROR(Err0140, "invalid [[with]] expression                       $ expected a [[with]] valid expression $ expected an identifier or a variable declaration");
    SWAG_ERROR(Err0141, "invalid access from runtime                       $ can't access the compile-time %s [[%s]] from the runtime %s");
    SWAG_ERROR(Err0142, "invalid access from runtime                       $ can't access the compile-time %s from the runtime %s");
    SWAG_ERROR(Err0143, "invalid address                                   $ can't take the address because the call to function [[%s]] returns nothing");
    SWAG_ERROR(Err0144, "invalid address                                   $ can't take the address of %s $ this is not a variable");
    SWAG_ERROR(Err0145, "invalid address                                   $ can't take the address of a character inside a string constant $ a string literal does not have an associated memory storage");
    SWAG_ERROR(Err0146, "invalid address                                   $ can't take the address of a constant of type [[%s]] $ this type of constant does not have an associated memory storage");
    SWAG_ERROR(Err0147, "invalid address                                   $ can't take the address of a function parameter of type [[%s]] $ this type of parameter does not have an associated memory storage");
    SWAG_ERROR(Err0148, "invalid address                                   $ can't take the address of a function returned value of type [[%s]]");
    SWAG_ERROR(Err0149, "invalid address                                   $ can't take the address of a macro");
    SWAG_ERROR(Err0150, "invalid address                                   $ can't take the address of a mixin");
    SWAG_ERROR(Err0151, "invalid address                                   $ can't take the address of a variable declared with [[let]] $ consider using [[var]] instead of [[let]] for mutability");
    SWAG_ERROR(Err0152, "invalid address                                   $ can't take the address of an inline function");
    SWAG_ERROR(Err0153, "invalid address                                   $ can't take the address of the right expression");
    SWAG_ERROR(Err0154, "invalid alias variable name                       $ expected an identifier as a variable alias name, got $$TKN$$ instead");
    SWAG_ERROR(Err0155, "invalid align value                               $ can't use [[%d]] because the [[#[Swag.Align]]] argument must be a power of two");
    SWAG_ERROR(Err0156, "invalid argument                                  $ can't use [[%s]] as a [[location]] mode $ the acceptable values are [[\"swag\"]] and [[\"disk\"]]");
    SWAG_ERROR(Err0157, "invalid argument                                  $ can't use [[%s]] as the [[#[Swag.ExportType]]] argument $ the acceptable values are [[\"methods\"]] and [[\"nozero\"]]");
    SWAG_ERROR(Err0158, "invalid argument                                  $ can't use [[%s]] as the [[#[Swag.Match]]] argument $ the acceptable values are [[\"where\"]] and [[\"self\"]]");
    SWAG_ERROR(Err0159, "invalid argument                                  $ can't use [[%s]] as the [[#[Swag.Optim]]] argument $ the acceptable values are [[\"bytecode\"]] and [[\"backend\"]]");
    SWAG_ERROR(Err0160, "invalid argument                                  $ the intrinsic [[%s]] requires a variable name as a first argument if the second argument is not specified");
    SWAG_ERROR(Err0161, "invalid argument                                  $ the intrinsic [[@countof]] requires a positive argument, got [[%I64d]] instead");
    SWAG_ERROR(Err0162, "invalid argument                                  $ the intrinsic [[@countof]] requires a positive argument, got [[%d]] instead");
    SWAG_ERROR(Err0163, "invalid argument                                  $ the intrinsic [[@gettag]] requires a default value of type [[%s]] as the last argument");
    SWAG_ERROR(Err0164, "invalid argument                                  $ the intrinsic [[@mkany]] can't have [[null]] as a first argument");
    SWAG_ERROR(Err0165, "invalid array dimension                           $ can't deduce the array dimension because of a missing initialization");
    SWAG_ERROR(Err0166, "invalid array dimension                           $ the array dimension is 0");
    SWAG_ERROR(Err0167, "invalid assign                                    $ can't assign a function pointer to a constant");
    SWAG_ERROR(Err0168, "invalid assign                                    $ can't assign values to unnamed parameters");
    SWAG_ERROR(Err0169, "invalid assign                                    $ can't assign because the left expression isn't a value");
    SWAG_ERROR(Err0170, "invalid assign                                    $ can't affect to the tuple because the right expression is not compatible");
    SWAG_ERROR(Err0171, "invalid attribute                                 $ expected an attribute, but [[%s]] is %s");
    SWAG_ERROR(Err0172, "invalid attribute usage                           $ expected [[,]] for a new attribute name or [[]]] to end the list, got $$TKN$$ instead");
    SWAG_ERROR(Err0173, "invalid bit-cast                                  $ can't bit-cast from type [[%s]] $ expected an integer, a rune, a float or a pointer");
    SWAG_ERROR(Err0174, "invalid bit-cast                                  $ can't bit-cast to a larger type ([[%s]] to [[%s]])");
    SWAG_ERROR(Err0175, "invalid bit-cast                                  $ can't bit-cast to the type [[%s]] $ expected integer, rune, or float");
    SWAG_ERROR(Err0176, "invalid block start                               $ can't start a block with [['{']] after [[try]], [[assume]] or [[catch]]");
    SWAG_ERROR(Err0177, "invalid call                                      $ expected a function call after [[%s]], got $$TKN$$ instead");
    SWAG_ERROR(Err0178, "invalid call                                      $ unexpected call arguments after the variable name [[%s]]");
    SWAG_ERROR(Err0179, "invalid call function                             $ [[%s]] has call parameters but is [[%s]], not a function");
    SWAG_ERROR(Err0180, "invalid call function                             $ [[%s]] has call parameters but the type [[%s]] is not a function");
    SWAG_ERROR(Err0181, "invalid call function                             $ can't call function [[%s]] with arguments in [[{}]] $ use [[()]] instead");
    SWAG_ERROR(Err0182, "invalid call function                             $ can't call [[%s]] because the function is declared but not defined");
    SWAG_ERROR(Err0183, "invalid call lambda                               $ can't make that lambda call because [[%s]] is not a variable, it is %s");
    SWAG_ERROR(Err0184, "invalid capture                                   $ can't capture [[%s]] because it is %s $ capturing %s type is not supported");
    SWAG_ERROR(Err0185, "invalid capture                                   $ can't capture [[%s]] because it is not a plain old data struct $ a struct is not plain old data if it contains [[opDrop]], [[opPostCopy]] or [[opPostMove]]");
    SWAG_ERROR(Err0186, "invalid character                                 $ the character [[%s]] is not recognized in this context");
    SWAG_ERROR(Err0187, "invalid character literal                         $ can't convert a character literal to the type [[%s]]");
    SWAG_ERROR(Err0188, "invalid character literal                         $ the character literal [[%s]] seems to be a string and not a character");
    SWAG_ERROR(Err0189, "invalid character syntax                          $ can't use quotes for characters; use back-ticks instead $ consider using the syntax [[`%s`]]");
    SWAG_ERROR(Err0190, "invalid compiler instruction                      $ [[%s]] is not a valid compiler instruction starting with the symbol [['#']]");
    SWAG_ERROR(Err0191, "invalid compiler instruction scope                $ can't specify a scope for compiler instructions; they do not belong to any specific scope");
    SWAG_ERROR(Err0192, "invalid const move reference                      $ the move reference type [[&&]] can't be combined with [[const]] $ consider removing the [[const]] or using a simple reference [[&]] instead");
    SWAG_ERROR(Err0193, "invalid constant                                  $ the constant creation failed due to the generic type [[%s]]");
    SWAG_ERROR(Err0194, "invalid default parameters                        $ the default parameters of a lambda or a closure can't be redefined");
    SWAG_ERROR(Err0195, "invalid default value                             $ [[self]] can't have a default value");
    SWAG_ERROR(Err0196, "invalid default value                             $ lambda parameters can't have a default value");
    SWAG_ERROR(Err0197, "invalid dereference                               $ can't dereference [[%s]] by index because [[opIndex]] can't be found in [[%s]]");
    SWAG_ERROR(Err0198, "invalid dereference                               $ can't dereference the type [[%s]]");
    SWAG_ERROR(Err0199, "invalid dereference                               $ can't dereference [[%s]] by index because pointer arithmetic is not allowed on the type [[%s]]");
    SWAG_ERROR(Err0200, "invalid dereference                               $ can't dereference [[%s]] like a struct or a pointer to a struct because the type is [[%s]]");
    SWAG_ERROR(Err0201, "invalid dereference null                          $ can't dereference a null pointer");
    SWAG_ERROR(Err0202, "invalid embedded enum                             $ expected an enum type, got type [[%s]] instead");
    SWAG_ERROR(Err0203, "invalid embedded instruction                      $ expected an embedded instruction or a curly block, got $$TKN$$ instead");
    SWAG_ERROR(Err0204, "invalid escape code                               $ [[%c]] is not a valid escape code");
    SWAG_ERROR(Err0205, "invalid escape format                             $ the [[\\U]] escape code requires 8 hexadecimal digits");
    SWAG_ERROR(Err0206, "invalid escape format                             $ the [[\\u]] escape code requires 4 hexadecimal digits");
    SWAG_ERROR(Err0207, "invalid escape format                             $ the [[\\x]] escape code requires 2 hexadecimal digits");
    SWAG_ERROR(Err0208, "invalid expression                                $ expected an expression after [[%s]], got $$TKN$$ instead $ consider adding an [[(]] after [[%s]] to start an expression");
    SWAG_ERROR(Err0209, "invalid expression                                $ expected an expression after [[%s]], got $$TKN$$ instead");
    SWAG_ERROR(Err0210, "invalid expression                                $ expected an expression, got a type instead");
    SWAG_ERROR(Err0211, "invalid expression                                $ can't use the instruction [[%s]] as an expression $ this instruction can only be used as a statement");
    SWAG_ERROR(Err0212, "invalid function declaration                      $ expected [[func]] or [[mtd]] to declare an interface function, got $$TKN$$ instead $ to declare a function within an interface, use [[func]] or [[mtd]]");
    SWAG_ERROR(Err0213, "invalid generated [[impl]] block                  $ [[impl]] block generation is permissible only within a [[#message]] with [[Swag.CompilerMsgMask.AttributeGen]]");
    SWAG_ERROR(Err0214, "invalid generic                                   $ can't instantiate a partial type alias ([[%s]]) with a generic struct");
    SWAG_ERROR(Err0215, "invalid generic                                   $ can't deduce the generic arguments when calling %s [[%s]]");
    SWAG_ERROR(Err0216, "invalid generic                                   $ can't instantiate the generic function [[%s]] because of missing contextual types replacements");
    SWAG_ERROR(Err0217, "invalid generic                                   $ can't instantiate the generic struct [[%s]] because of missing contextual types replacements");
    SWAG_ERROR(Err0218, "invalid generic                                   $ the generic value [[%s]] has already been deduced from arguments to be [[%s]], and [[%s]] is provided here");
    SWAG_ERROR(Err0219, "invalid generic argument                          $ can't use a value where a type is expected");
    SWAG_ERROR(Err0220, "invalid generic argument                          $ can't use a type where a value is expected");
    SWAG_ERROR(Err0221, "invalid generic argument                          $ invalid usage of %s ([[%s]]) as a generic argument $ a generic argument must be a literal or a type");
    SWAG_ERROR(Err0222, "invalid generic arguments                         $ can't use unexpected generic arguments after the variable name [[%s]]");
    SWAG_ERROR(Err0223, "invalid generic parameter                         $ the special function [[%s]] requires a literal as a generic parameter, got type [[%s]] instead");
    SWAG_ERROR(Err0224, "invalid generic type                              $ can't use a specific type starting with [[:]] for a generic type");
    SWAG_ERROR(Err0225, "invalid identifier                                $ expected an identifier %s, got $$TKN$$ instead");
    SWAG_ERROR(Err0226, "invalid identifier                                $ expected an identifier, got $$TKN$$ instead");
    SWAG_ERROR(Err0227, "invalid identifier [[#scope]]                     $ expected the [[#scope]] identifier, got $$TKN$$ instead");
    SWAG_ERROR(Err0228, "invalid identifier enum                           $ expected an enum value identifier, got $$TKN$$ instead");
    SWAG_ERROR(Err0229, "invalid import location                           $ the [[#import]] location has an incorrect format $ expecting [[location=\"mode@accesspath\"]] where mode is [[swag]] or [[disk]]");
    SWAG_ERROR(Err0230, "invalid import version                            $ the [[#import]] version format is invalid");
    SWAG_ERROR(Err0231, "invalid initialization                            $ can't initialize a constant array (type is [[%s]]) with one single value $ only variables can be initialized that way");
    SWAG_ERROR(Err0232, "invalid instrinsic scope                          $ intrinsics do not belong to a specific scope");
    SWAG_ERROR(Err0233, "invalid instruction modifier                      $ [[%s]] is not recognized as a valid instruction modifier");
    SWAG_ERROR(Err0234, "invalid interface conversion                      $ can't cast from struct to interface because [[%s]] (or a [[using]] field) doesn't implement [[%s]]");
    SWAG_ERROR(Err0235, "invalid interface function                        $ the first parameter should be [[self]], got type [[%s]] instead $ consider declaring the interface function with [[mtd]] instead of [[func]]");
    SWAG_ERROR(Err0236, "invalid interface function                        $ the interface member [[%s]] should have at least [[self]] as the first parameter $ consider declaring the interface function with [[mtd]] instead of [[func]]");
    SWAG_ERROR(Err0237, "invalid intrinsic                                 $ [[%s]] is not a valid intrinsic starting with [[@]]");
    SWAG_ERROR(Err0238, "invalid list variables                            $ [[if]] does not support multiples variable declarations");
    SWAG_ERROR(Err0239, "invalid list variables                            $ [[using]] does not support multiple variable declarations");
    SWAG_ERROR(Err0240, "invalid list variables                            $ [[with]] does not support multiple variables");
    SWAG_ERROR(Err0241, "invalid literal                                   $ invalid number conversion for literal [[%I64u]]");
    SWAG_ERROR(Err0242, "invalid literal suffix                            $ can't use the symbol [[%s]] as a literal suffix because it is [[%s]]");
    SWAG_ERROR(Err0243, "invalid literal suffix                            $ can't use the type [[%s]] as a literal suffix");
    SWAG_ERROR(Err0244, "invalid literal suffix                            $ can't use the type [[%s]] as a float literal suffix $ only [[f32]] and [[f64]] are accepted");
    SWAG_ERROR(Err0245, "invalid literal to struct conversion              $ can't initialize a type [[%s]] with [[%s]] because no corresponding [[opAffectLiteral]] can be found");
    SWAG_ERROR(Err0246, "invalid logical operator                          $ expected [[%s]] for the logical test, got [[%s]] instead");
    SWAG_ERROR(Err0247, "invalid move                                      $ [[move]] is not applicable on an immutable expression (type is [[%s]])");
    SWAG_ERROR(Err0248, "invalid name [[opVisit]]                          $ can't use [[%s]] as an [[opVisit]] variant $ it should be a valid identifier");
    SWAG_ERROR(Err0249, "invalid name [[visit]]                            $ expected a [[visit]] specialization name, got $$TKN$$ instead");
    SWAG_ERROR(Err0250, "invalid name alias                                $ can't use a name alias on %s");
    SWAG_ERROR(Err0251, "invalid name alias                                $ expected an identifier for name aliasing, got $$TKN$$ instead");
    SWAG_ERROR(Err0252, "invalid name alias                                $ expected the alias name after [[%s]], got $$TKN$$ instead");
    SWAG_ERROR(Err0253, "invalid name argument                             $ expected an argument name before [[:]], got $$TKN$$ instead");
    SWAG_ERROR(Err0254, "invalid name attribute                            $ expected an attribute name, got $$TKN$$ instead");
    SWAG_ERROR(Err0255, "invalid name compound                             $ expected a single identifier %s $ consider using a single name without the symbol [['.']]");
    SWAG_ERROR(Err0256, "invalid name constant                             $ expected the constant name after [[const]], got $$TKN$$ instead");
    SWAG_ERROR(Err0257, "invalid name enum                                 $ expected the enum name, got $$TKN$$ instead");
    SWAG_ERROR(Err0258, "invalid name function                             $ can't use [[@]] at the start of a function name ([[%s]]) as it is reserved for intrinsics");
    SWAG_ERROR(Err0259, "invalid name function                             $ expected a function name, got $$TKN$$ instead");
    SWAG_ERROR(Err0260, "invalid name generic parameter                    $ expected an identifier as the generic name, got $$TKN$$ instead");
    SWAG_ERROR(Err0261, "invalid name module                               $ the [[#[Swag.Foreign]]] module name can't be empty");
    SWAG_ERROR(Err0262, "invalid name module                               $ unexpected [[.]] in the [[#[Swag.Foreign]]] module name $ a [[#[Swag.Foreign]]] module name can't have an extension, consider removing it");
    SWAG_ERROR(Err0263, "invalid name namespace                            $ expected the namespace name, got $$TKN$$ instead");
    SWAG_ERROR(Err0264, "invalid name parameter                            $ expected a parameter name, got $$TKN$$ instead");
    SWAG_ERROR(Err0265, "invalid name pass                                 $ [[%s]] is not recognized as a valid compiler pass name");
    SWAG_ERROR(Err0266, "invalid name struct                               $ expected the struct name, got $$TKN$$ instead");
    SWAG_ERROR(Err0267, "invalid name variable                             $ can't use a variable name ([[%s]]) starting with [[#]] $ only [[#mix]] and [[#alias]] are accepted in that case");
    SWAG_ERROR(Err0268, "invalid name variable                             $ expected a variable name, got $$TKN$$ instead");
    SWAG_ERROR(Err0269, "invalid name variable                             $ expected another variable name after [[,]], got $$TKN$$ instead");
    SWAG_ERROR(Err0270, "invalid name variable                             $ expected the variable name after [[%s]], got $$TKN$$ instead");
    SWAG_ERROR(Err0271, "invalid namespace body                            $ missing the namespace body or an instruction instead of the [[;]]");
    SWAG_ERROR(Err0272, "invalid negation                                  $ can't negate a value of type [[%s]]");
    SWAG_ERROR(Err0273, "invalid negation                                  $ can't negate an unsigned type [[%s]]");
    SWAG_ERROR(Err0274, "invalid number format                             $ can't end a number with a digit separator [['_']]");
    SWAG_ERROR(Err0275, "invalid number format                             $ can't use consecutive digit separators [['_']]");
    SWAG_ERROR(Err0276, "invalid number format                             $ can't fit this binary number within a 64-bit representation due to too many digits");
    SWAG_ERROR(Err0277, "invalid number format                             $ can't fit this hexadecimal number within a 64-bit representation due to too many digits");
    SWAG_ERROR(Err0278, "invalid number format binary                      $ can't use binary literals without at least one [[0]] or [[1]] digit");
    SWAG_ERROR(Err0279, "invalid number format binary                      $ can't use $$TKN$$ in binary literals $ they should only contain [[0]] or [[1]]");
    SWAG_ERROR(Err0280, "invalid number format float                       $ the exponent in the scientific notation must contain at least one digit");
    SWAG_ERROR(Err0281, "invalid number format float                       $ the exponent part should not start with [[_]]");
    SWAG_ERROR(Err0282, "invalid number format float                       $ the fractional part should not start with [[_]]");
    SWAG_ERROR(Err0283, "invalid number format hexadecimal                 $ hexadecimal literals can only contain digits [[0-9]], [[A-F]], and [[a-f]], got $$TKN$$ instead");
    SWAG_ERROR(Err0284, "invalid number format hexadecimal                 $ hexadecimal literals require at least one valid digit ([[0-9]], [[A-F]], [[a-f]])");
    SWAG_ERROR(Err0285, "invalid number prefix                             $ expected [[0x]] for hexadecimal or [[0b]] for binary, got $$TKN$$ instead");
    SWAG_ERROR(Err0286, "invalid opaque struct                             $ can't use [[#[Swag.Opaque]]] without a [[public]] access for the struct");
    SWAG_ERROR(Err0287, "invalid opaque struct                             $ can't mark the struct with [[#[Swag.Opaque]]] because the entire file is exported with [[#global export]]");
    SWAG_ERROR(Err0288, "invalid packing value                             $ the [[#[Swag.Pack]]] argument must be 0 or a power of two, got [[%d]]");
    SWAG_ERROR(Err0289, "invalid parameter                                 $ the [[#message]] block needs a parameter of type [[Swag.CompilerMsgMask]], got type [[%s]]");
    SWAG_ERROR(Err0290, "invalid pointer arithmetic                        $ can't perform pointer arithmetic on a pointer to [[void]] $ [[void]] does not have a valid size");
    SWAG_ERROR(Err0291, "invalid pointer arithmetic                        $ can't perform pointer arithmetic");
    SWAG_ERROR(Err0292, "invalid pointer arithmetic                        $ can't perform pointer arithmetic with a non-integer type [[%s]]");
    SWAG_ERROR(Err0293, "invalid pointer arithmetic                        $ can't perform pointer slicing");
    SWAG_ERROR(Err0294, "invalid range                                     $ the lower bound [[%lld]] is greater than the upper bound [[%lld]]");
    SWAG_ERROR(Err0295, "invalid reference                                 $ [[ref]] requires a pointer or a reference as an expression, got type [[%s]] instead");
    SWAG_ERROR(Err0296, "invalid reference                                 $ invalid reference to the current file scope name");
    SWAG_ERROR(Err0297, "invalid reference to [[with]] expression          $ can't use [[.]] without an identifier, got $$TKN$$ instead");
    SWAG_ERROR(Err0298, "invalid return type                               $ can't use [[%s]] as a function return type");
    SWAG_ERROR(Err0299, "invalid return type                               $ can't use [[void]] as a function return type $ just omit the return type if you want the function to return nothing");
    SWAG_ERROR(Err0300, "invalid return type                               $ the function [[opSlice]] must return a string or a slice, got type [[%s]] instead");
    SWAG_ERROR(Err0301, "invalid return value assignment                   $ the call does not return a value");
    SWAG_ERROR(Err0302, "invalid runtime typeinfo                          $ can't convert [[%s]] to a runtime typeinfo");
    SWAG_ERROR(Err0303, "invalid safety argument                           $ invalid safety value [[\"%s\"]] $ the acceptable safety values are [[\"boundcheck|overflow|math|switch|unreachable|any|bool|nan|sanity|null\"]]");
    SWAG_ERROR(Err0304, "invalid slice                                     $ can't slice [[%s]] because [[opSlice]] can't be found in [[%s]]");
    SWAG_ERROR(Err0305, "invalid slice                                     $ can't slice the type [[%s]]");
    SWAG_ERROR(Err0306, "invalid slice                                     $ can't slice a multi-dimensional array");
    SWAG_ERROR(Err0307, "invalid struct initialization                     $ expected [[{}]] to initialize a struct, and not [[()]] which is reserved for function calls");
    SWAG_ERROR(Err0308, "invalid struct operation                          $ can't affect by index a type [[%s]] to [[%s]] because [[opIndexAffect]] can't be found");
    SWAG_ERROR(Err0309, "invalid struct operation                          $ can't find the special function [[%s]] in [[%s]] to solve the operator [['%s']]");
    SWAG_ERROR(Err0310, "invalid struct operation                          $ can't find the special function [[%s]] in [[%s]]");
    SWAG_ERROR(Err0311, "invalid symbol                                    $ can't use the symbol [['%s']] in Swag");
    SWAG_ERROR(Err0312, "invalid throw                                     $ can't throw without a struct or [[@err()]] as an expression");
    SWAG_ERROR(Err0313, "invalid throw                                     $ can't throw the type [[%s]] $ throw needs a struct or [[@err()]] as an expression");
    SWAG_ERROR(Err0314, "invalid top-level instruction                     $ expected a top-level instruction, got $$TKN$$ instead");
    SWAG_ERROR(Err0315, "invalid tuple comparison                          $ can't compare a tuple to the type [[%s]] $ a tuple can only be compared to another tuple");
    SWAG_ERROR(Err0316, "invalid tuple dereference                         $ can't dereference tuples like pointers");
    SWAG_ERROR(Err0317, "invalid tuple unpacking                           $ can't unpack an empty tuple");
    SWAG_ERROR(Err0318, "invalid tuple unpacking                           $ can't unpack the type [[%s]] $ expected a struct or a tuple");
    SWAG_ERROR(Err0319, "invalid type                                      $ the initialization expression has type [[void]]");
    SWAG_ERROR(Err0320, "invalid type                                      $ can't use the intrinsic [[@spread]] with the type [[%s]] $ this kind of type can't be spreaded");
    SWAG_ERROR(Err0321, "invalid type                                      $ the second parameter of [[%s]] can't be of type [[%s]] $ consider using [[opAssign]] if you want to make a copy");
    SWAG_ERROR(Err0322, "invalid type                                      $ the special function [[%s]] requires a [[bool]] as a generic parameter, got type [[%s]] instead");
    SWAG_ERROR(Err0323, "invalid type                                      $ the special function [[%s]] requires a [[string]] as a generic parameter, got type [[%s]] instead");
    SWAG_ERROR(Err0324, "invalid type                                      $ can't use the type [[%s]] as a type for an attribute parameter");
    SWAG_ERROR(Err0325, "invalid type                                      $ can't use the type [[%s]] as an argument to [[@cvaarg]]");
    SWAG_ERROR(Err0326, "invalid type                                      $ can't use a [[const]] version of the type [[%s]]");
    SWAG_ERROR(Err0327, "invalid type                                      $ can't evaluate the type because it is generic");
    SWAG_ERROR(Err0328, "invalid type                                      $ unexpected first parameter type for the special function [[%s]] ([[%s]] expected, [[%s]] provided)");
    SWAG_ERROR(Err0329, "invalid type [[@cvaarg]]                          $ can't use a variadic argument of type [[%s]] because it has been promoted to the type [[%s]] at the call site");
    SWAG_ERROR(Err0330, "invalid type [[orelse]]                           $ the [[orelse]] operator does not accept a [[struct]] as an argument");
    SWAG_ERROR(Err0331, "invalid type [[orelse]]                           $ the [[orelse]] operator does not accept the type [[%s]] as an argument");
    SWAG_ERROR(Err0332, "invalid type [[switch]]                           $ [[switch]] does not accept an expression of type [[%s]]");
    SWAG_ERROR(Err0333, "invalid type [[visit]]                            $ can't visit a tuple");
    SWAG_ERROR(Err0334, "invalid type declaration                          $ expected a type but [[%s]] is %s");
    SWAG_ERROR(Err0335, "invalid type declaration                          $ expected a type declaration, got $$TKN$$ instead");
    SWAG_ERROR(Err0336, "invalid type declaration                          $ expected the array type after its dimensions, got $$TKN$$ instead");
    SWAG_ERROR(Err0337, "invalid type enum                                 $ can't use the type [[%s]] in an enum marked with the [[#[Swag.EnumFlags]]] attribute $ the type should be an unsigned integer");
    SWAG_ERROR(Err0338, "invalid type enum                                 $ can't use the type [[%s]] in an enum marked with the [[#[Swag.EnumIndex]]] attribute $ the type should be an integer");
    SWAG_ERROR(Err0339, "invalid type enum                                 $ can't use the type [[%s]] in an enum marked with the [[#[Swag.NoDuplicate]]] attribute");
    SWAG_ERROR(Err0340, "invalid type enum                                 $ the enum array type [[%s]] should be [[const]] $ this should be designated as [[const %s]]");
    SWAG_ERROR(Err0341, "invalid type enum                                 $ the enum array type [[%s]] should have specified dimensions");
    SWAG_ERROR(Err0342, "invalid type enum                                 $ the enum slice type [[%s]] should be declared as [[const]] $ this should be designated as [[const %s]]");
    SWAG_ERROR(Err0343, "invalid type enum                                 $ can't use the type [[%s]] as an enum type");
    SWAG_ERROR(Err0344, "invalid type enum                                 $ can't use the type [[cstring]] as an enum type $ consider using [[string]] instead");
    SWAG_ERROR(Err0345, "invalid type range                                $ can't use type [[%s]] in a range expression");
    SWAG_ERROR(Err0346, "invalid type suffix                               $ can't use the suffix [[%s]] on a literal except for a struct conversion");
    SWAG_ERROR(Err0347, "invalid type suffix                               $ expected an identifier or a type after the start of a type suffix, got $$TKN$$ instead");
    SWAG_ERROR(Err0348, "invalid type variable                             $ can't declare a variable with a [[void]] type");
    SWAG_ERROR(Err0349, "invalid type variable                             $ can't deduce the type of %s [[%s]]");
    SWAG_ERROR(Err0350, "invalid type variable                             $ can't deduce the type of the variable because the expression is [[null]]");
    SWAG_ERROR(Err0351, "invalid type visit                                $ can't visit a pointer");
    SWAG_ERROR(Err0352, "invalid type visit                                $ can't visit a value with type [[%s]]");
    SWAG_ERROR(Err0353, "invalid unicode value                             $ can't convert value [[0x%x]] to UTF8 because it is not a valid unicode code point");
    SWAG_ERROR(Err0354, "invalid visit                                     $ can't visit a variadic type by pointer");
    SWAG_ERROR(Err0355, "invalid visit                                     $ can't visit an enum content by pointer");
    SWAG_ERROR(Err0356, "invalid void dereference                          $ can't dereference a pointer to [[void]] $ [[void]] does not have a valid size");
    SWAG_ERROR(Err0357, "isolated [[#elif]]                                $ can't use [[#elif]] without a preceding [[#if]]");
    SWAG_ERROR(Err0358, "isolated [[#else]]                                $ can't have [[#else]] without a preceding [[#if]] or [[#elif]]");
    SWAG_ERROR(Err0359, "isolated [[)]]                                    $ can't have [[)]] without a preceding [[(]]");
    SWAG_ERROR(Err0360, "isolated [[]]]                                    $ can't have [[]]] without a preceding [[[]]");
    SWAG_ERROR(Err0361, "isolated [[elif]]                                 $ can't have [[elif]] without a preceding [[if]]");
    SWAG_ERROR(Err0362, "isolated [[else]]                                 $ can't have [[else]] without a preceding [[if]] or [[elif]]");
    SWAG_ERROR(Err0363, "isolated [[}]]                                    $ can't have a [[}]] without a preceding [[{]]");
    SWAG_ERROR(Err0364, "isolated end comment                              $ unexpected end of a multi-line comment [['*/']] after %s $ the beginning [['/*']] of the multi-line comment is missing");
    SWAG_ERROR(Err0365, "literal overflow                                  $ can't negate the number [[%I64d]] because [[%I64u]] is too large for the type [[s64]]");
    SWAG_ERROR(Err0366, "literal overflow                                  $ can't negate the number [[%d]] because [[%u]] is too large for the type [[%s]]");
    SWAG_ERROR(Err0367, "literal overflow                                  $ the number [[%I64u]] is too large for the type [[%s]]");
    SWAG_ERROR(Err0368, "mismatch access                                   $ %s [[%s]] can't be public because %s [[%s]] has [[%s]] access");
    SWAG_ERROR(Err0369, "mismatch access                                   $ the special function [[%s]] can't be [[internal]] because the corresponding struct has [[public]] access");
    SWAG_ERROR(Err0370, "mismatch access                                   $ the special function [[%s]] can't be public because the corresponding struct has [[internal]] access");
    SWAG_ERROR(Err0371, "mismatch enum types                               $ expected an enum of type [[%s]], got type [[%s]] instead");
    SWAG_ERROR(Err0372, "mismatch function signature                       $ the function [[%s]] has an incorrect signature for interface [[%s]]");
    SWAG_ERROR(Err0373, "mismatch scopes                                   $ the [[impl]] block is not defined in the same scope as [[%s]]");
    SWAG_ERROR(Err0374, "misplaced [[#dependencies]]                       $ [[#dependencies]] can only be used within [[module.swg]] or [[.swgs]] files");
    SWAG_ERROR(Err0375, "misplaced [[#dependencies]]                       $ [[#dependencies]] must be placed at the file level");
    SWAG_ERROR(Err0376, "misplaced [[#do]]                                 $ can't use [[#do]] before [[{]] $ consider removing it");
    SWAG_ERROR(Err0377, "misplaced [[#global testerror]]                   $ [[#global testerror]] is only valid in a test file from the [[./tests]] folder");
    SWAG_ERROR(Err0378, "misplaced [[#global testwarning]]                 $ [[#global testwarning]] is only valid in a test file from the [[./tests]] folder");
    SWAG_ERROR(Err0379, "misplaced [[#global using]]                       $ [[#global using]] can only be used within [[module.swg]] or [[.swgs]] files");
    SWAG_ERROR(Err0380, "misplaced [[#global]]                             $ [[#global]] should be placed at the very top of the file");
    SWAG_ERROR(Err0381, "misplaced [[#import]]                             $ [[#import]] can only be used within [[module.swg]] or [[.swgs]] files");
    SWAG_ERROR(Err0382, "misplaced [[#import]]                             $ [[#import]] must be placed within the [[#dependencies]] block");
    SWAG_ERROR(Err0383, "misplaced [[#index]]                              $ the keyword [[#index]] is only valid within a breakable block such as [[loop]], [[visit]], [[for]], etc.");
    SWAG_ERROR(Err0384, "misplaced [[#load]]                               $ [[#load]] can only be used within [[module.swg]] or [[.swgs]] files");
    SWAG_ERROR(Err0385, "misplaced [[#load]]                               $ [[#load]] must be placed within the [[#dependencies]] block");
    SWAG_ERROR(Err0386, "misplaced [[#macro]]                              $ [[#macro]] can only be used within a [[#[Swag.Macro]]] function");
    SWAG_ERROR(Err0387, "misplaced [[#mixin]] block                        $ a [[#mixin]] block is only valid within a breakable block such as [[loop]], [[visit]], [[for]], etc.");
    SWAG_ERROR(Err0388, "misplaced [[#placeholder]]                        $ [[#placeholder]] must be placed within a top level scope");
    SWAG_ERROR(Err0389, "misplaced [[#self]]                               $ [[#self]] can only be used within functions");
    SWAG_ERROR(Err0390, "misplaced [[#test]]                               $ #test]] functions can only be declared in test modules (in the [[./tests]] folder)");
    SWAG_ERROR(Err0391, "misplaced [[#up]]                                 $ [[#up]] can only be used within a [[#[Swag.Macro]]] function");
    SWAG_ERROR(Err0392, "misplaced [[%s]]                                  $ [[%s]] can only be used inside a function marked with [[throw]], but [[%s]] isn't");
    SWAG_ERROR(Err0393, "misplaced [[%s]]                                  $ can't use [[%s]] in a struct special function ([[%s]])");
    SWAG_ERROR(Err0394, "misplaced [[%s]]                                  $ can't combine [[%s]] with [[%s]]");
    SWAG_ERROR(Err0395, "misplaced [[%s]]                                  $ can't combine [[%s]] with another [[%s]]");
    SWAG_ERROR(Err0396, "misplaced [[@cvastart]]                           $ the intrinsic [[@cvastart]] can only be used in a function with a last parameter of type [[cvarargs]]");
    SWAG_ERROR(Err0397, "misplaced [[@spread]]                             $ the intrinsic [[@spread]] can only be used as a direct function argument");
    SWAG_ERROR(Err0398, "misplaced [[Self]] type                           $ the [[Self]] type is only valid within an [[impl]], [[struct]], or [[interface]] block");
    SWAG_ERROR(Err0399, "misplaced [[break]]                               $ [[break]] is only valid within a breakable block such as [[loop]], [[visit]], [[for]], etc.");
    SWAG_ERROR(Err0400, "misplaced [[const]]                               $ expected [[self]] after [[const]] when declaring a function parameter, got $$TKN$$ instead");
    SWAG_ERROR(Err0401, "misplaced [[const]] qualifier                     $ can't use the [[const]] qualifier for [[func]], only for [[mtd]]");
    SWAG_ERROR(Err0402, "misplaced [[continue]]                            $ can't use [[continue]] outside a breakable block like [[loop]], [[visit]], [[for]], etc.");
    SWAG_ERROR(Err0403, "misplaced [[do]]                                  $ can't use [[do]] before [[{]] $ consider removing it");
    SWAG_ERROR(Err0404, "misplaced [[fallthrough]]                         $ [[fallthrough]] is invalid in the last [[case]] of a [[switch]] $ consider removing it");
    SWAG_ERROR(Err0405, "misplaced [[fallthrough]]                         $ [[fallthrough]] is only valid within a [[case]] block");
    SWAG_ERROR(Err0406, "misplaced [[fallthrough]]                         $ [[fallthrough]] is only valid within a [[switch]]");
    SWAG_ERROR(Err0407, "misplaced [[moveref]]                             $ [[moveref]] can only be used before a function argument");
    SWAG_ERROR(Err0408, "misplaced [[moveref]]                             $ unexpected [[moveref]] on a compile-time value $ [[moveref]] should be used on a pointer or a reference");
    SWAG_ERROR(Err0409, "misplaced [[moveref]]                             $ unexpected [[moveref]] on an immutable expression");
    SWAG_ERROR(Err0410, "misplaced [[moveref]]                             $ unexpected [[moveref]] on type [[%s]] $ [[moveref]] should be used on a pointer or a reference");
    SWAG_ERROR(Err0411, "misplaced [[mtd]]                                 $ [[mtd]] is only valid within a struct implementation block $ you could replace [[mtd]] with [[func]]");
    SWAG_ERROR(Err0412, "misplaced [[mtd]] in enum                         $ [[mtd]] is only valid within a struct implementation block $ you could replace [[mtd]] with [[func]]");
    SWAG_ERROR(Err0413, "misplaced [[retval]]                              $ the [[retval]] special type can only be used within a function body");
    SWAG_ERROR(Err0414, "misplaced [[self]]                                $ the [[self]] keyword is only valid within an [[impl]] block of an enum or a struct");
    SWAG_ERROR(Err0415, "misplaced [[using]]                               $ [[using]] can't be associated with type [[%s]] $ expected a namespace, a struct, an enum or a variable");
    SWAG_ERROR(Err0416, "misplaced [[using]]                               $ [[using]] is not valid on a variable with type [[%s]]");
    SWAG_ERROR(Err0417, "misplaced [[using]]                               $ [[using]] on a pointer variable is only valid for struct pointers, got a pointer to [[%s]] instead");
    SWAG_ERROR(Err0418, "misplaced [[using]]                               $ can't use [[using]] on a variable in [[%s]] scope");
    SWAG_ERROR(Err0419, "misplaced [[using]] in interface                  $ can't use [[using]] on an interface member");
    SWAG_ERROR(Err0420, "misplaced access specifier                        $ can't make a global variable [[public]]");
    SWAG_ERROR(Err0421, "misplaced access specifier                        $ misuse of [[%s]] before [[%s]]");
    SWAG_ERROR(Err0422, "misplaced access specifier                        $ can't use the [[%s]] access specifier outside of the global scope");
    SWAG_ERROR(Err0423, "misplaced attribute                               $ [[AttributeUsage.Gen]] can only be associated with [[AttributeUsage.Struct]] or [[AttributeUsage.Enum]]");
    SWAG_ERROR(Err0424, "misplaced attribute                               $ can't use the [[#[Swag.CalleeReturn]]] attribute on a %s");
    SWAG_ERROR(Err0425, "misplaced attribute                               $ can't use the [[#[Swag.Inline]]] attribute on a %s");
    SWAG_ERROR(Err0426, "misplaced attribute                               $ can't use the [[#[Swag.Macro]]] attribute on a %s");
    SWAG_ERROR(Err0427, "misplaced attribute                               $ can't use the [[#[Swag.Mixin]]] attribute on a %s");
    SWAG_ERROR(Err0428, "misplaced attribute                               $ can't use the [[#[Swag.NotGeneric]]] attribute on a %s");
    SWAG_ERROR(Err0429, "misplaced attribute                               $ can't use the [[#[Swag.Complete]]] attribute on a [[switch]] without an expression");
    SWAG_ERROR(Err0430, "misplaced attribute                               $ can't use the [[#[Swag.Offset]]] relocation attribute on an interface member");
    SWAG_ERROR(Err0431, "misplaced attribute                               $ can't use this attribute here");
    SWAG_ERROR(Err0432, "misplaced attribute                               $ can't use the [[#[Swag.Implicit]]] attribute on %s because it is generic");
    SWAG_ERROR(Err0433, "misplaced attribute                               $ can't use the [[#[Swag.CalleeReturn]]] attribute to function [[%s]] $ [[#[Swag.CalledReturn]]] can only be applied to a macro ([[#[Swag.Macro]]]) or a mixin ([[#[Swag.Mixin]]])");
    SWAG_ERROR(Err0434, "misplaced attribute                               $ can't use the [[#[Swag.Complete]]] attribute to function [[%s]] $ #[Swag.Complete] can only be applied to [[opAffect]] and [[opAffectLiteral]]");
    SWAG_ERROR(Err0435, "misplaced attribute                               $ can't use the [[#[Swag.Discardable]]] attribute on type [[%s]] $ it can only be applied to lambda variables");
    SWAG_ERROR(Err0436, "misplaced attribute                               $ can't use the [[#[Swag.Implicit]]] attribute to function [[%s]] $ [[#[Swag.Implicit]]] can only be applied to [[opAffect]], [[opAffectLiteral]] and [[opCast]]");
    SWAG_ERROR(Err0437, "misplaced attribute                               $ can't use the [[%s]] attribute here $ it can only be applied to %s");
    SWAG_ERROR(Err0438, "misplaced attribute                               $ can't use the [[%s]] attribute on %s");
    SWAG_ERROR(Err0439, "misplaced attribute                               $ can't use the [[%s]] attribute in a [[#global]] statement $ the attribute does not have the [[Swag.AttributeUsage.File]] usage");
    SWAG_ERROR(Err0440, "misplaced attribute                               $ can't place an attribute after [[%s]] $ attributes should be placed before access specifiers; consider moving the attribute before [[%s]]");
    SWAG_ERROR(Err0441, "misplaced cast                                    $ can't cast a [[@spread]] result");
    SWAG_ERROR(Err0442, "misplaced closure                                 $ can't define a closure in a global scope $ closures can only be defined within functions");
    SWAG_ERROR(Err0443, "misplaced compiler instruction                    $ can't use [[#callerfunction]] outside of a function parameter");
    SWAG_ERROR(Err0444, "misplaced compiler instruction                    $ can't use [[#callerlocation]] outside of a function parameter");
    SWAG_ERROR(Err0445, "misplaced error catching                          $ [[%s]] can only be associated with function calls, but [[%s]] is %s");
    SWAG_ERROR(Err0446, "misplaced error catching                          $ [[%s]] can't be nested in a [[%s]] expression $ you should use only one [[try]], [[catch]] or [[assume]]");
    SWAG_ERROR(Err0447, "misplaced error catching                          $ can't treat a return error with [[%s]] outside of a function, macro, or mixin");
    SWAG_ERROR(Err0448, "misplaced error catching                          $ unexpected [[%s]] because the function [[%s]] can't raise an error");
    SWAG_ERROR(Err0449, "misplaced function declaration                    $ functions can't be directly declared inside structs $ functions associated with structs should be declared inside [[impl]] blocks");
    SWAG_ERROR(Err0450, "misplaced generic arguments                       $ can't use unexpected generic arguments for %s [[%s]]");
    SWAG_ERROR(Err0451, "misplaced move reference                          $ can't use a move reference type [[&&]] outside of a function parameter");
    SWAG_ERROR(Err0452, "misplaced range                                   $ can't use a range in a switch which without an expression");
    SWAG_ERROR(Err0453, "misplaced reference to [[with]] block             $ can't use statements starting with [[.]] outside of a [[with]] block");
    SWAG_ERROR(Err0454, "misplaced special function                        $ can't declare the struct special function [[%s]] outside of the corresponding [[impl]] block $ an [[impl for]] block can only be used to implement interfaces");
    SWAG_ERROR(Err0455, "misplaced special function                        $ can't declare the struct special function [[%s]] outside of the corresponding [[impl]] block");
    SWAG_ERROR(Err0456, "misplaced top-level [[using]]                     $ can't place a top-level [[using]] after other declarations");
    SWAG_ERROR(Err0457, "misplaced tuple unpacking                         $ can't unpack a tuple in %s");
    SWAG_ERROR(Err0458, "misplaced type                                    $ can't use the type [[%s]] outside of a function parameter");
    SWAG_ERROR(Err0459, "misplaced type                                    $ can't use the type [[code]] outside of a [[#[Swag.Macro]]] or [[#[Swag.Mixin]]] function");
    SWAG_ERROR(Err0460, "misplaced variadic argument                       $ can't place a variadic argument anywhere but at the end");
    SWAG_ERROR(Err0461, "misplaced variadic parameter                      $ can't place a variadic parameter anywhere but at the end");
    SWAG_ERROR(Err0462, "misplaced variadic parameter                      $ can't use variadic parameters in an inline function");
    SWAG_ERROR(Err0463, "missing [[#alias]] number                         $ can't use an [[#alias]] variable name without a trailing number, such as [[#alias0]], [[#alias1]], etc.");
    SWAG_ERROR(Err0464, "missing [[#do]]                                   $ can't process $$TKN$$ because either [[#do]] or [[{]] is missing");
    SWAG_ERROR(Err0465, "missing [[#foreignlib]] string argument           $ can't use $$TKN$$ because [[#foreignlib]] should be followed by a library name $ use [[#foreignlib \"path/to/library\"]] to specify the library to import");
    SWAG_ERROR(Err0466, "missing [[#global testerror]] string argument     $ can't use $$TKN$$ because [[#global testerror]] should be followed by the error string to check");
    SWAG_ERROR(Err0467, "missing [[#global testwarning]] string argument   $ can't use $$TKN$$ because [[#global testwarning]] should be followed by the warning string to check");
    SWAG_ERROR(Err0468, "missing [[#if]] boolean expression                $ can't use $$TKN$$ because [[#if]] should be followed by a boolean expression");
    SWAG_ERROR(Err0469, "missing [[#import]] string argument               $ can't use $$TKN$$ because [[#import]] should be followed by the module name to import");
    SWAG_ERROR(Err0470, "missing [[#include]] string argument              $ can't use $$TKN$$ because [[#include]] should be followed by the file name to include");
    SWAG_ERROR(Err0471, "missing [[#main]]                                 $ can't find the program entry point [[#main]]");
    SWAG_ERROR(Err0472, "missing [[#message]] parameter                    $ can't proceed because [[#message]] requests a parameter of type [[Swag.CompilerMsgMask]]");
    SWAG_ERROR(Err0473, "missing [[#mix]] number                           $ can't use the variable name because a [[#mix]] variable must end with a number such as [[#mix0]], [[#mix1]], etc.");
    SWAG_ERROR(Err0474, "missing [[#placeholder]] identifier               $ can't use $$TKN$$ because [[#placeholder]] should be followed by an identifier");
    SWAG_ERROR(Err0475, "missing [[%s]]                                    $ expected [[%s]] %s but none was found after");
    SWAG_ERROR(Err0476, "missing [[%s]]                                    $ expected [[%s]] %s, got $$TKN$$ instead");
    SWAG_ERROR(Err0477, "missing [[(]] before arguments                    $ can't process $$TKN$$ because [[(]] is missing to start the list of arguments");
    SWAG_ERROR(Err0478, "missing [[(]] before parameters                   $ can't process $$TKN$$ because [[(]] is missing to start the list of parameters");
    SWAG_ERROR(Err0479, "missing [[)]]                                     $ can't process the attribute arguments list because [[)]] is missing to end it");
    SWAG_ERROR(Err0480, "missing [[:]]                                     $ a [[:]] is expected here after the [[loop]] variable name [[%s]] $ the syntax is [[loop [variable:] count]]");
    SWAG_ERROR(Err0481, "missing [[case]] expression                       $ can't process [[%s]] because the [[case]] expression is missing");
    SWAG_ERROR(Err0482, "missing [[closure]] capture variable              $ can't proceed because another capture variable is expected between the [[comma]] ',' and [['|']] $ add another variable or consider removing the trailing comma");
    SWAG_ERROR(Err0483, "missing [[do]]                                    $ can't process $$TKN$$ because either [[do]] or [[{]] is missing");
    SWAG_ERROR(Err0484, "missing [[if]] boolean expression                 $ can't use $$TKN$$ because [[if]] should be followed by a boolean expression");
    SWAG_ERROR(Err0485, "missing [[impl]]                                  $ can't process the function [[%s]] because it is part of the interface [[%s]] but lacks an [[impl]] marker");
    SWAG_ERROR(Err0486, "missing [[loop]] count                            $ expected the [[loop]] count expression before [[%s]]");
    SWAG_ERROR(Err0487, "missing [[switch]] value                          $ can't omit the [[switch]] value [[%s.%s]]");
    SWAG_ERROR(Err0488, "missing [[visit]] expression                      $ can't proceed because the element to visit is expected before [[%s]]");
    SWAG_ERROR(Err0489, "missing [[visit]] variable                        $ can't proceed because another [[visit]] variable name is expected between the [[comma]] ',' and the [[colon]] ':' $ the first [[visit]] variable is the [[value]], the second one is the [[index]]");
    SWAG_ERROR(Err0490, "missing [[while]] boolean expression              $ can't proceed because a boolean expression is expected before [[%s]]");
    SWAG_ERROR(Err0491, "missing attribute                                 $ can't declare an [[opVisit]] function without the [[#[Swag.Macro]]] attribute");
    SWAG_ERROR(Err0492, "missing catch error                               $ can't handle the errors of [[%s]] because [[try]], [[catch]], or [[assume]] is missing");
    SWAG_ERROR(Err0493, "missing default value                             $ can't use the %s because a preceding parameter has a default value and one is needed here");
    SWAG_ERROR(Err0494, "missing dereference index                         $ can't dereference the array [[%s]] of type [[%s]] without an index $ consider adding the index between brackets");
    SWAG_ERROR(Err0495, "missing dereference index                         $ can't dereference the array [[%s]] of type [[%s]] without an index $ consider adding the index between brackets");
    SWAG_ERROR(Err0496, "missing end of line                               $ expected a line break or a [[;]] to close the %s, got $$TKN$$ instead $ consider adding a line break or separating the previous statement with a [[;]]");
    SWAG_ERROR(Err0497, "missing enum flag value                           $ can't deduce the value of flag [[%s]] as the previous value isn't a power of two");
    SWAG_ERROR(Err0498, "missing function parameters                       $ expected the function parameters between [[()]] before [[{]] $ if you want to declare a function without parameters, consider adding [[()]] after the name");
    SWAG_ERROR(Err0499, "missing generic arguments                         $ can't instantiate %s because of missing generic arguments");
    SWAG_ERROR(Err0500, "missing generic arguments                         $ can't instantiate the generic function [[%s]] because of missing generic arguments");
    SWAG_ERROR(Err0501, "missing generic arguments                         $ can't instantiate the generic struct [[%s]] because of missing generic arguments");
    SWAG_ERROR(Err0502, "missing generic parameters                        $ expected at least one generic parameter between [[()]] $ consider removing [[()]] if this is not generic");
    SWAG_ERROR(Err0503, "missing generic parameters                        $ can't have a special function [[%s]] with generic parameters");
    SWAG_ERROR(Err0504, "missing generic parameters                        $ can't solve the struct [[%s]] because of the generic field [[%s]]");
    SWAG_ERROR(Err0505, "missing generic parameters                        $ can't evaluate the struct [[%s]] because it should declare generic parameters, as [[%s]] is generic");
    SWAG_ERROR(Err0506, "missing initialization                            $ can't declare a constant without an explicit initialization");
    SWAG_ERROR(Err0507, "missing initialization                            $ can't declare a reference without an explicit initialization");
    SWAG_ERROR(Err0508, "missing initialization                            $ can't declare a [[let]] variable without an explicit initialization");
    SWAG_ERROR(Err0509, "missing initialization                            $ can't declare an immutable variable without an explicit initialization");
    SWAG_ERROR(Err0510, "missing initialization                            $ expected an initialization of [[%s]] because [[%s]] does not contain a value for zero");
    SWAG_ERROR(Err0511, "missing initialization                            $ the enumeration value [[%s]] has type [[%s]] which requires an explicit initialization");
    SWAG_ERROR(Err0512, "missing interface function                        $ can't have some functions of the interface [[%s]] not implemented for [[%s]]");
    SWAG_ERROR(Err0513, "missing intrinsic arguments                       $ expected the arguments of [[%s]] between [[()]]");
    SWAG_ERROR(Err0514, "missing name attribute                            $ expected an attribute name before [[(]]");
    SWAG_ERROR(Err0515, "missing name enum                                 $ expected the enum name before the start of the body [['{']]");
    SWAG_ERROR(Err0516, "missing name enum                                 $ expected the enum name before the start of the type definition [[':']]");
    SWAG_ERROR(Err0517, "missing name namespace                            $ expected the namespace name before [[;]]");
    SWAG_ERROR(Err0518, "missing name namespace                            $ expected the namespace name before the start of the body [['{']]");
    SWAG_ERROR(Err0519, "missing name parameter                            $ expected the parameter name and [[:]] before [[%s]]");
    SWAG_ERROR(Err0520, "missing name struct                               $ expected the struct name before the start of the body [['{']]");
    SWAG_ERROR(Err0521, "missing named argument                            $ the %s should be named because some arguments before are named");
    SWAG_ERROR(Err0522, "missing parameters                                $ the intrinsic [[%s]] is a function and should be followed by an [[(]]");
    SWAG_ERROR(Err0523, "missing parameters                                $ can't have a special function [[%s]] without some parameters");
    SWAG_ERROR(Err0524, "missing return type                               $ can't have a [[public]] function without an explicitly defined return type");
    SWAG_ERROR(Err0525, "missing return type                               $ the function [[%s]] has the [[#[Swag.Discardable]]] attribute and should return something");
    SWAG_ERROR(Err0526, "missing return type                               $ can't have a special function [[%s]] without a return type");
    SWAG_ERROR(Err0527, "missing return type                               $ can't have a special function [[%s]] without a return type [[%s]]");
    SWAG_ERROR(Err0528, "missing return value                              $ expected a return value because the return type has already been deduced to be [[%s]]");
    SWAG_ERROR(Err0529, "missing return value                              $ expected a return value of type [[%s]] after the [[return]]");
    SWAG_ERROR(Err0530, "missing return value                              $ can't have some control paths of %s without returning a value");
    SWAG_ERROR(Err0531, "missing return value                              $ the %s returns a type [[%s]] but lacks a [[return]] in its body");
    SWAG_ERROR(Err0532, "missing slice upper bound                         $ expected an upper bound expression after [[..<]] $ if you want to slice to the end, consider using [[..]] instead of [[..<]]");
    SWAG_ERROR(Err0533, "missing test error                                $ expected at least one error, but none was raised");
    SWAG_ERROR(Err0534, "missing test warning                              $ expected at least one warning, but none was raised");
    SWAG_ERROR(Err0535, "missing type                                      $ expected a type after [[#type]], got $$TKN$$ instead");
    SWAG_ERROR(Err0536, "missing type constant                             $ expected the type with [[:]] or an assignment with [[=]], got $$TKN$$ instead");
    SWAG_ERROR(Err0537, "missing type lambda parameter                     $ expected the type with [[:]] or an assignment with [[=]] $ when declaring lambda parameters, you should not combined inferred and explicit types");
    SWAG_ERROR(Err0538, "missing type parameter                            $ expected the type with [[:]] or an assignment with [[=]], got $$TKN$$ instead");
    SWAG_ERROR(Err0539, "missing type variable                             $ expected a type declaration with [[:]] or an assignment, got $$TKN$$ instead");
    SWAG_ERROR(Err0540, "misused UFCS                                      $ can't use the %s [[%s]] as the first argument when calling [[%s]]");
    SWAG_ERROR(Err0541, "misused UFCS                                      $ can't use the hidden [[with]] variable [[%s]] as the first argument when calling [[%s]]");
    SWAG_ERROR(Err0542, "non-contiguous [[#alias]]                         $ non-contiguous [[#alias]] in function [[%s]], missing [[#alias%u]]");
    SWAG_ERROR(Err0543, "non-transferable [[cvarargs]] type                $ can't pass a parameter with the type [[cvarargs]] to another function");
    SWAG_ERROR(Err0544, "not a value                                       $ can't use the implicit reference because it's a static struct member of [[%s]]");
    SWAG_ERROR(Err0545, "not a value                                       $ can't use the %s [[%s]] because it's not a valid value in this context");
    SWAG_ERROR(Err0546, "not enough arguments                              $ the %s should have arguments but none were provided");
    SWAG_ERROR(Err0547, "not enough attribute arguments                    $ not enough arguments for the attribute [[%s]]");
    SWAG_ERROR(Err0548, "not enough call arguments                         $ not enough arguments calling the function [[%s]]");
    SWAG_ERROR(Err0549, "not enough generic arguments                      $ not enough generic arguments for %s");
    SWAG_ERROR(Err0550, "not enough generic parameters                     $ not enough generic parameters for the special function [[%s]]");
    SWAG_ERROR(Err0551, "not enough initializers                           $ expected [[%d]] values to initialize the array, got [[%d]] instead");
    SWAG_ERROR(Err0552, "not enough initializers                           $ expected [[%d]] values to initialize the tuple, got [[%d]] instead");
    SWAG_ERROR(Err0553, "not enough parameters                             $ expected [[%d]] parameters for the special function [[%s]], got [[%d]] instead");
    SWAG_ERROR(Err0554, "not enough parameters                             $ expected at least [[%d]] parameters for the special function [[%s]], got [[%d]] instead");
    SWAG_ERROR(Err0555, "out of range [[#alias]] number                    $ can't use [[%u]] for [[#alias]] number $ it should be in the range [0, 31]");
    SWAG_ERROR(Err0556, "out of range [[#mix]] number                      $ can't use [[%u]] because a [[#mix]] number should be in the range [0, 31]");
    SWAG_ERROR(Err0557, "out of range [[#up]] count                        $ can't use [[%u]] count in [[#up]] $ it should be in the range [1, 255]");
    SWAG_ERROR(Err0558, "out of range array dimensions                     $ can't have more than [[254]] array dimensions");
    SWAG_ERROR(Err0559, "out of range call level                           $ the limit defined with [[--limit-recurse-bc:%d]] has been reached");
    SWAG_ERROR(Err0560, "out of range callback parameters                  $ the intrinsic [[@mkcallback]] does not allow a function with more than [[%d]] parameters, got [[%d]]");
    SWAG_ERROR(Err0561, "out of range character literal                    $ can't convert the character literal [[0x%x]] to [[u16]], this is out of range");
    SWAG_ERROR(Err0562, "out of range character literal                    $ can't convert the character literal [[0x%x]] to [[u8]], this is out of range");
    SWAG_ERROR(Err0563, "out of range compiler limit                       $ the size of the %s is too big (maximum size is [[0x%I64x]] bytes)");
    SWAG_ERROR(Err0564, "out of range compiler limit                       $ the size of the data segment [[%s]] is too big (maximum size is [[0x%I64x]] bytes)");
    SWAG_ERROR(Err0565, "out of range enum value                           $ can't use the enum value [[%s]] because it exceeds the valid range of the type [[%s]]");
    SWAG_ERROR(Err0566, "out of range index                                $ can't use the index [[%I64u]] because it exceeds the maximum value [[%I64u]]");
    SWAG_ERROR(Err0567, "out of range inline level                         $ can't expand [[%s]] because the limit defined with [[--limit-inline:%d]] has been reached");
    SWAG_ERROR(Err0568, "out of range number                               $ can't fit this literal number within a 64-bits representation");
    SWAG_ERROR(Err0569, "out of range slice                                $ can't use the slice bound [[%I64u]] because it is out of range (max is [[%I64u]])");
    SWAG_ERROR(Err0570, "out of range slice                                $ can't use the slice lower bound [[%I64u]] because it is greater than the upper bound [[%I64u]]");
    SWAG_ERROR(Err0571, "out of range slice                                $ can't use the slice upper bound exclusion [[..<]] because it is zero");
    SWAG_ERROR(Err0572, "out of range variadic arguments                   $ the maximum number of variadic arguments is [[%d]], got [[%d]] instead");
    SWAG_ERROR(Err0573, "overflow bytecode stack                           $ the required size exceeds the limit [[%s]] given by [[--stack-size]]");
    SWAG_ERROR(Err0574, "overflow capture size                             $ can't capture the total requested size of [[%u]] bytes because it exceeds the maximum authorized size of [[%u]]");
    SWAG_ERROR(Err0575, "overload mismatch                                 $ found [[%d]] overloads for [[%s]], but none matched the provided arguments");
    SWAG_ERROR(Err0576, "recursive evaluation                              $ can't evaluate the struct [[%s]] because it references itself, causing a recursion");
    SWAG_ERROR(Err0577, "redundant access specifier                        $ can't use the [[%s]] access specifier because of [[#global export]] $ consider removing the [[public]] modifier, as [[#global export]] ensures all declarations in this file are publicly accessible");
    SWAG_ERROR(Err0578, "reserved name                                     $ can't use an identifier starting with [[__]] ([[%s]]) $ identifiers starting with [[__]] are typically reserved for compiler-internal or system use");
    SWAG_ERROR(Err0579, "reserved name function                            $ can't use the function name [[%s]] because it is reserved by the compiler");
    SWAG_ERROR(Err0580, "reserved name namespace                           $ can't use the namespace [[%s]] because it is reserved by the compiler");
    SWAG_ERROR(Err0581, "reserved name struct member                       $ can't use the field name [[%s]] because it is reserved by the compiler $ struct member names beginning with [[item]] are reserved by the language");
    SWAG_ERROR(Err0582, "semantic cycle                                    $ can't solve %s [[%s]] because a cycle has been detected");
    SWAG_ERROR(Err0583, "standalone expression                             $ can't leave an expression unused $ consider removing it");
    SWAG_ERROR(Err0584, "system error                                      $ can't create the process [[%s]] (::CreatePipe)");
    SWAG_ERROR(Err0585, "system error                                      $ can't create the process [[%s]]");
    SWAG_ERROR(Err0586, "too many arguments                                $ expected [[%d]] arguments, got [[%d]] instead");
    SWAG_ERROR(Err0587, "too many generic arguments                        $ expected [[%d]] generic arguments for %s [[%s]], got [[%d]] instead");
    SWAG_ERROR(Err0588, "too many generic parameters                       $ expected one single generic parameter for the special function [[%s]], got [[%d]] instead");
    SWAG_ERROR(Err0589, "too many generic parameters                       $ can't use more generic parameters for the special function [[%s]] than allowed");
    SWAG_ERROR(Err0590, "too many initializers                             $ expected [[%d]] values to initialize [[%s]], got [[%d]] instead");
    SWAG_ERROR(Err0591, "too many initializers                             $ expected [[%d]] values to initialize the array, got [[%d]] instead");
    SWAG_ERROR(Err0592, "too many initializers                             $ expected [[%d]] values to initialize the tuple, got [[%d]] instead");
    SWAG_ERROR(Err0593, "too many initializers                             $ can't use more initializers than allowed for type [[%s]]");
    SWAG_ERROR(Err0594, "too many parameters                               $ too many parameters for [[%s]] ([[%d]] expected, [[%d]] provided)");
    SWAG_ERROR(Err0595, "tuple type mismatch                               $ can't use the source tuple with the requested tuple; they are not compatible");
    SWAG_ERROR(Err0596, "type mismatch                                     $ can't initialize type [[%s]] from type [[%s]]");
    SWAG_ERROR(Err0597, "type mismatch                                     $ can't convert from a closure type to a lambda type");
    SWAG_ERROR(Err0598, "type mismatch                                     $ can't convert from a type value ([[typeinfo]]) to a compile type ([[%s]])");
    SWAG_ERROR(Err0599, "type mismatch                                     $ can't convert from the type [[%s]] to the type [[%s]]");
    SWAG_ERROR(Err0600, "type mismatch                                     $ expected a return of type [[%s]] for the special function [[%s]], got type [[%s]] instead");
    SWAG_ERROR(Err0601, "type mismatch                                     $ expected type [[%s]], got type [[%s]] instead");
    SWAG_ERROR(Err0602, "type mismatch                                     $ the [[%s]] assignment requires an expression of type [[%s]], got type [[%s]] instead");
    SWAG_ERROR(Err0603, "type mismatch                                     $ can't use type [[%s]] with type [[%s]] defined in the command line for [[%s]]; they are incompatible");
    SWAG_ERROR(Err0604, "type mismatch                                     $ can't mix signed and unsigned types in a range expression $ the lower bound and the upper bound should be the same");
    SWAG_ERROR(Err0605, "type mismatch UFCS                                $ expected an UFCS argument of type [[%s]], got type [[%s]] instead");
    SWAG_ERROR(Err0606, "type mismatch argument                            $ can't use type [[%s]] for [[#include]] $ it requires an argument of type [[string]]");
    SWAG_ERROR(Err0607, "type mismatch argument                            $ can't use type [[%s]] for [[#mixin]] $ it requires an argument of type [[code]]");
    SWAG_ERROR(Err0608, "type mismatch argument                            $ can't use type [[%s]] for [[where]] $ it requires an argument of type [[bool]]");
    SWAG_ERROR(Err0609, "type mismatch argument                            $ expected an argument of type [[%s]], got type [[%s]] instead");
    SWAG_ERROR(Err0610, "type mismatch argument                            $ the [[%s]] count must be an integer, got type [[%s]] instead");
    SWAG_ERROR(Err0611, "type mismatch argument                            $ the intrinsic [[%s]] requires a block pointer as a first argument if the number of values is greater than one (type is [[%s]])");
    SWAG_ERROR(Err0612, "type mismatch argument                            $ the intrinsic [[%s]] requires a block pointer as a first argument if the number of values is variable (type is [[%s]])");
    SWAG_ERROR(Err0613, "type mismatch argument                            $ the intrinsic [[%s]] requires a block pointer as a first argument, got type [[%s]] instead");
    SWAG_ERROR(Err0614, "type mismatch argument                            $ the intrinsic [[%s]] requires a pointer as a first argument, got type [[%s]] instead");
    SWAG_ERROR(Err0615, "type mismatch argument                            $ the intrinsic [[%s]] requires an argument of type [[string]], got type [[%s]] instead");
    SWAG_ERROR(Err0616, "type mismatch argument                            $ can't use a tuple as the [[@countof]] argument");
    SWAG_ERROR(Err0617, "type mismatch argument                            $ can't use the type [[%s]] because the intrinsic [[@countof]] requires an integer argument");
    SWAG_ERROR(Err0618, "type mismatch argument                            $ can't use a tuple as the [[@dataof]] argument");
    SWAG_ERROR(Err0619, "type mismatch argument                            $ can't use the type [[%s]] as the [[@dataof]] argument");
    SWAG_ERROR(Err0620, "type mismatch argument                            $ can't use the type [[%s]] as the [[@mkany]] second argument because it requires a [[typeinfo]]");
    SWAG_ERROR(Err0621, "type mismatch argument                            $ can't use the type [[%s]] as the [[@mkcallback]] first argument because it requires a pointer to function");
    SWAG_ERROR(Err0622, "type mismatch argument                            $ can't use the type [[%s]] as the [[@mkinterface]] first argument because it requires a pointer or a struct");
    SWAG_ERROR(Err0623, "type mismatch argument                            $ can't use the type [[%s]] as the [[@mkinterface]] second argument because it requires a type");
    SWAG_ERROR(Err0624, "type mismatch argument                            $ can't use the type [[%s]] as the [[@mkinterface]] third argument because it requires an interface name");
    SWAG_ERROR(Err0625, "type mismatch argument                            $ can't use the type [[%s]] as the [[@mkstring]] first argument because it requires a pointer to [[u8]]");
    SWAG_ERROR(Err0626, "type mismatch argument                            $ can't use the type [[%s]] as the [[@runes]] argument because it requires a type [[string]]");
    SWAG_ERROR(Err0627, "type mismatch argument const                      $ can't use the type [[%s]] as the [[%s]] first argument because it requires a mutable pointer");
    SWAG_ERROR(Err0628, "type mismatch argument const                      $ can't use the type [[%s]] as the [[%s]] first argument because it requires a mutable variable");
    SWAG_ERROR(Err0629, "type mismatch array                               $ can't declare a static array of type [[void]]");
    SWAG_ERROR(Err0630, "type mismatch array dimension                     $ can't use the type [[%s]] for an array dimension $ the dimension must be an integer");
    SWAG_ERROR(Err0631, "type mismatch array index                         $ can't use the type [[%s]] for an array access $ the index must be an integer");
    SWAG_ERROR(Err0632, "type mismatch comparison                          $ can't use comparison operations on tuples");
    SWAG_ERROR(Err0633, "type mismatch comparison                          $ can't use the comparison operation [['%s']] with the type [[%s]] as the left argument");
    SWAG_ERROR(Err0634, "type mismatch comparison                          $ can't use the comparison operation [['%s']] with the type [[%s]] as the right argument");
    SWAG_ERROR(Err0635, "type mismatch comparison                          $ can't use the comparison operation [['%s']] with the type [[%s]]");
    SWAG_ERROR(Err0636, "type mismatch comparison                          $ can't compare a slice with [[%s]] $ a slice comparison is only allowed with [[null]]");
    SWAG_ERROR(Err0637, "type mismatch comparison                          $ can't compare an interface with [[%s]] $ an interface comparison is only allowed with [[null]], another interface or with a [[typeinfo]]");
    SWAG_ERROR(Err0638, "type mismatch comparison                          $ can't compare the type [[any]] with the type [[%s]] $ an [[any]] comparison is only allowed with [[null]] or with a [[typeinfo]]");
    SWAG_ERROR(Err0639, "type mismatch const                               $ can't cast from an immutable type [[%s]] to a mutable one [[%s]]");
    SWAG_ERROR(Err0640, "type mismatch const UFCS                          $ can't use an immutable type [[%s]] for the UFCS argument $ it should be mutable");
    SWAG_ERROR(Err0641, "type mismatch field                               $ expected type [[%s]] for field [[%s]], got type [[%s]] instead");
    SWAG_ERROR(Err0642, "type mismatch generic                             $ expected type [[%s]] for the generic %s, got type [[%s]] instead");
    SWAG_ERROR(Err0643, "type mismatch generic parameter                   $ can't use tuple types as generic parameters $ this is not supported");
    SWAG_ERROR(Err0644, "type mismatch operation                           $ can't use the bit inversion operation [['~']] with the type [[%s]]");
    SWAG_ERROR(Err0645, "type mismatch operation                           $ can't use the operation [['%s']] with the type [[%s]] as the left argument");
    SWAG_ERROR(Err0646, "type mismatch operation                           $ can't use the operation [['%s']] with the type [[%s]] as the right argument");
    SWAG_ERROR(Err0647, "type mismatch operation                           $ can't use the operation [['%s']] with the type [[%s]]");
    SWAG_ERROR(Err0648, "type mismatch operation                           $ can't use the operation [['%s']] with tuple types");
    SWAG_ERROR(Err0649, "type mismatch operation                           $ can't use the operation [['%s']] because the left expression is an enum type ([[%s]]) not marked with [[#[Swag.EnumFlags]]]");
    SWAG_ERROR(Err0650, "type mismatch operation                           $ can't use the operation [['%s']] because the right expression is an enum type ([[%s]]) not marked with [[#[Swag.EnumFlags]]]");
    SWAG_ERROR(Err0651, "type mismatch operation                           $ can't use the operation [['%s']] with the non-integer type [[%s]]");
    SWAG_ERROR(Err0652, "type mismatch pointer                             $ can't convert a value pointer [[%s]] to a block pointer [[%s]]");
    SWAG_ERROR(Err0653, "type mismatch pointer                             $ can't convert from type [[%s]] to a pointer type");
    SWAG_ERROR(Err0654, "type mismatch return                              $ can't return the type [[%s]] in an [[#ast]] block $ must return a type [[string]] instead");
    SWAG_ERROR(Err0655, "type mismatch return                              $ can't return the type [[%s]]; the return value has already been deduced to be nothing");
    SWAG_ERROR(Err0656, "type mismatch return                              $ the return value has already been deduced to have the type [[%s]], and here it is the type [[%s]]");
    SWAG_ERROR(Err0657, "type mismatch return callback                     $ can't use a function returning the type [[%s]] with the intrinsic [[@mkcallback]] $ this is not supported");
    SWAG_ERROR(Err0658, "unclosed comment                                  $ can't find the closing [['*/']] for this multi-line comment");
    SWAG_ERROR(Err0659, "unclosed literal character                        $ can't find a closing back-tick [['`']] before the end of the line");
    SWAG_ERROR(Err0660, "unclosed literal string                           $ can't find a closing quotation mark [['\"']] before the end of the line $ if you want a multi-line string, use the syntax [[\"\"\"string\"\"\"]]");
    SWAG_ERROR(Err0661, "unexpected [[const]]                              $ can't use [[const]] before a lambda parameter name");
    SWAG_ERROR(Err0662, "unexpected [[default]]                            $ can't use a [[default]] statement in a [[switch]] marked with the [[#[Swag.Complete]]] attribute");
    SWAG_ERROR(Err0663, "unexpected [[for]]                                $ can't use the [[for]] keyword in an [[enum]] implementation");
    SWAG_ERROR(Err0664, "unexpected [[impl]]                               $ can't associate [[impl]] to a function outside of an [[impl for]] block");
    SWAG_ERROR(Err0665, "unexpected [[mtd]]                                $ can't use [[mtd]] to declare a lambda type $ expected [[func]] or [[closure]] instead");
    SWAG_ERROR(Err0666, "unexpected [[return]]                             $ can't use [[return]] after [[=>]] as it is implicit $ consider removing it");
    SWAG_ERROR(Err0667, "unexpected [[retval]] return type                 $ can't use [[retval]] as a return type $ it is only valid as a local variable type");
    SWAG_ERROR(Err0668, "unexpected [[throw]] qualifier                    $ can't use the [[throw]] qualifier on an attribute, as it can't raise errors");
    SWAG_ERROR(Err0669, "unexpected [[var]] in struct                      $ can't use [[var]] in struct variable declarations $ struct variables should be declared as [[fieldName: Type]] without [[var]]");
    SWAG_ERROR(Err0670, "unexpected [[where:call]] for struct              $ can't use a [[where:call]] constraint for structs; it is only valid for functions $ consider using a single [[where]] instead");
    SWAG_ERROR(Err0671, "unexpected [[where]]                              $ can't use a [[where]] constraint on the special function [[%s]] $ [[where]] constraints are not supported for [[opDrop]], [[opPostCopy]], and [[opPostMove]]");
    SWAG_ERROR(Err0672, "unexpected affectation                            $ can't use the assignment operator [['=']] inside an expression $ if you are trying to compare values, you should use [['==']] instead");
    SWAG_ERROR(Err0673, "unexpected aliased names                          $ can't use variable aliases when calling [[%s]] because it is not a macro or a mixin");
    SWAG_ERROR(Err0674, "unexpected attribute return type                  $ can't use a return type starting with [[->]] for an attribute");
    SWAG_ERROR(Err0675, "unexpected comparison                             $ can't use the comparison operator [['==']] here $ expected an assignment with [[=]]");
    SWAG_ERROR(Err0676, "unexpected default value                          $ can't use default values for variadic parameters");
    SWAG_ERROR(Err0677, "unexpected function body                          $ can't have a body for a function tagged with the [[#[Swag.Foreign]]] attribute");
    SWAG_ERROR(Err0678, "unexpected function overload                      $ can't declare another function with the same name [[%s]] $ if you want to declare an overload, mark all functions with the [[#[Swag.Overload]]] attribute");
    SWAG_ERROR(Err0679, "unexpected generic arguments                      $ can't use generic arguments after the name");
    SWAG_ERROR(Err0680, "unexpected generic arguments                      $ can't use generic arguments after %s");
    SWAG_ERROR(Err0681, "unexpected generic function                       $ can't have a generic function [[%s]] with the [[#[Swag.NotGeneric]]] attribute");
    SWAG_ERROR(Err0682, "unexpected generic parameters                     $ can't use generic parameters with a function interface");
    SWAG_ERROR(Err0683, "unexpected generic parameters                     $ can't use generic parameters with the special function [[%s]] because of the [[#[Swag.NotGeneric]]] attribute");
    SWAG_ERROR(Err0684, "unexpected generic parameters                     $ can't use generic parameters with the special function [[%s]]");
    SWAG_ERROR(Err0685, "unexpected identifier                             $ can't use a global identifier like [[%s]] at the file level");
    SWAG_ERROR(Err0686, "unexpected instruction modifier                   $ can't apply the instruction modifier [[%s]] to [[%s]]");
    SWAG_ERROR(Err0687, "unexpected lambda parameter name                  $ can't use a name when declaring a lambda type $ consider removing it");
    SWAG_ERROR(Err0688, "unexpected line break                             $ can't place the array type on a different line $ it should be on the same line as the array dimensions");
    SWAG_ERROR(Err0689, "unexpected name                                   $ can't use more than [[2]] [[visit]] alias names; [[%u]] were provided");
    SWAG_ERROR(Err0690, "unexpected parameters                             $ can't process parameters because a compiler %s should not have them $ expected [[{]] here");
    SWAG_ERROR(Err0691, "unexpected return value                           $ can't return a value from a %s");
    SWAG_ERROR(Err0692, "unexpected return value                           $ can't declare a return value for a function with the [[#[Swag.CalleeReturn]]] attribute");
    SWAG_ERROR(Err0693, "unexpected return value                           $ can't use a return value of type [[%s]] for function [[%s]]");
    SWAG_ERROR(Err0694, "unexpected return value                           $ can't use a return a value of type [[%s]]");
    SWAG_ERROR(Err0695, "unexpected tuple unpacking name                   $ can't use $$TKN$$ for tuple unpacking $ expected a variable name or [[?]]");
    SWAG_ERROR(Err0696, "unexpected type                                   $ can't start a declaration with a type");
    SWAG_ERROR(Err0697, "unexpected type alias                             $ can't use a type alias as an [[impl]] block name $ expected a direct type instead");
    SWAG_ERROR(Err0698, "unexpected type declaration                       $ can't have a type declaration after [[self]] $ [[self]] is implicitly typed; consider removing the redundant type");
    SWAG_ERROR(Err0699, "unexpected type declaration                       $ can't have a type declaration after unnamed parameters");
    SWAG_ERROR(Err0700, "unexpected type suffix                            $ can't have a type suffix after %s");
    SWAG_ERROR(Err0701, "unexpected visit name                             $ can't use a visit specialization name for the type [[%s]] $ it is only valid for visiting a struct");
    SWAG_ERROR(Err0702, "unknown attribute                                 $ can't find the attribute [[%s]]");
    SWAG_ERROR(Err0703, "unknown dependency                                $ can't find the module dependency [[%s]]");
    SWAG_ERROR(Err0704, "unknown enum value                                $ can't find the enumeration value [[%s]] in [[%s]]");
    SWAG_ERROR(Err0705, "unknown field name                                $ can't find the field name [[%s]] in [[%s]]");
    SWAG_ERROR(Err0706, "unknown file                                      $ can't find the file [[%s]]");
    SWAG_ERROR(Err0707, "unknown foreign function                          $ can't find the foreign function [[%s]]");
    SWAG_ERROR(Err0708, "unknown function                                  $ can't find the function [[%s]]");
    SWAG_ERROR(Err0709, "unknown function interface                        $ can't find the function [[%s]] in the interface [[%s]]");
    SWAG_ERROR(Err0710, "unknown identifier                                $ can't find the identifier [[%s]] in [[%s]] or in %s [[%s]]");
    SWAG_ERROR(Err0711, "unknown identifier                                $ can't find the identifier [[%s]] in [[%s]]");
    SWAG_ERROR(Err0712, "unknown identifier                                $ can't find the identifier [[%s]] in the tuple");
    SWAG_ERROR(Err0713, "unknown identifier                                $ can't find the identifier [[%s]]");
    SWAG_ERROR(Err0714, "unknown identifier                                $ can't find the corresponding [[enum]] or [[with]] for the identifier [[%s]] (it is preceded with [[.]])");
    SWAG_ERROR(Err0715, "unknown label                                     $ can't find the scope label [[%s]]");
    SWAG_ERROR(Err0716, "unknown method                                    $ can't find the method [[%s]] in [[%s]]");
    SWAG_ERROR(Err0717, "unknown named argument                            $ can't find the named argument [[%s]]");
    SWAG_ERROR(Err0718, "unknown relocation offset                         $ can't find the struct member [[%s]]; unable to compute the relocation");
    SWAG_ERROR(Err0719, "unknown struct                                    $ can't find the struct [[%s]]");
    SWAG_ERROR(Err0720, "unknown type                                      $ can't find the type [[%s]]");
    SWAG_ERROR(Err0721, "unknown visit                                     $ can't visit the type [[%s]] with [[visit]] $ can't find the special function [[opVisit]]");
    SWAG_ERROR(Err0722, "unknown visit name                                $ can't find the visit specialization name [[%s]] in [[%s]]");
    SWAG_ERROR(Err0723, "unpack number mismatch                            $ can't unpack [[%u]] variables because the tuple has [[%u]] fields");
    SWAG_ERROR(Err0724, "unpack number mismatch                            $ can't unpack [[%u]] variables because the tuple has only [[%u]] fields");
    SWAG_ERROR(Err0725, "unresolved dependency                             $ can't resolve the dependency to the module [[%s]] because of a version mismatched");
    SWAG_ERROR(Err0726, "unresolved dependency                             $ can't resolve the dependency to the module [[%s]] because version [[%s]] was not found at [[%s]]");
    SWAG_ERROR(Err0727, "unresolved dependency                             $ can't resolve the dependency to the module [[%s]] because version [[%s]] was not found");
    SWAG_ERROR(Err0728, "unresolved dependency                             $ can't resolve the module dependency [[%s]] because the [[location]] is empty");
    SWAG_ERROR(Err0729, "unresolved foreign call                           $ can't load the module [[%s]] while resolving the foreign function [[%s]]");
    SWAG_ERROR(Err0730, "unresolved identifier                             $ can't solve the identifier [[%s]]");
    SWAG_ERROR(Err0731, "unresolved interface                              $ can't solve the interface due to the generic type [[%s]]");
    SWAG_ERROR(Err0732, "unresolved semantic                               $ can't resolve this");
    SWAG_ERROR(Err0733, "unsuitable struct for union                       $ can't use the struct [[%s]] for a union because it contains an [[%s]] function");
    SWAG_ERROR(Err0734, "unsupported [[@nameof]] argument                  $ can't evaluate the [[@nameof]] argument");
    SWAG_ERROR(Err0735, "unsupported [[@stringof]] argument                $ can't evaluate the [[@stringof]] argument");
    SWAG_ERROR(Err0736, "unsupported generic                               $ can't deduce the generic type, this is too complicated (embedded tuples)");
    SWAG_ERROR(Err0737, "unused alias name                                 $ can't find a corresponding variable for the alias name [[%s]] $ consider removing it");
    SWAG_ERROR(Err0738, "unused return value                               $ can't ignore the return value of the function [[%s]] $ if you don't need the return value, consider prefixing the call with [[discard]]");
    SWAG_ERROR(Err0739, "unused return value                               $ can't ignore the return value of the intrinsic [[%s]]");
    SWAG_ERROR(Err0740, "unused return value                               $ can't ignore the return value of the lambda [[%s]] $ if you don't need the return value, consider prefixing the call with [[discard]]");
    SWAG_ERROR(Err0741, "already defined field name                        $ can't define the field name [[%s]] because it already exists");
    SWAG_ERROR(Err0742, nullptr);
    SWAG_ERROR(Err0743, nullptr);
    SWAG_ERROR(Err0744, nullptr);
    SWAG_ERROR(Err0745, nullptr);
    SWAG_ERROR(Err0746, nullptr);
    SWAG_ERROR(Err0747, nullptr);
    SWAG_ERROR(Err0748, nullptr);
    SWAG_ERROR(Err0749, nullptr);
    SWAG_ERROR(Err0750, nullptr);
    SWAG_ERROR(Err0751, nullptr);
    SWAG_ERROR(Err0752, nullptr);
    SWAG_ERROR(Err0753, nullptr);
    SWAG_ERROR(Err0754, nullptr);
    SWAG_ERROR(Err0755, nullptr);
    SWAG_ERROR(Err0756, nullptr);
    SWAG_ERROR(Err0757, nullptr);
    SWAG_ERROR(Err0758, nullptr);
    SWAG_ERROR(Err0759, nullptr);
    SWAG_ERROR(Err0760, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Nte0001, "[[#alias]] is only valid within a [[#[Swag.Macro]]] or [[#[Swag.Mixin]]] function");
    SWAG_ERROR(Nte0002, "[[#mix]] is only valid within a [[#[Swag.Mixin]]] function");
    SWAG_ERROR(Nte0003, "[[%s]] does not take arguments between parenthesis, so what follows should be a normal [[(expression)]]");
    SWAG_ERROR(Nte0004, "[[%s]] is %s and does not have a sub-scope");
    SWAG_ERROR(Nte0005, "[[%s]] is %s of type [[%s]] and does not have a sub-scope");
    SWAG_ERROR(Nte0006, "[[%s]] is a mutable UFCS argument, so taking the address is implicit");
    SWAG_ERROR(Nte0007, "[[%s]] is a variable and variables within expressions can't be evaluated at compile-time");
    SWAG_ERROR(Nte0008, "[[%s]] is an array of type [[%s]] which does not have a sub-scope");
    SWAG_ERROR(Nte0009, "[[%s]] is considered to be a type and not a generic value because of the preceeding [[var]]");
    SWAG_ERROR(Nte0010, "[[%s]] might represent either a type or a parameter name");
    SWAG_ERROR(Nte0011, "[[%s]] was located within [[%s]] due to a [[using]] field");
    SWAG_ERROR(Nte0012, "[[==]] is the comparison operator; did you intend to affect something with [[=]]?");
    SWAG_ERROR(Nte0013, "[[closure]] should be followed by the capture parameters enclosed in [[|...|]]");
    SWAG_ERROR(Nte0014, "[[discard]] can't be associated with an intrinsic, as an intrinsic result should always be used");
    SWAG_ERROR(Nte0015, "[[namealias]] should be associated with a namespace, a function or a variable instead of a type");
    SWAG_ERROR(Nte0016, "[[using]] should be followed by a single variable declaration");
    SWAG_ERROR(Nte0017, "[[with]] should be followed by a single variable declaration");
    SWAG_ERROR(Nte0018, "a [[%s]] block must start with [[#do]] or must be enclosed in [[{}]]");
    SWAG_ERROR(Nte0019, "a [[%s]] block must start with [[do]] or must be enclosed in [[{}]]");
    SWAG_ERROR(Nte0020, "a [[let]] variable is immutable and can't be changed");
    SWAG_ERROR(Nte0021, "a return type is missing");
    SWAG_ERROR(Nte0022, "a standard function in an [[impl]] block should not shadow a function from the matching interface");
    SWAG_ERROR(Nte0023, "an attribute is not a function; consider removing it");
    SWAG_ERROR(Nte0024, "an implicit [[@countof]] is present here");
    SWAG_ERROR(Nte0025, "associated command line option: [[%s]]");
    SWAG_ERROR(Nte0026, "both parts of an [[orelse]] should have the same type");
    SWAG_ERROR(Nte0027, "but it is applied on this %s");
    SWAG_ERROR(Nte0028, "consider adding [['&']] to get the address of this expression");
    SWAG_ERROR(Nte0029, "consider adding [[using]] before [[self]] if you intend to access members of the instance directly");
    SWAG_ERROR(Nte0030, "consider adding a [[break]] if you want to exit without any action");
    SWAG_ERROR(Nte0031, "consider adding a [[break]] to exit, or use [[fallthrough]] to continue to the next [[case]]");
    SWAG_ERROR(Nte0032, "consider adding a return type [[->%s]] to the declaration");
    SWAG_ERROR(Nte0033, "consider adding an explicit [[cast(%s)]] if necessary");
    SWAG_ERROR(Nte0034, "consider adding scope [[%s]] before [[.]]");
    SWAG_ERROR(Nte0035, "consider casting to the underlying [[any]] type");
    SWAG_ERROR(Nte0036, "consider casting with [[cast(%s)]]");
    SWAG_ERROR(Nte0037, "consider removing [[var]] or replace it by [[const]] if you want to declare a generic value");
    SWAG_ERROR(Nte0038, "consider removing one [[using]]");
    SWAG_ERROR(Nte0039, "consider removing the %s or replace it with the scope [[%s]]");
    SWAG_ERROR(Nte0040, "consider replacing [[undefined]] with an explicit initialization");
    SWAG_ERROR(Nte0041, "consider using [[++]] to append literal strings at compile-time");
    SWAG_ERROR(Nte0042, "consider using [[?]] to unpack and ignore a variable");
    SWAG_ERROR(Nte0043, "consider using [[func]] instead of [[mtd]]");
    SWAG_ERROR(Nte0044, "consider using [[func]] to declare a function");
    SWAG_ERROR(Nte0045, "consider using [[mtd]] instead of [[func]] to implicitly declare [[using self]] as the first parameter");
    SWAG_ERROR(Nte0046, "consider using [[typealias]] to create an alias for %s");
    SWAG_ERROR(Nte0047, "consider using [[var]] or [[const]] instead of [[let]] to declare a global variable or a constant");
    SWAG_ERROR(Nte0048, "consider writing [[impl %s]] instead");
    SWAG_ERROR(Nte0049, "consider writing [[impl enum %s]] instead");
    SWAG_ERROR(Nte0050, "copying an array of structs is not allowed here");
    SWAG_ERROR(Nte0051, "could [[self]] be missing?");
    SWAG_ERROR(Nte0052, "could be an instance of the generic function [[%s]]");
    SWAG_ERROR(Nte0053, "could be this %s");
    SWAG_ERROR(Nte0054, "could be this other %s");
    SWAG_ERROR(Nte0055, "could be");
    SWAG_ERROR(Nte0056, "did you forget [[var]] or [[const]] to declare a global variable or a constant?");
    SWAG_ERROR(Nte0057, "entity %s [[%s]] awaits the generation of type [[%s]]");
    SWAG_ERROR(Nte0058, "evaluation failed during compile-time");
    SWAG_ERROR(Nte0059, "expected an integer, a rune or a float value");
    SWAG_ERROR(Nte0060, "function names that start with [[op]] followed by an uppercase letter are reserved for struct special functions");
    SWAG_ERROR(Nte0061, "function parameters are immutable and can't be modified");
    SWAG_ERROR(Nte0062, "got [[%s]] instead");
    SWAG_ERROR(Nte0063, "here is another one");
    SWAG_ERROR(Nte0064, "here is one");
    SWAG_ERROR(Nte0065, "here is the %s [[%s]]");
    SWAG_ERROR(Nte0066, "here is the %s");
    SWAG_ERROR(Nte0067, "here is the corresponding parameter [[%s]]");
    SWAG_ERROR(Nte0068, "here is the corresponding parameter");
    SWAG_ERROR(Nte0069, "here is the declaration of the %s [[%s]]");
    SWAG_ERROR(Nte0070, "here is the deprecated definition");
    SWAG_ERROR(Nte0071, "here is the failed [[%s]] constraint");
    SWAG_ERROR(Nte0072, "here is the field causing the recursion");
    SWAG_ERROR(Nte0073, "here is the generic parameter [[%s]] of the %s");
    SWAG_ERROR(Nte0074, "here is the origin of the instantiation type [[%s]]");
    SWAG_ERROR(Nte0075, "here is the other [[#import]]");
    SWAG_ERROR(Nte0076, "here is the other definition");
    SWAG_ERROR(Nte0077, "here is the other return statement");
    SWAG_ERROR(Nte0078, "here is the previous definition");
    SWAG_ERROR(Nte0079, "here is the prior declaration");
    SWAG_ERROR(Nte0080, "here is the reference to the immutable value");
    SWAG_ERROR(Nte0081, "here is the runtime argument corresponding to [[%s]]");
    SWAG_ERROR(Nte0082, "here is the start of the body");
    SWAG_ERROR(Nte0083, "here is the tuple definition");
    SWAG_ERROR(Nte0084, "if needed, you can prefix with [[#run]] to force a compile-time call");
    SWAG_ERROR(Nte0085, "if this is intended, consider adding [[impl]] before this");
    SWAG_ERROR(Nte0086, "if this is intended, consider initializing the global variable with [[undefined]] instead of zero");
    SWAG_ERROR(Nte0087, "if this is intended, consider renaming it to [[_%s]]");
    SWAG_ERROR(Nte0088, "if you are trying to access a struct or a tuple element, you could try [[%s.item%s]]");
    SWAG_ERROR(Nte0089, "if you are trying to access an element by index, use square brackets, such as [[%s[%s]]]");
    SWAG_ERROR(Nte0090, "if you want to declare a generic constant, consider adding [[const]] before [[%s]]");
    SWAG_ERROR(Nte0091, "if you want to declare a lambda type, use [[func(]] or [[closure(]]");
    SWAG_ERROR(Nte0092, "if you want to retrieve the type of an expression, consider using [[@decltype]] instead");
    SWAG_ERROR(Nte0093, "it seems like you're trying to access a nested member of [[%s]], but [[%s]] itself isn't a value");
    SWAG_ERROR(Nte0094, "missing %s of type [[%s]]");
    SWAG_ERROR(Nte0095, "missing generic parameter [[%s]]");
    SWAG_ERROR(Nte0096, "missing parameter [[%s]] of type [[%s]]");
    SWAG_ERROR(Nte0097, "occurred during compile-time evaluation");
    SWAG_ERROR(Nte0098, "occurred during the [[where:call]] check of the call to [[%s]]");
    SWAG_ERROR(Nte0099, "occurred during the [[where]] check of struct [[%s]]");
    SWAG_ERROR(Nte0100, "occurred during the [[where]] check of the call to [[%s]]");
    SWAG_ERROR(Nte0101, "occurred during the generic instantiation of [[%s]]");
    SWAG_ERROR(Nte0102, "occurred during the inline expansion of [[%s]]");
    SWAG_ERROR(Nte0103, "occurred in generated code");
    SWAG_ERROR(Nte0104, "occurred while trying to convert [[%s]] to a function call parameter of type [[%s]]");
    SWAG_ERROR(Nte0105, "one function declares [[throw]] while the other doesn't");
    SWAG_ERROR(Nte0106, "only basic types, [[enum]] and [[typeinfo]] are accepted for attribute parameters");
    SWAG_ERROR(Nte0107, "only the address of a returned reference can be taken, and this is %s");
    SWAG_ERROR(Nte0108, "parameter mismatch (type is [[%s]])");
    SWAG_ERROR(Nte0109, "perhaps you intended to use this type: [[%s]]");
    SWAG_ERROR(Nte0110, "pointer arithmetic is not valid for pointers declared with [['*']] (only if declared with [['^']])");
    SWAG_ERROR(Nte0111, "potential issue detected in your program's compile-time component");
    SWAG_ERROR(Nte0112, "public structs should export all their special functions");
    SWAG_ERROR(Nte0113, "should conform to the type [[%s]]");
    SWAG_ERROR(Nte0114, "structs with an [[internal]] access should not export their special functions");
    SWAG_ERROR(Nte0115, "the % s [[%s]] has only been used as a scope to find function [[%s]]");
    SWAG_ERROR(Nte0116, "the %s [[%s]] is marked with [[throw]] and can raise errors you must deal with");
    SWAG_ERROR(Nte0117, "the %s [[%s]] is waiting for %s [[%s]] to be solved");
    SWAG_ERROR(Nte0118, "the %s [[%s]] wasn't found in [[%s]]. The alternative from [[%s]] was selected");
    SWAG_ERROR(Nte0119, "the [[@gettag]] default value should conform to this type");
    SWAG_ERROR(Nte0120, "the [[@init]] initialization value should conform to this pointed type ([[%s]])");
    SWAG_ERROR(Nte0121, "the [[dref]] operation isn't possible here");
    SWAG_ERROR(Nte0122, "the argument [[%s]] could be converted to %s");
    SWAG_ERROR(Nte0123, "the array has [[%d]] elements of type [[%s]], which doesn't match a slice of type [[%s]]");
    SWAG_ERROR(Nte0124, "the call to [[%s]] returns type [[%s]], which doesn't have a sub-scope");
    SWAG_ERROR(Nte0125, "the other one is an implicit parameter [[using self]]");
    SWAG_ERROR(Nte0126, "the duplicated underlying enum value is [[%s]]");
    SWAG_ERROR(Nte0127, "the function [[%s]] is not marked with the [[#[Swag.ConstExpr]]] attribute");
    SWAG_ERROR(Nte0128, "the function [[%s]] is tagged with [[#[Swag.CalleeReturn]]], implying the return value is utilized within [[%s]]");
    SWAG_ERROR(Nte0129, "the function call returns an immutable [[%s]]");
    SWAG_ERROR(Nte0130, "the function is supposed to be part of the interface because of [[impl]]");
    SWAG_ERROR(Nte0131, "the function is tagged with the [[#[Swag.Inline]]] attribute");
    SWAG_ERROR(Nte0132, "the function is tagged with the [[#[Swag.Macro]]] attribute");
    SWAG_ERROR(Nte0133, "the function is tagged with the [[#[Swag.Mixin]]] attribute");
    SWAG_ERROR(Nte0134, "the identifier [[%s]] is %s and not a function or a struct");
    SWAG_ERROR(Nte0135, "the interface declaration returns type [[%s]]");
    SWAG_ERROR(Nte0136, "the interface declaration yields no return");
    SWAG_ERROR(Nte0137, "the keyword [[%s]] can't be used as an identifier");
    SWAG_ERROR(Nte0138, "the lambda type is [[%s]]");
    SWAG_ERROR(Nte0139, "the missing value can be found here");
    SWAG_ERROR(Nte0140, "the number of values ([[%d]]) is greater than one");
    SWAG_ERROR(Nte0141, "the number of values is variable and could be greater than one");
    SWAG_ERROR(Nte0142, "the only accepted type for an integer to pointer conversion is [[u64]]");
    SWAG_ERROR(Nte0143, "the operation is not allowed on a non-pointer type");
    SWAG_ERROR(Nte0144, "the operator [['++']] requires compile-time strings as arguments");
    SWAG_ERROR(Nte0145, "the parent scope for [[impl]] is [[%s]], but the parent scope for [[%s]] is [[%s]]");
    SWAG_ERROR(Nte0146, "the return type of an [[#ast]] block should be of type [[string]]");
    SWAG_ERROR(Nte0147, "the slicing lower bound type is invalid, expected an integer, got the type [[%s]] instead");
    SWAG_ERROR(Nte0148, "the symbol [[%s]] is already present in the interface scope [[%s]]");
    SWAG_ERROR(Nte0149, "the symbol [[%s]] was located through a [[using]] statement");
    SWAG_ERROR(Nte0150, "the symbol [[...]] is used to declare variadic function parameters, which is not valid in this context");
    SWAG_ERROR(Nte0151, "the syntax in Swag is [[const Value = #include \"path\"]] to embed an external file in a constant byte array");
    SWAG_ERROR(Nte0152, "the type [[%s]] is expected due to %s");
    SWAG_ERROR(Nte0153, "the type [[%s]] is needed because of the enum specific type");
    SWAG_ERROR(Nte0154, "the type [[%s]] is needed because of the function return type");
    SWAG_ERROR(Nte0155, "the value could also come from [[%s]]");
    SWAG_ERROR(Nte0156, "the value could come from [[%s]]");
    SWAG_ERROR(Nte0157, "the version format should be [[version.revision.buildnum]], where each number is either >= 0 or the [[?]] character");
    SWAG_ERROR(Nte0158, "there's an hidden call to [[%s]] for the type [[%s]]");
    SWAG_ERROR(Nte0159, "there's an hidden call to [[%s]]");
    SWAG_ERROR(Nte0160, "there's an implied first parameter [[self]]");
    SWAG_ERROR(Nte0161, "this %s has [[%s]] access");
    SWAG_ERROR(Nte0162, "this %s has the [[#[Swag.Compiler]]] attribute, which makes it compile-time only");
    SWAG_ERROR(Nte0163, "this %s has type [[%s]]");
    SWAG_ERROR(Nte0164, "this [[discard]] should be removed");
    SWAG_ERROR(Nte0165, "this [[using]] field is convertible because [[%s]] implements the interface");
    SWAG_ERROR(Nte0166, "this argument has been named");
    SWAG_ERROR(Nte0167, "this can be converted too because [[%s]] also implements the interface");
    SWAG_ERROR(Nte0168, "this can't be prefixed with an access specifier");
    SWAG_ERROR(Nte0169, "this function call can't be evaluated at compile-time");
    SWAG_ERROR(Nte0170, "this function does not support aliased names");
    SWAG_ERROR(Nte0171, "this function does not support being called with UFCS using a value of type [[%s]]");
    SWAG_ERROR(Nte0172, "this function has the [[#[Swag.Compiler]]] attribute, which makes it compile-time only");
    SWAG_ERROR(Nte0173, "this has [[%s]] access (type is [[%s]])");
    SWAG_ERROR(Nte0174, "this is a constant");
    SWAG_ERROR(Nte0175, "this is a lambda expression");
    SWAG_ERROR(Nte0176, "this is a pointer type declaration due to [[*]]");
    SWAG_ERROR(Nte0177, "this is a type value, aka [[typeinfo]], aka [[%s]]");
    SWAG_ERROR(Nte0178, "this is an enum implementation block");
    SWAG_ERROR(Nte0179, "this is an unnamed parameter ([['?']])");
    SWAG_ERROR(Nte0180, "this is the expected signature");
    SWAG_ERROR(Nte0181, "this is the first initialization");
    SWAG_ERROR(Nte0182, "this is the first usage");
    SWAG_ERROR(Nte0183, "this is the literal suffix [[%s]]");
    SWAG_ERROR(Nte0184, "this is unexpected in global scope");
    SWAG_ERROR(Nte0185, "this list of parameters are missing their type");
    SWAG_ERROR(Nte0186, "this must be associated to a [[%s]]");
    SWAG_ERROR(Nte0187, "this parameter is missing its type");
    SWAG_ERROR(Nte0188, "this previous parameter has a default value");
    SWAG_ERROR(Nte0189, "this should be lower than this");
    SWAG_ERROR(Nte0190, "this slice appears to be null or empty");
    SWAG_ERROR(Nte0191, "this string appears to be null or empty");
    SWAG_ERROR(Nte0192, "this suffix forces the literal to be converted to [[%s]]");
    SWAG_ERROR(Nte0193, "this tuple has [[%d]] fields");
    SWAG_ERROR(Nte0194, "this type is [[%s]]");
    SWAG_ERROR(Nte0195, "this value can only be converted to the type [[%s]] with a dynamic call to [[opAffect]]");
    SWAG_ERROR(Nte0196, "to start a new block, consider moving the [[{]] to a new line");
    SWAG_ERROR(Nte0197, "to declare a global variable, syntax would be [[var %s: %s]]");
    SWAG_ERROR(Nte0198, "to declare a variable, the syntax is [[var name: type]] or [[var name = expression]]");
    SWAG_ERROR(Nte0199, "to dereference variable [[%s]] as in C, employ [[dref %s]]");
    SWAG_ERROR(Nte0200, "to initialize the struct [[%s]], remove the blanks between [[%s]] and the [[{]]");
    SWAG_ERROR(Nte0201, "to retrieve the program arguments, consider using the [[@args()]] intrinsic");
    SWAG_ERROR(Nte0202, "trying to match the type of the other part of the conditional expression");
    SWAG_ERROR(Nte0203, "unable to resolve %s [[%s]]");
    SWAG_ERROR(Nte0204, "unable to resolve type [[%s]]");
    SWAG_ERROR(Nte0205, "unexpected scope");
    SWAG_ERROR(Nte0206, "unnamed parameters ([[?]]) should not have an explicitly specified type");
    SWAG_ERROR(Nte0207, "use [[#type]] before [[%s]] if it is a type, or specify a type with [[:]] if this is a parameter name");
    SWAG_ERROR(Nte0208, "use [[-w:<path>]] or [[--workspace:<path>]] to specify a valid workspace folder or run [[Swag]] from an appropriate workspace");
    SWAG_ERROR(Nte0209, "use [[{}]] for an intentional empty statement");
    SWAG_ERROR(Nte0210, "you can convert a lambda to a closure type, but not vice versa");
    SWAG_ERROR(Nte0211, "you can execute [[Swag]] with [[--callstack]] to obtain more contextual details");
    SWAG_ERROR(Nte0212, "you can execute [[Swag]] with [[--dbg-catch]] to initiate the bytecode debugger when an exception is raised");
    SWAG_ERROR(Nte0213, "you can't reference this runtime %s from the compile-time %s");
    SWAG_ERROR(Nte0214, "you might want to get the address of [[%s]] using [[&]]");
    SWAG_ERROR(Nte0215, "you need to take the address of a value to make a reference");
    SWAG_ERROR(Nte0216, "there are multiple [[using]] fields of type [[%s]] in [[%s]], so don't know which one to take");
    SWAG_ERROR(Nte0217, "you should consider using the full name of the enum value");
    SWAG_ERROR(Nte0218, nullptr);
    SWAG_ERROR(Nte0219, nullptr);
    SWAG_ERROR(Nte0220, nullptr);
}

Utf8 formErr(ErrorID idx, ...)
{
    va_list args;
    va_start(args, idx);
    auto result = form("[%s] %s", g_ErrList[idx], g_E[idx].c_str());
    result      = form(result.c_str(), args);
    va_end(args);
    return result;
}

Utf8 formNte(ErrorID idx, ...)
{
    va_list args;
    va_start(args, idx);
    auto result = g_E[idx];
    result      = form(result.c_str(), args);
    va_end(args);
    return result;
}

Utf8 toErr(ErrorID idx)
{
    return form("[%s] %s", g_ErrList[idx], g_E[idx].c_str());
}

Utf8 toNte(ErrorID idx)
{
    return g_E[idx];
}
