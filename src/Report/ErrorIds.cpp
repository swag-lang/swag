#include "pch.h"
#include "Report/ErrorIds.h"

namespace
{
#undef SWAG_ERROR
#define SWAG_ERROR(__enum) #__enum
    const char* g_ErrList[] = {
#include "ErrorList.h"

    };
}

Utf8 g_E[MaxErrors];
#undef SWAG_ERROR
#define SWAG_ERROR(__n, __msg)                 \
    do                                         \
    {                                          \
        SWAG_ASSERT(g_E[(int) (__n)].empty()); \
        g_E[(int) (__n)] = __msg;              \
    } while (0)

void initErrors()
{
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Fat0001, "[cmdline] [[%s]] needs [[true]] or [[false]], got [[%s]]");
    SWAG_ERROR(Fat0002, "[cmdline] [[%s]] needs string argument");
    SWAG_ERROR(Fat0003, "[cmdline] [[%s]] needs integer argument, got [[%s]]");
    SWAG_ERROR(Fat0004, "[cmdline] [[%s]] needs integer argument");
    SWAG_ERROR(Fat0005, "[cmdline] [[%s]] requires [[%s]]");
    SWAG_ERROR(Fat0006, "[cmdline] [[--stack-size]] out of range (%s provided, range [%s, %s])");
    SWAG_ERROR(Fat0007, "[cmdline] unknown argument [[%s]]");
    SWAG_ERROR(Fat0008, "[cmdline] [[--arch]] [[%s]] unsupported for SCBE backend");
    SWAG_ERROR(Fat0009, "[cmdline] [[--os]] [[%s]] unsupported for SCBE backend");
    SWAG_ERROR(Fat0010, "[fatal] cache directory [[%s]] not found");
    SWAG_ERROR(Fat0011, "[fatal] dependency module [[%s]] not found in workspace");
    SWAG_ERROR(Fat0012, "[fatal] duplicate module name [[%s]] in workspace (path [[%s]])");
    SWAG_ERROR(Fat0013, "[fatal] workspace folder [[--workspace]] required");
    SWAG_ERROR(Fat0014, "[fatal] compiler bootstrap issues");
    SWAG_ERROR(Fat0015, "[fatal] compiler runtime issues");
    SWAG_ERROR(Fat0016, "[fatal] cache directory [[%s]] creation failed");
    SWAG_ERROR(Fat0017, "[fatal] directory [[%s]] creation failed");
    SWAG_ERROR(Fat0018, "[fatal] file [[%s]] creation failed");
    SWAG_ERROR(Fat0019, "[fatal] public directory [[%s]] creation failed");
    SWAG_ERROR(Fat0020, "[fatal] script file [[%s]] creation failed");
    SWAG_ERROR(Fat0021, "[fatal] target directory [[%s]] creation failed");
    SWAG_ERROR(Fat0022, "[fatal] directory [[%s]] deletion failed");
    SWAG_ERROR(Fat0023, "[fatal] file [[%s]] deletion failed");
    SWAG_ERROR(Fat0024, "[fatal] [[--tag:%s]] value invalid (%s)");
    SWAG_ERROR(Fat0025, "[fatal] script file extension must be [[.swgs]], got [[%s]]");
    SWAG_ERROR(Fat0026, "[fatal] [[Swag]] command [[%s]] invalid");
    SWAG_ERROR(Fat0027, "[fatal] workspace [[%s]] invalid: missing [[modules/]] or [[tests/]]");
    SWAG_ERROR(Fat0028, "[fatal] module [[%s]] already exists in [[/modules]]");
    SWAG_ERROR(Fat0029, "[fatal] module [[%s]] not found in workspace");
    SWAG_ERROR(Fat0030, "[fatal] file [[%s]] not found");
    SWAG_ERROR(Fat0031, "[fatal] script file missing (use [[--file:<filename>.swgs]])");
    SWAG_ERROR(Fat0032, "[fatal] compile tag value [[%s]] unexpected (use [[--tag:%s]])");
    SWAG_ERROR(Fat0033, "[fatal] compile tag type [[%s]] unknown (use [[--tag:%s]])");
    SWAG_ERROR(Fat0034, "[fatal] workspace folder [[%s]] already exists");
    SWAG_ERROR(Fat0035, "[fatal] workspace folder [[%s]] not found");
    SWAG_ERROR(Fat0036, "[fatal] windows sdk folder not found");
    SWAG_ERROR(Fat0037, "[fatal] file or folder to format missing (use [[--file]])");
    SWAG_ERROR(Fat0038, "[fatal] [[%s]] is not valid swag file");

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Saf0001, "[safety] invalid cast from any $ invalid cast from [[any]] to [[%s]] $ [[#[Swag.Safety(\"dyncast\")]]] is true");
    SWAG_ERROR(Saf0002, "[safety] null cast attempt $ null value cannot cast to [[%s]] $ [[#[Swag.Safety(\"dyncast\")]]] is true");

    SWAG_ERROR(Saf0003, "[safety] invalid boolean value $ invalid boolean value used $ [[#[Swag.Safety(\"bool\")]]] is true");

    SWAG_ERROR(Saf0004, "[safety] index out of bounds $ index access outside bounds $ [[#[Swag.Safety(\"boundcheck\")]]] is true");
    SWAG_ERROR(Saf0005, "[safety] invalid range bounds $ lower bound exceeds upper bound $ [[#[Swag.Safety(\"boundcheck\")]]] is true");
    SWAG_ERROR(Saf0006, "[safety] slice bounds error $ lower bound exceeds upper bound $ [[#[Swag.Safety(\"boundcheck\")]]] is true");
    SWAG_ERROR(Saf0007, "[safety] slice out of bounds $ upper bound exceeds array bounds $ [[#[Swag.Safety(\"boundcheck\")]]] is true");

    SWAG_ERROR(Saf0008, "[safety] arithmetic overflow $ [[@abs]] overflow (type [[%s]]) $ [[#[Swag.Safety(\"math\")]]] is true");
    SWAG_ERROR(Saf0009, "[safety] invalid argument $ [[@acos]] invalid argument (type [[%s]]) $ [[#[Swag.Safety(\"math\")]]] is true");
    SWAG_ERROR(Saf0010, "[safety] invalid argument $ [[@asin]] invalid argument (type [[%s]]) $ [[#[Swag.Safety(\"math\")]]] is true");
    SWAG_ERROR(Saf0011, "[safety] invalid argument $ [[@log]] invalid argument (type [[%s]]) $ [[#[Swag.Safety(\"math\")]]] is true");
    SWAG_ERROR(Saf0012, "[safety] invalid argument $ [[@log10]] invalid argument (type [[%s]]) $ [[#[Swag.Safety(\"math\")]]] is true");
    SWAG_ERROR(Saf0013, "[safety] invalid argument $ [[@log2]] invalid argument (type [[%s]]) $ [[#[Swag.Safety(\"math\")]]] is true");
    SWAG_ERROR(Saf0014, "[safety] invalid argument $ [[@sqrt]] invalid argument (type [[%s]]) $ [[#[Swag.Safety(\"math\")]]] is true");
    SWAG_ERROR(Saf0015, "[safety] invalid argument $ [[@pow]] invalid argument (type [[%s]]) $ [[#[Swag.Safety(\"math\")]]] is true");
    SWAG_ERROR(Saf0016, "[safety] division by zero $ division by zero $ [[#[Swag.Safety(\"math\")]]] is true");

    SWAG_ERROR(Saf0017, "[safety] nan value used $ NaN (Not a Number) value used $ [[#[Swag.Safety(\"nan\")]]] is true");

    SWAG_ERROR(Saf0018, "[safety] null pointer dereference $ null pointer dereferenced $ [[#[Swag.Safety(\"null\")]]] is true");
    SWAG_ERROR(Saf0019, "[safety] null error thrown $ non-existent error thrown $ [[#[Swag.Safety(\"null\")]]] is true");

    SWAG_ERROR(Saf0020, "[safety] negative to unsigned cast $ negative value [[%I64d]] cannot cast to unsigned [[%s]] $ [[#[Swag.Safety(\"overflow\")]]] is true");
    SWAG_ERROR(Saf0021, "[safety] negative to unsigned cast $ negative type [[%s]] cannot cast to unsigned [[%s]] $ [[#[Swag.Safety(\"overflow\")]]] is true");
    SWAG_ERROR(Saf0022, "[safety] negative to unsigned cast $ negative value [[%g]] cannot cast to unsigned [[%s]] $ [[#[Swag.Safety(\"overflow\")]]] is true");
    SWAG_ERROR(Saf0023, "[safety] value exceeds type limits $ value [[%s]] ([[%I64u]]) exceeds [[%s]] limits $ [[#[Swag.Safety(\"overflow\")]]] is true");
    SWAG_ERROR(Saf0024, "[safety] value exceeds type limits $ value [[%I64u]] exceeds [[%s]] limits $ [[#[Swag.Safety(\"overflow\")]]] is true");
    SWAG_ERROR(Saf0025, "[safety] value exceeds type limits $ value [[%I64d]] exceeds [[%s]] limits $ [[#[Swag.Safety(\"overflow\")]]] is true");
    SWAG_ERROR(Saf0026, "[safety] value exceeds type limits $ value [[%g]] exceeds [[%s]] limits $ [[#[Swag.Safety(\"overflow\")]]] is true");
    SWAG_ERROR(Saf0027, "[safety] arithmetic overflow $ operation [['%s']] overflow (type [[%s]]) $ [[#[Swag.Safety(\"overflow\")]]] is true");
    SWAG_ERROR(Saf0028, "[safety] truncation not allowed $ truncation from [[%s]] to [[%s]] not allowed $ [[#[Swag.Safety(\"overflow\")]]] is true");

    SWAG_ERROR(Saf0029, "[safety] unhandled switch value $ unexpected switch value $ [[#[Swag.Safety(\"switch\")]]] is true");

    SWAG_ERROR(Saf0030, nullptr);
    SWAG_ERROR(Saf0031, nullptr);
    SWAG_ERROR(Saf0032, nullptr);
    SWAG_ERROR(Saf0033, nullptr);
    SWAG_ERROR(Saf0034, nullptr);
    SWAG_ERROR(Saf0035, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(San0002, "[sanity] division by zero    $ potential division by zero");
    SWAG_ERROR(San0004, "[sanity] frame escape        $ potential return of stack memory");
    SWAG_ERROR(San0006, "[sanity] null dereference    $ potential null pointer dereference");
    SWAG_ERROR(San0007, "[sanity] stack overwrite     $ potential stack overwrite at offset [[%lld]] (stack size [[%lld]])");
    SWAG_ERROR(San0008, "[sanity] uninitialized usage $ potential use of uninitialized memory");
    SWAG_ERROR(San0010, "[sanity] overflow            $ potential overflow in [['%s']] (type [[%s]])");
    SWAG_ERROR(San0001, "[sanity] null argument       $ potential null argument to [[%s]]");
    SWAG_ERROR(San0003, "[sanity] null return value   $ potential null return");

    SWAG_ERROR(San0005, nullptr);
    SWAG_ERROR(San0009, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Wrn0001, "%s");
    SWAG_ERROR(Wrn0002, "deprecated usage                $ %s [[%s]] is deprecated ([[#[Swag.Deprecated]]])             $ ");
    SWAG_ERROR(Wrn0003, "unchanged local variable        $ variable [[%s]] never modified after declaration             $ declare with [[let]] instead of [[var]] for immutability");
    SWAG_ERROR(Wrn0004, "unchanged local variable        $ variable [[%s]] declared to default value, never modified    $ is this variable necessary?");
    SWAG_ERROR(Wrn0005, "unreachable code                $ code is unreachable                                          $ ");
    SWAG_ERROR(Wrn0006, "unused %s                       $ %s [[%s]] is unused                                          $ ");
    SWAG_ERROR(Wrn0007, "unnecessary [[break]]           $ [[break]] is unnecessary                                     $ [[break]] only required in empty [[case]] blocks");
    SWAG_ERROR(Wrn0008, "suggestion [[elif]]             $ [[if]] after [[else]] can be simplified                      $ use [[elif]] instead of [[else: if]]");
    SWAG_ERROR(Wrn0009, "suggestion [[#elif]]            $ [[#if]] after [[#else]] can be simplified                    $ use [[#elif]] instead of [[#else: #if]]");
    SWAG_ERROR(Wrn0010, "suggestion [[where]]            $ [[if]] can be simplified with [[where]]                      $ ");
    
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Err0001, "%s");
    SWAG_ERROR(Err0002, "%s");
    SWAG_ERROR(Err0003, "%s");
    SWAG_ERROR(Err0004, "%s already defined                                $ %s [[%s]] already exists %s                                       $ ");
    SWAG_ERROR(Err0005, "multiple [[#global export]]                       $ only one [[#global export]] allowed per file                      $ ");
    SWAG_ERROR(Err0006, "multiple [[#main]]                                $ only one [[#main]] function allowed per module                    $ ");
    SWAG_ERROR(Err0007, "multiple [[default]]                              $ only one [[default]] statement allowed per [[switch]]             $ ");
    SWAG_ERROR(Err0008, "conflicting access specifier                      $ [[%s]] cannot follow [[%s]]                                       $ ");
    SWAG_ERROR(Err0009, "enum already defined                              $ enum [[%s]] already exists                                        $ ");
    SWAG_ERROR(Err0010, "enum value already defined                        $ enum value [[%s]] already exists with same underlying value       $ ");
    SWAG_ERROR(Err0011, "field name already defined                        $ field [[%s]] already exists                                       $ ");
    SWAG_ERROR(Err0012, "generic symbol already defined                    $ generic symbol [[%s]] already exists                              $ ");
    SWAG_ERROR(Err0013, "duplicate [[switch]] value                        $ value [[%d]] already used                                         $ ");
    SWAG_ERROR(Err0014, "duplicate [[switch]] value                        $ value [[%f]] already used                                         $ ");
    SWAG_ERROR(Err0015, "duplicate [[switch]] value                        $ value [[%s]] already used                                         $ ");
    SWAG_ERROR(Err0016, "duplicate [[switch]] value                        $ value [[\"%s\"]] already used in another [[case]]                 $ ");
    SWAG_ERROR(Err0017, "duplicate [[switch]] value                        $ value [[null]] already used                                       $ ");
    SWAG_ERROR(Err0018, "symbol already defined                            $ %s [[%s]] already exists                                          $ ");
    SWAG_ERROR(Err0019, "ambiguous [[using]]                               $ [[using]] on two variables of same type ([[%s]])                  $ ");
    SWAG_ERROR(Err0020, "ambiguous cast                                    $ cast from [[%s]] to [[%s]] is ambiguous                           $ ");
    SWAG_ERROR(Err0021, "ambiguous enum value                              $ enum value [[%s]] is ambiguous                                    $ ");
    SWAG_ERROR(Err0022, "ambiguous interface cast                          $ cast from [[%s]] to interface [[%s]] is ambiguous                 $ ");
    SWAG_ERROR(Err0023, "ambiguous symbol                                  $ [[%s]] is ambiguous                                               $ ");
    SWAG_ERROR(Err0024, "ambiguous symbol                                  $ %s [[%s]] is ambiguous                                            $ ");
    SWAG_ERROR(Err0025, "ambiguous generic                                 $ generic %s [[%s]] is ambiguous                                    $ ");
    SWAG_ERROR(Err0026, "ambiguous lambda syntax                           $ ambiguous declaration in lambda parameters                        $ ");
    SWAG_ERROR(Err0027, "bytecode stack overflow                           $ stack size exceeds [[%s]] limit set by [[--stack-size]]           $ ");
    SWAG_ERROR(Err0028, "capture size overflow                             $ capture size [[%u]] bytes exceeds maximum [[%u]] bytes            $ ");
    SWAG_ERROR(Err0029, "[[#assert]] failed                                $ [[#assert]] expression evaluated to false                         $ ");
    SWAG_ERROR(Err0030, "compile-time evaluation failed                    $ cannot convert function return slice (type [[%s]]) to compile-time value                                $ ");
    SWAG_ERROR(Err0031, "compile-time evaluation failed                    $ cannot convert function return value (type [[%s]]) to constant array: [[opCount]] returns [[0]]         $ ");
    SWAG_ERROR(Err0032, "compile-time evaluation failed                    $ cannot convert function return value (type [[%s]]) to constant array: [[opSlice]] returns empty slice   $ ");
    SWAG_ERROR(Err0033, "compile-time value required                       $ type [[%s]] is not a constant expression                                   $ ");
    SWAG_ERROR(Err0034, "compile-time value required                       $ [[#include]] filename must be compile-time constant                        $ ");
    SWAG_ERROR(Err0035, "compile-time value required                       $ [[%s]] argument must be compile-time constant                              $ ");
    SWAG_ERROR(Err0036, "compile-time value required                       $ [[%s]] message must be compile-time constant                               $ ");
    SWAG_ERROR(Err0037, "compile-time value required                       $ [[case]] expression must be compile-time constant                          $ [[switch]] marked [[#[Swag.Complete]]] requires constant case values");
    SWAG_ERROR(Err0038, "compile-time value required                       $ array dimension must be compile-time constant                              $ ");
    SWAG_ERROR(Err0039, "compile-time value required                       $ attribute parameter must be compile-time constant                          $ ");
    SWAG_ERROR(Err0040, "compile-time value required                       $ expression must be compile-time constant                                   $ ");
    SWAG_ERROR(Err0041, "compile-time value required                       $ parameter [[%s]] of type [[%s]] must be compile-time constant              $ ");
    SWAG_ERROR(Err0042, "compile-time value required                       $ initialization must be compile-time constant                               $ ");
    SWAG_ERROR(Err0043, "compile-time value required                       $ initialization must be compile-time constant                               $ mark [[opAffect]] with [[#[Swag.ConstExpr]]] to enable this");
    SWAG_ERROR(Err0044, "compile-time value required                       $ operation on [[%s]] must be compile-time constant                          $ mark struct [[#[Swag.ConstExpr]]] to enable this");
    SWAG_ERROR(Err0045, "conflicting attributes                            $ [[#[Swag.Compiler]]] and [[#[Swag.Tls]]] are mutually exclusive            $ ");
    SWAG_ERROR(Err0046, "conflicting attributes                            $ [[#[Swag.Inline]]] and [[#[Swag.NoInline]]] are mutually exclusive         $ ");
    SWAG_ERROR(Err0047, "conflicting attributes                            $ [[#[Swag.Macro]]] and [[#[Swag.Inline]]] are mutually exclusive            $ ");
    SWAG_ERROR(Err0048, "conflicting attributes                            $ [[#[Swag.Macro]]] and [[#[Swag.Mixin]]] are mutually exclusive             $ ");
    SWAG_ERROR(Err0049, "conflicting attributes                            $ [[#[Swag.Macro]]] and [[#[Swag.NoInline]]] are mutually exclusive          $ ");
    SWAG_ERROR(Err0050, "conflicting attributes                            $ [[#[Swag.Mixin]]] and [[#[Swag.Inline]]] are mutually exclusive            $ ");
    SWAG_ERROR(Err0051, "conflicting attributes                            $ [[#[Swag.Mixin]]] and [[#[Swag.NoInline]]] are mutually exclusive          $ ");
    SWAG_ERROR(Err0052, "conflicting modifiers                             $ [[%s]] and [[%s]] are mutually exclusive                                   $ ");
    SWAG_ERROR(Err0053, "division by zero                                  $ divider evaluates to 0                                                     $ ");
    SWAG_ERROR(Err0054, "division overflow                                 $ result doesn't fit in [[%s]]                                               $ ");
    SWAG_ERROR(Err0055, "duplicate attribute                               $ [[%s]] assigned twice; [[Swag.AttrMulti]] not present                      $ ");
    SWAG_ERROR(Err0056, "duplicate initialization                          $ struct initialized with both type syntax and assignment                    $ ");
    SWAG_ERROR(Err0057, "duplicate instruction modifier                    $ multiple [[%s]] modifiers                                                  $ ");
    SWAG_ERROR(Err0058, "duplicate named argument                          $ multiple [[%s]] arguments                                                  $ ");
    SWAG_ERROR(Err0059, "duplicate operator                                $ operator [['%s']] used twice                                               $ expected expression");
    SWAG_ERROR(Err0061, "empty [[case]]                                    $ [[case]] statement is empty                                                $ ");
    SWAG_ERROR(Err0062, "empty [[default]]                                 $ [[default]] statement is empty                                             $ ");
    SWAG_ERROR(Err0063, "empty [[switch]]                                  $ [[switch]] has no body                                                     $ add cases or remove it");
    SWAG_ERROR(Err0064, "empty array literal                               $ array literal needs at least one value                                     $ ");
    SWAG_ERROR(Err0065, "empty attribute                                   $ attribute needs at least one value                                         $ add attribute name");
    SWAG_ERROR(Err0066, "empty binary literal                              $ binary literal needs at least one [[0]] or [[1]]                           $ ");
    SWAG_ERROR(Err0067, "empty expression                                  $ expression [[()]] is empty                                                 $ ");
    SWAG_ERROR(Err0068, "empty float exponent                              $ float exponent is empty                                                    $ ");
    SWAG_ERROR(Err0069, "empty hexadecimal literal                         $ hexadecimal literal needs at least one digit ([[0-9]], [[A-F]], [[a-f]])   $ ");
    SWAG_ERROR(Err0070, "empty statement                                   $ [[;]] alone is not allowed for empty statement                             $ use [[{}]] instead");
    SWAG_ERROR(Err0071, "error escapes [[defer]]                           $ error escapes [[defer]] or [[defer<err>]] block                            $ ");
    SWAG_ERROR(Err0072, "stack frame mismatch                              $ %s [[%s]] is in different stack frame                                      $ ");
    SWAG_ERROR(Err0073, "expected [[%s]]                                   $ expected [[%s]] %s, got $$TKN$$                                            $ ");
    SWAG_ERROR(Err0074, "expected [[;]] or body                            $ interface member [[%s]] needs [[;]] or default implementation              $ ");
    SWAG_ERROR(Err0075, "expected function body                            $ expected [[{]] to start function body, got $$TKN$$                         $ ");
    SWAG_ERROR(Err0076, "expected function body                            $ expected [[{]] to start %s body, got [[;]]                                 $ ");
    SWAG_ERROR(Err0077, "expected replacement block                        $ expected [[{]] to start [[#inject]] block, got $$TKN$$                     $ ");
    SWAG_ERROR(Err0078, "[[%s]] constraint failed                          $ %s [[%s]] fails [[%s]] constraint                                          $ ");
    SWAG_ERROR(Err0080, "invalid generic instantiation                     $ partial type alias ([[%s]]) cannot instantiate generic struct              $ ");
    SWAG_ERROR(Err0081, "missing generic arguments                         $ generic function [[%s]] needs generic arguments                            $ ");
    SWAG_ERROR(Err0082, "missing generic arguments                         $ generic struct [[%s]] needs generic arguments                              $ ");
    SWAG_ERROR(Err0083, "[[@postcopy]] forbidden                           $ [[@postcopy]] on [[%s]] forbidden by [[#[Swag.NoCopy]]]                    $ ");
    SWAG_ERROR(Err0084, "[[opDrop]] forbidden                              $ [[opDrop]] for [[%s]] forbidden by [[#[Swag.ConstExpr]]]                   $ ");
    SWAG_ERROR(Err0085, "[[opPostCopy]] forbidden                          $ [[opPostCopy]] for [[%s]] forbidden by [[#[Swag.NoCopy]]]                  $ ");
    SWAG_ERROR(Err0086, "[[compileString]] unavailable                     $ [[compileString]] not accessible in this context                           $ meta-programming not allowed in this compiler stage");
    SWAG_ERROR(Err0087, "direct [[opDrop]] call forbidden                  $ direct call to [[opDrop]] not allowed                                      $ use [[@drop]] instead");
    SWAG_ERROR(Err0088, "direct [[opPostCopy]] call forbidden              $ direct call to [[opPostCopy]] not allowed                                  $ use [[@postcopy]] instead");
    SWAG_ERROR(Err0089, "direct [[opPostMove]] call forbidden              $ direct call to [[opPostMove]] not allowed                                  $ use [[@postmove]] instead");
    SWAG_ERROR(Err0090, "copy forbidden                                    $ [[%s]] marked [[#[Swag.NoCopy]]]                                           $ ");
    SWAG_ERROR(Err0091, "immutable assignment                              $ [[%s]] is immutable                                                        $ ");
    SWAG_ERROR(Err0092, "immutable assignment                              $ global [[%s]] is zero-initialized and immutable at compile-time            $ ");
    SWAG_ERROR(Err0093, "immutable assignment                              $ left expression is immutable                                               $ ");
    SWAG_ERROR(Err0094, "incomplete [[case]] list                          $ expected [[,]] for another case or [[:]] to close, got $$TKN$$             $ ");
    SWAG_ERROR(Err0095, "incomplete [[case]] list                          $ expected expression after [[,]] before $$TKN$$                             $ add case expression or remove trailing [[,]]");
    SWAG_ERROR(Err0096, "incomplete alias list                             $ expected [[,]] for another alias or [['|']] to close, got $$TKN$$          $ ");
    SWAG_ERROR(Err0097, "incomplete alias list                             $ expected alias name after [[,]] before $$TKN$$                             $ add alias name or remove trailing [[,]]");
    SWAG_ERROR(Err0098, "incomplete arguments list                         $ expected [[,]] for another argument or [[')']] to close, got $$TKN$$       $ ");
    SWAG_ERROR(Err0099, "incomplete arguments list                         $ expected argument after [[,]] before $$TKN$$                               $ add argument or remove trailing [[,]]");
    SWAG_ERROR(Err0100, "incomplete array dimensions                       $ expected [[,]] for another dimension or [[']']] to close, got $$TKN$$      $ add dimension or close with [[']']]");
    SWAG_ERROR(Err0101, "incomplete array dimensions                       $ expected dimension after [[,]] before $$TKN$$                              $ add dimension or remove trailing [[,]]");
    SWAG_ERROR(Err0102, "incomplete attribute arguments                    $ expected [[,]] for another argument or [[')']] to close, got $$TKN$$       $ ");
    SWAG_ERROR(Err0103, "incomplete attribute arguments                    $ expected argument after [[,]] before $$TKN$$                               $ add argument or remove trailing [[,]]");
    SWAG_ERROR(Err0104, "incomplete attribute list                         $ expected [[,]] for another attribute or [[']']] to close, got $$TKN$$      $ ");
    SWAG_ERROR(Err0105, "incomplete attribute list                         $ expected attribute after [[,]] before $$TKN$$                              $ add attribute or remove trailing [[,]]");
    SWAG_ERROR(Err0106, "incomplete generic arguments                      $ expected [[,]] for another argument or [[')']] to close, got $$TKN$$       $ ");
    SWAG_ERROR(Err0107, "incomplete generic arguments                      $ expected argument after [[,]] before $$TKN$$                               $ add generic argument or remove trailing [[,]]");
    SWAG_ERROR(Err0108, "incomplete index list                             $ expected [[,]] for another index or [[')']] to close, got $$TKN$$          $ ");
    SWAG_ERROR(Err0109, "incomplete index list                             $ expected index after [[,]] before $$TKN$$                                  $ add index or remove trailing [[,]]");
    SWAG_ERROR(Err0110, "incomplete initialization list                    $ expected [[,]] for another value or [[']']] to close, got $$TKN$$          $ ");
    SWAG_ERROR(Err0111, "incomplete initialization list                    $ expected [[,]] for another value or [['}']] to close, got $$TKN$$          $ ");
    SWAG_ERROR(Err0112, "incomplete parameters list                        $ expected [[,]] for another parameter or [[')']] to close, got $$TKN$$      $ ");
    SWAG_ERROR(Err0113, "incomplete parameters list                        $ expected parameter after [[,]] before $$TKN$$                              $ add parameter or remove trailing [[,]]");
    SWAG_ERROR(Err0114, "incomplete tuple unpacking                        $ expected [[,]] for another variable or [[')']] to close, got $$TKN$$       $ ");
    SWAG_ERROR(Err0115, "incomplete tuple unpacking                        $ expected variable name after [[,]] before $$TKN$$                          $ add variable or remove trailing [[,]]");
    SWAG_ERROR(Err0116, "incomplete variables list                         $ expected variable name after [[,]] before $$TKN$$                          $ add variable or remove trailing [[,]]");
    SWAG_ERROR(Err0117, "infinite [[while]]                                $ [[while]] condition always [[true]]                                        $ use [[for { ... }]] for intentional infinite loop");
    SWAG_ERROR(Err0118, "invalid [[#alias]] number                         $ [[%s]] is not a valid [[#alias]] variable name                             $ use [[#alias0]], [[#alias1]], etc.");
    SWAG_ERROR(Err0119, "invalid [[#alignof]]                              $ [[#alignof]] on generic expression not allowed                             $ ");
    SWAG_ERROR(Err0120, "invalid [[#inject]] keyword                       $ expected [[#inject]] replacement keyword, got $$TKN$$                      $ [[#inject]] only accepts [[break]] and [[continue]]");
    SWAG_ERROR(Err0121, "invalid [[#uniq]] number                          $ [[%s]] is not a valid [[#uniq]] variable name                              $ use [[#uniq0]], [[#uniq1]], etc.");
    SWAG_ERROR(Err0122, "invalid [[#sizeof]]                               $ [[#sizeof]] on generic expression not allowed                              $ ");
    SWAG_ERROR(Err0123, "invalid [[#up]] count                             $ [[#up]] count cannot be zero                                               $ ");
    SWAG_ERROR(Err0124, "invalid [[#up]] count                             $ [[#up]] count must be untyped integer, got [[%s]]                          $ ");
    SWAG_ERROR(Err0125, "invalid [[#up]] scope depth                       $ cannot move [[%d]] scopes up                                               $ ");
    SWAG_ERROR(Err0126, "invalid [[@cvaarg]] type                          $ variadic argument type [[%s]] not allowed                                  $ promoted to [[%s]] at call site");
    SWAG_ERROR(Err0127, "invalid [[code]] append                           $ next block statement cannot be [[code]] argument                           $ %s [[%s]] expects following statement as [[code]] argument, not allowed in [[%s]]");
    SWAG_ERROR(Err0128, "invalid [[discard]]                               $ [[discard]] on function returning nothing                                  $ ");
    SWAG_ERROR(Err0129, "invalid [[expect]] expression                     $ expected function parameter name                                           $ ");
    SWAG_ERROR(Err0130, "invalid [[expect]] expression                     $ expression incompatible with [[expect]]                                    $ only [[param != null]] supported");
    SWAG_ERROR(Err0131, "invalid [[foreach]] mode                          $ variadic type cannot be visited by pointer                                 $ ");
    SWAG_ERROR(Err0132, "invalid [[foreach]] mode                          $ enum cannot be visited by pointer                                          $ ");
    SWAG_ERROR(Err0133, "invalid [[foreach]] target                        $ pointer type [[%s]] cannot be visited                                      $ ");
    SWAG_ERROR(Err0134, "invalid [[foreach]] name                          $ expected [[visit]] specialization name, got $$TKN$$                        $ ");
    SWAG_ERROR(Err0135, "invalid [[foreach]] type                          $ tuple cannot be visited                                                    $ ");
    SWAG_ERROR(Err0136, "invalid [[foreach]] type                          $ type [[%s]] cannot be visited                                              $ ");
    SWAG_ERROR(Err0137, "invalid [[impl]]                                  $ expected struct name after [[for]], got %s [[%s]]                          $ ");
    SWAG_ERROR(Err0138, "invalid [[impl]]                                  $ expected struct or enum after [[impl]], [[%s]] is [[%s]]                   $ ");
    SWAG_ERROR(Err0139, "invalid [[impl]]                                  $ expected interface after [[impl]], got %s [[%s]]                           $ ");
    SWAG_ERROR(Err0140, "invalid [[opVisit]] name                          $ [[%s]] is not valid [[opVisit]] variant                                    $ must be valid identifier");
    SWAG_ERROR(Err0141, "invalid [[with]] reference                        $ [[.]] needs identifier, got $$TKN$$                                        $ ");
    SWAG_ERROR(Err0142, "compile-time/runtime mismatch                     $ compile-time %s [[%s]] accessed from runtime %s                            $ ");
    SWAG_ERROR(Err0143, "compile-time/runtime mismatch                     $ compile-time %s accessed from runtime %s                                   $ ");
    SWAG_ERROR(Err0144, "invalid address                                   $ [[%s]] returns nothing, no address to take                                 $ ");
    SWAG_ERROR(Err0145, "invalid address                                   $ %s has no address                                                          $ not a variable");
    SWAG_ERROR(Err0146, "invalid address                                   $ string literal character has no address                                    $ string literals have no storage");
    SWAG_ERROR(Err0147, "invalid address                                   $ constant type [[%s]] has no address                                        $ this constant type has no storage");
    SWAG_ERROR(Err0148, "invalid address                                   $ parameter type [[%s]] has no address                                       $ this parameter type has no storage");
    SWAG_ERROR(Err0149, "invalid address                                   $ function returning [[%s]] has no address                                   $ ");
    SWAG_ERROR(Err0150, "invalid address                                   $ macro has no address                                                       $ ");
    SWAG_ERROR(Err0151, "invalid address                                   $ mixin has no address                                                       $ ");
    SWAG_ERROR(Err0152, "invalid address                                   $ [[let]] variable has no address                                            $ use [[var]] for mutability");
    SWAG_ERROR(Err0153, "invalid address                                   $ inline function has no address                                             $ ");
    SWAG_ERROR(Err0154, "invalid address                                   $ right expression has no address                                            $ ");
    SWAG_ERROR(Err0155, "invalid align value                               $ [[#[Swag.Align]]] needs power of two, got [[%d]]                           $ ");
    SWAG_ERROR(Err0156, "invalid argument                                  $ [[@mkany]] first argument cannot be [[null]]                               $ ");
    SWAG_ERROR(Err0157, "invalid argument                                  $ [[%s]] needs [[variable]] as first argument                                $ required if [[@init]] second argument not provided");
    SWAG_ERROR(Err0158, "invalid argument                                  $ [[#gettag]] last argument must be constant, got [[%s]]                     $ ");
    SWAG_ERROR(Err0159, "invalid argument                                  $ [[@countof]] needs positive value, got [[%I64d]]                           $ ");
    SWAG_ERROR(Err0160, "invalid argument                                  $ [[@countof]] needs positive value, got [[%d]]                              $ ");
    SWAG_ERROR(Err0161, "invalid array dimension                           $ array dimension cannot be 0                                                $ ");
    SWAG_ERROR(Err0162, "invalid assignment                                $ call returns no value                                                      $ ");
    SWAG_ERROR(Err0163, "invalid attribute                                 $ expected attribute, [[%s]] is %s                                           $ ");
    SWAG_ERROR(Err0164, "invalid bit-cast                                  $ bit-cast source type [[%s]] invalid                                        $ expected integer, rune, float, or pointer");
    SWAG_ERROR(Err0165, "invalid bit-cast                                  $ bit-cast from [[%s]] to larger [[%s]]                                      $ ");
    SWAG_ERROR(Err0166, "invalid bit-cast                                  $ bit-cast target type [[%s]] invalid                                        $ expected integer, rune, or float");
    SWAG_ERROR(Err0168, "invalid capture                                   $ [[%s]] is %s, cannot capture                                               $ capturing %s not allowed");
    SWAG_ERROR(Err0169, "invalid capture                                   $ [[%s]] is not plain old data                                               $ struct with [[opDrop]], [[opPostCopy]], or [[opPostMove]] cannot be captured");
    SWAG_ERROR(Err0170, "invalid character literal                         $ [['%s']] looks like string, not character                                  $ ");
    SWAG_ERROR(Err0171, "invalid character literal                         $ character literal cannot convert to [[%s]]                                 $ ");
    SWAG_ERROR(Err0172, "invalid compound name                             $ expected single identifier %s                                              $ remove [['.']]");
    SWAG_ERROR(Err0173, "invalid const move reference                      $ [[const]] incompatible with move reference [[&&]]                          $ remove [[const]] or use [[&]]");
    SWAG_ERROR(Err0174, "missing constant name                             $ expected constant name after [[const]], got $$TKN$$                        $ ");
    SWAG_ERROR(Err0175, "invalid dereference                               $ [[%s]] has no [[opIndex]] in [[%s]]                                        $ ");
    SWAG_ERROR(Err0176, "invalid dereference                               $ [[%s]] is type [[%s]], cannot dereference as struct or pointer             $ ");
    SWAG_ERROR(Err0177, "invalid dereference                               $ constant address cannot be dereferenced at compile-time                    $ ");
    SWAG_ERROR(Err0178, "invalid dereference                               $ type [[%s]] cannot be dereferenced                                         $ ");
    SWAG_ERROR(Err0179, "invalid enum type                                 $ enum array type [[%s]] needs dimensions                                    $ ");
    SWAG_ERROR(Err0180, "invalid escape format                             $ [['\\x']] needs 2 hexadecimal digits                                       $ ");
    SWAG_ERROR(Err0181, "invalid escape format                             $ [['\\u']] needs 4 hexadecimal digits                                       $ ");
    SWAG_ERROR(Err0182, "invalid escape format                             $ [['\\U']] needs 8 hexadecimal digits                                       $ ");
    SWAG_ERROR(Err0183, "invalid expression                                $ [[%s]] is statement-only, not expression                                   $ ");
    SWAG_ERROR(Err0184, "invalid expression                                $ expected expression after [[%s]], got $$TKN$$                              $ ");
    SWAG_ERROR(Err0185, "invalid expression                                $ expected expression, got type                                              $ ");
    SWAG_ERROR(Err0186, "undefined function                                $ [[%s]] declared but not defined                                            $ ");
    SWAG_ERROR(Err0187, "invalid function call                             $ [[%s]] called with [[{}]], use [[()]]                                      $ ");
    SWAG_ERROR(Err0188, "invalid function call                             $ [[%s]] is type [[%s]], has no call arguments                               $ ");
    SWAG_ERROR(Err0189, "invalid function call                             $ [[%s]] is [[%s]], not a function                                           $ ");
    SWAG_ERROR(Err0190, "invalid function declaration                      $ expected [[func]] or [[mtd]] in interface, got $$TKN$$                     $ use [[func]] or [[mtd]] for interface functions");
    SWAG_ERROR(Err0191, "missing function name                             $ expected function name, got $$TKN$$                                                            $ ");
    SWAG_ERROR(Err0192, "invalid [[impl]] generation                       $ [[impl]] block generation only in [[#message]] with [[Swag.CompilerMsgMask.AttributeGen]]      $ ");
    SWAG_ERROR(Err0193, "generic value mismatch                            $ generic [[%s]] deduced as [[%s]], cannot be [[%s]]                                             $ ");
    SWAG_ERROR(Err0194, "invalid generic argument                          $ %s ([[%s]]) not allowed as generic argument                                                    $ must be literal or type");
    SWAG_ERROR(Err0195, "invalid generic parameter                         $ [[%s]] expects literal, got type [[%s]]                                                        $ ");
    SWAG_ERROR(Err0196, "missing generic parameter name                    $ expected identifier as generic name, got $$TKN$$                           $ ");
    SWAG_ERROR(Err0197, "invalid generic type                              $ specific type starting with [[:]] not allowed for generic                  $ ");
    SWAG_ERROR(Err0198, "missing identifier                                $ expected identifier %s, got $$TKN$$                                        $ ");
    SWAG_ERROR(Err0199, "missing identifier                                $ expected identifier after [[%s]], got $$TKN$$                              $ ");
    SWAG_ERROR(Err0200, "missing identifier                                $ expected identifier, got $$TKN$$                                           $ ");
    SWAG_ERROR(Err0201, "invalid initialization                            $ constant array type [[%s]] cannot be initialized with single value         $ only variables can be initialized this way");
    SWAG_ERROR(Err0202, "missing interface implementation                  $ [[%s]] to [[%s]] cast fails: missing implementation                        $ ");
    SWAG_ERROR(Err0203, "invalid interface function signature              $ expected [[me]] as first parameter, got [[%s]]                             $ use [[mtd]] instead of [[func]]");
    SWAG_ERROR(Err0204, "invalid interface function signature              $ interface function [[%s]] needs [[me]] as first parameter                  $ use [[mtd]] instead of [[func]]");
    SWAG_ERROR(Err0205, "invalid lambda call                               $ [[%s]] is %s, not a variable                                               $ ");
    SWAG_ERROR(Err0206, "invalid literal suffix                            $ [[%s]] is [[%s]], not valid literal suffix                                 $ must be a type");
    SWAG_ERROR(Err0207, "invalid literal suffix                            $ [[%s]] not valid for float literals                                        $ only [[f32]] and [[f64]] accepted");
    SWAG_ERROR(Err0208, "invalid literal suffix                            $ [[%s]] not valid as literal suffix                                         $ ");
    SWAG_ERROR(Err0209, "invalid literal conversion                        $ [[%s]] cannot initialize [[%s]]: no [[opAffectLiteral]]                    $ ");
    SWAG_ERROR(Err0210, "invalid logical operator                          $ expected [[%s]], got [[%s]]                                                $ ");
    SWAG_ERROR(Err0211, "empty module name                                 $ [[#[Swag.Foreign]]] module name is empty                                   $ ");
    SWAG_ERROR(Err0212, "invalid module name                               $ [[.]] not allowed in [[#[Swag.Foreign]]] module name                       $ module name cannot have extension");
    SWAG_ERROR(Err0213, "invalid [[move]]                                  $ [[move]] on immutable expression type [[%s]]                               $ ");
    SWAG_ERROR(Err0214, "invalid namespace body                            $ expected namespace body or instruction, got [[;]]                          $ ");
    SWAG_ERROR(Err0215, "missing namespace name                            $ expected namespace name, got $$TKN$$                                       $ ");
    SWAG_ERROR(Err0216, "invalid negation                                  $ type [[%s]] cannot be negated                                              $ ");
    SWAG_ERROR(Err0217, "invalid negation                                  $ unsigned type [[%s]] cannot be negated                                     $ ");
    SWAG_ERROR(Err0218, "null pointer dereference                          $ null pointer cannot be dereferenced                                        $ ");
    SWAG_ERROR(Err0219, "invalid nullable type                             $ type [[%s]] cannot be nullable                                             $ ");
    SWAG_ERROR(Err0220, "invalid opaque struct                             $ [[#[Swag.Opaque]]] incompatible with [[#global export]]                    $ ");
    SWAG_ERROR(Err0221, "invalid opaque struct                             $ [[#[Swag.Opaque]]] needs [[public]] access                                 $ ");
    SWAG_ERROR(Err0222, "invalid operation                                 $ operation [['%s']] on [[null]]                                             $ ");
    SWAG_ERROR(Err0223, "invalid packing value                             $ [[#[Swag.Pack]]] needs 0 or power of two, got [[%d]]                       $ ");
    SWAG_ERROR(Err0224, "invalid pointer arithmetic                        $ [[%s]] by index fails: pointer arithmetic not allowed on [[%s]]            $ ");
    SWAG_ERROR(Err0225, "invalid pointer arithmetic                        $ pointer arithmetic not allowed                                             $ ");
    SWAG_ERROR(Err0226, "invalid pointer arithmetic                        $ pointer arithmetic on [[void*]] not allowed                                $ [[void]] has no size");
    SWAG_ERROR(Err0227, "invalid pointer arithmetic                        $ pointer arithmetic needs integer, got [[%s]]                               $ ");
    SWAG_ERROR(Err0228, "invalid pointer slicing                           $ pointer slicing not allowed                                                $ ");
    SWAG_ERROR(Err0229, "invalid range bounds                              $ lower bound [[%lld]] exceeds upper bound [[%lld]]                          $ use [[#reverse]] for reverse order");
    SWAG_ERROR(Err0230, "invalid range type                                $ type [[%s]] invalid for range                                              $ expected integer, rune, or float");
    SWAG_ERROR(Err0231, "invalid reference                                 $ [[ref]] needs pointer or reference, got [[%s]]                             $ ");
    SWAG_ERROR(Err0232, "invalid return type                               $ [[void]] not allowed as function return type                               $ remove return type if function returns nothing");
    SWAG_ERROR(Err0233, "invalid return type                               $ [[opSlice]] must return [[string]] or [[slice]], got [[%s]]                $ ");
    SWAG_ERROR(Err0234, "invalid slice                                     $ [[%s]] has no [[opSlice]] in [[%s]]                                        $ ");
    SWAG_ERROR(Err0235, "invalid slice                                     $ multi-dimensional array cannot be sliced                                   $ ");
    SWAG_ERROR(Err0236, "invalid slice                                     $ type [[%s]] cannot be sliced                                               $ ");
    SWAG_ERROR(Err0237, "invalid struct initialization                     $ expected [[{}]] to initialize struct, not [[()]]                           $ [[()]] is for function calls");
    SWAG_ERROR(Err0238, "missing struct name                               $ expected struct name, got $$TKN$$                                          $ ");
    SWAG_ERROR(Err0239, "missing struct operation                          $ [[%s]] to [[%s]] by index fails: no [[opIndexAffect]]                      $ ");
    SWAG_ERROR(Err0240, "missing struct member                             $ [[%s]] not found in [[%s]]                                                 $ ");
    SWAG_ERROR(Err0241, "missing struct operation                          $ [[%s]] not found in [[%s]] for operator [['%s']]                           $ ");
    SWAG_ERROR(Err0242, "invalid suffix type                               $ suffix [[%s]] on literal only for struct conversion                        $ ");
    SWAG_ERROR(Err0243, "invalid suffix type                               $ expected identifier or type after suffix start, got $$TKN$$                $ ");
    SWAG_ERROR(Err0244, "unexpected symbol                                 $ unexpected symbol [['%s']]                                                 $ ");
    SWAG_ERROR(Err0245, "invalid [[throw]]                                 $ [[throw]] needs struct or [[@err]], got [[%s]]                             $ ");
    SWAG_ERROR(Err0246, "invalid [[throw]]                                 $ [[throw]] needs struct or [[@err]] expression                              $ ");
    SWAG_ERROR(Err0247, "invalid top-level instruction                     $ expected top-level instruction, got $$TKN$$                                $ ");
    SWAG_ERROR(Err0248, "invalid tuple comparison                          $ tuple cannot compare with [[%s]]                                           $ tuples only compare with tuples");
    SWAG_ERROR(Err0249, "invalid tuple dereference                         $ tuples cannot be dereferenced as pointers                                  $ ");
    SWAG_ERROR(Err0250, "empty tuple unpacking                             $ empty tuple cannot be unpacked                                             $ ");
    SWAG_ERROR(Err0251, "invalid tuple unpacking                           $ type [[%s]] cannot be unpacked                                             $ expected struct or tuple");
    SWAG_ERROR(Err0252, "invalid type                                      $ generic type cannot be evaluated                                           $ ");
    SWAG_ERROR(Err0253, "invalid type                                      $ [[%s]] second parameter type [[%s]] invalid                                $ use [[opAssign]] for copying");
    SWAG_ERROR(Err0254, "invalid type                                      $ [[const]] version of [[%s]] not allowed                                    $ ");
    SWAG_ERROR(Err0255, "access forbidden                                  $ [[internal]] field [[%s]] not accessible                                   $ ");
    SWAG_ERROR(Err0256, "invalid type                                      $ type [[%s]] invalid for attribute parameter                                $ ");
    SWAG_ERROR(Err0257, "invalid type                                      $ type [[%s]] invalid as [[@cvaarg]] argument                                $ ");
    SWAG_ERROR(Err0258, "invalid type                                      $ [[%s]] generic parameter expects [[bool]], got [[%s]]                      $ ");
    SWAG_ERROR(Err0259, "invalid type                                      $ [[%s]] generic parameter expects [[string]], got [[%s]]                    $ ");
    SWAG_ERROR(Err0260, "invalid type                                      $ [[%s]] cast right side expects [[struct]], got [[%s]]                      $ ");
    SWAG_ERROR(Err0261, "invalid type                                      $ [[%s]] cast left side expects [[interface]], got [[%s]]                    $ ");
    SWAG_ERROR(Err0262, "invalid type                                      $ [[%s]] first parameter expects [[%s]], got [[%s]]                          $ ");
    SWAG_ERROR(Err0263, "invalid type declaration                          $ expected type, [[%s]] is %s                                                $ ");
    SWAG_ERROR(Err0264, "invalid type declaration                          $ expected type declaration, got $$TKN$$                                     $ ");
    SWAG_ERROR(Err0265, "invalid type declaration                          $ expected array type after dimensions, got $$TKN$$                          $ ");
    SWAG_ERROR(Err0266, "invalid unicode value                             $ value [[0x%x]] is not valid unicode                                        $ ");
    SWAG_ERROR(Err0267, "invalid variable name                             $ [[#alias]] only in [[#[Swag.Macro]]] or [[#[Swag.Mixin]]]                  $ ");
    SWAG_ERROR(Err0268, "invalid variable name                             $ [[#uniq]] only in [[#[Swag.Mixin]]]                                        $ ");
    SWAG_ERROR(Err0269, "invalid variable name                             $ [[me]] cannot be used as variable name                                     $ ");
    SWAG_ERROR(Err0270, "missing variable name                             $ expected variable name, got $$TKN$$                                        $ ");
    SWAG_ERROR(Err0271, "missing variable name                             $ expected variable name after [[,]], got $$TKN$$                            $ ");
    SWAG_ERROR(Err0272, "missing variable name                             $ expected match variable name, got $$TKN$$                                  $ ");
    SWAG_ERROR(Err0273, "missing variable name                             $ expected variable name after [[%s]], got $$TKN$$                           $ ");
    SWAG_ERROR(Err0274, "invalid variable type                             $ [[void]] cannot be variable type                                           $ ");
    SWAG_ERROR(Err0275, "invalid variables list                            $ [[if]] cannot declare multiple variables                                   $ [[if]] needs single variable declaration");
    SWAG_ERROR(Err0276, "invalid variables list                            $ [[using]] cannot declare multiple variables                                $ [[using]] needs single variable declaration");
    SWAG_ERROR(Err0277, "invalid variables list                            $ [[with]] cannot declare multiple variables                                 $ [[with]] needs single variable declaration");
    SWAG_ERROR(Err0278, "invalid void dereference                          $ [[void*]] cannot be dereferenced                                           $ [[void]] has no size");
    SWAG_ERROR(Err0279, "isolated [[#elif]]                                $ [[#elif]] without preceding [[#if]]                                        $ ");
    SWAG_ERROR(Err0280, "isolated [[#else]]                                $ [[#else]] without preceding [[#if]] or [[#elif]]                           $ ");
    SWAG_ERROR(Err0281, "isolated [[)]]                                    $ [[)]] without matching [[(]]                                               $ ");
    SWAG_ERROR(Err0282, "isolated [[]]]                                    $ [[]]] without matching [[[]]                                               $ ");
    SWAG_ERROR(Err0283, "isolated [[elif]]                                 $ [[elif]] without preceding [[if]]                                          $ ");
    SWAG_ERROR(Err0284, "isolated [[else]]                                 $ [[else]] without preceding [[if]] or [[elif]]                              $ ");
    SWAG_ERROR(Err0285, "isolated [[}]]                                    $ [[}]] without matching [[{]]                                               $ ");
    SWAG_ERROR(Err0286, "isolated comment end                              $ [['*/']] after %s without matching [['/*']]                                $ ");
    SWAG_ERROR(Err0287, "literal overflow                                  $ character [[0x%x]] exceeds [[u16]] range                                   $ ");
    SWAG_ERROR(Err0288, "literal overflow                                  $ character [[0x%x]] exceeds [[u8]] range                                    $ ");
    SWAG_ERROR(Err0289, "literal overflow                                  $ [[%I64u]] doesn't fit in [[%s]]                                            $ ");
    SWAG_ERROR(Err0290, "literal overflow                                  $ binary number too large for 64-bit                                         $ ");
    SWAG_ERROR(Err0291, "literal overflow                                  $ hexadecimal number too large for 64-bit                                    $ ");
    SWAG_ERROR(Err0292, "literal overflow                                  $ literal number too large for 64-bit                                        $ ");
    SWAG_ERROR(Err0293, "literal overflow                                  $ negation of [[%I64d]] exceeds [[s64]]: [[%I64u]] too large                 $ ");
    SWAG_ERROR(Err0294, "literal overflow                                  $ negation of [[%d]] fails: [[%u]] too large for [[%s]]                      $ ");
    SWAG_ERROR(Err0295, "[[impl]] kind mismatch                            $ implementation syntax for [[%s]], but [[%s]] is [[%s]]                     $ ");
    SWAG_ERROR(Err0296, "access mismatch                                   $ %s [[%s]] cannot be public: %s [[%s]] has [[%s]] access                    $ ");
    SWAG_ERROR(Err0297, "access mismatch                                   $ [[%s]] cannot be internal: struct is [[public]]                            $ ");
    SWAG_ERROR(Err0298, "access mismatch                                   $ [[%s]] cannot be public: struct is [[internal]]                            $ ");
    SWAG_ERROR(Err0299, "interface signature mismatch                      $ signature mismatch for [[%s.%s]]                                           $ ");
    SWAG_ERROR(Err0300, "scope mismatch                                    $ [[impl]] must be in same scope as [[%s]]                                   $ ");
    SWAG_ERROR(Err0301, "misplaced [[#dependencies]]                       $ [[#dependencies]] only in [[module.swg]] or [[.swgs]]                      $ ");
    SWAG_ERROR(Err0302, "misplaced [[#global using]]                       $ [[#global using]] only in [[module.swg]] or [[.swgs]]                      $ ");
    SWAG_ERROR(Err0303, "misplaced [[#global]]                             $ [[#global]] must be at top of file                                         $ ");
    SWAG_ERROR(Err0304, "misplaced [[#import]]                             $ [[#import]] only in [[module.swg]] or [[.swgs]]                            $ ");
    SWAG_ERROR(Err0305, "misplaced [[@index]]                              $ [[@index]] only in breakable blocks ([[for]], [[foreach]], etc.)           $ ");
    SWAG_ERROR(Err0306, "misplaced [[#inject]]                             $ [[#inject]] only in breakable blocks ([[for]], [[foreach]], etc.)          $ ");
    SWAG_ERROR(Err0307, "misplaced [[#load]]                               $ [[#load]] only in [[module.swg]] or [[.swgs]]                              $ ");
    SWAG_ERROR(Err0308, "misplaced [[#macro]]                              $ [[#macro]] only in [[#[Swag.Macro]]] functions                             $ ");
    SWAG_ERROR(Err0311, "misplaced [[#up]]                                 $ [[#up]] only in [[#[Swag.Macro]]] functions                                $ ");
    SWAG_ERROR(Err0312, "conflicting keywords                              $ [[%s]] incompatible with [[%s]]                                            $ ");
    SWAG_ERROR(Err0313, "duplicate keyword                                 $ [[%s]] cannot combine with another [[%s]]                                  $ ");
    SWAG_ERROR(Err0314, "invalid keyword placement                         $ [[%s]] not allowed in struct special function ([[%s]])                     $ ");
    SWAG_ERROR(Err0315, "missing [[throw]] qualifier                       $ [[%s]] needs [[throw]] on [[%s]]                                           $ ");
    SWAG_ERROR(Err0316, "invalid block start                               $ [[':]] before [[{]] not allowed                                            $ use [[':']] or [[{]], not both");
    SWAG_ERROR(Err0317, "misplaced [[@cvastart]]                           $ [[@cvastart]] only in function with [[cvarargs]] parameter                 $ ");
    SWAG_ERROR(Err0318, "invalid [[@kindof]]                               $ [[@kindof]] only on [[any]] or interface, not [[%s]]                       $ ");
    SWAG_ERROR(Err0319, "invalid type declaration                          $ expected type after [[code]], got $$TKN$$                                  $ [[code]] needs type or [[void]]");
    SWAG_ERROR(Err0321, "invalid [[alias]]                                 $ [[alias]] not allowed on struct member                                     $ ");
    SWAG_ERROR(Err0322, "misplaced [[break]]                               $ [[break]] only in breakable blocks ([[for]], [[foreach]], etc.)            $ ");
    SWAG_ERROR(Err0323, "missing [[const]] target                          $ expected [[me]] after [[const]] in parameter, got $$TKN$$                  $ ");
    SWAG_ERROR(Err0324, "misplaced [[const]]                               $ [[const]] only after [[mtd]], not [[func]]                                 $ ");
    SWAG_ERROR(Err0325, "misplaced [[continue]]                            $ [[continue]] only in breakable blocks ([[for]], [[foreach]], etc.)         $ ");
    SWAG_ERROR(Err0326, "invalid [[default]]                               $ [[default]] not allowed in [[#[Swag.Complete]]] [[switch]]                 $ ");
    SWAG_ERROR(Err0327, "invalid [[fallthrough]]                           $ [[fallthrough]] not allowed in last [[case]]                               $ remove it");
    SWAG_ERROR(Err0328, "misplaced [[fallthrough]]                         $ [[fallthrough]] only in [[case]] blocks                                    $ ");
    SWAG_ERROR(Err0329, "misplaced [[fallthrough]]                         $ [[fallthrough]] only in [[switch]]                                         $ ");
    SWAG_ERROR(Err0330, "invalid [[for]]                                   $ [[for]] not allowed in [[enum]] implementation                             $ ");
    SWAG_ERROR(Err0331, "misplaced [[impl]]                                $ [[impl]] on function only in [[impl for]] block                            $ ");
    SWAG_ERROR(Err0332, "invalid [[as]]                                    $ match variable only with single [[case]] value                             $ [[case]] needs exactly one value");
    SWAG_ERROR(Err0333, "invalid [[as]]                                    $ match variable needs [[switch]] expression                                 $ ");
    SWAG_ERROR(Err0334, "invalid [[moveref]]                               $ [[moveref]] only on pointers or references, not compile-time values        $ ");
    SWAG_ERROR(Err0335, "invalid [[moveref]]                               $ [[moveref]] needs mutable expression                                       $ ");
    SWAG_ERROR(Err0336, "invalid [[moveref]]                               $ [[moveref]] only on pointers or references, not [[%s]]                     $ ");
    SWAG_ERROR(Err0337, "misplaced [[moveref]]                             $ [[moveref]] only before function arguments                                 $ ");
    SWAG_ERROR(Err0338, "misplaced [[mtd]]                                 $ [[mtd]] only in struct [[impl]] blocks                                     $ use [[func]] instead");
    SWAG_ERROR(Err0339, "invalid [[mtd]]                                   $ [[mtd]] cannot declare lambda type                                         $ use [[func]] instead");
    SWAG_ERROR(Err0340, "misplaced [[mtd]]                                 $ [[mtd]] only in struct [[impl]] blocks                                     $ use [[func]] instead");
    SWAG_ERROR(Err0341, "redundant [[return]]                              $ [[return]] after [[=>]] is implicit                                        $ remove it");
    SWAG_ERROR(Err0342, "invalid [[retval]]                                $ [[retval]] needs function with return value                                $ ");
    SWAG_ERROR(Err0343, "misplaced [[retval]]                              $ [[retval]] only in function body                                           $ ");
    SWAG_ERROR(Err0344, "invalid [[retval]] usage                          $ [[retval]] only for local variable type, not return type                   $ ");
    SWAG_ERROR(Err0345, "misplaced [[me]]                                  $ [[me]] only in enum or struct [[impl]] blocks                              $ ");
    SWAG_ERROR(Err0346, "invalid [[throw]] qualifier                       $ [[throw]] not allowed on attributes                                        $ ");
    SWAG_ERROR(Err0347, "invalid [[using]]                                 $ [[using]] only on pointers to struct, not [[%s]]                           $ ");
    SWAG_ERROR(Err0348, "invalid [[using]]                                 $ [[using]] not allowed at [[%s]] scope                                      $ ");
    SWAG_ERROR(Err0349, "invalid [[using]]                                 $ [[using]] not allowed on type [[%s]]                                       $ ");
    SWAG_ERROR(Err0350, "invalid [[using]]                                 $ [[using]] only on namespace, struct, or enum, not [[%s]]                   $ ");
    SWAG_ERROR(Err0351, "invalid [[using]]                                 $ [[using]] not allowed on interface functions                               $ ");
    SWAG_ERROR(Err0352, "invalid [[var]]                                   $ [[var]] not allowed in struct declarations                                 $ use [[fieldName: Type]]");
    SWAG_ERROR(Err0354, "invalid [[verify]]                                $ [[verify]] not allowed on [[%s]]                                           $ [[verify]] not supported for [[opDrop]], [[opPostCopy]], [[opPostMove]]");
    SWAG_ERROR(Err0355, "invalid [[verify]]                                $ [[verify]] only for functions, not structs                                 $ use [[where]] instead");
    SWAG_ERROR(Err0356, "invalid [[where]]                                 $ [[where]] needs [[switch]] expression                                      $ ");
    SWAG_ERROR(Err0357, "invalid [[where]]                                 $ [[where]] not allowed on [[%s]]                                            $ [[where]] not supported for [[opDrop]], [[opPostCopy]], [[opPostMove]]");
    SWAG_ERROR(Err0358, "invalid access specifier                          $ global variables cannot be [[public]]                                      $ ");
    SWAG_ERROR(Err0359, "misplaced access specifier                        $ [[%s]] only at global scope                                                $ ");
    SWAG_ERROR(Err0360, "invalid access specifier                          $ [[%s]] cannot precede [[%s]]                                               $ ");
    SWAG_ERROR(Err0361, "invalid alias name                                $ alias name not allowed on %s                                               $ ");
    SWAG_ERROR(Err0362, "invalid assignment                                $ unnamed parameters cannot be assigned                                      $ ");
    SWAG_ERROR(Err0363, "misplaced attribute                               $ attribute cannot follow [[%s]]                                             $ place attribute before [[%s]]");
    SWAG_ERROR(Err0364, "invalid attribute                                 $ [[#[Swag.CalleeReturn]]] not allowed on %s                                 $ ");
    SWAG_ERROR(Err0365, "invalid attribute                                 $ [[#[Swag.CalleeReturn]]] only on macro or mixin [[%s]]                     $ needs [[#[Swag.Macro]]] or [[#[Swag.Mixin]]");
    SWAG_ERROR(Err0366, "invalid attribute                                 $ [[#[Swag.Complete]]] needs [[switch]] expression                                          $ ");
    SWAG_ERROR(Err0367, "invalid attribute                                 $ [[#[Swag.Complete]]] only on [[opAffect]] and [[opAffectLiteral]], not [[%s]]             $ ");
    SWAG_ERROR(Err0368, "invalid attribute                                 $ [[#[Swag.Discardable]]] only on lambda variables, not [[%s]]                              $ ");
    SWAG_ERROR(Err0369, "invalid attribute                                 $ [[#[Swag.Implicit]]] not allowed on generic %s                                            $ ");
    SWAG_ERROR(Err0370, "invalid attribute                                 $ [[#[Swag.Implicit]]] only on [[opAffect]], [[opAffectLiteral]], [[opCast]], not [[%s]]    $ ");
    SWAG_ERROR(Err0371, "invalid attribute                                 $ [[#[Swag.Inline]]] not allowed on %s                                                      $ ");
    SWAG_ERROR(Err0372, "invalid attribute                                 $ [[#[Swag.Macro]]] not allowed on %s                                                       $ ");
    SWAG_ERROR(Err0373, "invalid attribute                                 $ [[#[Swag.Mixin]]] not allowed on %s                                                       $ ");
    SWAG_ERROR(Err0374, "invalid attribute                                 $ [[#[Swag.NotGeneric]]] not allowed on %s                                                  $ ");
    SWAG_ERROR(Err0375, "invalid attribute                                 $ [[#[Swag.Offset]]] not allowed on interface members                                       $ ");
    SWAG_ERROR(Err0376, "invalid attribute                                 $ [[%s]] not allowed here                                                                   $ ");
    SWAG_ERROR(Err0377, "invalid attribute                                 $ [[%s]] not allowed in [[#global]]                                                         $ needs [[Swag.AttributeUsage.File]]");
    SWAG_ERROR(Err0378, "invalid attribute                                 $ [[%s]] not allowed on %s                                                                  $ ");
    SWAG_ERROR(Err0379, "invalid attribute                                 $ attribute not allowed here                                                                $ ");
    SWAG_ERROR(Err0380, "invalid attribute                                 $ [[AttributeUsage.Gen]] needs [[AttributeUsage.Struct]] or [[AttributeUsage.Enum]]         $ ");
    SWAG_ERROR(Err0381, "invalid block start                               $ [[{]] not allowed after [[try]], [[assume]], [[catch]]                                    $ ");
    SWAG_ERROR(Err0382, "invalid [[opVisit]] name                          $ [[%s]] must start with uppercase for [[opVisit]]                                          $ ");
    SWAG_ERROR(Err0383, "invalid closure                                   $ closure only in function scope $ closures only allowed in functions                       $ ");
    SWAG_ERROR(Err0384, "misplaced compiler instruction                    $ [[#callerfunction]] only in function parameters                                           $ ");
    SWAG_ERROR(Err0385, "misplaced compiler instruction                    $ [[#callerlocation]] only in function parameters                                           $ ");
    SWAG_ERROR(Err0386, "invalid default parameters                        $ lambda or closure default parameters cannot be redefined                                  $ ");
    SWAG_ERROR(Err0387, "invalid default value                             $ [[me]] cannot have default value                                                          $ ");
    SWAG_ERROR(Err0388, "invalid default value                             $ lambda parameters cannot have default values                                              $ ");
    SWAG_ERROR(Err0389, "invalid digit separator                           $ [['_']] cannot end number                                                                 $ ");
    SWAG_ERROR(Err0390, "invalid digit separator                           $ [['_']] cannot start exponent                                                             $ ");
    SWAG_ERROR(Err0391, "invalid digit separator                           $ [['_']] cannot start fractional part                                          $ ");
    SWAG_ERROR(Err0392, "invalid digit separator                           $ consecutive [['_']] not allowed                                               $ ");
    SWAG_ERROR(Err0393, "invalid error catching                            $ [[%s]] is %s, cannot catch                                                    $ ");
    SWAG_ERROR(Err0394, "invalid error catching                            $ [[%s]] cannot nest in [[%s]]                                                  $ use only one [[try]], [[catch]], or [[assume]]");
    SWAG_ERROR(Err0395, "invalid error catching                            $ [[%s]] only in function, macro, or mixin                                      $ ");
    SWAG_ERROR(Err0396, "invalid error catching                            $ [[%s]] needs [[throw]] on [[%s]]                                              $ function must be marked [[throw]]");
    SWAG_ERROR(Err0397, "invalid function declaration                      $ functions cannot be declared directly in structs                              $ use [[impl]] block");
    SWAG_ERROR(Err0398, "invalid generic argument                          $ expected type, got value                                                      $ ");
    SWAG_ERROR(Err0399, "invalid generic argument                          $ expected value, got type                                                      $ ");
    SWAG_ERROR(Err0400, "unexpected generic arguments                      $ %s [[%s]] has no generic arguments                                            $ ");
    SWAG_ERROR(Err0401, "invalid match variable                            $ match variable only for [[interface]] or [[any]] [[switch]], not [[%s]]       $ ");
    SWAG_ERROR(Err0402, "invalid move reference                            $ move reference [[&&]] only in function parameters                             $ ");
    SWAG_ERROR(Err0403, "invalid range                                     $ range not allowed in [[switch]] without expression                            $ ");
    SWAG_ERROR(Err0405, "misplaced special function                        $ [[%s]] only in corresponding [[impl]] block                                   $ ");
    SWAG_ERROR(Err0406, "misplaced special function                        $ [[%s]] only in corresponding [[impl]] block                                   $ [[impl for]] only for interface implementation");
    SWAG_ERROR(Err0407, "misplaced top-level [[using]]                     $ top-level [[using]] must precede other declarations                           $ ");
    SWAG_ERROR(Err0408, "invalid tuple unpacking                           $ tuple unpacking not allowed in %s                                             $ ");
    SWAG_ERROR(Err0409, "invalid type                                      $ type [[%s]] only in function parameters                                       $ ");
    SWAG_ERROR(Err0410, "invalid type                                      $ [[#code]] only in [[#[Swag.Macro]]] or [[#[Swag.Mixin]]]                      $ ");
    SWAG_ERROR(Err0411, "misplaced variadic argument                       $ variadic argument must be last                                                $ ");
    SWAG_ERROR(Err0412, "misplaced variadic parameter                      $ variadic parameter must be last                                               $ ");
    SWAG_ERROR(Err0413, "invalid variadic parameter                        $ variadic parameters not allowed in inline functions                           $ ");
    SWAG_ERROR(Err0414, "missing [[#alias]] number                         $ [[#alias]] needs trailing number ([[#alias0]], [[#alias1]], etc.)             $ ");
    SWAG_ERROR(Err0415, "missing [[#foreignlib]] argument                  $ expected library name after [[#foreignlib]], got $$TKN$$                      $ use [[#foreignlib \"path/to/library\"]]");
    SWAG_ERROR(Err0416, "missing [[#global testerror]] argument            $ expected error string after [[#global testerror]], got $$TKN$$                $ ");
    SWAG_ERROR(Err0417, "missing [[#global testwarning]] argument          $ expected warning string after [[#global testwarning]], got $$TKN$$            $ ");
    SWAG_ERROR(Err0418, "missing [[#if]] expression                        $ expected boolean after [[#if]], got $$TKN$$                                   $ ");
    SWAG_ERROR(Err0419, "missing [[#message]] parameter                    $ expected [[Swag.CompilerMsgMask]] parameter for [[#message]]                  $ ");
    SWAG_ERROR(Err0420, "missing [[#uniq]] number                          $ [[#uniq]] needs trailing number ([[#uniq0]], [[#uniq1]], etc.)                $ ");
    SWAG_ERROR(Err0423, "missing [[%s]]                                    $ expected closing [[%s]] %s                                                    $ ");
    SWAG_ERROR(Err0424, "missing block start                               $ expected [[:]] or [[{]]                                                       $ ");
    SWAG_ERROR(Err0425, "missing arguments start                           $ expected [[(]] to start [[%s]] arguments, got $$TKN$$                         $ ");
    SWAG_ERROR(Err0426, "missing parameters start                          $ expected [[(]] to start parameters, got $$TKN$$                               $ ");
    SWAG_ERROR(Err0427, "missing [[in]]                                    $ expected [[in]] after [[for]] variable [[%s]]                                 $ use [[for variable in count]]");
    SWAG_ERROR(Err0429, "missing [[case]] expression                       $ expected [[case]] expression, got [[%s]]                                      $ ");
    SWAG_ERROR(Err0430, "missing capture variable                          $ expected capture variable between [[,]] and [['|']]                           $ add variable or remove trailing comma");
    SWAG_ERROR(Err0431, "missing [[foreach]] expression                    $ expected element to visit before [[%s]]                                       $ ");
    SWAG_ERROR(Err0432, "missing [[foreach]] variable                      $ expected [[foreach]] variable between [[,]] and [[:]]                         $ first is [[value]], second is [[index]]");
    SWAG_ERROR(Err0433, "missing [[if]] expression                         $ expected boolean after [[if]], got $$TKN$$                                    $ ");
    SWAG_ERROR(Err0434, "missing [[impl]] marker                           $ expected [[impl]] before [[%s]] to mark implementation of [[%s]]              $ ");
    SWAG_ERROR(Err0435, "missing [[for]] count                             $ expected [[for]] count before [[%s]]                                          $ ");
    SWAG_ERROR(Err0436, "missing [[switch]] value                          $ expected [[%s.%s]] in [[switch]]                                              $ ");
    SWAG_ERROR(Err0437, "missing [[while]] expression                      $ expected boolean before [[%s]]                                                $ ");
    SWAG_ERROR(Err0438, "missing affectation                               $ expected affectation or arguments after %s, got $$TKN$$                       $ ");
    SWAG_ERROR(Err0439, "missing arguments                                 $ %s [[%s]] needs arguments between [[()]]                                      $ ");
    SWAG_ERROR(Err0440, "missing attribute                                 $ [[opVisit]] needs [[#[Swag.Macro]]] attribute                                 $ ");
    SWAG_ERROR(Err0441, "missing attribute name                            $ expected attribute name before [[(]]                                          $ ");
    SWAG_ERROR(Err0442, "unhandled error                                   $ [[%s]] needs error handling                                                   $ use [[try]], [[catch]], or [[assume]]");
    SWAG_ERROR(Err0443, "missing constant type                             $ expected assignment or [[:]] for type, got $$TKN$$                            $ ");
    SWAG_ERROR(Err0444, "missing default value                             $ %s needs default value: preceding parameter has one                           $ ");
    SWAG_ERROR(Err0445, "missing dereference index                         $ array [[%s]] type [[%s]] needs index                                          $ add index in brackets");
    SWAG_ERROR(Err0446, "missing end of line                               $ expected line break or [[;]] after %s, got $$TKN$$                            $ add line break or separate with [[;]]");
    SWAG_ERROR(Err0447, "missing enum name                                 $ expected enum name before [['{']]                                             $ ");
    SWAG_ERROR(Err0448, "missing enum name                                 $ expected enum name before [[':']]                                             $ ");
    SWAG_ERROR(Err0449, "missing function parameters                       $ expected parameters [[()]] before [[{]]                                       $ add [[()]] after [[%s]] if no parameters");
    SWAG_ERROR(Err0450, "missing generic parameters                        $ [[%s]] needs generic parameters                                               $ ");
    SWAG_ERROR(Err0451, "missing generic parameters                        $ struct [[%s]] needs generic parameters: [[%s]] is generic                     $ ");
    SWAG_ERROR(Err0452, "missing generic parameters                        $ struct [[%s]] unsolved: generic field [[%s]]                                  $ ");
    SWAG_ERROR(Err0453, "missing generic parameters                        $ expected at least one generic parameter between [[()]]                        $ remove [[()]] if not generic");
    SWAG_ERROR(Err0454, "missing initialization                            $ [[let]] variable needs initialization                                         $ ");
    SWAG_ERROR(Err0455, "missing initialization                            $ constant needs initialization                                                 $ ");
    SWAG_ERROR(Err0456, "missing initialization                            $ reference needs initialization                                                $ ");
    SWAG_ERROR(Err0457, "missing initialization                            $ enum value [[%s]] type [[%s]] needs initialization                            $ ");
    SWAG_ERROR(Err0458, "missing initialization                            $ [[%s]] needs initialization: [[%s]] has no zero value                         $ ");
    SWAG_ERROR(Err0459, "missing interface functions                       $ interface [[%s]] not fully implemented for [[%s]]                             $ ");
    SWAG_ERROR(Err0460, "missing intrinsic arguments                       $ expected [[%s]] arguments between [[()]]                                      $ ");
    SWAG_ERROR(Err0461, "missing lambda parameter type                     $ expected type with [[:]] or assignment                                        $ cannot mix inferred and explicit types");
    SWAG_ERROR(Err0462, "missing named argument                            $ %s needs name: preceding arguments are named                                  $ ");
    SWAG_ERROR(Err0463, "missing namespace name                            $ expected namespace name before [[;]]                                          $ ");
    SWAG_ERROR(Err0464, "missing namespace name                            $ expected namespace name before [['{']]                                        $ ");
    SWAG_ERROR(Err0465, "missing parameter name                            $ expected parameter name and [[:]] before [[%s]]                               $ ");
    SWAG_ERROR(Err0466, "missing parameter type                            $ expected assignment or [[:]] for type, got $$TKN$$                            $ ");
    SWAG_ERROR(Err0467, "missing parameters                                $ special function [[%s]] needs parameters                                      $ ");
    SWAG_ERROR(Err0469, "missing return type                               $ special function [[%s]] needs return type                                     $ ");
    SWAG_ERROR(Err0470, "missing return type                               $ special function [[%s]] needs return type [[%s]]                              $ ");
    SWAG_ERROR(Err0471, "missing return type                               $ [[#[Swag.Discardable]]] [[%s]] needs return value                             $ ");
    SWAG_ERROR(Err0472, "missing return value                              $ %s needs return statement with [[%s]]                                         $ ");
    SWAG_ERROR(Err0473, "missing return value                              $ return type already deduced as [[%s]]                                         $ ");
    SWAG_ERROR(Err0474, "missing return value                              $ expected return value of type [[%s]]                                          $ ");
    SWAG_ERROR(Err0475, "missing return value                              $ all control paths must return value in %s                                     $ ");
    SWAG_ERROR(Err0476, "missing slice upper bound                         $ expected upper bound after [[until]]                                          $ use [[to]] for slicing to end");
    SWAG_ERROR(Err0477, "missing struct name                               $ expected struct name before [['{']]                                           $ ");
    SWAG_ERROR(Err0478, "missing type                                      $ expected type after [[#type]], got $$TKN$$                                    $ ");
    SWAG_ERROR(Err0479, "missing variable type                             $ expected assignment or [[:]] for type, got $$TKN$$                            $ ");
    SWAG_ERROR(Err0480, "UFCS misuse                                       $ %s [[%s]] not used as first argument of [[%s]]                                $ ");
    SWAG_ERROR(Err0482, "non-contiguous [[#alias]]                         $ non-contiguous [[#alias]] in [[%s]]                                           $ [[#alias%u]] is missing");
    SWAG_ERROR(Err0483, "non-transferable type                             $ [[cvarargs]] parameter cannot be passed to another function                   $ ");
    SWAG_ERROR(Err0484, "static/instance mismatch                          $ [[%s]] is static member of [[%s]], used as instance field                     $ ");
    SWAG_ERROR(Err0485, "not a value                                       $ [[%s]] is %s, not a value                                                     $ ");
    SWAG_ERROR(Err0486, "too few attribute arguments                       $ attribute [[%s]] needs more arguments                                         $ ");
    SWAG_ERROR(Err0487, "too few call arguments                            $ %s [[%s]] needs more arguments                                                $ ");
    SWAG_ERROR(Err0488, "too few generic arguments                         $ %s [[%s]] needs more generic arguments                                        $ ");
    SWAG_ERROR(Err0489, "too few generic parameters                        $ [[%s]] needs more generic parameters                                          $ ");
    SWAG_ERROR(Err0490, "too few initializers                              $ array needs [[%d]] values, got [[%d]]                                         $ ");
    SWAG_ERROR(Err0491, "too few initializers                              $ tuple needs [[%d]] values, got [[%d]]                                         $ ");
    SWAG_ERROR(Err0492, "too few parameters                                $ expected [[%d]] parameters for [[%s]], got [[%d]]                             $ ");
    SWAG_ERROR(Err0493, "too few parameters                                $ expected at least [[%d]] parameters for [[%s]], got [[%d]]                    $ ");
    SWAG_ERROR(Err0494, "[[#alias]] number out of range                    $ [[#alias]] number [[%u]] out of range                                         $ must be [0, 31]");
    SWAG_ERROR(Err0495, "[[#uniq]] number out of range                     $ [[#uniq]] number [[%u]] out of range                                          $ must be [0, 31]");
    SWAG_ERROR(Err0496, "[[#up]] count out of range                        $ [[#up]] count [[%u]] out of range                                             $ must be [1, 255]");
    SWAG_ERROR(Err0497, "too many array dimensions                         $ array dimensions exceed [[254]]                                               $ ");
    SWAG_ERROR(Err0498, "too many callback parameters                      $ callback limited to [[%d]] parameters, got [[%d]]                             $ ");
    SWAG_ERROR(Err0499, "enum value out of range                           $ enum value [[%s]] exceeds [[%s]] range                                        $ ");
    SWAG_ERROR(Err0500, "index out of range                                $ index [[%I64u]] exceeds maximum [[%I64u]]                                     $ ");
    SWAG_ERROR(Err0501, "inline level exceeded                             $ [[%s]] expansion exceeds [[--limit-inline:%d]]                                $ ");
    SWAG_ERROR(Err0502, "slice bound out of range                          $ slice bound [[%I64u]] out of range (max [[%I64u]])                            $ ");
    SWAG_ERROR(Err0503, "slice bounds unordered                            $ lower bound [[%I64u]] exceeds upper bound [[%I64u]]                           $ ");
    SWAG_ERROR(Err0504, "slice bound out of range                          $ [[until]] cannot be zero                                                      $ ");
    SWAG_ERROR(Err0505, "too many variadic arguments                       $ variadic arguments exceed [[%d]], got [[%d]]                                  $ ");
    SWAG_ERROR(Err0506, "overload mismatch                                 $                                                                               $ ");
    SWAG_ERROR(Err0507, "recursive evaluation                              $ struct [[%s]] references itself                                               $ ");
    SWAG_ERROR(Err0508, "redundant access specifier                        $ [[%s]] redundant with [[#global export]]                                      $ remove [[public]]: [[#global export]] makes all declarations public");
    SWAG_ERROR(Err0509, "redundant nullable                                $ parameter with [[null]] default is implicitly nullable $ remove [[#null]]     $ ");
    SWAG_ERROR(Err0510, "reserved field name                               $ field name [[%s]] reserved                                                    $ names starting with [[item]] are reserved");
    SWAG_ERROR(Err0511, "reserved function name                            $ function name [[%s]] reserved                                                 $ ");
    SWAG_ERROR(Err0512, "reserved name                                     $ single [[_]] identifier reserved                                              $ single [[_]] reserved by compiler");
    SWAG_ERROR(Err0513, "reserved name                                     $ identifier [[%s]] starts with [[__]], reserved                                $ [[__]] prefix reserved by compiler");
    SWAG_ERROR(Err0514, "reserved namespace name                           $ namespace [[%s]] reserved                                                     $ ");
    SWAG_ERROR(Err0515, "semantic cycle                                    $ %s [[%s]] has dependency cycle                                                $ ");
    SWAG_ERROR(Err0516, "unused expression                                 $ expression result unused                                                      $ remove it");
    SWAG_ERROR(Err0517, "too many arguments                                $ expected [[%d]] argument(s), got [[%d]]                                       $ ");
    SWAG_ERROR(Err0518, "too many generic arguments                        $ expected [[%d]] generic argument(s) for %s [[%s]], got [[%d]]                 $ ");
    SWAG_ERROR(Err0519, "too many generic parameters                       $ [[%s]] expects one generic parameter, got [[%d]]                              $ ");
    SWAG_ERROR(Err0520, "too many generic parameters                       $ [[%s]] has unexpected number of generic parameters                            $ ");
    SWAG_ERROR(Err0521, "too many initializers                             $ expected [[%d]] values to initialize [[%s]], got [[%d]]                       $ remove extra initializer values");
    SWAG_ERROR(Err0522, "too many initializers                             $ array expects [[%d]] values, got [[%d]]                                       $ ");
    SWAG_ERROR(Err0523, "too many initializers                             $ tuple expects [[%d]] values, got [[%d]]                                       $ ");
    SWAG_ERROR(Err0524, "too many initializers                             $ type [[%s]] has unexpected initializer count                                  $ ");
    SWAG_ERROR(Err0525, "too many parameters                               $ [[%s]] expects [[%d]], got [[%d]]                                             $ ");
    SWAG_ERROR(Err0526, "tuple type mismatch                               $ source tuple incompatible with target tuple                                   $ ");
    SWAG_ERROR(Err0527, "type mismatch                                     $ closure type cannot cast to lambda type                                       $ ");
    SWAG_ERROR(Err0528, "type mismatch                                     $ type value ([[typeinfo]]) cannot cast to compile type ([[%s]])                $ ");
    SWAG_ERROR(Err0529, "type mismatch                                     $ interface cannot cast to struct                                               $ interface only casts to struct pointer");
    SWAG_ERROR(Err0530, "type mismatch                                     $ [[%s]] cannot cast to [[%s]]                                                  $ ");
    SWAG_ERROR(Err0531, "type mismatch                                     $ [[%s]] cannot initialize from [[%s]]                                          $ ");
    SWAG_ERROR(Err0532, "type mismatch                                     $ range cannot mix signed and unsigned types                                    $ lower and upper bounds must match");
    SWAG_ERROR(Err0533, "type mismatch                                     $ [[%s]] expects return type [[%s]], got [[%s]]                                 $ ");
    SWAG_ERROR(Err0534, "type mismatch                                     $ slice bound must be integer, got [[%s]]                                       $ ");
    SWAG_ERROR(Err0535, "type mismatch                                     $ [[%s]] assignment expects [[%s]], got [[%s]]                                  $ ");
    SWAG_ERROR(Err0536, "type mismatch                                     $ expected [[%s]], got [[%s]]                                                   $ ");
    SWAG_ERROR(Err0537, "type mismatch UFCS                                $ UFCS expects [[%s]], got [[%s]]                                               $ ");
    SWAG_ERROR(Err0538, "type mismatch [[#message]]                        $ [[#message]] expects [[Swag.CompilerMsgMask]], got [[%s]]                     $ ");
    SWAG_ERROR(Err0539, "type mismatch [[@mkany]]                          $ pointer type [[%s]] doesn't match second argument [[%s]]                      $ first argument needs pointer to [[%s]], or second needs [[%s]]");
    SWAG_ERROR(Err0540, "type mismatch [[orelse]]                          $ [[struct]] not allowed as [[orelse]] argument                                 $ ");
    SWAG_ERROR(Err0541, "type mismatch [[orelse]]                          $ type [[%s]] not allowed as [[orelse]] argument                                $ ");
    SWAG_ERROR(Err0542, "type mismatch [[switch]]                          $ type [[%s]] invalid for [[switch]]                                            $ ");
    SWAG_ERROR(Err0543, "type mismatch [[with]]                            $ [[with]] not allowed on enum variable type [[%s]]                             $ [[with]] works on enum types, not variables");
    SWAG_ERROR(Err0544, "type mismatch [[with]]                            $ [[with]] not allowed on type [[%s]]                                           $ expected namespace, enum, struct, or pointer to struct");
    SWAG_ERROR(Err0545, "type mismatch argument                            $ tuple not allowed as [[@countof]] argument                                    $ ");
    SWAG_ERROR(Err0546, "type mismatch argument                            $ tuple not allowed as [[@dataof]] argument                                     $ ");
    SWAG_ERROR(Err0547, "type mismatch argument                            $ type [[%s]] invalid as [[@dataof]] argument                                   $ ");
    SWAG_ERROR(Err0548, "type mismatch argument                            $ [[#include]] expects [[string]], got [[%s]]                                   $ ");
    SWAG_ERROR(Err0549, "type mismatch argument                            $ [[#inject]] expects [[code]], got [[%s]]                                      $ ");
    SWAG_ERROR(Err0550, "type mismatch argument                            $ [[where]] expects [[bool]], got [[%s]]                                        $ ");
    SWAG_ERROR(Err0551, "type mismatch argument                            $ [[#runes]] expects [[string]], got [[%s]]                                     $ ");
    SWAG_ERROR(Err0552, "type mismatch argument                            $ [[@mkany]] second argument expects [[typeinfo]], got [[%s]]                   $ ");
    SWAG_ERROR(Err0553, "type mismatch argument                            $ [[@mkinterface]] second argument expects [[typeinfo]], got [[%s]]             $ ");
    SWAG_ERROR(Err0554, "type mismatch argument                            $ [[%s]] first argument needs block pointer for multiple values, got [[%s]]     $ ");
    SWAG_ERROR(Err0555, "type mismatch argument                            $ [[%s]] first argument needs block pointer for variable count, got [[%s]]      $ ");
    SWAG_ERROR(Err0556, "type mismatch argument                            $ [[%s]] first argument expects block pointer, got [[%s]]                       $ ");
    SWAG_ERROR(Err0557, "type mismatch argument                            $ [[%s]] first argument expects pointer, got [[%s]]                             $ ");
    SWAG_ERROR(Err0558, "type mismatch argument                            $ [[@mkinterface]] first argument expects pointer or struct, got [[%s]]         $ ");
    SWAG_ERROR(Err0559, "type mismatch argument                            $ [[@mkstring]] first argument expects [[*u8]], got [[%s]]                      $ ");
    SWAG_ERROR(Err0560, "type mismatch argument                            $ [[@mkcallback]] expects function pointer, got [[%s]]                          $ ");
    SWAG_ERROR(Err0561, "type mismatch argument                            $ expected [[%s]], got [[%s]]                                                   $ ");
    SWAG_ERROR(Err0562, "type mismatch argument                            $ [[@countof]] expects integer, got [[%s]]                                      $ ");
    SWAG_ERROR(Err0563, "type mismatch argument                            $ [[%s]] count expects integer, got [[%s]]                                      $ ");
    SWAG_ERROR(Err0564, "type mismatch argument                            $ [[@mkinterface]] third argument expects interface name, got [[%s]]            $ ");
    SWAG_ERROR(Err0565, "type mismatch argument                            $ [[%s]] expects [[string]], got [[%s]]                                         $ ");
    SWAG_ERROR(Err0566, "type mismatch array                               $ static array cannot be [[void]]                                               $ ");
    SWAG_ERROR(Err0567, "type mismatch array dimension                     $ array dimension must be integer, got [[%s]]                                   $ ");
    SWAG_ERROR(Err0568, "type mismatch array index                         $ array index must be integer, got [[%s]]                                       $ ");
    SWAG_ERROR(Err0569, "type mismatch assign                              $ tuple assignment: right expression incompatible                               $ ");
    SWAG_ERROR(Err0570, "type mismatch assign                              $ function pointer cannot assign to constant                                    $ ");
    SWAG_ERROR(Err0571, "type mismatch comparison                          $ slice only compares with [[null]], not [[%s]]                                              $ ");
    SWAG_ERROR(Err0572, "type mismatch comparison                          $ interface only compares with [[null]], another interface, or [[typeinfo]], not [[%s]]      $ ");
    SWAG_ERROR(Err0573, "type mismatch comparison                          $ [[any]] only compares with [[null]] or [[typeinfo]], not [[%s]]                            $ ");
    SWAG_ERROR(Err0574, "type mismatch comparison                          $ tuples cannot use comparison operations                                       $ ");
    SWAG_ERROR(Err0575, "type mismatch comparison                          $ operation [['%s']] invalid for type [[%s]]                                    $ ");
    SWAG_ERROR(Err0576, "type mismatch comparison                          $ operation [['%s']] invalid for left type [[%s]]                               $ ");
    SWAG_ERROR(Err0577, "type mismatch comparison                          $ operation [['%s']] invalid for right type [[%s]]                              $ ");
    SWAG_ERROR(Err0578, "type mismatch const                               $ immutable [[%s]] cannot cast to mutable [[%s]]                                $ ");
    SWAG_ERROR(Err0579, "type mismatch const argument                      $ [[%s]] first argument needs mutable value, got [[%s]]                         $ ");
    SWAG_ERROR(Err0580, "type mismatch const argument                      $ [[%s]] first argument needs mutable pointer, got [[%s]]                       $ ");
    SWAG_ERROR(Err0581, "type mismatch const argument                      $ [[%s]] first argument needs mutable variable, got [[%s]]                      $ ");
    SWAG_ERROR(Err0582, "type mismatch embedded enum                       $ expected enum type, got [[%s]]                                                $ ");
    SWAG_ERROR(Err0583, "type mismatch enum                                $ type [[%s]] invalid for enum                                                  $ ");
    SWAG_ERROR(Err0584, "type mismatch enum                                $ type [[%s]] invalid for [[#[Swag.EnumFlags]]] enum                            $ must be unsigned integer");
    SWAG_ERROR(Err0585, "type mismatch enum                                $ type [[%s]] invalid for [[#[Swag.EnumIndex]]] enum                            $ must be integer");
    SWAG_ERROR(Err0586, "type mismatch enum                                $ type [[%s]] invalid for [[#[Swag.NoDuplicate]]] enum                          $ ");
    SWAG_ERROR(Err0587, "type mismatch enum                                $ [[cstring]] invalid as enum type                                              $ use [[string]] instead");
    SWAG_ERROR(Err0588, "type mismatch enum                                $ expected enum type [[%s]], got [[%s]]                                         $ ");
    SWAG_ERROR(Err0589, "type mismatch enum                                $ enum array type [[%s]] must be [[const]]                                      $ use [[const %s]]");
    SWAG_ERROR(Err0590, "type mismatch enum                                $ enum slice type [[%s]] must be [[const]]                                      $ use [[const %s]]");
    SWAG_ERROR(Err0591, "type mismatch field                               $ field [[%s]] expects [[%s]], got [[%s]]                                       $ ");
    SWAG_ERROR(Err0592, "type mismatch generic                             $ expected [[%s]], got [[%s]]                                                   $ ");
    SWAG_ERROR(Err0593, "type mismatch generic parameter                   $ tuple types not allowed as generic parameters                                 $ ");
    SWAG_ERROR(Err0594, "type mismatch operation                           $ bit inversion [['~']] invalid for type [[%s]]                                 $ ");
    SWAG_ERROR(Err0595, "type mismatch operation                           $ operation [['%s']] needs integer, got [[%s]]                                  $ ");
    SWAG_ERROR(Err0596, "type mismatch operation                           $ operation [['%s']] invalid for type [[%s]]                                    $ ");
    SWAG_ERROR(Err0597, "type mismatch operation                           $ operation [['%s']] invalid for left type [[%s]]                               $ ");
    SWAG_ERROR(Err0598, "type mismatch operation                           $ operation [['%s']] invalid for right type [[%s]]                              $ ");
    SWAG_ERROR(Err0599, "type mismatch operation                           $ operation [['%s']] invalid for tuple types                                    $ ");
    SWAG_ERROR(Err0600, "type mismatch pointer cast                        $ value pointer [[%s]] cannot cast to block pointer [[%s]]                      $ ");
    SWAG_ERROR(Err0601, "type mismatch pointer cast                        $ [[%s]] cannot cast to pointer type                                            $ ");
    SWAG_ERROR(Err0602, "type mismatch return                              $ return type [[%s]] conflicts with deduced [[%s]]                              $ ");
    SWAG_ERROR(Err0603, "type mismatch return                              $ return type [[%s]] conflicts with deduced nothing                             $ ");
    SWAG_ERROR(Err0604, "type mismatch return                              $ [[#ast]] must return [[string]], got [[%s]]                                   $ ");
    SWAG_ERROR(Err0605, "type mismatch return callback                     $ callback cannot return type [[%s]]                                            $ ");
    SWAG_ERROR(Err0606, "unclosed arguments list                           $ expected [[)]] to close attribute arguments                                   $ ");
    SWAG_ERROR(Err0607, "unclosed character literal                        $ expected closing quote before line end                                        $ ");
    SWAG_ERROR(Err0608, "unclosed comment                                  $ missing closing [['*/']]                                                      $ ");
    SWAG_ERROR(Err0609, "unclosed string literal                           $ expected closing [['\"']] before line end                                     $ use [[\"\"\"string\"\"\"]] for multi-line strings");
    SWAG_ERROR(Err0610, "unexpected [[#scope]] identifier                  $ expected [[#scope]] identifier, got $$TKN$$                                   $ ");
    SWAG_ERROR(Err0611, "unexpected [[#up]] count                          $ expected integer literal for [[#up]], got $$TKN$$                             $ ");
    SWAG_ERROR(Err0612, "unexpected [[break]] scope                        $ expected scope name or end of line after [[break]], got $$TKN$$               $ ");
    SWAG_ERROR(Err0613, "unexpected [[discard]] target                     $ expected call after [[discard]], got $$TKN$$                                  $ ");
    SWAG_ERROR(Err0614, "unexpected [[foreach]] name                       $ [[foreach]] specialization invalid for [[%s]]                                 $ only valid for struct visits");
    SWAG_ERROR(Err0615, "unexpected [[switch]] content                     $ expected [[case]] or [[default]], got $$TKN$$                                 $ ");
    SWAG_ERROR(Err0616, "unexpected [[with]] expression                    $ [[with]] expects identifier or variable declaration                           $ ");
    SWAG_ERROR(Err0617, "unexpected assignment                             $ [['=']] invalid inside expression                                             $ use [['==']] for comparison");
    SWAG_ERROR(Err0618, "unexpected alias name                             $ expected identifier or type for alias, got $$TKN$$                            $ ");
    SWAG_ERROR(Err0619, "unexpected alias name                             $ expected alias name after [[%s]], got $$TKN$$                                 $ ");
    SWAG_ERROR(Err0620, "unexpected alias variable name                    $ expected identifier as variable alias, got $$TKN$$                            $ ");
    SWAG_ERROR(Err0621, "unexpected aliased names                          $ variable aliases invalid for [[%s]]: not macro or mixin                       $ ");
    SWAG_ERROR(Err0622, "unexpected argument name                          $ expected argument name before [[:]], got $$TKN$$                              $ ");
    SWAG_ERROR(Err0623, "unexpected attribute name                         $ expected attribute name, got $$TKN$$                                          $ ");
    SWAG_ERROR(Err0624, "unexpected attribute return type                  $ [[->]] return type invalid in attribute                                       $ ");
    SWAG_ERROR(Err0625, "unexpected binary digit                           $ expected binary digit, got $$TKN$$                                            $ binary literals use [[0]] or [[1]]");
    SWAG_ERROR(Err0626, "unexpected character                              $ unexpected character [['%s']]                                                 $ ");
    SWAG_ERROR(Err0627, "unexpected comparison                             $ [['==']] invalid here                                                         $ use [['=']] for assignment");
    SWAG_ERROR(Err0628, "unexpected compiler instruction scope             $ compiler instruction cannot be scoped                                         $ compiler instructions belong to no scope");
    SWAG_ERROR(Err0629, "unexpected default value                          $ default values invalid for variadic parameters                                $ ");
    SWAG_ERROR(Err0630, "unexpected embedded instruction                   $ expected embedded instruction or curly block, got $$TKN$$                     $ ");
    SWAG_ERROR(Err0631, "unexpected embedded instruction                   $ expected embedded instruction, got $$TKN$$                                    $ ");
    SWAG_ERROR(Err0632, "unexpected enum identifier                        $ expected enum value identifier, got $$TKN$$                                   $ ");
    SWAG_ERROR(Err0633, "unexpected enum name                              $ expected enum name, got $$TKN$$                                               $ ");
    SWAG_ERROR(Err0634, "unexpected function body                          $ [[#[Swag.Foreign]]] function cannot have body                                 $ ");
    SWAG_ERROR(Err0635, "unexpected function overload                      $ duplicate function [[%s]]                                                     $ mark all with [[#[Swag.Overload]]] for overloading");
    SWAG_ERROR(Err0636, "unexpected generic arguments                      $ generic arguments invalid after %s                                            $ ");
    SWAG_ERROR(Err0637, "unexpected generic arguments                      $ generic arguments invalid after name                                          $ ");
    SWAG_ERROR(Err0638, "unexpected generic arguments                      $ generic arguments invalid after variable [[%s]]                               $ ");
    SWAG_ERROR(Err0639, "unexpected generic function                       $ generic function [[%s]] marked [[#[Swag.NotGeneric]]]                         $ ");
    SWAG_ERROR(Err0640, "unexpected generic parameters                     $ generic parameters invalid in [[%s]]                                          $ ");
    SWAG_ERROR(Err0641, "unexpected generic parameters                     $ generic parameters invalid in [[%s]]: marked [[#[Swag.NotGeneric]]]           $ ");
    SWAG_ERROR(Err0642, "unexpected generic parameters                     $ generic parameters invalid in interface function                              $ ");
    SWAG_ERROR(Err0643, "unexpected hexadecimal digit                      $ expected hexadecimal digit, got $$TKN$$                                       $ hexadecimal uses [[0-9]], [[A-F]], [[a-f]]");
    SWAG_ERROR(Err0644, "unexpected identifier                             $ consecutive identifiers not allowed                                           $ ");
    SWAG_ERROR(Err0645, "unexpected identifier                             $ identifier [[%s]] invalid at file level                                       $ only mixin function calls allowed at top level");
    SWAG_ERROR(Err0646, "unexpected intrinsic scope                        $ intrinsic cannot be scoped                                                    $ intrinsics belong to no scope");
    SWAG_ERROR(Err0647, "unexpected instruction modifier                   $ modifier [[%s]] invalid for [[%s]]                                            $ ");
    SWAG_ERROR(Err0648, "unexpected lambda parameter name                  $ name invalid in lambda type declaration                                       $ remove it");
    SWAG_ERROR(Err0649, "unexpected name count                             $ [[foreach]] allows max [[2]] alias names, got [[%u]]                          $ ");
    SWAG_ERROR(Err0650, "unexpected number prefix                          $ expected [[0x]] (hex) or [[0b]] (binary), got 0$$TKN$$                        $ ");
    SWAG_ERROR(Err0651, "unexpected parameter name                         $ expected parameter name, got $$TKN$$                                          $ ");
    SWAG_ERROR(Err0652, "unexpected parameters                             $ compiler %s cannot have parameters                                            $ expected [[{]]");
    SWAG_ERROR(Err0653, "unexpected return value                           $ [[#[Swag.CalleeReturn]]] function cannot declare return value                 $ ");
    SWAG_ERROR(Err0654, "unexpected return value                           $ %s cannot return value                                                        $ ");
    SWAG_ERROR(Err0655, "unexpected return value                           $ expected [[->]] before $$TKN$$ for return type                                $ ");
    SWAG_ERROR(Err0656, "unexpected return value                           $ expected [[->]] for return type, got $$TKN$$                                  $ ");
    SWAG_ERROR(Err0657, "unexpected return value                           $ unexpected return type [[%s]]                                                 $ ");
    SWAG_ERROR(Err0658, "unexpected return value                           $ [[%s]] has unexpected return type [[%s]]                                      $ ");
    SWAG_ERROR(Err0659, "unexpected symbol                                 $ unexpected symbol [['%s']] after %s                                           $ ");
    SWAG_ERROR(Err0660, "unexpected tuple unpacking name                   $ expected variable name or [[?]], got $$TKN$$                                  $ ");
    SWAG_ERROR(Err0661, "unexpected type                                   $ declaration cannot start with type                                            $ ");
    SWAG_ERROR(Err0662, "unexpected type alias                             $ type alias invalid as [[impl]] block name                                     $ use direct type");
    SWAG_ERROR(Err0663, "unexpected type declaration                       $ type declaration invalid after [[me]]                                         $ [[me]] is implicitly typed");
    SWAG_ERROR(Err0664, "unexpected type declaration                       $ type declaration invalid after unnamed parameter                              $ ");
    SWAG_ERROR(Err0665, "unexpected type suffix                            $ type suffix invalid after %s                                                  $ ");
    SWAG_ERROR(Err0666, "unknown [[#global]] instruction                   $ [[%s]] not valid [[#global]] instruction                                      $ ");
    SWAG_ERROR(Err0667, "misplaced [[mtd]]                                 $ [[mtd]] lambda needs capture parameters                                       $ use [[func]] or declare captures between [[|...|]]");
    SWAG_ERROR(Err0669, "unknown [[foreach]]                               $ type [[%s]] cannot be visited                                                 $ no [[opVisit]] found");
    SWAG_ERROR(Err0670, "unknown [[foreach]] name                          $ visit specialization [[%s]] not found in [[%s]]                               $ ");
    SWAG_ERROR(Err0671, "unknown attribute                                 $ attribute [[%s]] not found                                                    $ ");
    SWAG_ERROR(Err0672, "unknown attribute                                 $ attribute [[%s]] not found in [[%s]]                                          $ ");
    SWAG_ERROR(Err0673, "unknown compiler instruction                      $ [[%s]] not valid compiler instruction                                         $ compiler instructions start with [['#']]");
    SWAG_ERROR(Err0674, "unknown enum                                      $ enum [[%s]] not found                                                         $ ");
    SWAG_ERROR(Err0675, "unknown enum value                                $ enum value [[%s]] not found in [[%s]]                                         $ ");
    SWAG_ERROR(Err0676, "unknown escape code                               $ [['%c']] not valid escape code                                                $ ");
    SWAG_ERROR(Err0677, "unknown field name                                $ field [[%s]] not found in [[%s]]                                              $ ");
    SWAG_ERROR(Err0678, "unknown file                                      $ file [[\"%s\"]] not found                                                     $ ");
    SWAG_ERROR(Err0679, "unknown function                                  $ function [[%s]] not found                                                     $ ");
    SWAG_ERROR(Err0680, "unknown function                                  $ function [[%s]] not found in [[%s]]                                           $ ");
    SWAG_ERROR(Err0404, "invalid dot notation                              $ statements starting with [[.]] only in [[with]] or [[mtd]]                    $ use [[me.field]] or wrap in [[with]]");
    SWAG_ERROR(Err0681, "unresolved shorthand                              $ shorthand [[%s]] unresolved: no [[enum]], [[with]], or [[mtd]] context        $ ");
    SWAG_ERROR(Err0682, "unknown identifier                                $ identifier [[%s]] not found                                                   $ ");
    SWAG_ERROR(Err0683, "unknown identifier                                $ identifier [[%s]] not found in [[%s]] or %s [[%s]]                            $ ");
    SWAG_ERROR(Err0684, "unknown identifier                                $ identifier [[%s]] not found in tuple                                          $ ");
    SWAG_ERROR(Err0685, "unknown interface function                        $ function [[%s]] not found in [[%s]]                                           $ ");
    SWAG_ERROR(Err0686, "unknown intrinsic                                 $ [[%s]] not valid intrinsic                                                    $ ");
    SWAG_ERROR(Err0687, "unknown label                                     $ scope label [[%s]] not found                                                  $ ");
    SWAG_ERROR(Err0688, "unknown method                                    $ method [[%s]] not found in [[%s]]                                             $ ");
    SWAG_ERROR(Err0689, "unknown named argument                            $ named argument [[%s]] not found                                               $ ");
    SWAG_ERROR(Err0690, "unknown pass name                                 $ [[%s]] not valid compiler pass                                                $ ");
    SWAG_ERROR(Err0691, "unknown relocation offset                         $ struct member [[%s]] not found                                                $ ");
    SWAG_ERROR(Err0692, "unknown struct                                    $ struct [[%s]] not found                                                       $ ");
    SWAG_ERROR(Err0693, "unknown struct                                    $ struct [[%s]] not found in [[%s]]                                             $ ");
    SWAG_ERROR(Err0694, "unknown type                                      $ type [[%s]] not found                                                         $ ");
    SWAG_ERROR(Err0695, "unknown value export                              $ [[\"%s\"]] not valid [[#[Swag.ExportType]]]                                   $ use [[\"methods\"]] or [[\"nozero\"]]");
    SWAG_ERROR(Err0696, "unknown value match                               $ [[\"%s\"]] not valid [[#[Swag.Match]]]                                        $ use [[\"where\"]] or [[\"me\"]]");
    SWAG_ERROR(Err0697, "unknown value optim                               $ [[\"%s\"]] not valid [[#[Swag.Optim]]]                                        $ use [[\"bytecode\"]] or [[\"backend\"]]");
    SWAG_ERROR(Err0698, "unknown value safety                              $ [[\"%s\"]] not valid safety value                                             $ use [[\"boundcheck|overflow|math|switch|unreachable|dyncast|bool|nan|null\"]]");
    SWAG_ERROR(Err0699, "unknown variable                                  $ variable [[%s]] not found                                                     $ ");
    SWAG_ERROR(Err0700, "unknown variable                                  $ variable [[%s]] not found in [[%s]]                                           $ ");
    SWAG_ERROR(Err0701, "unpack count mismatch                             $ tuple has [[%u]] fields, cannot unpack [[%u]] variables                       $ ");
    SWAG_ERROR(Err0702, "unpack count mismatch                             $ tuple has only [[%u]] fields, cannot unpack [[%u]] variables                  $ ");
    SWAG_ERROR(Err0703, "unresolved array dimension                        $ array dimension cannot be deduced: missing initialization                     $ ");
    SWAG_ERROR(Err0704, "unresolved enum flag value                        $ flag [[%s]] value cannot be deduced: previous value not power of two          $ ");
    SWAG_ERROR(Err0705, "unresolved generic                                $ generic arguments for %s [[%s]] cannot be deduced                             $ ");
    SWAG_ERROR(Err0706, "unresolved identifier                             $ identifier [[%s]] cannot be resolved                                          $ ");
    SWAG_ERROR(Err0707, "unresolved semantic                               $ cannot resolve                                                                $ ");
    SWAG_ERROR(Err0708, "unresolved variable type                          $ variable type cannot be deduced: expression is [[null]]                       $ ");
    SWAG_ERROR(Err0709, "unsuitable struct for union                       $ [[%s]] invalid for union: contains [[%s]]                                     $ ");
    SWAG_ERROR(Err0710, "unused alias name                                 $ no matching variable for alias [[%s]]                                         $ remove it");
    SWAG_ERROR(Err0711, "unused return value                               $ function [[%s]] return value cannot be ignored                                $ use [[discard]] to ignore");
    SWAG_ERROR(Err0712, "unused return value                               $ intrinsic [[%s]] return value cannot be ignored                               $ ");
    SWAG_ERROR(Err0713, "unused return value                               $ lambda [[%s]] return value cannot be ignored                                  $ use [[discard]] to ignore");
    SWAG_ERROR(Err0714, "duplicate [[#import]] location                    $ [[#import]] location already defined                                          $ ");
    SWAG_ERROR(Err0715, "duplicate [[#import]] location                    $ module [[%s]] location already defined as [[%s]]                              $ ");
    SWAG_ERROR(Err0716, "duplicate [[#import]] version                     $ [[#import]] version already defined                                           $ ");
    SWAG_ERROR(Err0717, "duplicate [[#import]] version                     $ module [[%s]] version already defined as [[%s]]                               $ ");
    SWAG_ERROR(Err0718, "execution exception                               $ execution exception occurred                                                  $ ");
    SWAG_ERROR(Err0719, "invalid generic instantiation                     $ variable cannot be created: generic type [[%s]]                               $ ");
    SWAG_ERROR(Err0720, "invalid generic instantiation                     $ constant cannot be created: generic type [[%s]]                               $ ");
    SWAG_ERROR(Err0721, "missing generic arguments                         $ %s needs generic arguments                                                    $ ");
    SWAG_ERROR(Err0722, "missing generic arguments                         $ generic function [[%s]] needs generic arguments                               $ ");
    SWAG_ERROR(Err0723, "missing generic arguments                         $ generic struct [[%s]] needs generic arguments                                 $ ");
    SWAG_ERROR(Err0724, "fetch error                                       $ file [[%s]] fetch failed for module [[%s]]                                    $ ");
    SWAG_ERROR(Err0725, "file delete error                                 $ file [[%s]] deletion failed                                                   $ ");
    SWAG_ERROR(Err0726, "file format error                                 $ file format must be ASCII, UTF-8, or UTF-8-BOM                                $ ");
    SWAG_ERROR(Err0727, "file not found                                    $ documentation page [[%s]] not found                                           $ ");
    SWAG_ERROR(Err0728, "file not found                                    $ file [[%s]] not found in module [[%s]]                                        $ ");
    SWAG_ERROR(Err0729, "file open error                                   $ [[#include]] file [[%s]] cannot be opened                                     $ ");
    SWAG_ERROR(Err0730, "file open error                                   $ file [[%s]] cannot be opened                                                  $ ");
    SWAG_ERROR(Err0731, "file open error                                   $ file [[%s]] cannot be opened                                                  $ ");
    SWAG_ERROR(Err0732, "file open error                                   $ file [[%s]] cannot be opened for writing                                      $ ");
    SWAG_ERROR(Err0733, "file read error                                   $ source file [[%s]] cannot be read                                             $ ");
    SWAG_ERROR(Err0734, "file write error                                  $ file [[%s]] cannot be written                                                 $ ");
    SWAG_ERROR(Err0735, "folder error                                      $ directory [[%s]] cannot be created                                            $ ");
    SWAG_ERROR(Err0736, "folder error dependency                           $ dependency module folder [[\"%s\"]] not found                                 $ ");
    SWAG_ERROR(Err0737, "invalid assignment                                $ left expression is not a value                                                $ ");
    SWAG_ERROR(Err0738, "invalid expression                                $ expected expression, got $$TKN$$                                              $ ");
    SWAG_ERROR(Err0739, "invalid [[#import]] location                      $ [[#import]] location format invalid                                           $ use [[location=\"mode@accesspath\"]] where mode is [[swag]] or [[disk]]");
    SWAG_ERROR(Err0740, "invalid [[#import]] version                       $ [[#import]] version format invalid                                            $ ");
    SWAG_ERROR(Err0741, "invalid [[#import]] version                       $ major version required: revision set to [[%d]]                                $ ");
    SWAG_ERROR(Err0742, "invalid [[#import]] version                       $ revision required: build number set to [[%d]]                                 $ ");
    SWAG_ERROR(Err0743, "invalid literal                                   $ literal [[%I64u]] cannot be converted                                         $ ");
    SWAG_ERROR(Err0744, "invalid reference                                 $ current file scope cannot be referenced                                       $ ");
    SWAG_ERROR(Err0745, "invalid return type                               $ [[%s]] invalid as function return type                                        $ ");
    SWAG_ERROR(Err0746, "invalid runtime typeinfo                          $ [[%s]] cannot convert to runtime typeinfo                                     $ ");
    SWAG_ERROR(Err0747, "invalid type                                      $ [[void]] expression cannot initialize                                         $ ");
    SWAG_ERROR(Err0748, "invalid variable name                             $ variable name [[%s]] starts with [[#]], invalid                               $ only [[#uniq]] and [[#alias]] allowed");
    SWAG_ERROR(Err0749, "misplaced [[#dependencies]]                       $ [[#dependencies]] must be at file level                                       $ ");
    SWAG_ERROR(Err0750, "misplaced [[#global testerror]]                   $ [[#global testerror]] only in test files ([[./tests]] folder)                 $ ");
    SWAG_ERROR(Err0751, "misplaced [[#global testwarning]]                 $ [[#global testwarning]] only in test files ([[./tests]] folder)               $ ");
    SWAG_ERROR(Err0752, "misplaced [[#import]]                             $ [[#import]] only in [[#dependencies]] block                                   $ ");
    SWAG_ERROR(Err0753, "misplaced [[#load]]                               $ [[#load]] only in [[#dependencies]] block                                     $ ");
    SWAG_ERROR(Err0754, "misplaced [[#test]]                               $ [[#test]] only in test modules ([[./tests]] folder)                           $ ");
    SWAG_ERROR(Err0755, "missing [[#import]] argument                      $ expected module name after [[#import]], got $$TKN$$                           $ ");
    SWAG_ERROR(Err0756, "missing [[#include]] argument                     $ expected filename after [[#include]], got $$TKN$$                             $ ");
    SWAG_ERROR(Err0757, "missing [[#main]]                                 $ entry point [[#main]] not found                                               $ ");
    SWAG_ERROR(Err0758, "missing initialization                            $ immutable variable needs initialization                                       $ ");
    SWAG_ERROR(Err0759, "missing test error                                $ expected at least one error                                                   $ ");
    SWAG_ERROR(Err0760, "missing test warning                              $ expected at least one warning                                                 $ ");
    SWAG_ERROR(Err0761, "call level exceeded                               $ call level limit [[--limit-recurse-bc:%d]] reached                            $ ");
    SWAG_ERROR(Err0762, "compiler limit exceeded                           $ %s size exceeds [[0x%I64x]] bytes                                             $ ");
    SWAG_ERROR(Err0763, "compiler limit exceeded                           $ data segment [[%s]] size exceeds [[0x%I64x]] bytes                            $ ");
    SWAG_ERROR(Err0764, "system error                                      $ process [[%s]] creation failed                                                $ ");
    SWAG_ERROR(Err0765, "system error                                      $ process [[%s]] creation failed (::CreatePipe)                                           $ ");
    SWAG_ERROR(Err0766, "type mismatch                                     $ type [[%s]] incompatible with command-line [[%s]] type [[%s]]                           $ ");
    SWAG_ERROR(Err0767, "type mismatch operation                           $ operation [['%s']] invalid: left is enum [[%s]] not marked [[#[Swag.EnumFlags]]]        $ ");
    SWAG_ERROR(Err0768, "type mismatch operation                           $ operation [['%s']] invalid: right is enum [[%s]] not marked [[#[Swag.EnumFlags]]]       $ ");
    SWAG_ERROR(Err0769, "unexpected [[#import]] location                   $ expected location path after [[#import]], got $$TKN$$                                   $ ");
    SWAG_ERROR(Err0770, "unexpected [[#import]] version                    $ expected version string after [[#import]], got $$TKN$$                                  $ ");
    SWAG_ERROR(Err0771, "unknown dependency                                $ module dependency [[%s]] not found                                            $ ");
    SWAG_ERROR(Err0772, "unknown foreign function                          $ foreign function [[%s]] not found                                             $ ");
    SWAG_ERROR(Err0774, "unknown value location                            $ [[\"%s\"]] not valid [[location]] value                                       $ use [[\"swag\"]] or [[\"disk\"]]");
    SWAG_ERROR(Err0775, "unresolved dependency                             $ module [[%s]] dependency: version mismatch                                    $ ");
    SWAG_ERROR(Err0776, "unresolved dependency                             $ module [[%s]] dependency: version [[%s]] not found                            $ ");
    SWAG_ERROR(Err0777, "unresolved dependency                             $ module [[%s]] dependency: version [[%s]] not found at [[%s]]                  $ ");
    SWAG_ERROR(Err0778, "unresolved dependency                             $ module [[%s]] dependency: [[location]] is empty                               $ ");
    SWAG_ERROR(Err0779, "unresolved foreign call                           $ module [[%s]] loading failed for foreign function [[%s]]                      $ ");
    SWAG_ERROR(Err0780, "unresolved generic                                $ generic type cannot be deduced: embedded tuples too complex                   $ ");
    SWAG_ERROR(Err0781, "unresolved interface                              $ interface cannot be resolved: generic type [[%s]]                             $ ");
    SWAG_ERROR(Err0782, "unresolved variable type                          $ %s [[%s]] type cannot be deduced                                              $ ");
    SWAG_ERROR(Err0783, "unsupported [[#nameof]] argument                  $ [[#nameof]] argument cannot be evaluated                                      $ ");
    SWAG_ERROR(Err0784, "unsupported [[#stringof]] argument                $ [[#stringof]] argument cannot be evaluated                                    $ ");
    SWAG_ERROR(Err0786, "invalid intrinsic arguments                       $ [[%s]] has unexpected arguments                                               $ [[%s]] is a value, not function call; remove [['(']]");
    SWAG_ERROR(Err0428, "type mismatch assign                              $ struct member cannot initialize with function pointer                         $ ");
    SWAG_ERROR(Err0353, "file patch error                                  $ icon patch failed in [[%s]] : %s                                              $ ");
    SWAG_ERROR(Err0785, "missing [[#import]] location                      $ expected location as second [[#import]] argument, got $$TKN$$                 $ use [[location:\"location\"]]");
    SWAG_ERROR(Err0773, "missing [[#import]] version                       $ expected version as third [[#import]] argument, got $$TKN$$                   $ use [[version:\"version\"]]");
    SWAG_ERROR(Err0668, "type mismatch UFCS                                $ UFCS expects type [[%s]]                                                      $ ");
    SWAG_ERROR(Err0310, "invalid top level call                            $ [[%s]] not marked [[#[Swag.Mixin]]]                                           $ only mixin calls allowed at top level");
    
    SWAG_ERROR(Err0167, nullptr);
    SWAG_ERROR(Err0421, nullptr);
    SWAG_ERROR(Err0309, nullptr);
    SWAG_ERROR(Err0422, nullptr);
    SWAG_ERROR(Err0468, nullptr);
    SWAG_ERROR(Err0060, nullptr);
    SWAG_ERROR(Err0079, nullptr);
    SWAG_ERROR(Err0320, nullptr);
    SWAG_ERROR(Err0481, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
}

Utf8 formErr(ErrorID idx, ...)
{
    va_list args;
    va_start(args, idx);
    auto result = form("[%s] %s", g_ErrList[idx], g_E[idx].cstr());
    result      = form(result.cstr(), args);
    va_end(args);
    return result;
}

Utf8 toErr(ErrorID idx)
{
    return form("[%s] %s", g_ErrList[idx], g_E[idx].cstr());
}
