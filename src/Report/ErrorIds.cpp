#include "pch.h"
#include "Report/ErrorIds.h"

namespace
{
#undef SWAG_ERROR
#define SWAG_ERROR(__enum) #__enum
    const char* g_ErrList[] = {
#include "ErrorList.h"

    };
}

Utf8 g_E[MaxErrors];
#undef SWAG_ERROR
#define SWAG_ERROR(__n, __msg)                 \
    do                                         \
    {                                          \
        SWAG_ASSERT(g_E[(int) (__n)].empty()); \
        g_E[(int) (__n)] = __msg;              \
    } while (0)

void initErrors()
{
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Fat0001, "[cmdline] [[%s]] needs [[true]] or [[false]], got [[%s]]");
    SWAG_ERROR(Fat0002, "[cmdline] [[%s]] needs string argument");
    SWAG_ERROR(Fat0003, "[cmdline] [[%s]] needs integer argument, got [[%s]]");
    SWAG_ERROR(Fat0004, "[cmdline] [[%s]] needs integer argument");
    SWAG_ERROR(Fat0005, "[cmdline] [[%s]] requires [[%s]]");
    SWAG_ERROR(Fat0006, "[cmdline] [[--stack-size]] out of range (%s provided, range [%s, %s])");
    SWAG_ERROR(Fat0007, "[cmdline] unknown argument [[%s]]");
    SWAG_ERROR(Fat0008, "[cmdline] [[--arch]] [[%s]] unsupported for SCBE backend");
    SWAG_ERROR(Fat0009, "[cmdline] [[--os]] [[%s]] unsupported for SCBE backend");
    SWAG_ERROR(Fat0010, "[fatal] cache directory [[%s]] not found");
    SWAG_ERROR(Fat0011, "[fatal] dependency module [[%s]] not found in workspace");
    SWAG_ERROR(Fat0012, "[fatal] duplicate module name [[%s]] in workspace (path [[%s]])");
    SWAG_ERROR(Fat0013, "[fatal] workspace folder [[--workspace]] required");
    SWAG_ERROR(Fat0014, "[fatal] compiler bootstrap issues");
    SWAG_ERROR(Fat0015, "[fatal] compiler runtime issues");
    SWAG_ERROR(Fat0016, "[fatal] cache directory [[%s]] creation failed");
    SWAG_ERROR(Fat0017, "[fatal] directory [[%s]] creation failed");
    SWAG_ERROR(Fat0018, "[fatal] file [[%s]] creation failed");
    SWAG_ERROR(Fat0019, "[fatal] public directory [[%s]] creation failed");
    SWAG_ERROR(Fat0020, "[fatal] script file [[%s]] creation failed");
    SWAG_ERROR(Fat0021, "[fatal] target directory [[%s]] creation failed");
    SWAG_ERROR(Fat0022, "[fatal] directory [[%s]] deletion failed");
    SWAG_ERROR(Fat0023, "[fatal] file [[%s]] deletion failed");
    SWAG_ERROR(Fat0024, "[fatal] [[--tag:%s]] value invalid (%s)");
    SWAG_ERROR(Fat0025, "[fatal] script file extension must be [[.swgs]], got [[%s]]");
    SWAG_ERROR(Fat0026, "[fatal] [[Swag]] command [[%s]] invalid");
    SWAG_ERROR(Fat0027, "[fatal] workspace [[%s]] invalid: missing [[modules/]] or [[tests/]]");
    SWAG_ERROR(Fat0028, "[fatal] module [[%s]] already exists in [[/modules]]");
    SWAG_ERROR(Fat0029, "[fatal] module [[%s]] not found in workspace");
    SWAG_ERROR(Fat0030, "[fatal] file [[%s]] not found");
    SWAG_ERROR(Fat0031, "[fatal] script file missing (use [[--file:<filename>.swgs]])");
    SWAG_ERROR(Fat0032, "[fatal] compile tag value [[%s]] unexpected (use [[--tag:%s]])");
    SWAG_ERROR(Fat0033, "[fatal] compile tag type [[%s]] unknown (use [[--tag:%s]])");
    SWAG_ERROR(Fat0034, "[fatal] workspace folder [[%s]] already exists");
    SWAG_ERROR(Fat0035, "[fatal] workspace folder [[%s]] not found");
    SWAG_ERROR(Fat0036, "[fatal] windows sdk folder not found");
    SWAG_ERROR(Fat0037, "[fatal] file or folder to format missing (use [[--file]])");
    SWAG_ERROR(Fat0038, "[fatal] [[%s]] is not a valid swag file");

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Saf0001, "[safety] invalid cast from [[any]] to [[%s]] $ note: this safety check was triggered because [[#[Swag.Safety(\"dyncast\")]]] is enabled");
    SWAG_ERROR(Saf0002, "[safety] cannot cast a null value to [[%s]] $ note: this safety check was triggered because [[#[Swag.Safety(\"dyncast\")]]] is enabled");
    SWAG_ERROR(Saf0003, "[safety] invalid boolean value detected $ note: this safety check was triggered because [[#[Swag.Safety(\"bool\")]]] is enabled");
    SWAG_ERROR(Saf0004, "[safety] index out of range $ note: this safety check was triggered because [[#[Swag.Safety(\"boundcheck\")]]] is enabled");
    SWAG_ERROR(Saf0005, "[safety] lower bound greater than upper bound $ note: this safety check was triggered because [[#[Swag.Safety(\"boundcheck\")]]] is enabled");
    SWAG_ERROR(Saf0006, "[safety] lower bound greater than upper bound $ note: this safety check was triggered because [[#[Swag.Safety(\"boundcheck\")]]] is enabled");
    SWAG_ERROR(Saf0007, "[safety] upper bound exceeds array length $ note: this safety check was triggered because [[#[Swag.Safety(\"boundcheck\")]]] is enabled");
    SWAG_ERROR(Saf0008, "[safety] overflow detected in [[@abs]] (type [[%s]]) $ note: this safety check was triggered because [[#[Swag.Safety(\"math\")]]] is enabled");
    SWAG_ERROR(Saf0009, "[safety] invalid argument passed to [[@acos]] (type [[%s]]) $ note: this safety check was triggered because [[#[Swag.Safety(\"math\")]]] is enabled");
    SWAG_ERROR(Saf0010, "[safety] invalid argument passed to [[@asin]] (type [[%s]]) $ note: this safety check was triggered because [[#[Swag.Safety(\"math\")]]] is enabled");
    SWAG_ERROR(Saf0011, "[safety] invalid argument passed to [[@log]] (type [[%s]]) $ note: this safety check was triggered because [[#[Swag.Safety(\"math\")]]] is enabled");
    SWAG_ERROR(Saf0012, "[safety] invalid argument passed to [[@log10]] (type [[%s]]) $ note: this safety check was triggered because [[#[Swag.Safety(\"math\")]]] is enabled");
    SWAG_ERROR(Saf0013, "[safety] invalid argument passed to [[@log2]] (type [[%s]]) $ note: this safety check was triggered because [[#[Swag.Safety(\"math\")]]] is enabled");
    SWAG_ERROR(Saf0014, "[safety] invalid argument passed to [[@sqrt]] (type [[%s]]) $ note: this safety check was triggered because [[#[Swag.Safety(\"math\")]]] is enabled");
    SWAG_ERROR(Saf0015, "[safety] invalid argument passed to [[@pow]] (type [[%s]]) $ note: this safety check was triggered because [[#[Swag.Safety(\"math\")]]] is enabled");
    SWAG_ERROR(Saf0016, "[safety] division by zero $ note: this safety check was triggered because [[#[Swag.Safety(\"math\")]]] is enabled");
    SWAG_ERROR(Saf0017, "[safety] NaN (Not a Number) value detected $ note: this safety check was triggered because [[#[Swag.Safety(\"nan\")]]] is enabled");
    SWAG_ERROR(Saf0018, "[safety] attempted to dereference a null pointer $ note: this safety check was triggered because [[#[Swag.Safety(\"null\")]]] is enabled");
    SWAG_ERROR(Saf0019, "[safety] attempted to throw a null error value $ note: this safety check was triggered because [[#[Swag.Safety(\"null\")]]] is enabled");
    SWAG_ERROR(Saf0030, "[safety] null argument passed to [[%s]] $ note: this safety check was triggered because [[#[Swag.Safety(\"null\")]]] is enabled");
    SWAG_ERROR(Saf0031, "[safety] cannot return a null value $ note: this safety check was triggered because [[#[Swag.Safety(\"null\")]]] is enabled");
    SWAG_ERROR(Saf0020, "[safety] negative value [[%lld]] cannot cast to unsigned type [[%s]] $ note: this safety check was triggered because [[#[Swag.Safety(\"overflow\")]]] is enabled");
    SWAG_ERROR(Saf0021, "[safety] negative type [[%s]] cannot cast to unsigned type [[%s]] $ note: this safety check was triggered because [[#[Swag.Safety(\"overflow\")]]] is enabled");
    SWAG_ERROR(Saf0022, "[safety] negative value [[%g]] cannot cast to unsigned type [[%s]] $ note: this safety check was triggered because [[#[Swag.Safety(\"overflow\")]]] is enabled");
    SWAG_ERROR(Saf0023, "[safety] value [[%s]] ([[%llu]]) too large for type [[%s]] (overflow) $ note: this safety check was triggered because [[#[Swag.Safety(\"overflow\")]]] is enabled");
    SWAG_ERROR(Saf0024, "[safety] value [[%llu]] too large for type [[%s]] (overflow) $ note: this safety check was triggered because [[#[Swag.Safety(\"overflow\")]]] is enabled");
    SWAG_ERROR(Saf0025, "[safety] value [[%lld]] too large for type [[%s]] (overflow) $ note: this safety check was triggered because [[#[Swag.Safety(\"overflow\")]]] is enabled");
    SWAG_ERROR(Saf0026, "[safety] value [[%g]] too large for type [[%s]] (overflow) $ note: this safety check was triggered because [[#[Swag.Safety(\"overflow\")]]] is enabled");
    SWAG_ERROR(Saf0027, "[safety] overflow detected during [['%s']] operation (type [[%s]]) $ note: this safety check was triggered because [[#[Swag.Safety(\"overflow\")]]] is enabled");
    SWAG_ERROR(Saf0028, "[safety] truncation from [[%s]] to [[%s]] not allowed (possible data loss) $ note: this safety check was triggered because [[#[Swag.Safety(\"overflow\")]]] is enabled");
    SWAG_ERROR(Saf0029, "[safety] unexpected switch value (no matching case found) $ note: this safety check was triggered because [[#[Swag.Safety(\"switch\")]]] is enabled");
    SWAG_ERROR(Saf0032, "[safety] return of stack memory $ note: this safety check was triggered because [[#[Swag.Safety(\"memory\")]]] is enabled");
    SWAG_ERROR(Saf0033, "[safety] stack overwrite at offset [[%lld]] (stack size [[%lld]]) $ note: this safety check was triggered because [[#[Swag.Safety(\"memory\")]]] is enabled");
    SWAG_ERROR(Saf0034, "[safety] use of uninitialized memory $ note: this safety check was triggered because [[#[Swag.Safety(\"memory\")]]] is enabled");
    SWAG_ERROR(Saf0035, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Wrn0001, "%s");
    SWAG_ERROR(Wrn0002, "%s [[%s]] is deprecated ([[#[Swag.Deprecated]]])");
    SWAG_ERROR(Wrn0003, "unused variable [[%s]] $ note: never modified after declaration $ hint: declare it with [[let]] instead of [[var]] to mark it immutable");
    SWAG_ERROR(Wrn0004, "unused variable [[%s]] $ note: initialized to a default value and never used $ note: consider removing this variable if it serves no purpose");
    SWAG_ERROR(Wrn0005, "unreachable code detected");
    SWAG_ERROR(Wrn0006, "unused %s [[%s]] $ note: declared but never used");
    SWAG_ERROR(Wrn0007, "ineffective [[break]] statement $ note: [[break]] is only needed in empty [[case]] blocks");
    SWAG_ERROR(Wrn0008, "redundant [[if]] after [[else]] $ hint: replace [[else: if]] with [[elif]]");
    SWAG_ERROR(Wrn0009, "redundant [[#if]] after [[#else]] $ hint: replace [[#else: #if]] with [[#elif]]");
    SWAG_ERROR(Wrn0010, "simplifiable [[if]] statement $ hint: can be simplified with [[where]]");

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////

    SWAG_ERROR(Err0001, "%s");
    SWAG_ERROR(Err0002, "%s");
    SWAG_ERROR(Err0003, "%s");

    SWAG_ERROR(Err0004, "ambiguous %s [[%s]]");
    SWAG_ERROR(Err0005, "ambiguous cast from [[%s]] to [[%s]]");
    SWAG_ERROR(Err0006, "ambiguous cast from [[%s]] to interface [[%s]]");
    SWAG_ERROR(Err0007, "ambiguous enum value [[%s]]");
    SWAG_ERROR(Err0008, "ambiguous generic %s [[%s]]");
    SWAG_ERROR(Err0009, "ambiguous lambda parameter declaration");
    SWAG_ERROR(Err0010, "ambiguous symbol [[%s]]");
    SWAG_ERROR(Err0011, "assertion failed $ note: [[#assert]] expression evaluated to false");
    SWAG_ERROR(Err0012, "cannot access [[internal]] field [[%s]]");
    SWAG_ERROR(Err0013, "cannot access static member [[%s]] of [[%s]] as an instance field");
    SWAG_ERROR(Err0014, "cannot allocate stack $ note: size exceeds [[%s]] limit set by [[--stack-size]]");
    SWAG_ERROR(Err0015, "cannot apply [[#null]] modifier $ note: parameter already nullable due to [[null]] default value $ hint: remove the [[#null]] modifier");
    SWAG_ERROR(Err0016, "cannot apply [[move]] to immutable expression of type [[%s]]");
    SWAG_ERROR(Err0017, "cannot assign [[%s]] to [[%s]]");
    SWAG_ERROR(Err0018, "cannot assign to unnamed parameters");
    SWAG_ERROR(Err0019, "cannot assign $ note: call produces no value");
    SWAG_ERROR(Err0020, "cannot assign $ note: left expression is immutable");
    SWAG_ERROR(Err0021, "cannot bit-cast from [[%s]] to larger [[%s]]");
    SWAG_ERROR(Err0022, "cannot capture $ note: size [[%u]] bytes exceeds limit [[%u]] bytes");
    SWAG_ERROR(Err0023, "cannot cast [[%s]] to [[%s]]");
    SWAG_ERROR(Err0024, "cannot cast [[%s]] to [[%s]] $ note: implementation not found");
    SWAG_ERROR(Err0025, "cannot cast [[%s]] to pointer type");
    SWAG_ERROR(Err0026, "cannot cast a type value to a compile-time type ([[%s]])");
    SWAG_ERROR(Err0027, "cannot cast a value to a type");
    SWAG_ERROR(Err0028, "cannot cast an interface to a struct $ note: interfaces can only be cast to struct pointers");
    SWAG_ERROR(Err0029, "cannot cast immutable [[%s]] to mutable [[%s]]");
    SWAG_ERROR(Err0030, "cannot cast left side [[%s]] to [[interface]]");
    SWAG_ERROR(Err0031, "cannot cast right side [[%s]] to [[struct]]");
    SWAG_ERROR(Err0032, "cannot cast value pointer [[%s]] to block pointer [[%s]]");
    SWAG_ERROR(Err0033, "cannot combine [[#[Swag.Compiler]]] and [[#[Swag.Tls]]]");
    SWAG_ERROR(Err0034, "cannot combine [[#[Swag.Inline]]] and [[#[Swag.NoInline]]]");
    SWAG_ERROR(Err0035, "cannot combine [[#[Swag.Macro]]] and [[#[Swag.Inline]]]");
    SWAG_ERROR(Err0036, "cannot combine [[#[Swag.Macro]]] and [[#[Swag.Mixin]]]");
    SWAG_ERROR(Err0037, "cannot combine [[#[Swag.Macro]]] and [[#[Swag.NoInline]]]");
    SWAG_ERROR(Err0038, "cannot combine [[#[Swag.Mixin]]] and [[#[Swag.Inline]]]");
    SWAG_ERROR(Err0039, "cannot combine [[#[Swag.Mixin]]] and [[#[Swag.NoInline]]]");
    SWAG_ERROR(Err0040, "cannot combine [[%s]] and [[%s]]");
    SWAG_ERROR(Err0041, "cannot combine [[%s]] with another [[%s]]");
    SWAG_ERROR(Err0042, "cannot convert [[%s]] to [[%s]] by index $ note: missing [[opIndexAffect]]");
    SWAG_ERROR(Err0043, "cannot convert [[%s]] to runtime [[typeinfo]]");
    SWAG_ERROR(Err0044, "cannot convert a closure type to a lambda type");
    SWAG_ERROR(Err0045, "cannot convert function return slice into a compile-time value $ note: function return type is [[%s]]");
    SWAG_ERROR(Err0046, "cannot convert function return value into constant array $ note: [[opCount]] returned [[0]] $ note: function return type is [[%s]]");
    SWAG_ERROR(Err0047, "cannot convert function return value into constant array $ note: [[opSlice]] returned empty slice $ note: function return type is [[%s]]");
    SWAG_ERROR(Err0048, "cannot convert literal [[%llu]]");
    SWAG_ERROR(Err0049, "cannot convert type [[%s]] to a compile-time constant");
    SWAG_ERROR(Err0050, "cannot copy [[%s]] $ note: marked [[#[Swag.NoCopy]]]");
    SWAG_ERROR(Err0051, "cannot create constant with generic type [[%s]]");
    SWAG_ERROR(Err0052, "cannot create directory [[%s]]");
    SWAG_ERROR(Err0053, "cannot create variable with generic type [[%s]]");
    SWAG_ERROR(Err0054, "cannot declare [[public]] on global variables");
    SWAG_ERROR(Err0055, "cannot declare generic parameters for function [[%s]]");
    SWAG_ERROR(Err0056, "cannot declare generic parameters for function [[%s]] $ note: the function has the [[#[Swag.NotGeneric]]] attribute");
    SWAG_ERROR(Err0057, "cannot declare lambda type with [[mtd]] $ hint: use [[func]] instead");
    SWAG_ERROR(Err0058, "cannot declare multiple variables in [[if]] $ note: [[if]] allows only a single variable declaration");
    SWAG_ERROR(Err0059, "cannot declare multiple variables in [[using]] $ note: [[using]] allows only a single variable declaration");
    SWAG_ERROR(Err0060, "cannot declare multiple variables in [[with]] $ note: [[with]] allows only a single variable declaration");
    SWAG_ERROR(Err0061, "cannot declare type [[%s]] as nullable");
    SWAG_ERROR(Err0062, "cannot deduce flag [[%s]] from the previous value $ note: the previous value ([[%llu]]) is not a power of two $ note: flag enumerations under [[#[Swag.EnumFlags]]] must use power-of-two values (1, 2, 4, 8, ...)");
    SWAG_ERROR(Err0063, "cannot define a body for function marked with [[#[Swag.Foreign]]] $ note: the [[#[Swag.Foreign]]] attribute indicates the function is externally defined");
    SWAG_ERROR(Err0064, "cannot define struct [[%s]] that directly or indirectly references itself");
    SWAG_ERROR(Err0065, "cannot delete file [[%s]]");
    SWAG_ERROR(Err0066, "cannot dereference [[%s]] of type [[%s]] as struct or pointer");
    SWAG_ERROR(Err0067, "cannot dereference [[void*]] $ note: [[void]] has no size");
    SWAG_ERROR(Err0068, "cannot dereference a tuple as a pointer");
    SWAG_ERROR(Err0069, "cannot dereference constant address at compile-time");
    SWAG_ERROR(Err0070, "cannot dereference null pointer");
    SWAG_ERROR(Err0071, "cannot dereference type [[%s]]");
    SWAG_ERROR(Err0072, "cannot determine %s [[%s]] type");
    SWAG_ERROR(Err0073, "cannot determine generic arguments for %s [[%s]]");
    SWAG_ERROR(Err0074, "cannot emit data segment [[%s]] $ note: size exceeds [[0x%llx]] bytes");
    SWAG_ERROR(Err0075, "cannot evaluate generic type");
    SWAG_ERROR(Err0076, "cannot find [[#main]] function");
    SWAG_ERROR(Err0077, "cannot find [[%s]] in [[%s]]");
    SWAG_ERROR(Err0078, "cannot find attribute [[%s]]");
    SWAG_ERROR(Err0079, "cannot find attribute [[%s]] in [[%s]]");
    SWAG_ERROR(Err0080, "cannot find dependency module folder [[\"%s\"]]");
    SWAG_ERROR(Err0081, "cannot find dependency version [[%s]] for module [[%s]]");
    SWAG_ERROR(Err0082, "cannot find dependency version [[%s]] for module [[%s]] at [[%s]]");
    SWAG_ERROR(Err0083, "cannot find documentation page [[%s]]");
    SWAG_ERROR(Err0084, "cannot find enum [[%s]]");
    SWAG_ERROR(Err0085, "cannot find enum value [[%s]] in [[%s]]");
    SWAG_ERROR(Err0086, "cannot find field [[%s]] in [[%s]]");
    SWAG_ERROR(Err0087, "cannot find file [[%s]] in module [[%s]]");
    SWAG_ERROR(Err0088, "cannot find file [[\"%s\"]]");
    SWAG_ERROR(Err0089, "cannot find foreign function [[%s]]");
    SWAG_ERROR(Err0090, "cannot find function [[%s]]");
    SWAG_ERROR(Err0091, "cannot find function [[%s]] in [[%s]]");
    SWAG_ERROR(Err0092, "cannot find function [[%s]] in [[%s]]");
    SWAG_ERROR(Err0093, "cannot find identifier [[%s]]");
    SWAG_ERROR(Err0094, "cannot find identifier [[%s]] in [[%s]] or %s [[%s]]");
    SWAG_ERROR(Err0095, "cannot find identifier [[%s]] in tuple");
    SWAG_ERROR(Err0096, "cannot find matching overload");
    SWAG_ERROR(Err0097, "cannot find matching variable for alias [[%s]] $ hint: remove the alias");
    SWAG_ERROR(Err0098, "cannot find method [[%s]] in [[%s]]");
    SWAG_ERROR(Err0099, "cannot find module [[%s]]");
    SWAG_ERROR(Err0100, "cannot find named argument [[%s]]");
    SWAG_ERROR(Err0101, "cannot find scope label [[%s]]");
    SWAG_ERROR(Err0102, "cannot find struct [[%s]]");
    SWAG_ERROR(Err0103, "cannot find struct [[%s]] in [[%s]]");
    SWAG_ERROR(Err0104, "cannot find struct member [[%s]]");
    SWAG_ERROR(Err0105, "cannot find type [[%s]]");

    SWAG_ERROR(Err0106, "cannot find variable [[%s]]");
    SWAG_ERROR(Err0107, "cannot find variable [[%s]] in [[%s]]");
    SWAG_ERROR(Err0108, "cannot find visit specialization [[%s]] in [[%s]]");
    SWAG_ERROR(Err0109, "cannot ignore return value of function [[%s]] $ hint: use [[discard]] to explicitly ignore the return value if intentional");
    SWAG_ERROR(Err0110, "cannot ignore return value of intrinsic [[%s]]");
    SWAG_ERROR(Err0111, "cannot ignore return value of lambda [[%s]] $ hint: use [[discard]] to explicitly ignore the return value if intentional");
    SWAG_ERROR(Err0112, "cannot infer a variable type from a [[null]] expression");
    SWAG_ERROR(Err0113, "cannot infer array length $ note: missing initialization");
    SWAG_ERROR(Err0114, "cannot infer generic type $ note: embedded tuples too complex");
    SWAG_ERROR(Err0115, "cannot initialize [[%s]] with a special literal $ note: [[%s]] does not implement [[opAffectLiteral]]");
    SWAG_ERROR(Err0116, "cannot initialize a value with [[void]] expression");
    SWAG_ERROR(Err0117, "cannot initialize constant array type [[%s]] with a single value $ note: only variables can be initialized this way");
    SWAG_ERROR(Err0118, "cannot initialize struct member with function pointer");
    SWAG_ERROR(Err0119, "cannot inline [[%s]] $ note: expansion exceeds the configuration limit $ note: [[--limit-inline:%d]]");
    SWAG_ERROR(Err0120, "cannot instantiate generic struct with partial type alias ([[%s]])");
    SWAG_ERROR(Err0121, "cannot make %s [[%s]] public $ note: %s [[%s]] has [[%s]] access");
    SWAG_ERROR(Err0122, "cannot make [[%s]] internal $ note: struct declared [[public]]");
    SWAG_ERROR(Err0123, "cannot make [[%s]] public $ note: struct declared [[internal]]");
    SWAG_ERROR(Err0124, "cannot make a callback of function [[%s]] $ note: function [[%s]] has too many parameters, maximum is [[%d]], found [[%d]]");
    SWAG_ERROR(Err0125, "cannot mark generic function [[%s]] with [[#[Swag.NotGeneric]]]");
    SWAG_ERROR(Err0126, "cannot modify [[%s]] $ note: immutable");
    SWAG_ERROR(Err0127, "cannot modify global [[%s]] $ note: zero-initialized and immutable at compile-time");
    SWAG_ERROR(Err0128, "cannot move [[%d]] scopes upward");
    SWAG_ERROR(Err0129, "cannot negate type [[%s]]");
    SWAG_ERROR(Err0130, "cannot negate unsigned type [[%s]]");
    SWAG_ERROR(Err0131, "cannot open [[#include]] file [[%s]]");
    SWAG_ERROR(Err0132, "cannot open file [[%s]]");
    SWAG_ERROR(Err0133, "cannot open file [[%s]]");
    SWAG_ERROR(Err0134, "cannot open file [[%s]] for writing");
    SWAG_ERROR(Err0135, "cannot pass [[null]] as first argument to [[@mkany]]");
    SWAG_ERROR(Err0136, "cannot pass a parameter of type [[cvarargs]] to another function");
    SWAG_ERROR(Err0137, "cannot place [[%s]] after [[%s]]");
    SWAG_ERROR(Err0138, "cannot precede [[%s]] with [[%s]]");
    SWAG_ERROR(Err0139, "cannot process %s $ note: size exceeds [[0x%llx]] bytes");
    SWAG_ERROR(Err0140, "cannot read source file [[%s]]");
    SWAG_ERROR(Err0141, "cannot recurse further $ note: call level limit [[--limit-recurse-bc:%d]] exceeded");
    SWAG_ERROR(Err0142, "cannot reference current file scope");
    SWAG_ERROR(Err0143, "cannot slice a multi-dimensional array");
    SWAG_ERROR(Err0144, "cannot specify generic arguments after %s");
    SWAG_ERROR(Err0145, "cannot specify generic arguments after name");
    SWAG_ERROR(Err0146, "cannot specify generic arguments after variable [[%s]]");
    SWAG_ERROR(Err0147, "cannot take address of [[%s]] $ note: returns no value");
    SWAG_ERROR(Err0148, "cannot take address $ note: %s has no address $ note: only variables have addresses");
    SWAG_ERROR(Err0149, "cannot take address $ note: a [[let]] variable has no address $ hint: use [[var]] for a mutable variable");
    SWAG_ERROR(Err0150, "cannot take address $ note: constant type [[%s]] has no address $ note: this constant type has no storage");
    SWAG_ERROR(Err0151, "cannot take address $ note: function returning [[%s]] has no address");
    SWAG_ERROR(Err0152, "cannot take address $ note: inline function has no address");
    SWAG_ERROR(Err0153, "cannot take address $ note: macro has no address");
    SWAG_ERROR(Err0154, "cannot take address $ note: mixin has no address");
    SWAG_ERROR(Err0155, "cannot take address $ note: parameter type [[%s]] has no address $ note: this parameter type has no storage");
    SWAG_ERROR(Err0156, "cannot take address $ note: right-hand expression has no address");
    SWAG_ERROR(Err0157, "cannot take address $ note: string literal character has no address $ note: string literals have no storage");
    SWAG_ERROR(Err0158, "cannot unpack tuple $ note: contains no elements");
    SWAG_ERROR(Err0159, "cannot unpack%s[[%u]] variables $ note: because right tuple has%s[[%u]] fields");
    SWAG_ERROR(Err0160, "cannot use %s [[%s]] as a value");
    SWAG_ERROR(Err0161, "cannot use [[#up]] count of zero");
    SWAG_ERROR(Err0162, "cannot use [[%s]] as enum base type");
    SWAG_ERROR(Err0163, "cannot use [[%s]] as enum base type $ note: enum has the [[#[Swag.EnumFlags]]] attribute, so only unsigned integer types are allowed");
    SWAG_ERROR(Err0164, "cannot use [[%s]] as enum base type $ note: enum has the [[#[Swag.EnumIndex]]] attribute, so only integer types are allowed");
    SWAG_ERROR(Err0165, "cannot use [[%s]] as enum base type $ note: enum has the [[#[Swag.NoDuplicate]]] attribute, so only basic types are allowed");
    SWAG_ERROR(Err0166, "cannot use [[%s]] in a union $ note: contains [[%s]]");
    SWAG_ERROR(Err0167, "cannot use [[%s]] on non-throwing function [[%s]] $ note: function [[%s]] is not marked with [[throw]] and cannot raise errors");
    SWAG_ERROR(Err0168, "cannot use [[me]] as a variable name");
    SWAG_ERROR(Err0169, "cannot use array type [[%s]] for enum $ note: enum array type must be constant $ hint: declare it as [[const %s]]");
    SWAG_ERROR(Err0170, "cannot use generic parameters in interface functions $ note: interface functions must have fully specified, non-generic signatures");
    SWAG_ERROR(Err0171, "cannot use next block statement as [[code]] argument $ note: %s [[%s]] expects the following statement as a [[code]] argument, which is not allowed in [[%s]]");
    SWAG_ERROR(Err0172, "cannot use parameter name in lambda type declaration $ note: lambda type declarations only specify parameter types, not names $ hint: remove the parameter name");
    SWAG_ERROR(Err0173, "cannot use slice type [[%s]] for enum $ note: enum slice type must be constant $ hint: declare it as [[const %s]]");
    SWAG_ERROR(Err0174, "cannot use variadic parameters in inline functions");
    SWAG_ERROR(Err0175, "cannot use zero array dimension");
    SWAG_ERROR(Err0176, "cannot visit a variadic type by pointer");
    SWAG_ERROR(Err0177, "cannot visit an enum type by pointer");
    SWAG_ERROR(Err0178, "cannot visit pointer type [[%s]]");
    SWAG_ERROR(Err0179, "cannot visit tuple type");
    SWAG_ERROR(Err0180, "cannot visit type [[%s]]");
    SWAG_ERROR(Err0181, "cannot visit type [[%s]] $ note: missing [[opVisit]] implementation");
    SWAG_ERROR(Err0182, "cannot write file [[%s]]");
    SWAG_ERROR(Err0183, "duplicate %s [[%s]] definition");
    SWAG_ERROR(Err0184, "duplicate %s [[%s]] definition %s");
    SWAG_ERROR(Err0185, "duplicate [[#global export]] directives in the same file");
    SWAG_ERROR(Err0186, "duplicate [[#import]] location definition");
    SWAG_ERROR(Err0187, "duplicate [[#import]] version definition");
    SWAG_ERROR(Err0188, "duplicate [[#main]] function in this module");
    SWAG_ERROR(Err0189, "duplicate [[%s]] arguments detected");
    SWAG_ERROR(Err0190, "duplicate [[%s]] modifiers detected");
    SWAG_ERROR(Err0191, "duplicate [[case]] value [[%d]]");
    SWAG_ERROR(Err0192, "duplicate [[case]] value [[%f]]");
    SWAG_ERROR(Err0193, "duplicate [[case]] value [[%s]]");
    SWAG_ERROR(Err0194, "duplicate [[case]] value [[\"%s\"]]");
    SWAG_ERROR(Err0195, "duplicate [[default]] clauses in the same [[switch]] statement");
    SWAG_ERROR(Err0196, "duplicate [[null]] case");
    SWAG_ERROR(Err0197, "duplicate application of [[%s]]; [[Swag.AttrMulti]] not specified");
    SWAG_ERROR(Err0198, "duplicate definition of function [[%s]] $ hint: mark all overloads with [[#[Swag.Overload]]]");
    SWAG_ERROR(Err0199, "duplicate enum [[%s]] definition");
    SWAG_ERROR(Err0200, "duplicate field [[%s]] definition");
    SWAG_ERROR(Err0201, "duplicate generic symbol [[%s]] definition");
    SWAG_ERROR(Err0202, "duplicate module [[%s]] location definition $ note: already defined as [[%s]]");
    SWAG_ERROR(Err0203, "duplicate module [[%s]] version definition $ note: already defined as [[%s]]");
    SWAG_ERROR(Err0204, "duplicate operator [['%s']] definition");
    SWAG_ERROR(Err0205, "execution failed at runtime");
    SWAG_ERROR(Err0206, "failed to create process [[%s]]");

    SWAG_ERROR(Err0207, "failed to create process [[%s]] (::CreatePipe)");
    SWAG_ERROR(Err0208, "failed to evaluate [[#nameof]] argument");
    SWAG_ERROR(Err0209, "failed to evaluate [[#stringof]] argument");
    SWAG_ERROR(Err0210, "failed to fetch file [[%s]] for module [[%s]]");
    SWAG_ERROR(Err0211, "failed to load module [[%s]] for foreign function [[%s]]");
    SWAG_ERROR(Err0212, "failed to patch icon in [[%s]] $ note: %s");
    SWAG_ERROR(Err0213, "failed to resolve identifier [[%s]]");
    SWAG_ERROR(Err0214, "failed to resolve interface for generic type [[%s]]");
    SWAG_ERROR(Err0215, "failed to resolve semantic reference");
    SWAG_ERROR(Err0216, "incompatible [[const]] with move reference [[&&]] $ hint: remove [[const]] or use [[&]] instead");
    SWAG_ERROR(Err0217, "incompatible [[impl]] parent scope of [[%s]]");
    SWAG_ERROR(Err0218, "incompatible attributes $ note: [[#[Swag.Opaque]]] with [[#global export]]");
    SWAG_ERROR(Err0219, "incompatible character literal with type [[%s]]");
    SWAG_ERROR(Err0220, "incompatible comparison $ note: tuple with [[%s]] $ note: tuples can only be compared with other tuples");
    SWAG_ERROR(Err0221, "incompatible dependency version for module [[%s]]");
    SWAG_ERROR(Err0222, "incompatible enum type [[%s]] $ note: expected [[%s]], found [[%s]]");
    SWAG_ERROR(Err0223, "incompatible expression with [[expect]] $ note: only [[param != null]] expressions are supported");
    SWAG_ERROR(Err0224, "incompatible generic [[%s]] $ note: deduced as [[%s]], expected [[%s]]");
    SWAG_ERROR(Err0225, "incompatible second parameter type for [[%s]] $ note: expected [[%s]] $ hint: implement or use [[opAssign]] for value copying");
    SWAG_ERROR(Err0226, "incompatible tuple types");
    SWAG_ERROR(Err0227, "incompatible type $ note: expected an enum type, found [[%s]]");
    SWAG_ERROR(Err0228, "incompatible type [[%s]] with command-line [[%s]] type [[%s]]");
    SWAG_ERROR(Err0229, "incompatible types for [[@mkany]] $ note: first argument has type [[%s]], and should be a pointer to type [[%s]]");
    SWAG_ERROR(Err0230, "incomplete interface implementation for [[%s]] on [[%s]]");
    SWAG_ERROR(Err0231, "inconsistent control paths $ note: not all return a value in %s");
    SWAG_ERROR(Err0232, "inconsistent return type [[%s]] $ note: the previous [[return]] has no value");
    SWAG_ERROR(Err0233, "inconsistent return type [[%s]] $ note: the previous [[return]] has type [[%s]]");
    SWAG_ERROR(Err0234, "index out of range $ note: index [[%llu]] exceeds the maximum value of [[%llu]]");
    SWAG_ERROR(Err0235, "unsupported token $$TKN$$ inside [[#inject]] replacement block $ note: [[#inject]] only accepts [[break]] or [[continue]] as valid keywords");
    SWAG_ERROR(Err0236, "out-of-range unicode code point [[0x%x]]");

    SWAG_ERROR(Err0237, "invalid value for [[#[Swag.Align]]] $ note: not a power of two; found [[%d]]");
    SWAG_ERROR(Err0238, "misplaced [[#[Swag.CalleeReturn]]] on %s");
    SWAG_ERROR(Err0239, "missing required context for [[#[Swag.CalleeReturn]]] on [[%s]] $ note: requires [[#[Swag.Macro]]] or [[#[Swag.Mixin]]] attribute");
    SWAG_ERROR(Err0240, "misplaced [[#[Swag.Complete]]] on [[%s]] $ note: only valid on [[opAffect]] or [[opAffectLiteral]]");
    SWAG_ERROR(Err0241, "missing required [[switch]] expression for [[#[Swag.Complete]]]");
    SWAG_ERROR(Err0242, "misplaced [[#[Swag.Discardable]]] on [[%s]] $ note: only valid on lambda variables");
    SWAG_ERROR(Err0243, "unsupported module name in [[#[Swag.Foreign]]] $ note: [[.]] not allowed $ note: module names cannot contain file extensions");
    SWAG_ERROR(Err0244, "misplaced [[#[Swag.Implicit]]] on [[%s]] $ note: only valid on [[opAffect]], [[opAffectLiteral]], or [[opCast]]");
    SWAG_ERROR(Err0245, "disallowed [[#[Swag.Implicit]]] on generic %s");
    SWAG_ERROR(Err0246, "misplaced [[#[Swag.Inline]]] on %s");
    SWAG_ERROR(Err0247, "misplaced [[#[Swag.Macro]]] on %s");
    SWAG_ERROR(Err0248, "misplaced [[#[Swag.Mixin]]] on %s");
    SWAG_ERROR(Err0249, "disallowed [[#[Swag.NotGeneric]]] on %s");
    SWAG_ERROR(Err0250, "disallowed [[#[Swag.Offset]]] on interface members");
    SWAG_ERROR(Err0251, "unsupported value for [[#[Swag.Pack]]] $ note: found [[%d]] (not 0 or power of two)");
    SWAG_ERROR(Err0252, "misplaced [[#alias]] context $ note: allowed only in [[#[Swag.Macro]]] or [[#[Swag.Mixin]]]");
    SWAG_ERROR(Err0253, "incomplete [[#alias]] sequence in [[%s]] $ note: [[#alias%u]] is missing in the sequence");
    SWAG_ERROR(Err0254, "unsupported [[#alias]] variable name [[%s]] $ hint: use [[#alias0]], [[#alias1]], and so on");
    SWAG_ERROR(Err0255, "type mismatch in [[#ast]] expression return type $ note: expected [[string]], found [[%s]]");
    SWAG_ERROR(Err0256, "misused [[#code]] type $ note: [[#code]] is only valid in a [[#[Swag.Macro]]] or [[#[Swag.Mixin]]] function");
    SWAG_ERROR(Err0257, "misplaced [[#dependencies]] directive $ note: must be at file level");
    SWAG_ERROR(Err0258, "missing preceding [[#if]] for [[#elif]]");
    SWAG_ERROR(Err0259, "missing preceding [[#if]] or [[#elif]] for [[#else]]");
    SWAG_ERROR(Err0260, "non-constant last argument to [[#gettag]] $ note: must be constant, got [[%s]]");
    SWAG_ERROR(Err0261, "unsupported [[#global]] instruction [[%s]]");
    SWAG_ERROR(Err0262, "misplaced [[#global]] directive $ note: must appear at top of file");
    SWAG_ERROR(Err0263, "malformed [[#import]] location format $ hint: use [[location=\"mode@accesspath\"]], where mode is [[swag]] or [[disk]]");
    SWAG_ERROR(Err0264, "malformed [[#import]] version format");
    SWAG_ERROR(Err0265, "type mismatch in [[#include]] argument [[%s]] $ note: [[#include]] requires a [[string]] argument");
    SWAG_ERROR(Err0266, "non-constant [[#include]] filename $ note: not a compile-time constant");
    SWAG_ERROR(Err0267, "type mismatch in [[#inject]] argument [[%s]] $ note: [[#inject]] requires a [[code]] argument");
    SWAG_ERROR(Err0268, "type mismatch in [[#message]] argument [[%s]] $ note: [[#message]] requires a [[Swag.CompilerMsgMask]] argument");
    SWAG_ERROR(Err0269, "type mismatch in [[#runes]] argument [[%s]] $ note: [[#runes]] requires a [[string]] argument");
    SWAG_ERROR(Err0270, "unexpected token in [[#scope]] name $ note: expected an identifier, found $$TKN$$");
    SWAG_ERROR(Err0271, "disallowed [[#sizeof]] on generic expression");
    SWAG_ERROR(Err0272, "misplaced [[#uniq]] context $ note: allowed only in [[#[Swag.Mixin]]]");
    SWAG_ERROR(Err0273, "unsupported [[#uniq]] variable name [[%s]] $ hint: use [[#uniq0]], [[#uniq1]], and so on");
    SWAG_ERROR(Err0274, "malformed [[#up]] argument $ note: expected an integer literal, found $$TKN$$");
    SWAG_ERROR(Err0275, "type mismatch in [[#up]] count $ note: must be an untyped integer, got [[%s]]");
    SWAG_ERROR(Err0276, "type mismatch in [[%s]] argument [[%s]] $ note: [[%s]] requires a [[%s]] argument");
    SWAG_ERROR(Err0277, "type mismatch in [[%s]] assignment $ note: expects [[%s]], found [[%s]]");
    SWAG_ERROR(Err0278, "unsupported [[%s]] compiler instruction");
    SWAG_ERROR(Err0279, "type mismatch in [[%s]] count type [[%s]] $ note: [[%s]] count must be an integer");
    SWAG_ERROR(Err0280, "misplaced [[%s]] declaration $ note: [[%s]] cannot be declared outside a corresponding [[impl]] block");
    SWAG_ERROR(Err0281, "mutability violation in [[%s]] first argument $ note: [[%s]] requires a mutable pointer, found [[%s]]");
    SWAG_ERROR(Err0282, "mutability violation in [[%s]] first argument $ note: [[%s]] requires a mutable type, found [[%s]]");
    SWAG_ERROR(Err0283, "mutability violation in [[%s]] first argument $ note: [[%s]] requires a mutable variable, found [[%s]]");
    SWAG_ERROR(Err0284, "type mismatch in [[%s]] first argument type [[%s]] $ note: [[%s]] requires a block pointer as its first argument");
    SWAG_ERROR(Err0285, "type mismatch in [[%s]] first argument type [[%s]] $ note: [[%s]] requires a block pointer when the element count exceeds one");
    SWAG_ERROR(Err0286, "type mismatch in [[%s]] first argument type [[%s]] $ note: [[%s]] requires a pointer as its first argument");
    SWAG_ERROR(Err0287, "disallowed [[%s]] in this context");
    SWAG_ERROR(Err0288, "disallowed [[%s]] inside [[#global]] block $ note: this requires [[Swag.AttributeUsage.File]]");
    SWAG_ERROR(Err0289, "illegal nesting of [[%s]] inside [[%s]] $ hint: use only one [[try]], [[catch]], or [[assume]] block");
    SWAG_ERROR(Err0290, "misplaced [[%s]] on %s");
    SWAG_ERROR(Err0291, "type mismatch in [[%s]] return type [[%s]] $ note: [[%s]] requires a [[%s]] return type");
    SWAG_ERROR(Err0292, "misused [['=']] in expression $ hint: use [['==']] for comparison");
    SWAG_ERROR(Err0293, "misused [['==']] $ hint: use [['=']] for assignment");
    SWAG_ERROR(Err0294, "type mismatch in [[@countof]] argument [[%s]]");
    SWAG_ERROR(Err0295, "type mismatch in [[@countof]] argument [[%s]] $ note: [[@countof]] requires an integer argument");
    SWAG_ERROR(Err0296, "unsupported [[@countof]] value $ note: non-positive [[%lld]]");
    SWAG_ERROR(Err0297, "unsupported [[@countof]] value $ note: non-positive [[%d]]");
    SWAG_ERROR(Err0298, "type mismatch in [[@cvastart]] argument type [[%s]] $ note: [[@cvastart]] requires a [[%s]] argument");
    SWAG_ERROR(Err0299, "type mismatch in [[@dataof]] argument [[%s]]");
    SWAG_ERROR(Err0300, "unsupported target type for [[@kindof]] [[%s]] $ note: [[@kindof]] is only allowed on [[any]] or interface types");
    SWAG_ERROR(Err0301, "type mismatch in [[@mkany]] second argument [[%s]] $ note: [[@mkany]] requires a [[typeinfo]] as its second argument");
    SWAG_ERROR(Err0302, "type mismatch in [[@mkcallback]] argument [[%s]] $ note: [[@mkcallback]] requires a function pointer argument");
    SWAG_ERROR(Err0303, "type mismatch in [[@mkinterface]] first argument [[%s]] $ note: [[@mkinterface]] requires a pointer or a struct as its first argument");
    SWAG_ERROR(Err0304, "type mismatch in [[@mkinterface]] second argument [[%s]] $ note: [[@mkinterface]] requires a [[typeinfo]] as its second argument");
    SWAG_ERROR(Err0305, "type mismatch in [[@mkinterface]] third argument [[%s]] $ note: [[@mkinterface]] requires an interface name as its third argument");
    SWAG_ERROR(Err0306, "type mismatch in [[@mkstring]] first argument [[%s]] $ note: [[@mkstring]] requires type [[*u8]] as its first argument");
    SWAG_ERROR(Err0307, "attribute conflict: [[@postcopy]] on [[%s]] $ note: disallowed by [[#[Swag.NoCopy]]]");

    SWAG_ERROR(Err0308, "missing required context for [[AttributeUsage.Gen]] $ note: [[AttributeUsage.Gen]] requires [[AttributeUsage.Struct]] or [[AttributeUsage.Enum]]");
    SWAG_ERROR(Err0309, "non-constant [[case]] expression $ note: not a compile-time constant $ note: a [[switch]] statement marked with the [[#[Swag.Complete]]] attribute requires constant case values");
    SWAG_ERROR(Err0310, "unsupported [[case]] match variable $ note: a match variable is only valid for an [[interface]] or an [[any]] $ note: switch expression has type [[%s]]");
    SWAG_ERROR(Err0311, "missing [[switch]] expression for [[case]] range $ note: a [[case]] range requires a [[switch]] expression to compare against");
    SWAG_ERROR(Err0312, "misplaced [[const]] $ note: only allowed after [[mtd]], not [[func]]");
    SWAG_ERROR(Err0313, "disallowed [[default]] $ note: [[default]] is not permitted for a [[switch]] marked as [[#[Swag.Complete]]]");
    SWAG_ERROR(Err0314, "malformed [[discard]] argument $ note: found $$TKN$$");
    SWAG_ERROR(Err0315, "misused [[discard]] on function returning nothing");
    SWAG_ERROR(Err0316, "misused [[do]] before [[{]] $ hint: use [[do]] or [[{]], not both");
    SWAG_ERROR(Err0317, "missing preceding [[if]] for [[elif]]");
    SWAG_ERROR(Err0318, "missing preceding [[if]] or [[#elif]] for [[else]]");
    SWAG_ERROR(Err0319, "disallowed [[fallthrough]] in last [[case]] $ hint: remove it");
    SWAG_ERROR(Err0320, "unsupported [[foreach]] specialization $ note: [[foreach]] specialization is only valid for [[struct]] visit, found [[%s]]");
    SWAG_ERROR(Err0321, "disallowed [[impl]] block generation $ note: only allowed in [[#message]] with [[Swag.CompilerMsgMask.AttributeGen]]");
    SWAG_ERROR(Err0322, "unsupported [[impl]] block name $ note: an [[impl]] block must reference a concrete type, not an alias $ hint: use the original type name instead of the alias");
    SWAG_ERROR(Err0323, "misplaced [[impl]] on function outside [[impl for]] block");
    SWAG_ERROR(Err0324, "inconsistent [[impl]] target $ note: targets [[%s]], but [[%s]] is [[%s]]");
    SWAG_ERROR(Err0325, "unsupported [[impl]] target $ note: [[%s]] is [[%s]], not an interface");
    SWAG_ERROR(Err0326, "unsupported [[impl]] target $ note: [[%s]] is [[%s]], not struct or enum");
    SWAG_ERROR(Err0327, "unsupported [[location]] value [[\"%s\"]] $ hint: use [[\"swag\"]] or [[\"disk\"]]");
    SWAG_ERROR(Err0328, "unsupported [[me]] default value");
    SWAG_ERROR(Err0329, "disallowed [[moveref]] on compile-time value $ note: only allowed on pointers or references");
    SWAG_ERROR(Err0330, "mutability violation: [[moveref]] on immutable expression");
    SWAG_ERROR(Err0331, "unsupported [[moveref]] type [[%s]]");
    SWAG_ERROR(Err0332, "misplaced [[moveref]] $ note: must precede function arguments");
    SWAG_ERROR(Err0333, "disallowed [[opDrop]] for [[%s]] $ note: disallowed by [[#[Swag.ConstExpr]]]");
    SWAG_ERROR(Err0334, "disallowed [[opPostCopy]] for [[%s]] $ note: disallowed by [[#[Swag.NoCopy]]]");
    SWAG_ERROR(Err0335, "type mismatch in [[opSlice]] return type [[%s]] $ note: only [[string]] or [[slice]] return types are supported");
    SWAG_ERROR(Err0336, "unsupported [[opVisit]] specialization name [[%s]] $ note: [[opVisit]] specializations must start with an uppercase letter");
    SWAG_ERROR(Err0337, "unsupported [[opVisit]] variant [[%s]] $ hint: must use a valid identifier name");
    SWAG_ERROR(Err0338, "type mismatch in [[orelse]] argument type [[%s]] $ note: [[orelse]] requires a nullable type");
    SWAG_ERROR(Err0339, "type mismatch for [[ref]] $ note: applied to non-pointer or non-reference type [[%s]]");
    SWAG_ERROR(Err0340, "misused [[return]] after [[=>]] $ hint: remove it");
    SWAG_ERROR(Err0341, "disallowed [[throw]] in attribute definition $ note: attributes are not functions; remove it");
    SWAG_ERROR(Err0342, "type mismatch in [[throw]] type [[%s]] $ note: only structs or [[@err]] expressions can be thrown");
    SWAG_ERROR(Err0343, "missing required operand for [[throw]] $ note: requires struct or [[@err]] expression");
    SWAG_ERROR(Err0344, "misplaced [[using]] at [[%s]] scope");
    SWAG_ERROR(Err0345, "disallowed [[using]] on interface functions");
    SWAG_ERROR(Err0346, "unsupported [[using]] target type [[%s]]");
    SWAG_ERROR(Err0347, "unsupported [[using]] target type [[%s]] $ note: only valid on a namespace, struct, or enum");
    SWAG_ERROR(Err0348, "unsupported [[using]] target type [[%s]] $ note: only valid on a pointer to a struct");
    SWAG_ERROR(Err0349, "disallowed [[using]] $ note: applied to multiple variables of type [[%s]]");
    SWAG_ERROR(Err0350, "disallowed [[var]] in struct declarations $ hint: declare as [[fieldName: Type]] instead");
    SWAG_ERROR(Err0351, "unsupported [[verify]] on [[%s]] $ note: unsupported for [[opDrop]], [[opPostCopy]], and [[opPostMove]]");
    SWAG_ERROR(Err0352, "disallowed [[verify]] on structs $ hint: use [[where]] instead");
    SWAG_ERROR(Err0353, "unexpected token in [[visit]] specialization name $ note: $$TKN$$");
    SWAG_ERROR(Err0354, "type mismatch in [[where]] condition type [[%s]] $ note: [[where]] requires a boolean expression");
    SWAG_ERROR(Err0355, "unsupported [[where]] on [[%s]] $ note: unsupported for [[opDrop]], [[opPostCopy]], and [[opPostMove]]");
    SWAG_ERROR(Err0356, "missing [[switch]] expression for [[where]]");
    SWAG_ERROR(Err0357, "suspicious [[while]] condition $ note: always evaluates to [[true]] $ hint: use [[for { ... }]] for an intentional infinite loop");
    SWAG_ERROR(Err0358, "malformed [[with]] expression");
    SWAG_ERROR(Err0359, "unexpected [[{]] after [[try]], [[assume]], or [[catch]]");
    SWAG_ERROR(Err0360, "stage access violation $ note: compile-time %s [[%s]] accessed from runtime %s");
    SWAG_ERROR(Err0361, "stage access violation $ note: compile-time %s accessed from runtime %s");
    SWAG_ERROR(Err0362, "unexpected token in alias name $ note: expected an identifier, found $$TKN$$");
    SWAG_ERROR(Err0363, "unsupported alias name on %s");
    SWAG_ERROR(Err0364, "unexpected token in alias target $ note: expected an identifier or a type, found $$TKN$$");
    SWAG_ERROR(Err0365, "non-constant argument [[%s]] $ note: not a compile-time constant");
    SWAG_ERROR(Err0366, "type mismatch in argument for [[%s]] $ note: expects literal but received type [[%s]]");
    SWAG_ERROR(Err0367, "unexpected token in argument name before [[:]] $ note: expected an identifier, found $$TKN$$");
    SWAG_ERROR(Err0368, "type mismatch in array dimension type [[%s]] $ note: array dimension must be an integer");
    SWAG_ERROR(Err0369, "non-constant array dimension $ note: not a compile-time constant");
    SWAG_ERROR(Err0370, "type mismatch in array index type [[%s]] $ note: array index must be an integer");
    SWAG_ERROR(Err0371, "disallowed assignment of function pointer to constant");
    SWAG_ERROR(Err0372, "non-assignable left-hand side $ note: left expression is not assignable");
    SWAG_ERROR(Err0373, "unsupported attribute [[%s]] $ note: is %s");
    SWAG_ERROR(Err0374, "misplaced attribute in this location");
    SWAG_ERROR(Err0375, "unexpected token in attribute name $ note: expected an identifier, found $$TKN$$");
    SWAG_ERROR(Err0376, "type mismatch in attribute parameter type [[%s]]");
    SWAG_ERROR(Err0377, "non-constant attribute parameter $ note: not a compile-time constant");
    SWAG_ERROR(Err0378, "misplaced attribute $ note: must appear before [[%s]] $ hint: move the attribute before [[%s]]");
    SWAG_ERROR(Err0379, "unexpected binary digit $$TKN$$ $ note: binary literals may only contain [[0]] or [[1]]");
    SWAG_ERROR(Err0380, "out-of-range binary literal: exceeds 64-bit range");
    SWAG_ERROR(Err0381, "type mismatch in bit-cast source type [[%s]] $ note: only integer, rune, float, or pointer types are allowed");
    SWAG_ERROR(Err0382, "type mismatch in bit-cast target type [[%s]] $ note: only integer, rune, or float types are allowed");
    SWAG_ERROR(Err0383, "unsupported bitwise inversion [['~']] for type [[%s]]");
    SWAG_ERROR(Err0384, "unmatched bracket closure $ note: [[[]]] without matching [[[]");
    SWAG_ERROR(Err0385, "uncallable target [[%s]] $ note: is [[%s]], not callable");
    SWAG_ERROR(Err0386, "type mismatch in call to [[%s]] with type [[%s]] $ note: [[%s]] requires type [[%s]] as its first argument");
    SWAG_ERROR(Err0387, "misused call syntax $ note: [[%s]] invoked with [[{}]] instead of [[()]]");
    SWAG_ERROR(Err0388, "uncallable variable [[%s]] $ note: is %s");
    SWAG_ERROR(Err0389, "disallowed capture of [[%s]] $ note: is %s $ note: capturing %s is not allowed");
    SWAG_ERROR(Err0390, "disallowed capture $ note: [[%s]] is not plain old data $ note: structs with [[opDrop]], [[opPostCopy]], or [[opPostMove]] cannot be captured");
    SWAG_ERROR(Err0391, "unsupported character [['%s']]");
    SWAG_ERROR(Err0392, "malformed character literal $ note: [['%s']] appears as string, not single character");
    SWAG_ERROR(Err0393, "out-of-range character $ note: [[0x%x]] exceeds [[u16]] range");
    SWAG_ERROR(Err0394, "out-of-range character $ note: [[0x%x]] exceeds [[u8]] range");
    SWAG_ERROR(Err0395, "misplaced closure outside a function scope $ note: closure definitions are allowed only within functions");
    SWAG_ERROR(Err0396, "conflicting combination $ note: [[%s]] conflicts with [[%s]]");
    SWAG_ERROR(Err0397, "unsupported comparison for interface type $ note: interfaces can only be compared with [[null]], another interface, or [[typeinfo]], found [[%s]]");
    SWAG_ERROR(Err0398, "unsupported comparison for slice type $ note: slices can only be compared with [[null]], found [[%s]]");
    SWAG_ERROR(Err0399, "unsupported comparison for type [[any]] $ note: [[any]] can only be compared with [[null]] or [[typeinfo]], found [[%s]]");
    SWAG_ERROR(Err0400, "unsupported compiler pass [[%s]]");
    SWAG_ERROR(Err0401, "unexpected consecutive identifiers");
    SWAG_ERROR(Err0402, "unsupported const version of [[%s]]");
    SWAG_ERROR(Err0403, "constraint violation $ note: %s [[%s]] violates [[%s]]");
    SWAG_ERROR(Err0404, "context violation: [[compileString]] not accessible at this compiler stage $ note: meta-programming is not allowed at this compiler stage");
    SWAG_ERROR(Err0405, "misplaced declaration: cannot begin with a type $ note: variable declarations must start with [[var]], [[let]], or [[const]]");
    SWAG_ERROR(Err0406, "disallowed direct call to [[opDrop]] $ hint: use [[@drop]] instead");
    SWAG_ERROR(Err0407, "disallowed direct call to [[opPostCopy]] $ hint: use [[@postcopy]] instead");
    SWAG_ERROR(Err0408, "disallowed direct call to [[opPostMove]] $ hint: use [[@postmove]] instead");

    SWAG_ERROR(Err0409, "overflowing division $ note: division by [[-1]] causes overflow");
    SWAG_ERROR(Err0410, "undefined division $ note: division by zero");
    SWAG_ERROR(Err0411, "unsupported element type [[void]] for static array");
    SWAG_ERROR(Err0412, "disallowed empty statement [[;]] $ hint: use [[{}]] instead to create an empty block");
    SWAG_ERROR(Err0413, "unsupported enum base type [[cstring]] $ hint: use [[string]] instead");
    SWAG_ERROR(Err0414, "unexpected token in enum name $ note: expected an identifier, found $$TKN$$");
    SWAG_ERROR(Err0415, "unexpected token in enum value $ note: expected an identifier, found $$TKN$$");
    SWAG_ERROR(Err0416, "incompatible enum value [[%s]] for type [[%s]]");
    SWAG_ERROR(Err0417, "duplicate enum value $ note: [[%s]] has the same underlying value as [[%s]]");
    SWAG_ERROR(Err0418, "disallowed error propagation $ note: escapes from [[defer]] or [[defer<err>]] block");
    SWAG_ERROR(Err0419, "unsupported escape code [['%c']]");
    SWAG_ERROR(Err0420, "misused expression $ note: [[%s]] is statement-only");
    SWAG_ERROR(Err0421, "non-constant expression $ note: not a compile-time constant");
    SWAG_ERROR(Err0422, "type-as-expression $ note: replaced by type");
    SWAG_ERROR(Err0423, "reserved field name [[%s]] $ note: reserved by the language $ note: names beginning with [[item]] are reserved");
    SWAG_ERROR(Err0424, "unsupported file encoding $ note: supported encodings are [[ASCII]], [[UTF-8]], or [[UTF-8-BOM]]");
    SWAG_ERROR(Err0425, "type mismatch in first argument of [[%s]] $ note: expected %s [[%s]] as the first argument");
    SWAG_ERROR(Err0426, "missing requirement for first argument to [[%s]] $ note: requires [[variable]] when the second [[@init]] argument is omitted");
    SWAG_ERROR(Err0427, "unsupported first parameter [[%s]]; expected [[me]] $ hint: use [[mtd]] instead of [[func]] for interface methods");
    SWAG_ERROR(Err0428, "type mismatch in first parameter type for [[%s]] $ note: expected [[%s]], got [[%s]]");
    SWAG_ERROR(Err0429, "misplaced function declaration $ note: a function cannot be declared directly inside a [[struct]] $ hint: move the declaration inside an [[impl]] block instead");
    SWAG_ERROR(Err0430, "reserved function name [[%s]] $ note: reserved by the compiler");
    SWAG_ERROR(Err0431, "unsupported function return type [[%s]]");
    SWAG_ERROR(Err0432, "unsupported generic argument $ note: %s ([[%s]]) $ hint: generic arguments must be literals or types");
    SWAG_ERROR(Err0433, "non-generic specialization $ note: %s [[%s]] is not generic and cannot be specialized");
    SWAG_ERROR(Err0434, "malformed generic type $ note: type starting with [[:]] not allowed");
    SWAG_ERROR(Err0435, "unexpected hexadecimal digit $$TKN$$ $ note: hexadecimal digits must be [[0-9]], [[A-F]], or [[a-f]]");
    SWAG_ERROR(Err0436, "out-of-range hexadecimal literal: exceeds 64-bit range");
    SWAG_ERROR(Err0437, "misplaced identifier [[%s]] at file level $ note: only mixin function calls are allowed at the top level");
    SWAG_ERROR(Err0438, "reserved identifier [[%s]] $ note: uses reserved [[__]] prefix $ note: the [[__]] prefix is reserved for compiler use");
    SWAG_ERROR(Err0439, "reserved identifier [[_]] $ note: reserved by the compiler");
    SWAG_ERROR(Err0440, "disallowed index operation on [[%s]] $ note: pointer arithmetic disallowed on [[%s]]");
    SWAG_ERROR(Err0441, "wrong initialization count for type [[%s]] $ note: expected [[1]] value, found [[%d]]");
    SWAG_ERROR(Err0442, "non-constant initialization $ note: not a compile-time constant");
    SWAG_ERROR(Err0443, "non-constant initialization $ note: not a compile-time constant $ hint: add the [[#[Swag.ConstExpr]]] attribute to [[opAffect]] to allow this");
    SWAG_ERROR(Err0444, "type mismatch $ note: expected [[%s]], found [[%s]]");
    SWAG_ERROR(Err0445, "unsupported instruction modifier [[%s]] for [[%s]]");
    SWAG_ERROR(Err0446, "unsupported intrinsic [[%s]]");
    SWAG_ERROR(Err0447, "disallowed lambda parameter default values $ note: the parameters of a lambda cannot have default values");
    SWAG_ERROR(Err0448, "unsupported literal suffix [[%s]]");
    SWAG_ERROR(Err0449, "unsupported literal suffix [[%s]] for float literals $ note: only [[f32]] and [[f64]] suffixes are allowed");
    SWAG_ERROR(Err0450, "unsupported literal suffix [[%s]] for this literal $ note: suffixes are only valid for struct conversions");
    SWAG_ERROR(Err0451, "unsupported literal suffix for [[%s]] $ note: [[%s]] $ note: suffix must correspond to a valid type");
    SWAG_ERROR(Err0452, "unexpected logical operator $ note: expected [[%s]] but found [[%s]]");
    SWAG_ERROR(Err0453, "misused match variable $ note: used with multiple [[case]] values $ hint: each [[case]] must have exactly one value");
    SWAG_ERROR(Err0454, "missing [[switch]] expression for match variable");
    SWAG_ERROR(Err0455, "unsupported member in interface $ note: [[%s]]; requires [[func]] or [[mtd]] $ hint: declare interface functions with [[func]] or [[mtd]]");
    SWAG_ERROR(Err0456, "non-constant message [[%s]] $ note: not a compile-time constant");
    SWAG_ERROR(Err0457, "disallowed move reference $ note: a move reference [[&&]] is only valid for function parameters");
    SWAG_ERROR(Err0458, "reserved namespace name [[%s]] $ note: reserved");
    SWAG_ERROR(Err0459, "overflowing negation $ note: [[%lld]] exceeds [[s64]]; [[%llu]] too large");
    SWAG_ERROR(Err0460, "overflowing negation $ note: [[%d]] exceeds [[%s]] range; [[%u]] too large");
    SWAG_ERROR(Err0461, "too many [[foreach]] alias names $ note: [[foreach]] allows a maximum of [[2]] alias names, got [[%u]] $ note: valid forms are [[foreach value in expr]] or [[foreach value, index in expr]]");
    SWAG_ERROR(Err0462, "unsupported number prefix [[0]]$$TKN$$ $ note: valid numeric prefixes are [[0x]] for hexadecimal or [[0b]] for binary");
    SWAG_ERROR(Err0463, "malformed numeric literal syntax $ note: a [['_']] cannot end the number");
    SWAG_ERROR(Err0464, "malformed numeric literal syntax $ note: consecutive [['__']] are not permitted in numeric literals $ hint: remove extra underscores or use a single [[_]] for digit grouping");
    SWAG_ERROR(Err0465, "malformed numeric literal syntax $ note: the exponent part cannot start with [['_']]");
    SWAG_ERROR(Err0466, "malformed numeric literal syntax $ note: the fractional part cannot start with [['_']]");
    SWAG_ERROR(Err0467, "out-of-range numeric literal $ note: exceeds 64-bit range");
    SWAG_ERROR(Err0468, "unsupported operation [['%s']] on [[null]] value");
    SWAG_ERROR(Err0469, "unsupported operation [['%s']] $ note: left enum [[%s]] not marked [[#[Swag.EnumFlags]]] $ hint: add the [[#[Swag.EnumFlags]]] attribute to the left enum");
    SWAG_ERROR(Err0470, "unsupported operation [['%s']] $ note: right enum [[%s]] not marked [[#[Swag.EnumFlags]]] $ hint: add the [[#[Swag.EnumFlags]]] attribute to the right enum");
    SWAG_ERROR(Err0471, "disallowed operation on [[%s]] $ note: not a compile-time constant $ hint: add the [[#[Swag.ConstExpr]]] attribute to the struct to allow this");
    SWAG_ERROR(Err0472, "unsupported operator [['%s']] for [[%s]] in [[%s]]");
    SWAG_ERROR(Err0473, "unsupported operator [['%s']] for left operand type [[%s]]");
    SWAG_ERROR(Err0474, "unsupported operator [['%s']] for right operand type [[%s]]");
    SWAG_ERROR(Err0475, "unsupported operator [['%s']] for tuple types");
    SWAG_ERROR(Err0476, "unsupported operator [['%s']] for type [[%s]]");
    SWAG_ERROR(Err0477, "non-constant parameter [[%s]] of type [[%s]] $ note: not a compile-time constant");
    SWAG_ERROR(Err0478, "type mismatch in parameter for [[%s]] $ note: requires [[bool]], got [[%s]]");
    SWAG_ERROR(Err0479, "type mismatch in parameter for [[%s]] $ note: requires [[string]], got [[%s]]");
    SWAG_ERROR(Err0480, "unexpected token in parameter name $ note: expected an identifier, found $$TKN$$");
    SWAG_ERROR(Err0481, "disallowed pointer arithmetic");
    SWAG_ERROR(Err0482, "disallowed pointer arithmetic on [[void*]] $ note: [[void]] has no size");
    SWAG_ERROR(Err0483, "type mismatch in pointer arithmetic $ note: requires integer, got [[%s]]");
    SWAG_ERROR(Err0484, "unsupported pointer slicing: type not supported");
    SWAG_ERROR(Err0485, "invalid range expression $ note: the lower bound [[%llu]] exceeds the upper bound [[%llu]]");
    SWAG_ERROR(Err0486, "unsatisfiable range expression $ note: the upper bound of an [[until]] range must be greater than zero");
    SWAG_ERROR(Err0487, "unsupported range type [[%s]] $ note: only integer, rune, or float types can form ranges");
    SWAG_ERROR(Err0488, "unsatisfiable range $ note: lower bound [[%lld]] exceeds upper bound [[%lld]] $ hint: use [[#reverse]] for descending ranges");
    SWAG_ERROR(Err0489, "inconsistent range bounds $ note: mixes signed and unsigned bounds $ note: both range bounds must use the same sign");
    SWAG_ERROR(Err0490, "lifetime error $ note: %s [[%s]] resides in a different stack frame");
    SWAG_ERROR(Err0491, "malformed return type $ hint: missing [[->]] before $$TKN$$");
    SWAG_ERROR(Err0492, "malformed return type $ note: expected [[->]] but found $$TKN$$");
    SWAG_ERROR(Err0493, "disallowed return type [[%s]] $ note: function has no declared return type");
    SWAG_ERROR(Err0494, "disallowed return type [[%s]] for function [[%s]] $ note: function has no declared return type");
    SWAG_ERROR(Err0495, "disallowed return type [[->]] in attribute definition $ note: attributes are not functions; remove the return type");
    SWAG_ERROR(Err0496, "unsupported return type [[void]] $ note: a value is required $ hint: remove the return type if the function returns nothing");
    SWAG_ERROR(Err0497, "conflicting return type $ note: already inferred as [[%s]]");
    SWAG_ERROR(Err0498, "misplaced scope before intrinsic $ note: intrinsics are defined in the top-level scope");
    SWAG_ERROR(Err0499, "unexpected token in scope name $ note: expected an identifier, found $$TKN$$");
    SWAG_ERROR(Err0500, "semantic dependency cycle during %s [[%s]] evaluation");
    SWAG_ERROR(Err0501, "unsupported shift operator [['%s']] for type [[%s]] $ note: operator [[%s]] requires an integer operand");
    SWAG_ERROR(Err0502, "unresolved shorthand to [[%s]] $ note: cannot find a corresponding [[enum]], [[with]], or [[mtd]] context");
    SWAG_ERROR(Err0503, "malformed signature in [[%s.%s]]");
    SWAG_ERROR(Err0504, "type mismatch in slice bound type [[%s]] $ note: slice bounds must be of integer type");
    SWAG_ERROR(Err0505, "unsupported slicing: type [[%s]] does not support slicing");
    SWAG_ERROR(Err0506, "specialization mismatch $ note: type required but value provided");
    SWAG_ERROR(Err0507, "specialization mismatch $ note: value required but type provided");
    SWAG_ERROR(Err0508, "malformed statement $ note: $$TKN$$ cannot appear at the start of an instruction");
    SWAG_ERROR(Err0509, "misplaced statement inside [[switch]] $ note: a [[switch]] body may only contain a [[case]] or a [[default]] section, found $$TKN$$");

    SWAG_ERROR(Err0510, "conflicting struct initialization $ note: both type syntax and assignment");
    SWAG_ERROR(Err0511, "misused struct initialization $ note: used [[()]] instead of [[{}]] $ hint: use [[{}]] for struct initialization; [[()]] is for function calls");
    SWAG_ERROR(Err0512, "unsupported switch expression type [[%s]]");
    SWAG_ERROR(Err0513, "unexpected symbol [['%s']] after %s");
    SWAG_ERROR(Err0514, "unexpected symbol [['%s']] detected");
    SWAG_ERROR(Err0515, "syntax error after parameter declaration $ note: expected an assignment or [[:]], found $$TKN$$");
    SWAG_ERROR(Err0516, "syntax error after variable declaration $ note: expected an assignment or [[:]], found $$TKN$$");
    SWAG_ERROR(Err0517, "syntax error $ note: unexpected $$TKN$$, expected [[%s]]");
    SWAG_ERROR(Err0518, "unexpected token $$TKN$$ after array dimensions");
    SWAG_ERROR(Err0519, "misplaced top-level [[using]] $ note: a top-level [[using]] must not appear after other declarations");
    SWAG_ERROR(Err0520, "disallowed top-level call [[%s]] $ note: not marked [[#[Swag.Mixin]]] $ hint: only mixin calls are allowed at the top level");
    SWAG_ERROR(Err0521, "unsupported top-level instruction $ note: token $$TKN$$");
    SWAG_ERROR(Err0522, "unsupported tuple type as generic parameter");
    SWAG_ERROR(Err0523, "misplaced tuple unpacking in %s scope");
    SWAG_ERROR(Err0524, "unsupported type [[%s]] for [[@cvaarg]]");
    SWAG_ERROR(Err0525, "unsupported type [[%s]] $ note: is %s");
    SWAG_ERROR(Err0526, "misplaced type declaration after [[me]] $ note: [[me]] is implicitly typed");
    SWAG_ERROR(Err0527, "disallowed type declaration after unnamed parameter $ note: unnamed parameters ([['?']]) cannot have an explicit type $ hint: give the parameter a name or remove the type annotation");
    SWAG_ERROR(Err0528, "malformed type declaration $ note: token $$TKN$$");
    SWAG_ERROR(Err0529, "unexpected token in type expression after [[#type]] $ note: expected a type, found $$TKN$$");
    SWAG_ERROR(Err0530, "unsupported type suffix %s $ note: type suffixes are allowed only on [[integer]], [[float]], or [[character]] literals");
    SWAG_ERROR(Err0531, "unsupported unpacking: type [[%s]] does not support unpacking $ note: only struct or tuple types can be unpacked");
    SWAG_ERROR(Err0532, "disallowed unused expression");
    SWAG_ERROR(Err0533, "misuse of [[#callerfunction]] outside a parameter list $ note: this can only be used as a default function parameter value");
    SWAG_ERROR(Err0534, "misuse of [[#callerlocation]] outside a parameter list $ note: this can only be used as a default function parameter value");
    SWAG_ERROR(Err0535, "misuse of [[#dependencies]] $ note: can only be used in [[module.swg]] or in a [[.swgs]] file");
    SWAG_ERROR(Err0536, "misuse of [[#global testerror]] outside test files ([[./tests]] folder)");
    SWAG_ERROR(Err0537, "misuse of [[#global testwarning]] outside test files ([[./tests]] folder)");
    SWAG_ERROR(Err0538, "misuse of [[#global using]] $ note: can only be used in [[module.swg]] or in a [[.swgs]] file");
    SWAG_ERROR(Err0539, "misuse of [[#import]] $ note: can only be used in [[module.swg]] or in a [[.swgs]] file");
    SWAG_ERROR(Err0540, "misuse of [[#import]] outside a [[#dependencies]] block");
    SWAG_ERROR(Err0541, "misuse of [[#inject]] outside loop blocks");
    SWAG_ERROR(Err0542, "misuse of [[#load]] $ note: can only be used in [[module.swg]] or in a [[.swgs]] file");
    SWAG_ERROR(Err0543, "misuse of [[#load]] outside a [[#dependencies]] block");
    SWAG_ERROR(Err0544, "misuse of [[#macro]] outside [[#[Swag.Macro]]] functions");
    SWAG_ERROR(Err0545, "misuse of [[#test]] outside test modules ([[./tests]] folder)");
    SWAG_ERROR(Err0546, "misuse of [[#up]] outside [[#[Swag.Macro]]] functions");
    SWAG_ERROR(Err0547, "disallowed use of [[%s]] $ note: function [[%s]] is not marked with [[throw]]");
    SWAG_ERROR(Err0548, "disallowed use of [[%s]] in struct special function [[%s]]");
    SWAG_ERROR(Err0549, "disallowed use of [[%s]] on %s [[%s]]");
    SWAG_ERROR(Err0550, "misplaced use of [[%s]] outside global scope");
    SWAG_ERROR(Err0551, "misused [[%s]] with arguments $ hint: [[%s]] is a value, not a function call, remove the parentheses");
    SWAG_ERROR(Err0552, "misuse of [[@cvastart]] in function without [[cvarargs]] parameter");
    SWAG_ERROR(Err0553, "misuse of [[@index]] outside loop blocks");
    SWAG_ERROR(Err0554, "misuse of [[alias]] on struct members");
    SWAG_ERROR(Err0555, "misuse of [[break]] outside loop blocks");
    SWAG_ERROR(Err0556, "misuse of [[continue]] outside loop blocks");
    SWAG_ERROR(Err0557, "misuse of [[fallthrough]] outside [[case]] blocks");
    SWAG_ERROR(Err0558, "misuse of [[fallthrough]] outside [[switch]] statement");
    SWAG_ERROR(Err0559, "misuse of [[for]] in [[enum]] implementation");
    SWAG_ERROR(Err0560, "misuse of [[me]] outside enum or struct [[impl]] blocks");
    SWAG_ERROR(Err0561, "misuse of [[mtd]] outside struct [[impl]] blocks $ hint: use [[func]] instead");
    SWAG_ERROR(Err0562, "misuse of [[mtd]] outside struct [[impl]] blocks $ hint: use [[func]] instead");
    SWAG_ERROR(Err0563, "misuse of [[retval]] for return type");
    SWAG_ERROR(Err0564, "misuse of [[retval]] in function without return value");
    SWAG_ERROR(Err0565, "misuse of [[retval]] outside function body");
    SWAG_ERROR(Err0566, "misplaced [[try]] outside a function, macro, or mixin $ note: [[try]] can only appear inside executable code blocks");
    SWAG_ERROR(Err0567, "misuse of [[with]] on enum variable [[%s]] $ note: [[with]] applies to enum types, not enum variables");
    SWAG_ERROR(Err0568, "misuse of [[with]] on type [[%s]] $ note: [[with]] applies only to namespaces, enums, structs, or struct pointers");
    SWAG_ERROR(Err0569, "out-of-range value: [[%llu]] does not fit in [[%s]]");
    SWAG_ERROR(Err0570, "unexpected token in variable alias name $ note: expected an identifier, found $$TKN$$");
    SWAG_ERROR(Err0571, "disallowed variable aliasing for [[%s]] $ note: variable aliasing is only allowed for macros or mixins");
    SWAG_ERROR(Err0572, "unsupported variable name ($$TKN$$) $ note: tuple unpacking requires valid identifiers or [[?]] $ hint: replace with a variable name or [[?]] if the value should be ignored");
    SWAG_ERROR(Err0573, "reserved variable name [[%s]]: starts with [[#]] $ hint: only [[#uniq]] and [[#alias]] are allowed");
    SWAG_ERROR(Err0574, "unsupported variable type [[void]]");
    SWAG_ERROR(Err0575, "misplaced variadic argument $ note: a variadic argument must be the last one");
    SWAG_ERROR(Err0576, "disallowed variadic parameter default value $ note: variadic parameters cannot have a default value");
    SWAG_ERROR(Err0577, "misplaced variadic parameter $ note: a variadic parameter must be the last one");
    SWAG_ERROR(Err0578, "conflicting visibility specifier [[%s]] $ note: conflicts with [[#global export]] $ hint: remove [[public]] since [[#global export]] already makes all declarations public");
    SWAG_ERROR(Err0579, "missing %s [[%s]] initialization $ note: [[%s]] has no zero value, so a value must be explicitly specified");
    SWAG_ERROR(Err0580, "missing [[#[Swag.Foreign]]] module name");
    SWAG_ERROR(Err0581, "missing [[#[Swag.Macro]]] attribute on [[opVisit]] $ note: [[opVisit]] functions must be declared as macros");
    SWAG_ERROR(Err0582, "missing [[#alias]] trailing number $ hint: syntax is [[#alias0]], [[#alias1]], etc.");
    SWAG_ERROR(Err0583, "missing [[#foreignlib]] library name");
    SWAG_ERROR(Err0584, "missing [[#uniq]] trailing number $ hint: syntax is [[#uniq0]], [[#uniq1]], etc.");
    SWAG_ERROR(Err0585, "missing [[%s]] arguments between [[()]]");
    SWAG_ERROR(Err0586, "missing [[(]] to start [[%s]] arguments $ note: found $$TKN$$");
    SWAG_ERROR(Err0587, "missing [[(]] to start parameters $ note: found $$TKN$$");
    SWAG_ERROR(Err0588, "missing [[,]] or [[')']] before $$TKN$$");
    SWAG_ERROR(Err0589, "missing [[,]] or [[')']] before $$TKN$$");
    SWAG_ERROR(Err0590, "missing [[,]] or [[')']] before $$TNK$$");
    SWAG_ERROR(Err0591, "missing [[,]] or [[')']] before $$TKN$$");
    SWAG_ERROR(Err0592, "missing [[,]] or [[')']] before $$TKN$$");
    SWAG_ERROR(Err0593, "missing [[,]] or [[')']] before $$TKN$$");
    SWAG_ERROR(Err0594, "missing [[,]] or [[']']] before $$TKN$$");
    SWAG_ERROR(Err0595, "missing [[,]] or [[']']] before $$TKN$$");
    SWAG_ERROR(Err0596, "missing [[,]] or [[']']] before $$TKN$$ $ hint: add a dimension or close the list with [[']']]");
    SWAG_ERROR(Err0597, "missing [[,]] or [['|']] before $$TKN$$");
    SWAG_ERROR(Err0598, "missing [[,]] or [['}']] before $$TKN$$");
    SWAG_ERROR(Err0599, "missing [[,]] or [[:]] before $$TKN$$");
    SWAG_ERROR(Err0600, "missing [[;]] or default implementation for interface member [[%s]]");
    SWAG_ERROR(Err0601, "missing [[Swag.CompilerMsgMask]] parameter for [[#message]]");
    SWAG_ERROR(Err0602, "missing [[case]] expression before $$TKN$$");
    SWAG_ERROR(Err0603, "missing [[do]] or [[{]] after [[%s]] $ note: the [[%s]] block must start with [[do]] or be enclosed in [['{']] $ hint: add [[do]] or wrap the block in [['{']] and [['}']]");
    SWAG_ERROR(Err0604, "missing [[for]] count before [[%s]]");
    SWAG_ERROR(Err0605, "missing [[foreach]] expression before $$TKN$$");
    SWAG_ERROR(Err0606, "missing [[foreach]] variable after [[,]] $ note: the syntax is [[foreach value, index]]");
    SWAG_ERROR(Err0607, "missing [[if]] boolean expression before $$TKN$$");
    SWAG_ERROR(Err0608, "missing [[if]] boolean expression before $$TKN$$");
    SWAG_ERROR(Err0609, "missing [[impl]] before [[%s]] to mark implementation of [[%s]]");
    SWAG_ERROR(Err0610, "missing [[in]] after [[for]] variable [[%s]] $ hint: syntax is [[for variable in count]]");

    SWAG_ERROR(Err0611, "missing [[let]] variable initialization");
    SWAG_ERROR(Err0612, "missing [[location]] for module [[%s]] dependency");
    SWAG_ERROR(Err0613, "missing [[me]] after [[const]] in parameter $ note: found $$TKN$$");
    SWAG_ERROR(Err0614, "missing [[me]] as first parameter in interface function [[%s]] $ hint: use [[mtd]] instead of [[func]] for interface methods");
    SWAG_ERROR(Err0615, "missing [[mtd]] lambda capture parameters $ note: [[mtd]] lambdas require a capture list between [[||]] $ hint: use [[func]] instead of [[mtd]] or declare the capture list between [[||]]");
    SWAG_ERROR(Err0616, "missing [[opIndex]] for [[%s]] in [[%s]]");
    SWAG_ERROR(Err0617, "missing [[opSlice]] implementation for type [[%s]] in [[%s]]");
    SWAG_ERROR(Err0618, "missing [[public]] access for [[#[Swag.Opaque]]]");
    SWAG_ERROR(Err0619, "missing [[switch]] body $ hint: add one or more [[case]] statements, or remove the [[switch]]");
    SWAG_ERROR(Err0620, "missing [[while]] boolean expression before $$TKN$$");
    SWAG_ERROR(Err0621, "missing [[{]] to start %s body, found [[;]]");
    SWAG_ERROR(Err0622, "missing [[{]] to start [[#inject]] block, found $$TKN$$");
    SWAG_ERROR(Err0623, "missing [[{]] to start function body, found $$TKN$$");
    SWAG_ERROR(Err0624, "missing access index $ note: [[%s]] has type [[%s]]");
    SWAG_ERROR(Err0625, "missing alias name after [[,]] before $$TKN$$ $ hint: add an alias name or remove the trailing [[,]]");
    SWAG_ERROR(Err0626, "missing argument after [[,]] before $$TKN$$ $ hint: add a generic argument or remove the trailing [[,]]");
    SWAG_ERROR(Err0627, "missing argument after [[,]] before $$TKN$$ $ hint: add an argument or remove the trailing [[,]]");
    SWAG_ERROR(Err0628, "missing argument after [[,]] before $$TKN$$ $ hint: add an argument or remove the trailing [[,]]");
    SWAG_ERROR(Err0629, "missing arguments between [[()]] for %s [[%s]]");
    SWAG_ERROR(Err0630, "missing assignment after %s $ note: found $$TKN$$");
    SWAG_ERROR(Err0631, "missing attribute after [[,]] before $$TKN$$ $ hint: add an attribute or remove the trailing [[,]]");
    SWAG_ERROR(Err0632, "missing attribute name before [[(]]");
    SWAG_ERROR(Err0633, "missing attribute value $ hint: specify the attribute name or remove it");
    SWAG_ERROR(Err0634, "missing call arguments for [[%s]] of type [[%s]]");
    SWAG_ERROR(Err0635, "missing capture variable between [[,]] and [['|']] $ hint: add a variable or remove the trailing comma");
    SWAG_ERROR(Err0636, "missing closing [[%s]] %s");
    SWAG_ERROR(Err0637, "missing closing [['*/']]");
    SWAG_ERROR(Err0638, "missing closing [['\"']] before line end $ hint: use [[\"\"\"string\"\"\"]] for multi-line strings");
    SWAG_ERROR(Err0639, "missing closing [[)]] in attribute arguments");
    SWAG_ERROR(Err0640, "missing closing quote before line end");
    SWAG_ERROR(Err0641, "missing constant initialization");
    SWAG_ERROR(Err0642, "missing constant name after [[const]], found $$TKN$$");
    SWAG_ERROR(Err0643, "missing content in [[case]] statement");
    SWAG_ERROR(Err0644, "missing content in [[default]] statement");
    SWAG_ERROR(Err0645, "missing default value of %s $ note: the previous parameter has a default value, so this one must have as well");
    SWAG_ERROR(Err0646, "missing definition for [[%s]]");
    SWAG_ERROR(Err0647, "missing digits in binary literal ([[0]] or [[1]])");
    SWAG_ERROR(Err0648, "missing digits in hexadecimal literal ([[0-9]], [[A-F]], [[a-f]])");
    SWAG_ERROR(Err0649, "missing dimension after [[,]] before $$TKN$$ $ hint: add a dimension or remove the trailing [[,]]");
    SWAG_ERROR(Err0650, "missing dimensions for enum array type [[%s]]");
    SWAG_ERROR(Err0651, "missing eight hexadecimal digits after [['\\U']]");
    SWAG_ERROR(Err0652, "missing elements in array literal");
    SWAG_ERROR(Err0653, "missing embedded instruction after [[%s]]");
    SWAG_ERROR(Err0654, "missing enum name before [[':']]");
    SWAG_ERROR(Err0655, "missing enum name before [['{']]");
    SWAG_ERROR(Err0656, "missing enum value [[%s]] initialization $ note: an enum value of type [[%s]] must be explicitly initialized");
    SWAG_ERROR(Err0657, "missing error handling $ note: the function [[%s]] is marked with [[throw]] and may raise errors that must be handled $ hint: add [[try]], [[catch]], or [[assume]] to handle it");
    SWAG_ERROR(Err0658, "missing error string after [[#global testerror]] $ note: found $$TKN$$");
    SWAG_ERROR(Err0659, "missing expression after [[%s]], found $$TKN$$");
    SWAG_ERROR(Err0660, "missing expression after [[,]] before $$TKN$$ $ hint: add a case expression or remove the trailing [[,]]");
    SWAG_ERROR(Err0661, "missing expression inside [[()]]");
    SWAG_ERROR(Err0662, "missing filename after [[#include]], found $$TKN$$");
    SWAG_ERROR(Err0663, "missing float exponent value");
    SWAG_ERROR(Err0664, "missing four hexadecimal digits after [['\\u']]");
    SWAG_ERROR(Err0665, "missing function name, found $$TKN$$");
    SWAG_ERROR(Err0666, "missing function parameter name");
    SWAG_ERROR(Err0667, "missing generic arguments for %s");
    SWAG_ERROR(Err0668, "missing generic arguments for function [[%s]]");
    SWAG_ERROR(Err0669, "missing generic arguments for function [[%s]]");
    SWAG_ERROR(Err0670, "missing generic arguments for struct [[%s]]");
    SWAG_ERROR(Err0671, "missing generic arguments for struct [[%s]]");
    SWAG_ERROR(Err0672, "missing generic name identifier, found $$TKN$$");
    SWAG_ERROR(Err0673, "missing generic parameters between [[()]] $ hint: remove [[()]] if this is not generic");
    SWAG_ERROR(Err0674, "missing generic parameters in [[%s]] declaration");
    SWAG_ERROR(Err0675, "missing identifier %s, found $$TKN$$");
    SWAG_ERROR(Err0676, "missing identifier after [[%s]], found $$TKN$$");
    SWAG_ERROR(Err0677, "missing identifier after [[.]] reference, found $$TKN$$");
    SWAG_ERROR(Err0678, "missing identifier or type after suffix start, found $$TKN$$");
    SWAG_ERROR(Err0679, "missing identifier, found $$TKN$$");
    SWAG_ERROR(Err0680, "missing index after [[,]] before $$TKN$$ $ hint: add an index or remove the trailing [[,]]");
    SWAG_ERROR(Err0681, "missing initialization for immutable variable");
    SWAG_ERROR(Err0682, "missing line break or [[;]] after %s $ note: found $$TKN$$");
    SWAG_ERROR(Err0683, "missing location path after [[#import]], found $$TKN$$");
    SWAG_ERROR(Err0684, "missing major version $ note: revision set to [[%d]]");
    SWAG_ERROR(Err0685, "missing match variable name, found $$TKN$$");
    SWAG_ERROR(Err0686, "missing module name after [[#import]], found $$TKN$$");
    SWAG_ERROR(Err0687, "missing name of %s $ note: the previous arguments are named, so this one must be as well");
    SWAG_ERROR(Err0688, "missing namespace body; found [[;]]");
    SWAG_ERROR(Err0689, "missing namespace name before [['{']]");
    SWAG_ERROR(Err0690, "missing namespace name before [[;]]");
    SWAG_ERROR(Err0691, "missing namespace name, found $$TKN$$");
    SWAG_ERROR(Err0692, "missing or invalid expression $ note: found $$TKN$$");
    SWAG_ERROR(Err0693, "missing or invalid second [[#import]] argument $ note: found $$TKN$$ $ hint: use [[location:\"location\"]]");
    SWAG_ERROR(Err0694, "missing or invalid third [[#import]] argument $ note: found $$TKN$$ $ hint: use [[version:\"version\"]]");
    SWAG_ERROR(Err0695, "missing parameter after [[,]] before $$TKN$$ $ hint: add a parameter or remove the trailing [[,]]");
    SWAG_ERROR(Err0696, "missing parameter name and [[:]] before [[%s]]");
    SWAG_ERROR(Err0697, "missing parameter type or assignment $ note: cannot mix inferred and explicit types");
    SWAG_ERROR(Err0698, "missing parameters [[()]] before [[{]] $ hint: add [[()]] after [[%s]] if there are no parameters");
    SWAG_ERROR(Err0699, "missing parameters for function [[%s]]");
    SWAG_ERROR(Err0700, "missing reference initialization");
    SWAG_ERROR(Err0701, "missing required error $ note: none detected");
    SWAG_ERROR(Err0702, "missing required warning $ note: none detected");
    SWAG_ERROR(Err0703, "missing return statement of type [[%s]] in %s");
    SWAG_ERROR(Err0704, "missing return type $ note: a function with the [[#[Swag.Discardable]]] attribute must return a value");
    SWAG_ERROR(Err0705, "missing return type [[%s]] for function [[%s]]");
    SWAG_ERROR(Err0706, "missing return type for function [[%s]]");
    SWAG_ERROR(Err0707, "missing return value of type [[%s]]");
    SWAG_ERROR(Err0708, "missing revision $ note: build number set to [[%d]]");
    SWAG_ERROR(Err0709, "missing struct name after [[for]], found %s [[%s]]");
    SWAG_ERROR(Err0710, "missing struct name before [['{']]");
    SWAG_ERROR(Err0711, "missing struct name, found $$TKN$$");

    SWAG_ERROR(Err0712, "missing two hexadecimal digits after [['\\x']]");
    SWAG_ERROR(Err0713, "missing type after [[code]] $ note: [[code]] requires a type or [[void]], found $$TKN$$");
    SWAG_ERROR(Err0714, "missing upper bound after [[until]] $ hint: use [[to]] to slice until the end");
    SWAG_ERROR(Err0715, "missing value [[%s.%s]] in [[switch]]");
    SWAG_ERROR(Err0716, "missing variable name after [[%s]], found $$TKN$$");
    SWAG_ERROR(Err0717, "missing variable name after [[,]] before $$TKN$$ $ hint: add a variable name or remove the trailing [[,]]");
    SWAG_ERROR(Err0718, "missing variable name after [[,]] before $$TKN$$ $ hint: add a variable name or remove the trailing [[,]]");
    SWAG_ERROR(Err0719, "missing variable name after [[,]], found $$TKN$$");
    SWAG_ERROR(Err0720, "missing variable name, found $$TKN$$");
    SWAG_ERROR(Err0721, "missing version string after [[#import]], found $$TKN$$");
    SWAG_ERROR(Err0722, "missing warning string after [[#global testwarning]] $ note: found $$TKN$$");
    SWAG_ERROR(Err0723, "not enough arguments for attribute [[%s]]");
    SWAG_ERROR(Err0724, "not enough call arguments for %s [[%s]]");
    SWAG_ERROR(Err0725, "not enough generic arguments for %s [[%s]]");
    SWAG_ERROR(Err0726, "not enough generic parameters for [[%s]]");
    SWAG_ERROR(Err0727, "not enough initializers for array $ note: expected [[%d]] values, found [[%d]]");
    SWAG_ERROR(Err0728, "not enough parameters in [[%s]] declaration $ note: [[%s]] requires [[%d]] parameters, found [[%d]]");
    SWAG_ERROR(Err0729, "not enough parameters in [[%s]] declaration $ note: [[%s]] requires at least [[%d]] parameters, found [[%d]]");
    SWAG_ERROR(Err0730, "not enough tuple initializers $ note: the tuple requires [[%d]] values, found [[%d]]");
    SWAG_ERROR(Err0731, "too many [[#alias]] numbers $ note: the valid range is [0, 31], found [[%u]]");
    SWAG_ERROR(Err0732, "too many [[#uniq]] numbers $ note: the valid range is [0, 31], found [[%u]]");
    SWAG_ERROR(Err0733, "too many [[#up]] count $ note: the valid range is [1, 255], found [[%u]]");
    SWAG_ERROR(Err0734, "too many arguments $ note: expected [[%d]], found [[%d]]");
    SWAG_ERROR(Err0735, "too many array dimensions $ note: maximum is [[254]]");
    SWAG_ERROR(Err0736, "too many generic arguments for %s [[%s]] $ note: expected [[%d]], found [[%d]]");
    SWAG_ERROR(Err0737, "too many generic parameters for [[%s]]");
    SWAG_ERROR(Err0738, "too many generic parameters for [[%s]] $ note: expected [[1]], found [[%d]]");
    SWAG_ERROR(Err0739, "too many identifiers $ note: expected single %s $ hint: remove the [['.']] separator");
    SWAG_ERROR(Err0740, "too many initializers for [[%s]] $ note: expected [[%d]] values, found [[%d]]");
    SWAG_ERROR(Err0741, "too many initializers for array $ note: expected [[%d]] values, found [[%d]]");
    SWAG_ERROR(Err0742, "too many initializers for tuple $ note: expected [[%d]] values, found [[%d]]");
    SWAG_ERROR(Err0743, "too many parameters in [[%s]] declaration $ note: [[%s]] requires [[%d]] parameters, found [[%d]]");
    SWAG_ERROR(Err0744, "too many variadic arguments $ note: the maximum number of arguments is [[%d]], found [[%d]]");
    SWAG_ERROR(Err0745, "type mismatch $ note: expected type [[%s]], found [[%s]]");
    SWAG_ERROR(Err0746, "type mismatch [[%s]] for field [[%s]] $ note: field [[%s]] requires [[%s]]");
    SWAG_ERROR(Err0747, "type mismatch in tuple assignment");
    SWAG_ERROR(Err0748, "unexpected parameters $ note: a %s cannot have parameters $ hint: replace [[(]] with [[{]] to start the block");
    SWAG_ERROR(Err0749, "unexpected return type $ note: a function with the [[#[Swag.CalleeReturn]]] attribute cannot declare a return type");
    SWAG_ERROR(Err0750, "unexpected return value $ note: a %s cannot return a value");
    SWAG_ERROR(Err0751, "unmatched [[)]]: missing matching [[(]]");
    SWAG_ERROR(Err0752, "unmatched [[}]]: missing matching [[{]]");
    SWAG_ERROR(Err0753, "unmatched comment terminator [['*/']] after %s $ note: missing matching [['/*']]");
    SWAG_ERROR(Err0754, "unresolved generic struct [[%s]] $ note: field [[%s]] is generic but cannot be specialized");
    SWAG_ERROR(Err0755, "unsupported callback return type $ note: cannot use [[@mkcallback]] on a function returning type [[%s]]");
    SWAG_ERROR(Err0756, "unsupported variadic argument type [[%s]] $ note: argument is promoted to [[%s]] at the call site");

    SWAG_ERROR(Err0757, nullptr);
    SWAG_ERROR(Err0758, nullptr);
    SWAG_ERROR(Err0759, nullptr);
    SWAG_ERROR(Err0760, nullptr);
    SWAG_ERROR(Err0761, nullptr);
    SWAG_ERROR(Err0762, nullptr);
    SWAG_ERROR(Err0763, nullptr);
    SWAG_ERROR(Err0764, nullptr);
    SWAG_ERROR(Err0765, nullptr);
    SWAG_ERROR(Err0766, nullptr);
    SWAG_ERROR(Err0767, nullptr);
    SWAG_ERROR(Err0768, nullptr);
    SWAG_ERROR(Err0769, nullptr);
    SWAG_ERROR(Err0770, nullptr);
    SWAG_ERROR(Err0771, nullptr);
    SWAG_ERROR(Err0772, nullptr);
    SWAG_ERROR(Err0773, nullptr);
    SWAG_ERROR(Err0774, nullptr);
    SWAG_ERROR(Err0775, nullptr);
    SWAG_ERROR(Err0776, nullptr);
    SWAG_ERROR(Err0777, nullptr);
    SWAG_ERROR(Err0778, nullptr);
    SWAG_ERROR(Err0779, nullptr);
    SWAG_ERROR(Err0780, nullptr);
    SWAG_ERROR(Err0781, nullptr);
    SWAG_ERROR(Err0782, nullptr);
    SWAG_ERROR(Err0783, nullptr);
    SWAG_ERROR(Err0784, nullptr);
    SWAG_ERROR(Err0785, nullptr);

    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////
}

Utf8 formErr(ErrorID idx, ...)
{
    va_list args;
    va_start(args, idx);
    auto result = form("[%s] %s", g_ErrList[idx], g_E[idx].cstr());
    result      = form(result.cstr(), args);
    va_end(args);
    return result;
}

Utf8 toErr(ErrorID idx)
{
    return form("[%s] %s", g_ErrList[idx], g_E[idx].cstr());
}
