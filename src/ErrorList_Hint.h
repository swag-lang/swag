SWAG_ERROR(Hnt0000, "this divisor expression is zero")
SWAG_ERROR(Hnt0001, "this `@sqrt` is called with a negative value")
SWAG_ERROR(Hnt0002, "this value can only be converted to type `%s` with a dynamic call to `opAffect`")
SWAG_ERROR(Hnt0003, "this is a static reference to a struct member of `%s`")
SWAG_ERROR(Hnt0004, "this should be `const %s`")
SWAG_ERROR(Hnt0005, "this could be casted to `uint`")
SWAG_ERROR(Hnt0006, "this cannot be visited")
SWAG_ERROR(Hnt0007, "this implies another `visit` variable name")
SWAG_ERROR(Hnt0008, "this intrinsic is not discardable, so the return value should always be used")
SWAG_ERROR(Hnt0009, "this should be a `visit` variable name or the expression to evaluate")
SWAG_ERROR(Hnt0010, "this should be a `visit` variable name")
SWAG_ERROR(Hnt0011, "this type is `%s`")
SWAG_ERROR(Hnt0012, "this return (%s) should have type `%s`")
SWAG_ERROR(Hnt0013, "this should be on another line, or separated with `;`")
SWAG_ERROR(Hnt0014, "this is invalid in global scope")
SWAG_ERROR(Hnt0015, "this function is marked with the `Swag.Macro` attribute")
SWAG_ERROR(Hnt0016, "this function is marked with the `Swag.Mixin` attribute")
SWAG_ERROR(Hnt0017, "this function is marked with the `Swag.Inline` attribute")
SWAG_ERROR(Hnt0018, "this is a constant")
SWAG_ERROR(Hnt0019, "this should be `impl enum %s`")
SWAG_ERROR(Hnt0020, "this should be `impl %s`")
SWAG_ERROR(Hnt0021, "this should be a pointer")
SWAG_ERROR(Hnt0022, "this type is immutable")
SWAG_ERROR(Hnt0023, "this call should be preceeded by `discard` if you do not want to use the return value")
SWAG_ERROR(Hnt0024, "this is a pointer type declaration because of `*`")
SWAG_ERROR(Hnt0025, "this could be casted with `cast(%s)`")
SWAG_ERROR(Hnt0026, "this should be removed")
SWAG_ERROR(Hnt0027, "this should be the `loop` expression to evaluate")
SWAG_ERROR(Hnt0028, "this should be the `loop` variable name or the expression to evaluate")
SWAG_ERROR(Hnt0029, "this should be the `visit` expression to evaluate")
SWAG_ERROR(Hnt0030, "this should be the expression to dereference")
SWAG_ERROR(Hnt0031, "this should be the range right expression")
SWAG_ERROR(Hnt0032, "this type is `%s` (could be casted with `cast(%s)`)")
SWAG_ERROR(Hnt0033, "this evaluates to 0")
SWAG_ERROR(Hnt0034, "this returns nothing")
SWAG_ERROR(Hnt0035, "this is an alias and should be an identifier")
SWAG_ERROR(Hnt0036, "this is a pointer and cannot be visited")
SWAG_ERROR(Hnt0037, "this pointer could be dereferenced with `dref`")
SWAG_ERROR(Hnt0038, "this is not a constant")
SWAG_ERROR(Hnt0039, "this function call returns an immutable `%s`")
SWAG_ERROR(Hnt0040, "this is a `typeinfo` value")
SWAG_ERROR(Hnt0041, "this comment does not end")
SWAG_ERROR(Hnt0042, "this should be replaced by `func`")
SWAG_ERROR(Hnt0043, "this could be moved before `%s`")
SWAG_ERROR(Hnt0044, "this should be followed by the parameters between `()`")
SWAG_ERROR(Hnt0045, "this is the second initialization")
SWAG_ERROR(Hnt0046, "this call could be preceeded by `#run` to force the call at compile time")
SWAG_ERROR(Hnt0047, "this is an hidden call to `%s`")
SWAG_ERROR(Hnt0048, "this argument does not match")
SWAG_ERROR(Hnt0049, "this implies a first parameter `self`")
SWAG_ERROR(Hnt0050, "this implies a first parameter `const self`")
SWAG_ERROR(Hnt0051, "this should be casted to `f32` or `f64`")
SWAG_ERROR(Hnt0052, "this should be casted to a sized type like `s32`, `s64` etc...")