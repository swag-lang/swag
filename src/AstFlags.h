#pragma once
#include "Flags.h"

using AstNodeFlags                                    = Flags<uint64_t>;
constexpr AstNodeFlags AST_CONST_EXPR                 = 0x00000000'00000001;
constexpr AstNodeFlags AST_COMPUTED_VALUE             = 0x00000000'00000002;
constexpr AstNodeFlags AST_GLOBAL_NODE                = 0x00000000'00000004;
constexpr AstNodeFlags AST_IN_VALIDIF                 = 0x00000000'00000008;
constexpr AstNodeFlags AST_IN_MIXIN                   = 0x00000000'00000010;
constexpr AstNodeFlags AST_DISCARD                    = 0x00000000'00000020;
constexpr AstNodeFlags AST_TAKE_ADDRESS               = 0x00000000'00000040;
constexpr AstNodeFlags AST_NO_BYTECODE_CHILDREN       = 0x00000000'00000080;
constexpr AstNodeFlags AST_SUB_DECL                   = 0x00000000'00000100;
constexpr AstNodeFlags AST_NO_SEMANTIC                = 0x00000000'00000200;
constexpr AstNodeFlags AST_EXPLICITLY_NOT_INITIALIZED = 0x00000000'00000400;
constexpr AstNodeFlags AST_NO_BYTECODE                = 0x00000000'00000800;
constexpr AstNodeFlags AST_L_VALUE                    = 0x00000000'00001000;
constexpr AstNodeFlags AST_R_VALUE                    = 0x00000000'00002000;
constexpr AstNodeFlags AST_MUST_SORT_CHILDREN         = 0x00000000'00004000;
constexpr AstNodeFlags AST_INTERNAL                   = 0x00000000'00008000;
constexpr AstNodeFlags AST_DEFINED_INTRINSIC          = 0x00000000'00010000;
constexpr AstNodeFlags AST_GENERATED                  = 0x00000000'00020000;
constexpr AstNodeFlags AST_IS_GENERIC                 = 0x00000000'00040000;
constexpr AstNodeFlags AST_FROM_GENERIC               = 0x00000000'00080000;
constexpr AstNodeFlags AST_IN_DEFER                   = 0x00000000'00100000;
constexpr AstNodeFlags AST_UFCS_FCT                   = 0x00000000'00200000;
constexpr AstNodeFlags AST_HAS_FULL_STRUCT_PARAMETERS = 0x00000000'00400000;
constexpr AstNodeFlags AST_FROM_GENERIC_REPLACE       = 0x00000000'00800000;
constexpr AstNodeFlags AST_IN_TYPE_VAR_DECLARATION    = 0x00000000'01000000;
constexpr AstNodeFlags AST_TRANSIENT                  = 0x00000000'02000000;
constexpr AstNodeFlags AST_FORCE_MOVE                 = 0x00000000'04000000;
constexpr AstNodeFlags AST_IS_CONST                   = 0x00000000'08000000;
constexpr AstNodeFlags AST_GENERATED_GENERIC_PARAM    = 0x00000000'10000000;
constexpr AstNodeFlags AST_VALUE_IS_GEN_TYPEINFO      = 0x00000000'20000000;
constexpr AstNodeFlags AST_DECL_USING                 = 0x00000000'40000000;
constexpr AstNodeFlags AST_GENERATED_USER             = 0x00000000'80000000;
constexpr AstNodeFlags AST_IN_FUNC_DECL_PARAMS        = 0x00000001'00000000;
constexpr AstNodeFlags AST_OP_AFFECT_CAST             = 0x00000002'00000000;
constexpr AstNodeFlags AST_IN_IMPL                    = 0x00000004'00000000;
constexpr AstNodeFlags AST_ARRAY_POINTER_REF          = 0x00000008'00000000;
constexpr AstNodeFlags AST_STRUCT_COMPOUND            = 0x00000010'00000000;
constexpr AstNodeFlags AST_REVERSE_SEMANTIC           = 0x00000020'00000000;
constexpr AstNodeFlags AST_CAN_MATCH_INCOMPLETE       = 0x00000040'00000000;
constexpr AstNodeFlags AST_IN_ATOMIC_EXPR             = 0x00000080'00000000;
constexpr AstNodeFlags AST_HAS_SELECT_IF              = 0x00000100'00000000;
constexpr AstNodeFlags AST_REGISTERED_IN_STRUCT       = 0x00000200'00000000;
constexpr AstNodeFlags AST_SIDE_EFFECTS               = 0x00000400'00000000;
constexpr AstNodeFlags AST_STRUCT_CONVERT             = 0x00000800'00000000;
constexpr AstNodeFlags AST_FROM_UFCS                  = 0x00001000'00000000;
constexpr AstNodeFlags AST_TO_UFCS                    = 0x00002000'00000000;
constexpr AstNodeFlags AST_TUPLE_UNPACK               = 0x00004000'00000000;
constexpr AstNodeFlags AST_INLINED                    = 0x00008000'00000000;
constexpr AstNodeFlags AST_NEED_SCOPE                 = 0x00010000'00000000;
constexpr AstNodeFlags AST_IN_RUN_BLOCK               = 0x00020000'00000000;
constexpr AstNodeFlags AST_NO_BACKEND                 = 0x00040000'00000000;
constexpr AstNodeFlags AST_STRUCT_MEMBER              = 0x00080000'00000000;
constexpr AstNodeFlags AST_NO_LEFT_DROP               = 0x00100000'00000000;
constexpr AstNodeFlags AST_NO_RIGHT_DROP              = 0x00200000'00000000;
constexpr AstNodeFlags AST_SILENT_CHECK               = 0x00400000'00000000;
constexpr AstNodeFlags AST_SPEC_STACK_SIZE            = 0x00800000'00000000;
constexpr AstNodeFlags AST_SPEC_SEMANTIC1             = 0x01000000'00000000;
constexpr AstNodeFlags AST_SPEC_SEMANTIC2             = 0x02000000'00000000;
constexpr AstNodeFlags AST_SPEC_SEMANTIC3             = 0x04000000'00000000;
constexpr AstNodeFlags AST_SPEC_SEMANTIC_HAS3         = 0x08000000'00000000;

using AstSemFlags                                        = Flags<uint64_t>;
constexpr AstSemFlags SEMFLAG_VAR_DECL_STRUCT_PARAMETERS = 0x00000000'00000001;
constexpr AstSemFlags SEMFLAG_VAR_DECL_REF_CALL          = 0x00000000'00000002;
constexpr AstSemFlags SEMFLAG_EMIT_DEFERRED              = 0x00000000'00000004;
constexpr AstSemFlags SEMFLAG_EMIT_DROP                  = 0x00000000'00000008;
constexpr AstSemFlags SEMFLAG_RETVAL                     = 0x00000000'00000010;
constexpr AstSemFlags SEMFLAG_FORCE_CONST_EXPR           = 0x00000000'00000020;
constexpr AstSemFlags SEMFLAG_RESOLVE_INLINED            = 0x00000000'00000040;
constexpr AstSemFlags SEMFLAG_PRE_CAST                   = 0x00000000'00000080;
constexpr AstSemFlags SEMFLAG_CAST1                      = 0x00000000'00000100;
constexpr AstSemFlags SEMFLAG_CAST2                      = 0x00000000'00000200;
constexpr AstSemFlags SEMFLAG_CAST3                      = 0x00000000'00000400;
constexpr AstSemFlags SEMFLAG_FLAT_PARAMS                = 0x00000000'00000800;
constexpr AstSemFlags SEMFLAG_LAST_PARAM_CODE            = 0x00000000'00001000;
constexpr AstSemFlags SEMFLAG_COMPILER_INSERT            = 0x00000000'00002000;
constexpr AstSemFlags SEMFLAG_EMIT_OP                    = 0x00000000'00004000;
constexpr AstSemFlags SEMFLAG_EXPR_LIST_CST              = 0x00000000'00008000;
constexpr AstSemFlags SEMFLAG_FILE_JOB_PASS              = 0x00000000'00010000;
constexpr AstSemFlags SEMFLAG_ASSIGN_COMPUTED            = 0x00000000'00020000;
constexpr AstSemFlags SEMFLAG_LOAD                       = 0x00000000'00040000;
constexpr AstSemFlags SEMFLAG_TRY_1                      = 0x00000000'00080000;
constexpr AstSemFlags SEMFLAG_TRY_2                      = 0x00000000'00100000;
constexpr AstSemFlags SEMFLAG_STACK_TRACE                = 0x00000000'00200000;
constexpr AstSemFlags SEMFLAG_STACK_TRACE1               = 0x00000000'00400000;
constexpr AstSemFlags SEMFLAG_PENDING_LAMBDA_TYPING      = 0x00000000'00800000;
constexpr AstSemFlags SEMFLAG_NEG_EATEN                  = 0x00000000'01000000;
constexpr AstSemFlags SEMFLAG_FROM_NULL                  = 0x00000000'02000000;
constexpr AstSemFlags SEMFLAG_FROM_REF                   = 0x00000000'04000000;
constexpr AstSemFlags SEMFLAG_FORCE_CAST_PTR_STRUCT      = 0x00000000'08000000;
constexpr AstSemFlags SEMFLAG_FIELD_STRUCT               = 0x00000000'10000000;
constexpr AstSemFlags SEMFLAG_TYPE_SOLVED                = 0x00000000'20000000;
constexpr AstSemFlags SEMFLAG_IS_CONST_ASSIGN            = 0x00000000'40000000;
constexpr AstSemFlags SEMFLAG_STRUCT_OP_ALLOCATED        = 0x00000000'80000000;
constexpr AstSemFlags SEMFLAG_FORCE_TAKE_ADDRESS         = 0x00000001'00000000;
constexpr AstSemFlags SEMFLAG_FORCE_NO_TAKE_ADDRESS      = 0x00000002'00000000;
constexpr AstSemFlags SEMFLAG_EMBEDDED_RETURN            = 0x00000004'00000000;
constexpr AstSemFlags SEMFLAG_SCOPE_HAS_RETURN           = 0x00000008'00000000;
constexpr AstSemFlags SEMFLAG_FCT_HAS_RETURN             = 0x00000010'00000000;
constexpr AstSemFlags SEMFLAG_DEREF_USING                = 0x00000020'00000000;
constexpr AstSemFlags SEMFLAG_USING                      = 0x00000040'00000000;
constexpr AstSemFlags SEMFLAG_FORCE_SCOPE                = 0x00000080'00000000;
constexpr AstSemFlags SEMFLAG_LITERAL_SUFFIX             = 0x00000100'00000000;
constexpr AstSemFlags SEMFLAG_IS_CONST_ASSIGN_INHERIT    = 0x00000200'00000000;
constexpr AstSemFlags SEMFLAG_INVERSE_PARAMS             = 0x00000400'00000000;
constexpr AstSemFlags SEMFLAG_ON_CLONE                   = 0x00000800'00000000;
constexpr AstSemFlags SEMFLAG_TYPE_IS_NULL               = 0x00001000'00000000;
constexpr AstSemFlags SEMFLAG_DISABLED                   = 0x00002000'00000000;
constexpr AstSemFlags SEMFLAG_SCOPE_FORCE_HAS_RETURN     = 0x00004000'00000000;
constexpr AstSemFlags SEMFLAG_BYTECODE_GENERATED         = 0x00008000'00000000;
constexpr AstSemFlags SEMFLAG_BYTECODE_RESOLVED          = 0x00010000'00000000;
constexpr AstSemFlags SEMFLAG_AUTO_CODE_PARAM            = 0x00020000'00000000;
constexpr AstSemFlags SEMFLAG_ONCE                       = 0x00040000'00000000;
constexpr AstSemFlags SEMFLAG_USER_CAST                  = 0x00080000'00000000;
constexpr AstSemFlags SEMFLAG_TUPLE_CONVERT              = 0x00100000'00000000;
constexpr AstSemFlags SEMFLAG_EXEC_RET_STACK             = 0x00200000'00000000;
constexpr AstSemFlags SEMFLAG_FORCE_UFCS                 = 0x00400000'00000000;
constexpr AstSemFlags SEMFLAG_ACCESS_PUBLIC              = 0x00800000'00000000;
constexpr AstSemFlags SEMFLAG_ACCESS_INTERNAL            = 0x01000000'00000000;
constexpr AstSemFlags SEMFLAG_ACCESS_PRIVATE             = 0x02000000'00000000;
constexpr AstSemFlags SEMFLAG_ACCESS_MASK                = SEMFLAG_ACCESS_PUBLIC | SEMFLAG_ACCESS_INTERNAL | SEMFLAG_ACCESS_PRIVATE;
constexpr AstSemFlags SEMFLAG_ACCESS_COMPUTED            = 0x04000000'00000000;
constexpr AstSemFlags SEMFLAG_FROM_PTR_REF               = 0x08000000'00000000;
