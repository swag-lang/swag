<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup>
    <ClCompile Include="JobThread.cpp">
      <Filter>Threading</Filter>
    </ClCompile>
    <ClCompile Include="ThreadManager.cpp">
      <Filter>Threading</Filter>
    </ClCompile>
    <ClCompile Include="DependentJobs.cpp">
      <Filter>Main</Filter>
    </ClCompile>
    <ClCompile Include="Job.cpp">
      <Filter>Threading</Filter>
    </ClCompile>
    <ClCompile Include="Swag.cpp">
      <Filter>Main</Filter>
    </ClCompile>
    <ClCompile Include="closures.c">
      <Filter>FFI</Filter>
    </ClCompile>
    <ClCompile Include="ffi.c">
      <Filter>FFI</Filter>
    </ClCompile>
    <ClCompile Include="ffi64.c">
      <Filter>FFI</Filter>
    </ClCompile>
    <ClCompile Include="Global.cpp">
      <Filter>Main</Filter>
    </ClCompile>
    <ClCompile Include="Tokenizer.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="Log.cpp">
      <Filter>Main</Filter>
    </ClCompile>
    <ClCompile Include="prep_cif.c">
      <Filter>FFI</Filter>
    </ClCompile>
    <ClCompile Include="types.c">
      <Filter>FFI</Filter>
    </ClCompile>
    <ClCompile Include="LanguageSpec.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="Diagnostic.cpp">
      <Filter>Main</Filter>
    </ClCompile>
    <ClCompile Include="TokenizerNumberLiteral_.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="SyntaxJob.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="TokenizerSymbol_.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="TokenizerStringLiteral_.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="Utf8.cpp">
      <Filter>Main</Filter>
    </ClCompile>
    <ClCompile Include="Workspace.cpp">
      <Filter>Main</Filter>
    </ClCompile>
    <ClCompile Include="Ast.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJob.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="ModuleSemanticJob.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="SymTable.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="pch.cpp" />
    <ClCompile Include="TypeManager.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="TypeManagerCast_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="SourceFile.cpp">
      <Filter>Main</Filter>
    </ClCompile>
    <ClCompile Include="Concat.cpp">
      <Filter>Backend</Filter>
    </ClCompile>
    <ClCompile Include="ModuleOutputJob.cpp">
      <Filter>Backend</Filter>
    </ClCompile>
    <ClCompile Include="BackendC.cpp">
      <Filter>Backend\C</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeRun.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="ByteCode.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="CommandLineParser.cpp">
      <Filter>Main</Filter>
    </ClCompile>
    <ClCompile Include="Module.cpp">
      <Filter>Main</Filter>
    </ClCompile>
    <ClCompile Include="TypeInfo.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="Scope.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeGenJob.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="TokenizerIdentifier_.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobDeclaration_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobType_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobUnaryExpression_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobVar_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobIdentifier_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobFunc_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobEnum_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobCompiler_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobBinaryExpression_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobAttribute_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="SyntaxJobIdentifier_.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="SyntaxJobFunction_.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="SyntaxJobExpression_.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="SyntaxJobEnum_.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="SyntaxJobDeclaration_.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="SyntaxJobCompiler_.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="SyntaxJobAttribute_.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="SyntaxJobType_.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="SyntaxJobVar_.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeGenJobIdentifier_.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeGenJobFunc_.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeRunContext.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeGenJobUnaryOp_.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeGenJobBinaryOp_.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobExpression_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeGenJobExpression_.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeGenJobCast_.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="AstNode.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="CommandLine.cpp">
      <Filter>Main</Filter>
    </ClCompile>
    <ClCompile Include="Stats.cpp">
      <Filter>Main</Filter>
    </ClCompile>
    <ClCompile Include="SyntaxJobBlock_.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobBlock_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeGenJobBlock_.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobAffectExpression_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeGenJobAffectOp_.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeGenJobVar_.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="BackendCCompilerVS.cpp">
      <Filter>Backend\C</Filter>
    </ClCompile>
    <ClCompile Include="BackendCData_.cpp">
      <Filter>Backend\C</Filter>
    </ClCompile>
    <ClCompile Include="BackendCFunc_.cpp">
      <Filter>Backend\C</Filter>
    </ClCompile>
    <ClCompile Include="BackendCMain_.cpp">
      <Filter>Backend\C</Filter>
    </ClCompile>
    <ClCompile Include="BackendCRuntime_.cpp">
      <Filter>Backend\C</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeModuleManager.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="ModuleCompileJob.cpp">
      <Filter>Backend</Filter>
    </ClCompile>
    <ClCompile Include="OutputFile.cpp">
      <Filter>Backend</Filter>
    </ClCompile>
    <ClCompile Include="SyntaxJobStruct_.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobStruct_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeGenJobStruct_.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeGenJobRef_.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobRef_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="Generic.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobCompareExpression_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobOp_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="TypeInfoMatch_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="TypeInfoSpecific_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="TypeTable.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeGenJobProperty_.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="SemanticJobProperty_.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="SwagScope.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="DataSegment.cpp">
      <Filter>Main</Filter>
    </ClCompile>
    <ClCompile Include="TypeList.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeGenJobCompareOp_.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="Assert.cpp">
      <Filter>Main</Filter>
    </ClCompile>
    <ClCompile Include="RaceCondition.cpp">
      <Filter>Threading</Filter>
    </ClCompile>
    <ClCompile Include="Attribute.cpp">
      <Filter>Semantic</Filter>
    </ClCompile>
    <ClCompile Include="Context.cpp">
      <Filter>Threading</Filter>
    </ClCompile>
    <ClCompile Include="ByteCodeRunFFI_.cpp">
      <Filter>Backend\ByteCode</Filter>
    </ClCompile>
    <ClCompile Include="OsWin32.cpp">
      <Filter>Main</Filter>
    </ClCompile>
    <ClCompile Include="Backend.cpp">
      <Filter>Backend</Filter>
    </ClCompile>
    <ClCompile Include="AstOutput.cpp">
      <Filter>Lexer</Filter>
    </ClCompile>
    <ClCompile Include="CopyFileJob.cpp" />
    <ClCompile Include="ModuleTestJob.cpp">
      <Filter>Backend</Filter>
    </ClCompile>
    <ClCompile Include="EnumerateModuleJob.cpp">
      <Filter>Main</Filter>
    </ClCompile>
    <ClCompile Include="ModuleBuildJob.cpp">
      <Filter>Main</Filter>
    </ClCompile>
    <ClCompile Include="ModuleOutputExportJob.cpp">
      <Filter>Backend</Filter>
    </ClCompile>
    <ClCompile Include="IoThread.cpp">
      <Filter>Threading</Filter>
    </ClCompile>
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="JobThread.h">
      <Filter>Threading</Filter>
    </ClInclude>
    <ClInclude Include="ThreadManager.h">
      <Filter>Threading</Filter>
    </ClInclude>
    <ClInclude Include="ffi.h">
      <Filter>FFI</Filter>
    </ClInclude>
    <ClInclude Include="ffi_common.h">
      <Filter>FFI</Filter>
    </ClInclude>
    <ClInclude Include="fficonfig.h">
      <Filter>FFI</Filter>
    </ClInclude>
    <ClInclude Include="ffitarget.h">
      <Filter>FFI</Filter>
    </ClInclude>
    <ClInclude Include="Global.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="Tokenizer.h">
      <Filter>Lexer</Filter>
    </ClInclude>
    <ClInclude Include="CommandLine.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="Log.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="Stats.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="LanguageSpec.h">
      <Filter>Lexer</Filter>
    </ClInclude>
    <ClInclude Include="Pool.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="Job.h">
      <Filter>Threading</Filter>
    </ClInclude>
    <ClInclude Include="Diagnostic.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="Register.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="SyntaxJob.h">
      <Filter>Lexer</Filter>
    </ClInclude>
    <ClInclude Include="Utf8.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="Workspace.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="Ast.h">
      <Filter>Lexer</Filter>
    </ClInclude>
    <ClInclude Include="AstNode.h">
      <Filter>Lexer</Filter>
    </ClInclude>
    <ClInclude Include="SemanticJob.h">
      <Filter>Semantic</Filter>
    </ClInclude>
    <ClInclude Include="ModuleSemanticJob.h">
      <Filter>Semantic</Filter>
    </ClInclude>
    <ClInclude Include="SymTable.h">
      <Filter>Semantic</Filter>
    </ClInclude>
    <ClInclude Include="pch.h" />
    <ClInclude Include="TypeInfo.h">
      <Filter>Semantic</Filter>
    </ClInclude>
    <ClInclude Include="Utf8Crc.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="TypeManager.h">
      <Filter>Semantic</Filter>
    </ClInclude>
    <ClInclude Include="SourceFile.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="Scope.h">
      <Filter>Semantic</Filter>
    </ClInclude>
    <ClInclude Include="Concat.h">
      <Filter>Backend</Filter>
    </ClInclude>
    <ClInclude Include="ConcatBucket.h">
      <Filter>Backend</Filter>
    </ClInclude>
    <ClInclude Include="ModuleOutputJob.h">
      <Filter>Backend</Filter>
    </ClInclude>
    <ClInclude Include="BackendC.h">
      <Filter>Backend\C</Filter>
    </ClInclude>
    <ClInclude Include="ByteCodeRun.h">
      <Filter>Backend\ByteCode</Filter>
    </ClInclude>
    <ClInclude Include="ByteCode.h">
      <Filter>Backend\ByteCode</Filter>
    </ClInclude>
    <ClInclude Include="ByteCodeRunContext.h">
      <Filter>Backend\ByteCode</Filter>
    </ClInclude>
    <ClInclude Include="CommandLineParser.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="Module.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="SourceLocation.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="ByteCodeGenJob.h">
      <Filter>Backend\ByteCode</Filter>
    </ClInclude>
    <ClInclude Include="ByteCodeOp.h">
      <Filter>Backend\ByteCode</Filter>
    </ClInclude>
    <ClInclude Include="ByteCodeOpList.h">
      <Filter>Backend\ByteCode</Filter>
    </ClInclude>
    <ClInclude Include="BackendCCompiler.h">
      <Filter>Backend\C</Filter>
    </ClInclude>
    <ClInclude Include="BackendCCompilerVS.h">
      <Filter>Backend\C</Filter>
    </ClInclude>
    <ClInclude Include="BuildPass.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="Version.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="Attribute.h">
      <Filter>Semantic</Filter>
    </ClInclude>
    <ClInclude Include="ByteCodeModuleManager.h">
      <Filter>Backend\ByteCode</Filter>
    </ClInclude>
    <ClInclude Include="ModuleCompileJob.h">
      <Filter>Backend</Filter>
    </ClInclude>
    <ClInclude Include="Backend.h">
      <Filter>Backend</Filter>
    </ClInclude>
    <ClInclude Include="AstFlags.h">
      <Filter>Lexer</Filter>
    </ClInclude>
    <ClInclude Include="RegisterList.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="OutputFile.h">
      <Filter>Backend</Filter>
    </ClInclude>
    <ClInclude Include="Generic.h">
      <Filter>Semantic</Filter>
    </ClInclude>
    <ClInclude Include="TypeTable.h">
      <Filter>Semantic</Filter>
    </ClInclude>
    <ClInclude Include="SwagScope.h">
      <Filter>Semantic</Filter>
    </ClInclude>
    <ClInclude Include="DataSegment.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="TypeList.h">
      <Filter>Semantic</Filter>
    </ClInclude>
    <ClInclude Include="Assert.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="RaceCondition.h">
      <Filter>Threading</Filter>
    </ClInclude>
    <ClInclude Include="Context.h">
      <Filter>Threading</Filter>
    </ClInclude>
    <ClInclude Include="DependentJobs.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="BuildParameters.h">
      <Filter>Backend</Filter>
    </ClInclude>
    <ClInclude Include="Os.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="Scoped.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="CompilerTarget.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="OsWin32.h" />
    <ClInclude Include="CopyFileJob.h" />
    <ClInclude Include="ModuleTestJob.h">
      <Filter>Backend</Filter>
    </ClInclude>
    <ClInclude Include="EnumerateModuleJob.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="ModuleBuildJob.h">
      <Filter>Main</Filter>
    </ClInclude>
    <ClInclude Include="ModuleOutputExportJob.h">
      <Filter>Backend</Filter>
    </ClInclude>
    <ClInclude Include="IoThread.h">
      <Filter>Threading</Filter>
    </ClInclude>
  </ItemGroup>
  <ItemGroup>
    <Filter Include="Threading">
      <UniqueIdentifier>{e8e10c82-0958-4dec-b1a7-7925f336a87c}</UniqueIdentifier>
    </Filter>
    <Filter Include="Main">
      <UniqueIdentifier>{ec1ce4ee-f636-49c8-b14c-ba31cc1e1e91}</UniqueIdentifier>
    </Filter>
    <Filter Include="FFI">
      <UniqueIdentifier>{4e25712b-01db-43ce-b213-34d28464abfd}</UniqueIdentifier>
    </Filter>
    <Filter Include="Lexer">
      <UniqueIdentifier>{2ec0b045-bdd6-4a7a-a120-2c91b7025073}</UniqueIdentifier>
    </Filter>
    <Filter Include="Semantic">
      <UniqueIdentifier>{5f62a50f-54d2-4ca7-be2f-7fba0994f861}</UniqueIdentifier>
    </Filter>
    <Filter Include="Backend">
      <UniqueIdentifier>{7fe556f7-f7f6-4fd4-b6f3-8b9e91dc51de}</UniqueIdentifier>
    </Filter>
    <Filter Include="Backend\C">
      <UniqueIdentifier>{0129fe1f-951c-4d5a-bb02-ba779f5a07db}</UniqueIdentifier>
    </Filter>
    <Filter Include="Backend\ByteCode">
      <UniqueIdentifier>{5facb5bb-a2a0-45dd-aa6c-20852346b20a}</UniqueIdentifier>
    </Filter>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="win64.S">
      <Filter>FFI</Filter>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <None Include=".clang-format" />
    <None Include="CopyFileJob.cpp">
      <Filter>Main</Filter>
    </None>
    <None Include="CopyFileJob.h">
      <Filter>Main</Filter>
    </None>
  </ItemGroup>
</Project>