swag version 0.0.4
usage: swag <command> [arguments]

command
-------
version      print swag version
env          creates an environment variable 'SWAG_FOLDER' with the folder location of the compiler
build        build the specified workspace
run          build and run the specified workspace
test         build and test the specified workspace
clean        clean the specified workspace of cache files, binaries and dependencies (fresh start)
new          creates a new workspace
watch        spy workspace and check it at each file change (never ends)
get          synchronize dependencies
list         list all modules and their dependencies

argument            short  value                    default     command                 help
--------            -----  -----                    -------     -------                 ----
--abi                      msvc                     msvc        bu ru te cl             set the target abi
--arch                     x86_64                   x86_64      bu ru te cl             set the target architecture
--backend                  llvm|x64                 x64         bu ru te                the type of backend to use
--cache             -t     <string>                             bu ru te                specify the cache folder (system specific if empty)
--cfg                      <string>                 fast-debug  bu ru te cl             set the build configuration (debug|fast-debug|release are predefined)
--cfg-debug                true|false|default       default     bu ru te cl             force the build configuration to (not) have debug informations
--cfg-inline-bc            true|false|default       default     bu ru te cl             inline marked functions
--cfg-optim-bc             true|false|default       default     bu ru te cl             optimize the generated bytecode
--cfg-optim-size           true|false|default       default     bu ru te cl             force the build configuration to (not) be optimized for size
--cfg-optim-speed          true|false|default       default     bu ru te cl             force the build configuration to (not) be optimized for speed
--cfg-safety               true|false|default       default     bu ru te cl             force the build configuration to (not) have safety guards
--cfg-stack-trace          true|false|default       default     bu ru te cl             force the build configuration to (not) have call trace for errors
--clean-dep                true|false               false       cl                      removes the content of the dependency folder
--clean-log                true|false               false       cl                      display what will be removed, without actually cleaning
--dbgcatch                 true|false               false       bu ru te                open bytecode debugger in case of compile time errors
--devmode                  true|false               false       bu ru te li ge          swag compiler developer mode, add some assertions
--error-out-note           true|false               true        bu ru te                display notes when an error is raised
--error-out-source         true|false               true        bu ru te                display source code when an error is raised
--file-filter              <string>                             bu ru te 
--max-recurse              <integer>                16384       bu ru te                maximum recursion level in bytecode (0 for no limit)
--module            -m     <string>                             bu ru te                the module to work with (all modules if not specified)
--num-cores                <integer>                0           bu ru te                max number of cpu to use (0 = automatic)
--os                       windows                  windows     bu ru te cl             set the target operating system
--output            -o     true|false               true        bu ru te                output backend
--output-legit      -ol    true|false               true        bu ru te                output legit backend
--output-test       -ot    true|false               true        bu ru te                output test backend
--randomize                true|false               false       bu ru te                swag compiler developer mode, randomize behavior
--rebuild                  true|false               false       bu ru te                full rebuild
--script                   true|false               false       bu ru te                run full bytecode
--seed                     <integer>                0           bu ru te                swag compiler developer mode, set seed for randomize behavior
--silent            -s     true|false               false       bu ru te cl wa ne li ge do not log messages
--stack-size               <integer>                1048576     bu ru te                set the stack size for bytecode and backend
--stats                    true|false               false       bu ru te cl wa ne li ge display build statistics at the end
--tag                      <string>                             bu ru te                add a build tag, with an optional associated type and value
--test-bytecode     -tb    true|false               true        te                      run #test functions as bytecode
--test-filter              <string>                             te 
--test-native       -tn    true|false               true        te                      run #test functions as native
--user-args                <string>                             bu ru te                pass some specific arguments to the user code
--vendor                   pc                       pc          bu ru te cl             set the target vendoor
--verbose-cmdline          true|false               false       bu ru te cl wa ne li ge log swag command line
--verbose-ctypes           true|false               false       bu ru te                log generated concrete types
--verbose-link             true|false               false       bu ru te                log linker command line
--verbose-pass             true|false               false       bu ru te                log compile passes
--verbose-path             true|false               false       bu ru te                log global paths
--verbose-testerrors       true|false               false       te                      log errors during test
--workspace         -w     <string>                             bu ru te ne wa cl li ge the path to the workspace to work with

examples
--------
swag build --workspace:c:/myWorkspace --rebuild
swag run -w:c:/myWorkspace -m:myModuleToRun
swag test -w:c:/myWorkspace --output:false
swag new -w:newWorkspace
