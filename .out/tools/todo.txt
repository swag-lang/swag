****************************************
LANGUAGE
****************************************
-------------------------------------
#premain ?
-------------------------------------
var lazy evaluation ?
-------------------------------------
callable
https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md
impl AA
{
	func opCall(...)
	{
	}
}
var x: AA
x(10) => x.opCall(10)
-------------------------------------
loop increment ? loop reverse ?
-------------------------------------
is ?
if a is < 2 and > 3
if a is s32
if a is "toto"
if a is in 2..6
-------------------------------------
not au lieu de ! ?
-------------------------------------
x 'in' 0..16
-------------------------------------
`return au lieu de swag.noreturn ?
-------------------------------------
code en tant que vrai type ?
x := #code a := 6
#mixin x
var v: Array'code
v.add(#code a := 5)
v.add(#code @print(a))
#mixin v[0]
#mixin v[1]
-------------------------------------
"toto"'raw instead of @"toto"@ ?




****************************************
TODO
****************************************
-------------------------------------
sub func avec param x := Enum.Val (sub func pas exporté comme func, faut faire qqchose !)
oui mais quoi ? les sous trucs sont pas forcément passés par la sémantique (par example si macro)
-------------------------------------
range dynamic order
-------------------------------------
script, si #main resoud pas, erreur bizarre
-------------------------------------
debugger : print
-------------------------------------

BIG BIG BIG BIG BIG CHIANT CHIANT CHIANT CHIANT CHIANT
llvm/x64 compatibilité
si llvm appel une lambda local x64 ou l'inverse, abi non compatible => marche si on passe la lambda en #[swag.callback]
que faire ?

Update: Lorgner do côté des callbacks. Maintenant ca marche "en temps normal" car les allocators sont en callback par defaut.
Ajouter des checks ? Ajouter [Swag.Callback] dans la definition d'une interface pour forcer la method a etre en callback ?
Mais quid des lambas passés en paramètres ?

-------------------------------------
slice/cstrings and foreign
-------------------------------------
cast interface vers struct (avec safety)
-------------------------------------
x64/llvm debug
- mettre les constants, les enums (void CodeViewDebug::emitStaticConstMemberList())
-------------------------------------
llvm debug, pas à jour
- variables local en #[Swag.global]
-------------------------------------


****************************************
OPTIMS
****************************************
-------------------------------------
x64 binaryop div, transformer en shift si log2
-------------------------------------
BinOpModuloS32/div immediate mode
-------------------------------------
x64 emit_BinOpInt32/64 etc.. faire un mode immediat pour le côté droit 'and cl, 5'
-------------------------------------
Mul64byVB64 a deux registres ! (binOpPlus/Minus inc pointer)
-------------------------------------
passer/retourner des structs par value si <= 64 bits
-------------------------------------
detecter les exit (ret) de fonctions dupliquées et faire des jumps (reduction code size)
-------------------------------------
x64: et si les premiers registres étaient des vrais registres x64 volatiles plutot que des accès indirects à la mémoire ?
rc[0] = r12 etc... chiant
-------------------------------------
