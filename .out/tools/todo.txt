****************************************
LANGUAGE
****************************************
-------------------------------------
#premain ?
-------------------------------------
ca serait cool que les methods, en reflections, aient une value qui peut etre castee en lambda, et donc appelées
-------------------------------------
char => rune ?
-------------------------------------
global opVisit in namespace, comment on les reference sans faire un using ?
-------------------------------------
macro & alias comme visit ? macro i, x: funcmacro() ?
-------------------------------------
var tsl storage ?
-------------------------------------
var lazy evaluation ?
-------------------------------------


****************************************
TODO
****************************************
-------------------------------------
debugger : print/list gdb
-------------------------------------
generic & type literla (4'T, T non reconnu)
-------------------------------------
BIG BIG BIG BIG BIG CHIANT CHIANT CHIANT CHIANT CHIANT
llvm/x64 compatibilité
si llvm appel une lambda local x64 ou l'inverse, abi non compatible => marche si on passe la lambda en #[swag.callback]
que faire ?
-------------------------------------
slice/cstrings and foreign
-------------------------------------
y'a forcement des merdes avec les typeinfo compiler dans leur propre segment
(si on les compare avec un type non compiler, si on les met dans une var any...)
-------------------------------------
attributes flags qui sont a la fois on et off => error
-------------------------------------
x := -128's8
-------------------------------------
cast any avec struct, ca fait quoi (et avec les using ?)
-------------------------------------
cast interface vers struct (avec safety)
-------------------------------------


****************************************
OPTIMS
****************************************
-------------------------------------
Mul64byVB64 a deux registres ! (binOpPlus/Minus inc pointer)
-------------------------------------
makestackpointer suivi de copyrctort, faire un copy address stack to rt
-------------------------------------
getfromstackparam8/16/32 pour eviter le cast d'après
-------------------------------------
x64 passe reduction instructions
-------------------------------------
passer/retourner des structs par value si <= 64 bits
-------------------------------------
detecter les exit (ret) de fonctions dupliquées et faire des jumps (reduction code size)
-------------------------------------
BinOpModuloS32/div immediate mode
-------------------------------------
x64: et si les premiers registres étaient des vrais registres x64 volatiles plutot que des accès indirects à la mémoire ?
rc[0] = r12 etc... chiant
-------------------------------------
