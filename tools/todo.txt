****************************************
LANGUAGE IDEAS ???
****************************************

-------------------------------------
var lazy evaluation
-------------------------------------
callable
https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md
impl AA
{
	func opCall(...)
	{
	}
}
var x: AA
x(10) => x.opCall(10)
-------------------------------------
loop #step
-------------------------------------
is
if a is < 2 and > 3
if a is s32
if a is "toto"
if a is in 2..6
-------------------------------------
not au lieu de !
-------------------------------------
code en tant que vrai type
x := #code a := 6
#mixin x
var v: Array'code
v.add(#code a := 5)
v.add(#code @print(a))
#mixin v[0]
#mixin v[1]
-------------------------------------
a = if b then c else d
a = if b then c elif d then f else h
-------------------------------------
type const any ? @dataof() sur ça donne un pointeur const
-------------------------------------
const A: [4] s32 = [1: 10, 3: 45]
-------------------------------------
tuple unpacking array (should work with Core.Array)
let (a, b) = [4, 5]
let (a, b) = Tokenize.split(str, ' ')
-------------------------------------
5363
affect slice content a[0..2] = [1, 2, 3]
-------------------------------------
case 0, 2, 4: 
case 0 or 2 or 4:
-------------------------------------




****************************************
PENIBLE
****************************************

-------------------------------------
PB du cross compile avec le full compile time exec. BIG BIG BIG !!!
-------------------------------------
Erreur affichées dans les fichiers d'export plutot que dans le code source d'origine
-------------------------------------




****************************************
TODO
****************************************

-------------------------------------
warning ?
    var a = 1
    a = 2
-------------------------------------
fast math ? (faire les tests de float en u32/U64 comme avant la prise en charge de nan)
-------------------------------------
DebugAllocator
safety, sanitize access to stack/memory
safety, exit stackframe (return local value)
-------------------------------------
on doit exporter les implementation d'interface pour un truc public ?
-------------------------------------
context & tempallocator, y'a vraiment aucun usage dans std, c'est pas normal, faut se pencher sur l'utilisation de ce truc
-------------------------------------
cast interface vers struct (avec safety) au lieu de struct := cast(*Toto) @dataof(Interface)
-------------------------------------
llvm debug, pas à jour
- debug lambda capture parameters not visible
- variables local en #[Swag.global]
- mettre les constants
-------------------------------------



****************************************
DOC
****************************************

- multi levels list
- ** text _italic_ **
- __bold__
- _italic_
- doc help, explain the genDoc struct field by field
- doc help, embbed html with ---



****************************************
CORE
****************************************

-------------------------------------
UUID à continuer (parse etc...)
https://github.com/crashoz/uuid_v4/blob/master/uuid_v4.h
-------------------------------------





****************************************
OPTIMS
****************************************

-------------------------------------
00000017  AffectOpPlusEqS32_Safe  A(1) B{0x1}       .E. .B.....  [r1] += 1
         defer(err) G1 += 1
         compiler2738.swg:21
00000018  AffectOpPlusEqS32_Safe  A(1) B{0x1}       .E. .B.....  [r1] += 1
         defer(err) G1 += 1
         compiler2738.swg:19
00000019  AffectOpPlusEqS32_Safe  A(1) B{0x1}       .E. .B.....  [r1] += 1
-------------------------------------
inline auto ?
si une fonction est appelée une seule fois ?
-------------------------------------
pass orEq/andEq/xOrEq/shiftEq en mode Stack StackStack. Dans les faits, plein d'autres instructions pourraient avoir ce mode.
-------------------------------------
x64: et si les premiers registres étaient des vrais registres x64 volatiles plutot que des accès indirects à la mémoire ?
rc[0] = r12 etc... chiant
-------------------------------------