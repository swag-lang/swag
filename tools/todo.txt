****************************************
LANGUAGE IDEAS ???
****************************************

-------------------------------------
var lazy evaluation
-------------------------------------
callable
https://github.com/apple/swift-evolution/blob/master/proposals/0216-dynamic-callable.md
impl AA
{
	func opCall(...)
	{
	}
}
var x: AA
x(10) => x.opCall(10)
-------------------------------------
loop #step
-------------------------------------
is
if a is < 2 and > 3
if a is s32
if a is "toto"
if a is in 2..6
-------------------------------------
not au lieu de !
-------------------------------------
code en tant que vrai type
x := #code a := 6
#mixin x
var v: Array'code
v.add(#code a := 5)
v.add(#code @print(a))
#mixin v[0]
#mixin v[1]
-------------------------------------
if a == 1 do toto() else do titi()
#if a == 1 do...
-------------------------------------
a = if b then c else d
a = if b then c elif d then f else h
-------------------------------------
type const any ? @dataof() sur ça donne un pointeur const
-------------------------------------




****************************************
PENIBLE
****************************************

-------------------------------------
PB du cross compile avec le full compile time exec. BIG BIG BIG !!!
-------------------------------------
Erreur affichées dans les fichiers d'export plutot que dans le code source d'origine
-------------------------------------




****************************************
TODO
****************************************

-------------------------------------
warning ?
    var a = 1
    a = 2
-------------------------------------
fast math ? (faire les tests de float en u32/U64 comme avant la prise en charge de nan)
-------------------------------------
debugger, ajouter la logique des expressions $num qu'on peut récupérer dans le prompt ensuite
-------------------------------------
DebugAllocator
safety, sanitize access to stack/memory
safety, exit stackframe (return local value)
-------------------------------------
on doit exporter les implementation d'interface pour un truc public ?
-------------------------------------
context & tempallocator, y'a vraiment aucun usage dans std, c'est pas normal, faut se pencher sur l'utilisation de ce truc
-------------------------------------
cast interface vers struct (avec safety) au lieu de struct := cast(*Toto) @dataof(Interface)
-------------------------------------
llvm debug, pas à jour
- debug lambda capture parameters not visible
- variables local en #[Swag.global]
- mettre les constants
-------------------------------------



****************************************
DOC
****************************************

- multi levels list
- ** text _italic_ **
- __bold__
- _italic_
- doc help, explain the genDoc struct field by field
- doc help, embbed html with ---



****************************************
CORE
****************************************

-------------------------------------
TagBin, en cas d'erreur plein de trucs à faire (donner plus d'infos...)
-------------------------------------
UUID à continuer (parse etc...)
https://github.com/crashoz/uuid_v4/blob/master/uuid_v4.h
-------------------------------------





****************************************
OPTIMS
****************************************

-------------------------------------
merge, car c'est tjs constantsegpointer non ?
00000006  MakeConstantSegPointer  A[3] B{0x7018}       .EI .......  r3 = .rdata + 28696
00000007      InternalStackTrace  A(3)                 .EI .......  Internal StackTrace(r3)
-------------------------------------
intégrer push/pop dans seterr
00000008                  PushRR                      .EI ....S..  push my_result
00000009          InternalSetErr  A(3) B(4)           .EI .......  Internal SetErr(r3, r4)
00000010                   PopRR                      .EI .......  pop my_result
-------------------------------------
plusieurs sans call, redondant
00000001  InternalInitStackTrace  A(0)                 ... .......  Internal InitStackTrace(r0)
00000002                   SetBP                       ... .......  stacksize 0
         discard catch toto()
         compiler3743.swg:9
00000003  InternalInitStackTrace  A(0)                 .E. .......  Internal InitStackTrace(r0)
-------------------------------------
error, hot path should be JumpIfError and not JumpIfNoError, with all error code at the end for exemple
-------------------------------------
inline auto ?
-------------------------------------
pass orEq/andEq/xOrEq/shiftEq en mode Stack StackStack. Dans les faits, plein d'autres instructions pourraient avoir ce mode.
-------------------------------------
x64: et si les premiers registres étaient des vrais registres x64 volatiles plutot que des accès indirects à la mémoire ?
rc[0] = r12 etc... chiant
-------------------------------------
