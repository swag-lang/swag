using Core

#dependencies
{
    #import "core" location="swag@std"
}

func filter(file: File.FileInfo)->bool
{
    if Utf8.contains(file.fullname, "/vendor/")
        return false
    if Utf8.contains(file.fullname, "/output/")
        return false
    if Utf8.contains(file.fullname, "/dependencies/")
        return false
    if Utf8.contains(file.fullname, "/public/")
        return false
    if Utf8.contains(file.fullname, "/datas/")
        return true
    if Utf8.contains(file.fullname, "/paint/theme/")
        return true
    if Utf8.contains(file.fullname, "/shaders/")
        return true

    ext := Path.getExtensionLowerCase(file.fullname)
    switch ext
    {
    case ".exe":
        return Utf8.contains(file.fullname, "swag.exe")
    case ".dll", ".lib", ".swg", ".glsl", ".swgs":
        return true
    }

    return false
}

#run
{
    dataPath := Path.getDirectoryName(Path.getDirectoryName(#location.fileName))
    binPath  := Path.combine(dataPath, "bin")

    // Enumerate list of files to release
    var options: Directory.EnumerationOptions
    options.matchPattern    = "*"
    options.wantDirectories = false
    options.recurse         = true
    options.filterLambda    = &filter
    allFiles := try Directory.enumerate(binPath, options)

    // Generate list of files
    var allLines: Array'string
    visit f: allFiles
        allLines.add(cast(string) f.fullname)
    catch File.delete("list.txt")
    try File.writeAllLines("list.txt", allLines)
    defer catch File.delete("list.txt")

    // Zip them
    name := Format.toString("swag-windows-x86-64-v%.%.%.zip", #swagversion, #swagrevision, #swagbuildnum)
    cmd  := Format.toString("a % -spf2 @list.txt", name)
    try Env.doSyncProcess("7z.exe", cmd)
}
