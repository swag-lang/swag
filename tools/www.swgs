#dependencies
{
    #import "gui" location="swag@std"
}

using Core, Gui

enum State
{
    Paragraph
    Code
    Test
    Blockquote
    List
}

var g_Buf:  String  // Will contain the html page
var g_Toc:  String  // Will contain the left part, i.e. the table of content
var g_Code: String

var g_State:            Array'State
var g_CptBrace:         s32
var g_SubTitle:         bool
var g_BaseTitle:        s32

func stateEnter(st: State)
{
    switch st
    {
    case Paragraph:
        g_Buf += "<p>\n"
    case List:
        g_Buf += "<ul>\n"
    case Blockquote:
        g_Buf += "<blockquote><p>\n"
    }
}

func stateLeave(st: State)
{
    switch st
    {
    case Paragraph:
        g_Buf += "</p>\n"
    case List:
        g_Buf += "</ul>\n"
    case Blockquote:
        g_Buf += "</p></blockquote>\n"
    case Code, Test:
        flushCode()
    }
}

func pushState(st: State)
{
    if g_State.count
        stateLeave(g_State.back())
    stateEnter(st)
    g_State.add(st)
}

func popState()
{
    stateLeave(g_State.back())
    g_State.removeBack()
    if g_State.count
        stateEnter(g_State.back())
}

func addTitle(lineTrim: String, level: s32)
{
    g_Buf += Format.toString("<h% id=\"%\">", level, lineTrim)
    addLine(lineTrim)
    g_Buf += Format.toString("</h%>", level)

    g_Toc += Format.toString("<li><a href=\"#%\">%</a></li>\n", lineTrim, lineTrim);
    popState()
    pushState(.Paragraph)
}

// Add one line of 'text'
func addLine(line: string)
{
    var lineTrim: String = line
    lineTrim.trim()

    // Sub title if text has the form '# text'
    if Utf8.startsWith(lineTrim, "# ")
    {
        lineTrim.remove(0, 2)
        addTitle(lineTrim, g_BaseTitle + (g_SubTitle ? 1 : 0))
        return
    }

    if Utf8.startsWith(lineTrim, "## ")
    {
        lineTrim.remove(0, 3)
        addTitle(lineTrim, g_BaseTitle + (g_SubTitle ? 2 : 1))
        return
    }

    if Utf8.startsWith(lineTrim, "### ")
    {
        lineTrim.remove(0, 4)
        addTitle(lineTrim, g_BaseTitle + (g_SubTitle ? 3 : 2))
        return
    }

    var stateBold = false
    var stateItalic = false
    var stateCode = false

    // Process character by character, in order to detect some 'markdown' stuff
    for var i = 0; i < @countof(line); i += 1
    {
        let lastChar = i == @countof(line) - 1

        if !lastChar and line[i] == "*"'u8 and line[i+1] == "*"'u8
        {
            g_Buf += stateBold ? "</b>" : "<b>"
            stateBold = !stateBold
            i += 1
            continue
        }

        // Italic with '*'
        if line[i] == "*"'u8
        {
            if !lastChar and !stateItalic and Latin1.isLetterOrDigit(line[i+1])
            {
                stateItalic = true
                g_Buf += "<i>"
                continue
            }

            if stateItalic
            {
                g_Buf += "</i>"
                stateItalic = false
                continue
            }
        }

        // Inlined code with '`'
        if line[i] == "`"'u8
        {
            if !stateCode
            {
                stateCode = true
                g_Buf += "<code>"
                continue
            }

            if stateCode
            {
                g_Buf += "</code>"
                stateCode = false
                continue
            }
        }

        // Reference
        if !lastChar and line[i] == "["'u8
        {
            var linkName: String
            i += 1
            while i < @countof(line) and line[i] != "]"'u8
            {
                linkName += line[i]
                i += 1
            }

            if i < @countof(line)
                i += 1

            if i >= @countof(line) or line[i] != "("'u8
            {
                g_Buf += "["
                g_Buf += linkName
                g_Buf += "]"
                i -= 1
                continue
            }

            i += 1
            var linkValue: String
            while line[i] and line[i] != ")"'u8
            {
                linkValue += line[i]
                i += 1
            }

            g_Buf += Format.toString("<a href=\"%\">%</a>", linkValue, linkName)
            continue
        }

        g_Buf += line[i]
    }

    g_Buf += " "
}

func flushCode()
{
    // Remove empty lines before and after the code block
    while g_Code.length and g_Code[0] == "\n"'u8
        g_Code.remove(0, 1)
    while g_Code.length and g_Code.back() == "\n"'u8
        g_Code.removeBack()
    if g_Code.length == 0
        return

    g_Buf += "<pre>"
    g_Buf += "<code>"

    var g_Edit:      RichEditCtrl
    var g_LexerSwag: RichEditLexerSwag

    g_Edit.setLexer(cast(IRichEditLexer) g_LexerSwag)
    g_Edit.setText(g_Code)
    g_Edit.lexAll()

    var res = g_Edit.getTextAndStyles()

    g_Edit.styles[0].colFg = Pixel.Argb.Black
    var lastStyle = -1
    loop i: res.text
    {
        if res.styles[i] != lastStyle
        {
            if lastStyle != -1
                g_Buf += "</span>"
            lastStyle = res.styles[i]

            var color = g_Edit.styles[lastStyle].colFg
            var hsl = color.toHsl()
            hsl.l = Math.clamp(hsl.l, 0, 0.5)
            color = Pixel.Color.fromHsl(hsl.h, hsl.s, hsl.l)

            g_Buf += Format.toString("<span style=\"color:#%{X}\">", color.argb & 0xFFFFFF)
        }

        g_Buf += res.text[i]
    }

    g_Buf += "</span>"
    g_Buf += "</code>"
    g_Buf += "</pre>"

    g_Code.clear()
}

// Add one line of code
func addLineCode(l: string)
{
    g_Code += l
    g_Code += "\n"
}

func processFile(fileName: string)
{
    var lines = assume File.readAllLines(fileName)
    for var i = 0; i < @countof(lines); i += 1
    {
        var l = lines[i]
        var lineTrim = lines[i]
        lineTrim.trim()

        var curState = g_State.back()

        // Some state changes
        if Utf8.startsWith(lineTrim, "/**")
        {
            pushState(.Paragraph)
            continue
        }

        if curState == .Paragraph and Utf8.startsWith(lineTrim, ">")
        {
            pushState(.Blockquote)
            curState = g_State.back()
        }

        if curState == .Blockquote and !Utf8.startsWith(lineTrim, ">")
        {
            popState()
            curState = g_State.back()
        }

        switch curState
        {
        //////////////////////////////////
        case Blockquote:
            lineTrim.remove(0, 1)
            lineTrim.trim()
            if lineTrim.isEmpty()
                g_Buf += "</br>\n"
            addLine(lineTrim)

        //////////////////////////////////
        case Paragraph:
            if lineTrim.isEmpty()
            {
                popState()
                pushState(.Paragraph)
            }
            elif Utf8.startsWith(lineTrim, "```")
                pushState(.Code)
            elif Utf8.startsWith(lineTrim, "* ")
            {
                pushState(.List)
                i -= 1
            }
            elif Utf8.startsWith(lineTrim, "*/")
                popState()
            else
                addLine(lineTrim)

        //////////////////////////////////
        case List:
            if !Utf8.startsWith(lineTrim, "* ")
            {
                popState()
                i -= 1
                continue
            }

            lineTrim.remove(0, 2)
            g_Buf += "<li>"
            addLine(lineTrim)
            g_Buf += "</li>\n"

        //////////////////////////////////
        case Test:
            if lineTrim == "{"
            {
                g_CptBrace += 1
                if g_CptBrace == 1
                    continue
            }
            elif lineTrim == "}"
            {
                g_CptBrace -= 1
                if g_CptBrace == 0
                {
                    popState()
                    continue
                }
            }

            var nextLine: String
            if @index != lines.count - 1
            {
                nextLine = lines[@index+1]
                nextLine.trim()
            }

            if g_CptBrace == 1 and Utf8.startsWith(lineTrim, "//") and nextLine == "{"
            {
                lineTrim.remove(0, 2)
                popState()
                pushState(.Paragraph)
                addLine("\n")
                addLine(lineTrim)
                popState()
                pushState(.Test)
                continue
            }

            var lineLine = l
            if Utf8.startsWith(lineLine, "    ")
                lineLine.remove(0, 4)
            addLineCode(lineLine)

        //////////////////////////////////
        case Code:
            if Utf8.startsWith(l, "```")
                popState()
            elif Utf8.startsWith(l, "#test")
                pushState(.Test)
            else
                addLineCode(l)
        }
    }

    // Unstack all states
    while g_State.count
        stateLeave(g_State.popBack())
}

func generateOverview(in, out: string, old: bool)
{
    g_Buf.clear()
    g_Toc.clear()
    g_Code.clear()
    g_State.clear()
    g_CptBrace = 0
    g_SubTitle = false
    g_BaseTitle = 3

    var files = assume Directory.enumerateFiles(in, ".swg", recurse = true)
    files.sort(func(a, b) => a.fullname <=> b.fullname)

    // Create styles
    if old
    {
        g_Buf += "<?php include('html_start.php'); include('header.php'); ?>\n"
        g_Buf += """
            <style>
            <?php include('css/style.php'); ?>

            .left {
                overflow-y: scroll;
            }

            .right {
                overflow-y: scroll;
                padding-left: 10px;
            }

            .left h1 {
                margin-bottom: 0px;
            }

            .left ul {
                padding-left: 20px;
            }

            .left a {
                color: black;
            }

            @media (min-width: 1024px) {
                html, body {
                    height: 100%;
                }

                pre {
                    margin: 20px;
                }
            }
            </style>
        """
    }

    // Main page (left and right parts, left is for table of content, right is for content)
    g_Buf += "<div class=\"lg:flex flex-1\">\n"
    g_Buf += "<div class=\"left h-full lg:w-[350px]\" x-data=\"{ open_content: false }\">\n"
    let seekToc = g_Buf.length // This will be the place where we will insert the 'g_Toc' table of content
    g_Buf += "</div>\n"

    // Right page start
    g_Buf += "<div class=\"right lg:w-full lg:h-full lg:pl-2\">\n"
    g_Buf += "<div class=\"page\">\n"
    g_Buf += "<h1 class=\"leading-8 mt-10 lg:my-5\">Swag language reference</h1>\n"

    // Table of content start
    g_Toc += "<div class=\"flex items-center justify-between border lg:border-0 rounded pt-1 px-2\" @click=\"open_content = ! open_content\">\n"
    g_Toc += "<h1 class=\"leading-8 m-0 lg:my-5\">Content</h1>\n"
    g_Toc += "<div class=\"leading-8 block lg:hidden\"><img src=\"imgs/chevron.png\" alt=\"\" class=\"w-5\" :class=\"open_content ? 'rotate-90' : ''\" /></div>\n"
    g_Toc += "</div>\n"
    g_Toc += "<ul class=\"mt-5\" :class=\"open_content ? '' : 'hidden lg:block'\">\n"

    visit v: files
    {
        var title: String = Path.getFileNameWithoutExtension(v.fullname)
        var fileName = title
        title = title[4..]

        // If there's an additional '_' after 'NNN_', then this is a 'sub part'.
        let wasSubTitle = g_SubTitle
        g_SubTitle = title[0] == "_"'u8
        if g_SubTitle
            title = title[1..]
        if !wasSubTitle and g_SubTitle
            g_Toc += "<ul>\n"
        else if wasSubTitle and !g_SubTitle
            g_Toc += "</ul>\n"

        // Normalize filename as a title
        title[0] = Latin1.toUpper(title[0])
        title.replace("_", " ")

        // Add title to output
        g_Buf += "\n"
        g_Buf += Format.toString("<h% id=\"%\">", g_SubTitle ? 3 : 2, fileName)
        g_Buf += title
        g_Buf += g_SubTitle ? "</h3>\n" : "</h2>\n"

        // Add title to table of content
        g_Toc += Format.toString("<li><a href=\"#%\">%</a></li>\n", fileName, title);
        g_Toc += "<ul>\n"

        stateEnter(.Code)
        g_State.add(State.Code)
        processFile(v.fullname)

        g_Toc += "</ul>\n"
    }

    g_Toc += "</ul>\n"

    // Close html page
    g_Buf += "</div>\n"
    g_Buf += "</div>\n"
    if old
    {
        g_Buf += "</div>\n"
        g_Buf += "<?php include('html_end.php'); ?>\n"
    }

    g_Buf.insert(seekToc, g_Toc)

    assume File.writeAllBytes(out, g_Buf)
}

func convertMd(in, out: string, old: bool)
{
    var files = assume Directory.enumerateFiles(in, ".md", recurse = true)
    visit v: files
    {
        g_Buf.clear()
        g_Toc.clear()
        g_Code.clear()
        g_State.clear()
        g_CptBrace = 0
        g_SubTitle = false
        g_BaseTitle = 1

        if old
        {
            g_Buf += "<?php include('html_start.php'); ?>\n"
            g_Buf += "<?php include('header.php'); ?>\n"
            g_Buf += "<style><?php include('css/style.php'); ?></style>\n"
            g_Buf += "<div class=\"lg:m-auto lg:w-[76rem] pt-2 lg:pt-10 overflow-hidden p-5\">\n"
            g_Buf += "<div class=\"container\">\n"
        }

        Console.println("reading ", v.fullname)
        stateEnter(.Paragraph)
        g_State.add(State.Paragraph)
        processFile(v.fullname)

        let title = Path.getFileNameWithoutExtension(v.fullname)
        var outName = Path.combine(out, title)
        if old
            outName += ".php"
        else
            outName += ".blade.php"

        if old
        {
            g_Buf += "</div>\n"
            g_Buf += "</div>\n"
            g_Buf += "<?php include('html_end.php'); ?>\n"
        }

        Console.println("writing ", outName)
        assume File.writeAllBytes(outName, g_Buf)
    }
}

#run
{
    generateOverview("../bin/reference/tests/language/src", "../web/language.php", true)
    //convertMd("../www/resources/md", "../web", true)

    //generateOverview("../bin/reference/tests/language/src", "../www/resources/views/pages/g/overview.blade.php", false)
    //convertMd("../www/resources/md", "../www/resources/views/pages/g")
}