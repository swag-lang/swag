%YAML 1.2
---
name: swag
file_extensions: [swg]
scope: source
prototype:
  - include: main

variables:
  ident: '[A-Za-z_][A-Za-z_0-9]*'

contexts:
  main:
###################################################### COMMENTS
    - match: (//+)\s+(MARK:) ?(.*)
      scope: comment.line
      captures:
        1: punctuation.definition.comment
        2: punctuation.definition.comment
        3: meta.toc-list
    - match: (//+).*(\n|$)
      scope: comment.line
      captures:
        1: punctuation.definition.comment
    - match: (/\*)
      scope: punctuation.definition.comment
      push: comment_block
###################################################### ATTRIBUTES
    - match: (#\[)(\w+)(.*)(\])
      scope: meta.annotation
###################################################### COMPILER
    - match: (#)\b(run|test|init|drop|main)
      scope: meta.preprocessor.function
    - match: (#)\b(skip|module|unitest|assert|print|run|file|line|config|arch|function|callfile|callerline|callerfunction|swagversion|swagrevision|swagbuildnum|import|test|init|drop|main|if|else|elif|code|mixin|macro|foreignlib)
      scope: meta.preprocessor
    - match: (#)\w+
      scope: invalid
###################################################### INTRINSICS
    - match: (@)\b(sizeof|typeof|kindof|countof|dataof|print|assert|alloc|realloc|free|memcpy|memset|memcmp|getcontext|setcontext|args|target)\b
      scope: entity.name.intrinsic
    - match: (@)(alias)([0-9]*)
      scope: entity.name.intrinsic
    - match: '@\w*'
      scope: invalid
###################################################### TYPES
    - match: \b(code|cast|acast|Self|self|any|void|char|f32|f64|s8|s16|s32|s64|u8|u16|u32|u64|bool|string)\b
      scope: entity.name.type
    - match: \b(enum|struct|impl|interface|func)\b
      scope: keyword
###################################################### ENUMS
    - match: "(?:[^\\?\\!\\)\\\"\\w]|^)(\\.[a-zA-Z]\\w*)(?=\\()"
      captures:
       1: constant.language.enum
      push: enum
    - match: "(?:[^\\?\\!\\)\\\"\\w]|^)(\\.[a-zA-Z]\\w*)"
      captures:
       1: constant.language.enum
###################################################### CONSTANTS
    - match: \btrue\b
      scope: constant.language.true
    - match: \bfalse\b
      scope: constant.language.false
    - match: \bnull\b
      scope: constant.language.nil
###################################################### NUMERICS
    - match: \b0[XB]
      scope: invalid
    - match: '0x([[:xdigit:]][[:xdigit:]_]*)((\.\g<1>)?[pP][-+]?\d[\d_]*)?'
      scope: constant.numeric.hex
    - match: 0b[01][01_]*
      scope: constant.numeric.binary
    - match: '(\d[\d_]*)(\.\g<1>)([eE][-+]?\g<1>)?'
      scope: constant.numeric.float
    - match: '(\d[\d_]*)([eE][-+]?\g<1>)'
      scope: constant.numeric.float
    - match: '(\d[\d_]*)'
      scope: constant.numeric.integer
###################################################### CONTROL
    - match: \b(if|else|for|is|while|switch|do|defer|loop|visit)\b
      scope: keyword.control
    - match: \b(break|return|case|continue|default)\b
      scope: keyword.control
    - match: \b(using|namespace)\b
      scope: keyword.control
###################################################### MODIFIERS
    - match: \b(public|internal|readonly|private)\b
      scope: storage.modifier
###################################################### VARIABLES
    - match: \b(var|let|const)\b
      scope: keyword.variable
###################################################### STRING
    - match: '#"'
      push: string_raw_1
    - match: '"'
      push: string_double
###################################################### OPERATORS
    - match: \b(opBinary|opUnary|opAssign|opIndexAssign|opCast|opCount|opVisit|opInit|opEquals|opCmp|opPostCopy|opPostMove|opDrop|opCount|opAffect|opIndex|opIndexAssign)\b
      scope: entity.name.function
    - match: \b(op\w+)\b
      scope: invalid
###################################################### FUNTION CALL
    - match: ({{ident}})\s*\(
      captures:
        1: entity.name.function
    - match: ([A-Z]\w*)
      scope: entity.name.class
###################################################### REST OF CODE
    - match: '\b\w+'
      scope: scope.source
    - match: '[-+=<>^$!~*\\|&?\/%.:`]*'
      scope: keyword.operator
######################################################
  comment_block:
    - meta_scope: comment.block
    - match: /\*
      push: comment_block
    - match: \*/
      pop: true
  string_raw_1:
    - meta_scope: string.quoted.double string.quoted.raw
    - match: \\\(
      scope: punctuation.section.embedded
      set: embedded
    - match: \\[ntr0\\"']
      scope: constant.character.escape.c
    - match: \\u{[[:xdigit:]]{1,8}}
      scope: constant.character.escape.c
    - match: \\\n
      scope: constant.character.escape.c
    - match: \\
      scope: invalid.illegal
    - match: '"#'
      pop: true
  string_double:
    - meta_scope: string.quoted.double
    - match: \\\(
      scope: punctuation.section.embedded
      set: embedded
    - match: \\[ntr0\\"']
      scope: constant.character.escape.c
    - match: \\u{[[:xdigit:]]{1,8}}
      # Unicode scalar escape
      # feels like this needs a different scope
      scope: constant.character.escape.c
    - match: \\
      scope: invalid.illegal
    - match: '"'
      pop: true
  embedded:
    - include: main
    - match: \(
      push: nested
    - match: \)
      scope: punctuation.section.embedded
      set: string_double
  nested:
    - include: main
    - match: \(
      push: nested
    - match: \)
      pop: true
  enum:
    - include: main
    - match: '\)'
      pop: true
