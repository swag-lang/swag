#global if #os == Swag.TargetOs.Windows
using Win32, Core, Pixel, Gdi32

public struct ApplicationNative
{
    fileSmallIconsImage:     Image
    fileSmallIconsImageList: ImageList
    mapFileSmallIcons:       HashTable'(string, s32)

    fileBigIconsImage:      Image
    fileBigIconsImageList:  ImageList
    mapFileBigIcons:        HashTable'(string, s32)
}

impl Application
{
    mtd pickColorAtMouse()->Color
    {
        hdc := GetDC(null)

        var pt: POINT
        GetCursorPos(&pt)
        col := GetPixel(hdc, pt.x, pt.y) | 0xFF000000

        ReleaseDC(null, hdc)
        return Color.fromAbgr(col)
    }

    // Capture mouse, on the window and surface
    mtd captureMouse(wnd: *Wnd)
    {
        mouseCaptureWnd = wnd
        SetCapture(wnd.surface.native.hWnd)
    }

    // Release captured mouse
    mtd releaseMouse()
    {
        mouseCaptureWnd = null
        ReleaseCapture()
    }

    mtd registerHotKey(mdf: Input.KeyModifiers, key: Input.Key)
    {
        var mod: u32
        if mdf & .Alt
            mod |= MOD_ALT
        if mdf & .Control
            mod |= MOD_CONTROL
        if mdf & .Shift
            mod |= MOD_SHIFT
        winkey := Input.Keyboard.keyToVirtualKey(key)

        catch Win32.RegisterHotKey(null, 0x66, mod, winkey)
        if @err
            @print(@err)
    }

    mtd sendHotKey(msg: MSG)
    {
        using Input
        var mdf: KeyModifiers
        if msg.lParam & MOD_ALT
            mdf |= .Alt
        if msg.lParam & MOD_CONTROL
            mdf |= .Control
        if msg.lParam & MOD_SHIFT
            mdf |= .Shift
        key := Keyboard.virtualKeyToKey(acast (msg.lParam >>,safe 16))

        (id, target) := getHotKeyShortcut(mdf, key)
        if id
            target.sendWndId(id)
    }

    mtd sendSystemEvents()
    {
        var msg: MSG
        while PeekMessageW(&msg, null, 0, 0, PM_REMOVE) != 0
        {
            if msg.message == WM_HOTKEY
                sendHotKey(msg)
            else
            {
                TranslateMessage(&msg)
                DispatchMessageW(&msg)
            }
        }
    }

    // Returns the surface under the given point
    mtd getSurfaceAt(x, y: f32)->*Surface
    {
        var pt: POINT
        pt.x = cast(s32) x
        pt.y = cast(s32) y
        hWnd := WindowFromPoint(pt)
        if hWnd == null
            return null

        visit s: surfaces
        {
            if s.native.hWnd == hWnd
            {
                if modalSurfaces.count and s != modalSurfaces.back()
                    return null
                return s
            }
        }

        return null
    }

    private mtd addIconToImageList(name: string, hIcon: HICON, small: bool)->Icon
    {
        var result: retval

        var index:      s32
        var curImg:     *Image
        var curImgList: *ImageList

        if small
        {
            index = cast(s32) mapFileSmallIcons.count
            mapFileSmallIcons.add(name, index)
            curImg = &fileSmallIconsImage
            curImgList = &fileSmallIconsImageList
        }
        else
        {
            index = cast(s32) mapFileBigIcons.count
            mapFileBigIcons.add(name, index)
            curImg = &fileBigIconsImage
            curImgList = &fileBigIconsImageList
        }

        sizeIcon := small ? 16 : 32

        // Convert icon to image
        img := catch Image.from(hIcon)
        defer catch DestroyIcon(hIcon)
        if @err
            return result
        img.resize(sizeIcon, sizeIcon)

        // Append to the image list
        nimage := Image.create(sizeIcon * (index + 1), sizeIcon, .BGRA8)
        if curImg.isValid()
            nimage.mix(curImg, 0, 0)
        nimage.mix(img, sizeIcon * index, 0)
        dref curImg = nimage

        if curImgList.texture.isValid()
            renderer.removeTexture(&curImgList.texture)
        curImgList.set(renderer.addImage(curImg), sizeIcon, sizeIcon)

        return Icon.from(curImgList, index)
    }

    // Get a special directory icon
    mtd getSpecialDirectoryIcon(what: Env.SpecialDirectory, small = true)->Icon
    {
        val  := what
        name := Reflection.getEnumName(Env.SpecialDirectory, &val).toString()

        if small
        {
            here := mapFileSmallIcons.find(name)
            if here
                return Icon.from(&fileSmallIconsImageList, here.value)
        }
        else
        {
            here := mapFileBigIcons.find(name)
            if here
                return Icon.from(&fileBigIconsImageList, here.value)
        }

        var sgi: SHSTOCKICONINFO
        sgi.cbSize = @sizeof(SHSTOCKICONINFO)

        whatWin := SHSTOCKICONID.SIID_FOLDER
        switch what
        {
        case Desktop:           whatWin = .SIID_DESKTOPPC
        case UserVideos:        whatWin = .SIID_VIDEOFILES
        case UserPictures:      whatWin = .SIID_IMAGEFILES
        case UserMusic:         whatWin = .SIID_AUDIOFILES
        case CommonVideos:      whatWin = .SIID_VIDEOFILES
        case CommonPictures:    whatWin = .SIID_IMAGEFILES
        case CommonMusic:       whatWin = .SIID_AUDIOFILES
        }

        catch SHGetStockIconInfo(whatWin, SHGSI_ICON | (small ? SHGSI_SMALLICON : SHGSI_LARGEICON), &sgi)
        if !sgi.hIcon
            return @{}
        return addIconToImageList(name, sgi.hIcon, small)
    }

    // Returns the OS icon associated with the given filename
    mtd getFileDirectoryIcon(name: string, isDirectory: bool, small = true)->Icon
    {
        var result: retval
        if !@countof(name)
            return result

        ext := Path.getExtension(name)

        extractFromFile := false
        if isDirectory and name[@countof(name) - 1] == Path.VolumeSeparatorChar
            ext = "c:"
        elif isDirectory
            ext = "c:/temp"
        elif ext == ".exe" or ext == ".dll"
        {
            extractFromFile = true
            ext = name
        }
        elif ext == null
            ext = ".txt"

        if small
        {
            here := mapFileSmallIcons.find(ext)
            if here
                return Icon.from(&fileSmallIconsImageList, here.value)
        }
        else
        {
            here := mapFileBigIcons.find(ext)
            if here
                return Icon.from(&fileBigIconsImageList, here.value)
        }

        var sfi: SHFILEINFOA
        if extractFromFile
        {
            catch ExtractIconExA(@dataof(ext), 0, null, &sfi.hIcon, 1)
            if !sfi.hIcon
            {
                ext = Path.getExtension(name)
                if small
                {
                    here := mapFileSmallIcons.find(ext)
                    if here
                        return Icon.from(&fileSmallIconsImageList, here.value)
                }
                else
                {
                    here := mapFileBigIcons.find(ext)
                    if here
                        return Icon.from(&fileBigIconsImageList, here.value)
                }
            }
        }

        if !sfi.hIcon
            discard SHGetFileInfoA(@dataof(ext), isDirectory ? FILE_ATTRIBUTE_DIRECTORY : FILE_ATTRIBUTE_NORMAL, &sfi, @sizeof(SHFILEINFOA), SHGFI_USEFILEATTRIBUTES | SHGFI_ICON | SHGFI_SMALLICON)
        if !sfi.hIcon
            return result

        return addIconToImageList(ext, sfi.hIcon, small)
    }
}