#global public
using Core, Pixel

struct RichEditCursor
{
    lineIndex:      uint
    charPosInLine:  uint
}

impl RichEdit
{
    mtd getRuneSize(line: *RichEditLine, i: uint, x: f32)->Math.Point
    {
        var size: retval

        if line.chars[i] == "\t"'rune
        {
            size.x = getTabOffset(cast(s32) x)
        }
        else
        {
            styleIdx := line.styles[i]
            font := getTheme().res.fontDefault.getFont(styles[styleIdx].fontMode)
            size = Painter.measureRune(line.chars[i], font)
            size.y += lineSpacing
        }

        return size
    }

    mtd getCursorDisplayPos(cp: RichEditCursor)->Math.Point
    {
        var result: retval

        lineIndex := Math.min(cp.lineIndex, lines.count - 1)
        pline     := lines[lineIndex]
        result.y  = pline.drawingRect.bottom()

        result.x = getMarginLeft()
        loop i: cp.charPosInLine
        {
            size := getRuneSize(pline, i, result.x)
            result.x += size.x
        }

        return result
    }

    mtd getTabOffset(x: s32)->s32
    {
        of   := x - getMarginLeft()
        font := getTheme().res.fontDefault.getFont(styles[0].fontMode)
        size := Painter.measureRune(" "'rune, font)
        tab  := (of / (tabSize * size.x)) * (tabSize * size.x)
        tab  = of - tab
        tab  = (tabSize * size.x) - tab
        return cast(s32) tab
    }

    mtd getXExtent()->Math.Point
    {
        font := getTheme().res.fontDefault.getFont(styles[0].fontMode)
        return Painter.measureRune("X"'rune, font)
    }

    mtd getCaretPos()->Math.Rectangle
    {
        pt := getCursorDisplayPos(cursorPos)
        size := getXExtent()

        var result: retval
        result.x = pt.x
        result.y = overwriteMode ? pt.y - 2 : pt.y - size.y
        result.width = overwriteMode ? size.x : 2
        result.height = overwriteMode ? 2 : size.y
        return result
    }

    private mtd ensureCaretIsVisibleInternal(center: bool)
    {
        checkSelection()
        ensureCursorIsVisible(cursorPos, center)
        invalidate()
    }

    mtd ensureCaretIsVisible(center = false)
    {
        forceCaretVisible       = true;
        forceCaretVisibleCenter = center
        ensureCaretIsVisibleInternal(center)
    }

    mtd ensureCursorIsVisible(cp: RichEditCursor, center: bool)
    {
        size   := getXExtent()
        decalx := size.x * 10

        clientRect := edView.getClientRect()

        pos := getCursorDisplayPos(cp)
        sx  := edView.scrollPos.x
        sy  := edView.scrollPos.y

        // Need to change horz scroll
        if pos.x < sx + getMarginLeft()
            sx = pos.x - decalx
        elif pos.x + size.x > sx + clientRect.width - getMarginRight()
            sx = pos.x + decalx - clientRect.width - getMarginRight()

        // Need to change vertical scroll
        if pos.y - size.y < sy
        {
            sy = pos.y - size.y
            if center
                sy -= clientRect.height / 2
        }
        elif pos.y > sy + clientRect.height
        {
            sy = pos.y - clientRect.height
            if center
                sy += clientRect.height / 2
        }

        if sy != edView.scrollPos.y
            dirtyFirstLineView = true

        scrollWnd.setScrollPos(sx, sy)
    }

    mtd getCursorPosFromPoint(pt: Math.Point)->RichEditCursor
    {
        var cp: retval

        found := false

        // Before the first visible line
        if pt.y < lines[0].drawingRect.y
        {
            cp.lineIndex     = 0
            cp.charPosInLine = 0
            found            = true
        }
        else
        {
            i  := 0'uint
            pi := Swag.UInt.Max
            while i != pi and i != lines.count
            {
                line  := lines[i]
                count := line.length()
                rect  := line.drawingRect

                // Before the first character
                if pt.y >= rect.y and pt.y < rect.bottom() and (pt.x < rect.x or !count)
                {
                    found = true
                    cp.lineIndex     = i
                    cp.charPosInLine = 0
                    break
                }

                if count
                {
                    loop j: count
                    {
                        size := getRuneSize(line, j, rect.x)
                        rect.width = size.x
                        if rect.contains(pt)
                        {
                            cp.lineIndex     = i
                            cp.charPosInLine = j
                            if pt.x >= rect.horzCenter()
                                cp.charPosInLine += 1
                            found = true
                            break
                        }

                        rect.x = rect.right()
                    }
                }

                if found
                    break

                // At the end of line
                if (pt.y >= rect.y and pt.y < rect.bottom() and pt.x >= rect.x)
                {
                    cp.lineIndex     = i
                    cp.charPosInLine = count
                    found            = true
                    break
                }

                pi = i
                i += 1
            }
        }

        // At the end of file
        if !found
        {
            cp.lineIndex     = lines.count - 1
            cp.charPosInLine = lines[cp.lineIndex].length()
        }

        // Check visibility
        if !lines[cp.lineIndex].isVisible()
            moveCursorDown(&cp)
        if !lines[cp.lineIndex].isVisible()
            moveCursorUp(&cp)

        return cp
    }

    mtd setCursorPos(cp: RichEditCursor)
    {
        cursorPos = cp
    }

    #[Swag.Discardable]
    mtd moveCursorLeft(cp: *RichEditCursor)->bool
    {
        if cp.charPosInLine == 0
        {
            prev := getPreviousVisibleLine(cp.lineIndex)
            if prev == cp.lineIndex
                return false
            cp.lineIndex     = prev
            cp.charPosInLine = lines[prev].length()
        }
        else
        {
            cp.charPosInLine -= 1
        }

        return true
    }

    #[Swag.Discardable]
    mtd moveCursorRight(cp: *RichEditCursor)->bool
    {
        if cp.charPosInLine == lines[cp.lineIndex].length()
        {
            next := getNextVisibleLine(cp.lineIndex)
            if next == cp.lineIndex
                return false
            cp.lineIndex     = next
            cp.charPosInLine = 0
        }
        else
        {
            cp.charPosInLine += 1
        }

        return true
    }

    #[Swag.Discardable]
    mtd moveCursorUp(cp: *RichEditCursor)->bool
    {
        pt := getCursorDisplayPos(cp)
        return moveCursorUp(cp, pt)
    }

    #[Swag.Discardable]
    private mtd moveCursorUp(cp: *RichEditCursor, posPrev: Math.Point)->bool
    {
        prev := getPreviousVisibleLine(cp.lineIndex)
        if prev == cp.lineIndex
            return false

        cp.lineIndex = prev
        line := lines[cp.lineIndex]
        cp.charPosInLine = Math.min(line.length(), cp.charPosInLine)
        posNew := getCursorDisplayPos(cp)

        if posPrev.x == posNew.x
            return true
        if posNew.x < posPrev.x
        {
            while posNew.x < posPrev.x and cp.charPosInLine < line.length()
            {
                posNew.x += getRuneSize(line, cp.charPosInLine, posNew.x).x
                cp.charPosInLine += 1
            }
        }
        else
        {
            line = lines[cp.lineIndex]
            while posNew.x > posPrev.x and cp.charPosInLine
            {
                cp.charPosInLine -= 1
                posNew.x -= getRuneSize(line, cp.charPosInLine, posNew.x).x
            }
        }

        return true
    }

    #[Swag.Discardable]
    mtd moveCursorDown(cp: *RichEditCursor)->bool
    {
        pt := getCursorDisplayPos(cp)
        return moveCursorDown(cp, pt)
    }

    #[Swag.Discardable]
    private mtd moveCursorDown(cp: *RichEditCursor, posPrev: Math.Point)->bool
    {
        next := getNextVisibleLine(cp.lineIndex)
        if next == cp.lineIndex
            return false

        cp.lineIndex = next
        line := lines[cp.lineIndex]
        cp.charPosInLine = Math.min(line.length(), cp.charPosInLine)
        posNew := getCursorDisplayPos(cp)

        if posPrev.x == posNew.x
            return true
        if posNew.x < posPrev.x
        {
            while posNew.x < posPrev.x and cp.charPosInLine < line.length()
            {
                posNew.x += getRuneSize(line, cp.charPosInLine, posNew.x).x
                cp.charPosInLine += 1
            }
        }
        else
        {
            line = lines[cp.lineIndex]
            while posNew.x > posPrev.x and cp.charPosInLine
            {
                cp.charPosInLine -= 1
                posNew.x -= getRuneSize(line, cp.charPosInLine, posNew.x).x
            }
        }

        return true
    }

    mtd moveCursorStartLine(cp: *RichEditCursor)
    {
        line := lines[cp.lineIndex]
        i    := cast(s32) cp.charPosInLine

        var firstBlank: bool
        if !i
        {
            firstBlank = true
        }
        else
        {
            firstBlank = false
            i -= 1
            while i >= 0
            {
                if !Unicode.isSpace(line.chars[i])
                {
                    firstBlank = true
                    break
                }

                i -= 1
            }
        }

        cp.charPosInLine = 0
        if firstBlank
        {
            while cp.charPosInLine < line.length() and Unicode.isSpace(line.chars[cp.charPosInLine])
                cp.charPosInLine += 1
        }
    }

    mtd moveCursorEndLine(cp: *RichEditCursor)
    {
        cp.charPosInLine = lines[cp.lineIndex].length()
    }

    mtd moveCursorStartFile(cp: *RichEditCursor)
    {
        cp.lineIndex     = getFirstVisibleLine()
        cp.charPosInLine = 0
    }

    mtd moveCursorEndFile(cp: *RichEditCursor)
    {
        cp.lineIndex     = getLastVisibleLine()
        cp.charPosInLine = lines[cp.lineIndex].length()
    }

    mtd moveCursorPageUp(cp: *RichEditCursor)
    {
        client := edView.getClientRect()
        count := cast(int) (client.height / getXExtent().y)
        while count
        {
            if cp.lineIndex == 0
                break
            moveCursorUp(cp)
            count -= 1
        }
    }

    mtd moveCursorPageDown(cp: *RichEditCursor)
    {
        client := edView.getClientRect()
        count := cast(int) (client.height / getXExtent().y)
        while count
        {
            if cp.lineIndex == lines.count - 1
                break
            moveCursorDown(cp)
            count -= 1
        }
    }

    mtd moveCursorWordLeft(cp: *RichEditCursor)
    {
        line := lines[cp.lineIndex]
        if cp.charPosInLine == 0
        {
            moveCursorLeft(cp)
            return
        }

        if Unicode.isSpace(line.chars[cp.charPosInLine - 1])
        {
            if !moveCursorLeft(cp)
                return
            line = lines[cp.lineIndex]
            while cp.charPosInLine != 0 and Unicode.isSpace(line.chars[cp.charPosInLine - 1])
            {
                if !moveCursorLeft(cp)
                    return
                line = lines[cp.lineIndex]
            }

            if !cp.charPosInLine
                return
        }

        if isWord(line.chars[cp.charPosInLine - 1])
        {
            while cp.charPosInLine != 0 and isWord(line.chars[cp.charPosInLine - 1])
            {
                if !moveCursorLeft(cp)
                    return
                line = lines[cp.lineIndex]
            }
        }
        elif zapWordChar(line.chars[cp.charPosInLine - 1])
        {
            while cp.charPosInLine != 0 and zapWordChar(line.chars[cp.charPosInLine - 1])
            {
                if !moveCursorLeft(cp)
                    return
                line = lines[cp.lineIndex]
            }
        }
        else
        {
            moveCursorLeft(cp)
        }
    }

    mtd moveCursorWordRight(cp: *RichEditCursor, withSpace: bool)
    {
        line := lines[cp.lineIndex]
        if cp.charPosInLine == line.length() or Unicode.isSpace(line.chars[cp.charPosInLine])
        {
            if !moveCursorRight(cp)
                return
            line = lines[cp.lineIndex]
            while cp.charPosInLine != line.length() and Unicode.isSpace(line.chars[cp.charPosInLine])
            {
                if !moveCursorRight(cp)
                    return
                line = lines[cp.lineIndex]
            }
        }
        elif isWord(line.chars[cp.charPosInLine])
        {
            while cp.charPosInLine != line.length() and isWord(line.chars[cp.charPosInLine])
            {
                if !moveCursorRight(cp)
                    return
                line = lines[cp.lineIndex]
            }

            if withSpace
            {
                while cp.charPosInLine != line.length() and Unicode.isSpace(line.chars[cp.charPosInLine])
                {
                    if !moveCursorRight(cp)
                        return
                    line = lines[cp.lineIndex]
                }
            }
        }
        elif zapWordChar(line.chars[cp.charPosInLine])
        {
            while cp.charPosInLine != line.length() and zapWordChar(line.chars[cp.charPosInLine])
            {
                if !moveCursorRight(cp)
                    return
                line = lines[cp.lineIndex]
            }

            while cp.charPosInLine != line.length() and Unicode.isSpace(line.chars[cp.charPosInLine])
            {
                if !moveCursorRight(cp)
                    return
                line = lines[cp.lineIndex]
            }
        }
        else
        {
            moveCursorRight(cp)
        }
    }
}