#global public
using Core, Pixel

struct SliderCtrl
{
    using frameWnd: FrameWnd
    labelSize:      f32 = 60
    editSize:       f32 = 60

    label:  *Label
    slider: *Slider
    edit:   *EditBox
}

impl IWnd for SliderCtrl
{
    mtd onResizeEvent(evt: *ResizeEvent)
    {
        if !label return
        rect    := getClientRect()
        metrics := getThemeMetrics()

        label.setPosition(0, 0, labelSize, metrics.editBox_Height)

        w := rect.width - labelSize - editSize
        slider.setPosition(label.position.right(), rect.vertCenter() - metrics.slider_Height / 2, w, metrics.slider_Height)

        edit.setPosition(slider.position.right(), rect.vertCenter() - metrics.editBox_Height / 2, editSize, metrics.editBox_Height)
    }
}

impl SliderCtrl
{
    // Create the popup list, but do not display it
    func create(parent: *Wnd, name: string, position: Math.Rectangle = @{}, id: WndId = null)->*SliderCtrl
    {
        metrics := parent.getThemeMetrics()
        pos := position
        if pos.width == 0
            pos.width = metrics.slider_Width + metrics.editBox_Width * 2
        if pos.height == 0
            pos.height = Math.max(metrics.slider_Height, metrics.editBox_Height)

        ctrlXXX := Wnd.create'SliderCtrl(parent, pos, id)

        with ctrlXXX
        {
            .label = Label.create(ctrlXXX, #self.name, @{})
            .label.horzAlignmentText = .Right

            .slider = Slider.create(ctrlXXX, @{})
            .slider.sigChanged += @|ctrlXXX|(wnd)
            {
                var val: String
                switch ctrlXXX.edit.inputMode
                {
                case .U64:
                    val = Format.toString("%", cast(u64) wnd.getValue())
                case .S64:
                    val = Format.toString("%", cast(s64) wnd.getValue())
                case .F64:
                    val = Format.toString("%{f2}", wnd.getValue())
                }

                ctrlXXX.edit.setText(val)
            }

            .edit = EditBox.create(ctrlXXX, "", @{})
            .edit.setForm(.Transparent)
            .edit.editBoxFlags |= .RightAlign
            .edit.sigLoseFocus += @|ctrlXXX|(edit)
            {
                switch edit.inputMode
                {
                case .U64:
                    (val, ?, ?) := catch StrConv.parseU64(edit.text)
                    ctrlXXX.slider.setValue(cast(f32) val)

                case .S64:
                    (val, ?, ?) := catch StrConv.parseS64(edit.text)
                    ctrlXXX.slider.setValue(cast(f32) val)

                case .F64:
                    (val, ?, ?) := catch StrConv.parseF64(edit.text)
                    ctrlXXX.slider.setValue(cast(f32) val)
                }
            }

            .sendResizeEvent()
        }

        return ctrlXXX
    }

    // Set a f32 range
    mtd setMinMaxF32(min, max: f32)
    {
        slider.setMinMax(min, max)
        edit.setInputF64(acast min, acast max)
    }

    // Set a u64 range
    mtd setMinMaxU64(min, max: u64)
    {
        slider.setMinMax(acast min, acast max)
        slider.sliderFlags |= .Integer
        edit.setInputU64(min, max)
    }

    // Set a f64 range
    mtd setMinMaxS64(min, max: s64)
    {
        slider.setMinMax(acast min, acast max)
        slider.sliderFlags |= .Integer
        edit.setInputS64(min, max)
    }

    // Set the slider current value
    mtd setValue(value: f32)
    {
        slider.setValue(value)
    }
}
