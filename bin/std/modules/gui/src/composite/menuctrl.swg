using Core, Pixel

public enum PopupPos
{
    TopLeft
    AnchorTopCenter
    AnchorBottomCenter
}

#[Swag.EnumFlags]
public enum MenuCtrlFlags
{
    None
    NoKeyShortcuts
}

public struct PopupMenuItem
{
    using item: Item
    rightName:  RichString
    popup:      *MenuCtrl
    pos:        f32
    size:       f32
    separator:  bool
    disabled:   bool
    checked:    bool
}

public struct MenuCtrl
{
    using frameWnd:     FrameWnd
    onValidateResult:   func(self, WndId)
    onComputeItem:      func(self, *PopupMenuItem)
    menuCtrlFlags:      MenuCtrlFlags = None

    items:          ArrayPtr'PopupMenuItem
    hotIdx:         u32 = Swag.U32.Max
    selectedIdx:    u32 = Swag.U32.Max
    bar:            bool
    endModal:       bool
    endModalResult: WndId
    ownerMenu:      *MenuCtrl
    subVisible:     *MenuCtrl
    timer:          *Timer
    dirtyLayout:    bool
    paintByFrame:   bool
}

public impl IWnd for MenuCtrl
{
    private mtd paintBar(painter: *Painter)
    {
        theme   := getTheme()
        colors  := getThemeColors()
        rects   := getThemeRects()
        metrics := getThemeMetrics()

        if dirtyLayout
        {
            dirtyLayout = false
            computeLayoutBar()
        }

        // Back
        clientRect := getClientRect()
        if backgroundStyle != .Transparent
        {
            theme.drawSubRect(painter, clientRect, &rects.menuBar_Bk, colors.menuBar_Bk)
            theme.drawSubRect(painter, clientRect, &rects.menuBar_Border, colors.menuBar_Border)
        }

        var labelPos: Math.Rectangle = ?
        var colorText: Color
        var colorRightText: Color

        visit i, idx: items
        {
            if i.separator
                continue

            labelPos.x = i.pos
            labelPos.y = clientRect.y
            labelPos.width = i.size
            labelPos.height = clientRect.height

            var format: RichStringFormat
            colorText = i.disabled ? colors.popupItem_DisabledText : colors.popupItem_Text
            colorRightText = i.disabled ? colors.popupItem_DisabledText : colors.popupItem_RightText

            // Back selection
            if !i.disabled
            {
                if hotIdx == idx or selectedIdx == idx
                {
                    backPos := labelPos
                    backPos.x -= metrics.menuBar_SpaceBetween * 0.5
                    backPos.width += metrics.menuBar_SpaceBetween
                    theme.drawSubRect(painter, backPos, &rects.menuBar_SelectedBk, colors.menuBar_SelectedBk)
                    colorText = colors.popupItem_HotText
                    colorRightText = colors.popupItem_HotRightText
                }
            }

            // Icon
            if i.icon.isValid()
            {
                i.icon.sizeX = i.size
                i.icon.sizeY = i.size
                i.icon.paint(painter, labelPos.x, labelPos.vertCenter() - i.icon.sizeY * 0.5, colorText)
            }

            // Text
            theme.setTextColors(&format, colorText)
            format.horzAlignment = .Left
            format.vertAlignment = .Center
            format.flags = .Clip
            format.font = theme.res.fontDefault
            painter.drawRichString(labelPos, &i.name, format)
        }
    }

    private mtd paintPopup(painter: *Painter)
    {
        theme   := getTheme()
        colors  := getThemeColors()
        rects   := getThemeRects()
        metrics := getThemeMetrics()

        // Shadow
        if !paintByFrame
        {
            subRect := &theme.rects.menuPopup_Shadow
            theme.drawSubRect(painter, @{0, 0, position.width, position.height}, subRect, colors.menuPopup_Shadow)
        }

        // Back
        clientRect := getClientRect()
        if !paintByFrame
        {
            clientRect.inflate(-metrics.menuPopup_ShadowSize)
            theme.drawSubRect(painter, clientRect, &rects.menuPopup_Bk, colors.menuPopup_Bk)
            theme.drawSubRect(painter, clientRect, &rects.menuPopup_Border, colors.menuPopup_Border, interpol: .Pixel)
        }

        clientRect.applyPadding(padding)

        var labelPos: Math.Rectangle = ?
        var colorText: Color
        var colorRightText: Color

        visit i, idx: items
        {
            labelPos.x = clientRect.x
            labelPos.y = i.pos
            labelPos.width = clientRect.width
            labelPos.height = i.size

            if i.separator
            {
                painter.drawLine(labelPos.x, labelPos.vertCenter(), labelPos.right(), labelPos.vertCenter(), Pen.createSolid(colors.menuPopup_Separator))
                continue
            }

            colorText = i.disabled ? colors.popupItem_DisabledText : colors.popupItem_Text
            colorRightText = i.disabled ? colors.popupItem_DisabledText : colors.popupItem_RightText

            // Back selection
            if hotIdx == idx and !i.disabled
            {
                backPos := labelPos
                backPos.y -= metrics.menuPopup_SpaceLines * 0.5
                backPos.height += metrics.menuPopup_SpaceLines
                backPos.inflate(4, 0)
                theme.drawSubRect(painter, backPos, &rects.menuPopup_HotBk, colors.popupItem_HotBk)
                colorText = colors.popupItem_HotText
                colorRightText = colors.popupItem_HotRightText
            }

            // Icon
            if i.checked
            {
                checkPos := labelPos
                checkPos.y = labelPos.vertCenter() - i.size * 0.5
                checkPos.width, checkPos.height = i.size
                theme.drawSubRect(painter, checkPos, &rects.btnCheck_CheckedMark, colorText)
            }
            elif i.icon.isValid()
            {
                i.icon.sizeX = i.size
                i.icon.sizeY = i.size
                i.icon.paint(painter, labelPos.x, labelPos.vertCenter() - i.icon.sizeY * 0.5, colorText)
            }

            labelPos.moveLeft(metrics.menuPopup_IconTextMargin + i.size)
            labelPos.width -= i.size

            // Text
            var format: RichStringFormat
            theme.setTextColors(&format, colorText)
            format.horzAlignment = .Left
            format.vertAlignment = .Center
            format.flags = .Clip
            format.font = theme.res.fontDefault
            painter.drawRichString(labelPos, &i.name, format)

            // Text right
            if !(menuCtrlFlags & .NoKeyShortcuts) and !i.rightName.isEmpty()
            {
                format.palette[0] = colorRightText
                format.horzAlignment = .Right
                format.vertAlignment = .Center
                format.flags = .Clip
                format.font = theme.res.fontDefault
                painter.drawRichString(labelPos, &i.rightName, format)
            }

            // Right icon
            if i.popup
            {
                icon := theme.getIcon24(ThemeIcons24.RightPopupArrow)
                icon.paint(painter, labelPos.right(), labelPos.vertCenter() - icon.sizeY * 0.5, colors.popupItem_Text)
            }
        }
    }

    mtd onPaintEvent(evt: *PaintEvent)
    {
        frameWnd.IWnd.onPaintEvent(evt)
        if bar
            paintBar(evt.bc.painter)
        else
            paintPopup(evt.bc.painter)
    }

    mtd onTimerEvent(evt: *TimerEvent)
    {
        hideSubVisible()
        deleteTimer()
        showHotPopup()
    }

    mtd onMouseEvent(evt: *MouseEvent)
    {
        hit := hitTest(evt.surfacePos)
        if hit != hotIdx
        {
            // Timer to auto open/hide sub menus
            if !bar
            {
                if !timer
                    timer = surface.app.addTimer(300'ms, self)
                timer.restart()
            }

            hotIdx = hit
            invalidate()

            if hit != Swag.U32.Max
            {
                p := ownerMenu
                while p
                {
                    p.deleteTimer()
                    p = p.ownerMenu
                }
            }
        }

        evt.accepted = true
        if hotIdx == Swag.U32.Max and ownerMenu
        {
            ownerMenu.onMouseEvent(evt)
            return
        }

        if hotIdx == Swag.U32.Max and bar and !subVisible
        {
            evt.accepted = false
            return
        }

        // If this is a bar, then track sub popup if one is currently open
        if bar and subVisible and hotIdx != Swag.U32.Max
        {
            hideSubVisible()
            deleteTimer()
            showHotPopup()
        }

        // On a popup menu, just react to press button
        elif evt.kind == .MouseReleased and evt.button == .Left
        {
            if hotIdx != Swag.U32.Max
            {
                hotItem := items[hotIdx]
                if hotItem.popup
                {
                    hideSubVisible()
                    deleteTimer()
                    showHotPopup()
                }
                elif !hotItem.separator and !hotItem.disabled
                {
                    setEndModal(hotItem.id)
                }
            }
            else
            {
                setEndModal(null)
            }
        }
    }
}

impl MenuCtrl
{
    mtd setEndModal(result: WndId)
    {
        p := self
        while p.ownerMenu
        {
            p.hide()
            p = p.ownerMenu
        }

        p.endModal = true
        p.endModalResult = result

        if onValidateResult and result != null
            onValidateResult(self, result)

        if bar
        {
            hideSubVisible()
            postCommandEvent(result)
            setFocus()
        }

        if p.bar
        {
            p.selectedIdx   = Swag.U32.Max
            p.hotIdx        = Swag.U32.Max
            p.subVisible    = null
            p.postCommandEvent(result)
        }
    }

    mtd hideSubVisible()
    {
        while subVisible
        {
            subVisible.hide()
            subVisible = subVisible.subVisible
        }

        selectedIdx = Swag.U32.Max
        if !bar
            captureMouse()
        else
            releaseMouse()
    }

    mtd deleteTimer()
    {
        if !timer return
        surface.app.deleteTimer(timer)
        timer = null
    }

    public mtd updateState()
    {
        visit i: items
        {
            evt := sendCommandUIEvent(i.id)
            if evt.setFlags & .Disabled
                i.disabled = evt.disabled
            if evt.setFlags & .Icon
                i.icon = evt.icon
            if evt.setFlags & .LongName
                i.name = evt.longName
            elif evt.setFlags & .Name
                i.name = evt.name
            if evt.setFlags & .Shortcut
                i.rightName.set(evt.shortcut)
            if evt.setFlags & .Checked
                i.checked = evt.checked
        }
    }

    mtd showSubVisible(ptSurface: Math.Point)
    {
        with subVisible
        {
            pt := .parent.surfaceToLocal(ptSurface)
            .setPosition(@{pt.x, pt.y, .position.width, .position.height})
            .bringToTop()
            .show()
            .captureMouse()
            .hotIdx = Swag.U32.Max
            .selectedIdx = Swag.U32.Max
            .subVisible = null
            .timer = null
        }
    }

    mtd showHotPopupBar()
    {
        selectedIdx = hotIdx
        hotItem := items[hotIdx]
        metrics := getThemeMetrics()

        pos := getSurfaceRect()
        surfaceRect := pos
        pos.x += hotItem.pos
        pos.x -= metrics.menuPopup_ShadowSize
        pos.x -= metrics.menuBar_SpaceBetween * 0.5
        pos.y += pos.height
        pos.y -= metrics.menuPopup_ShadowSize
        subVisible = hotItem.popup

        // Be sure popup menu is in the client area of the top view
        subVisible.updateState()
        subVisible.computeLayoutPopup()
        topView := getTopView()
        pt := topView.surfaceToLocal(@{pos.x, pos.y})
        subPos := subVisible.position
        if pt.x + subPos.width > topView.position.width
            pt.x = topView.position.width - subPos.width
        if pt.y + subPos.height > topView.position.height
            pt.y = topView.position.height - subPos.height

        pt = topView.localToSurface(pt)
        showSubVisible(pt)
    }

    mtd showHotPopupPopup()
    {
        selectedIdx = hotIdx
        hotItem := items[hotIdx]

        pos := getSurfaceRect()
        sdw := getThemeMetrics().menuPopup_ShadowSize
        surfaceRect := pos
        pos.x = pos.right() - sdw
        pos.y += hotItem.pos
        pos.y -= padding.y
        subVisible = hotItem.popup

        // Be sure popup menu is in the client area of the top view
        subVisible.updateState()
        subVisible.computeLayoutPopup()
        topView := getTopView()
        pt := topView.surfaceToLocal(@{pos.x, pos.y})
        pt -= sdw
        subPos := subVisible.position
        if pt.x + subPos.width > topView.position.width
            pt.x = surfaceRect.x - subPos.width
        if pt.y + subPos.height > topView.position.height
            pt.y = surfaceRect.y - subPos.height

        pt = topView.localToSurface(pt)
        showSubVisible(pt)
    }

    mtd showHotPopup()
    {
        if hotIdx == Swag.U32.Max or !items[hotIdx].popup
        {
            selectedIdx = Swag.U32.Max
            return
        }

        if bar
            showHotPopupBar()
        else
            showHotPopupPopup()
    }

    mtd hitTestBar(surfacePos: Math.Point)->u32
    {
        pos := surfaceToLocal(surfacePos)
        metrics := getThemeMetrics()
        clientRect := getClientRect()
        sl := metrics.menuBar_SpaceBetween
        visit i, idx: items
        {
            rect := Math.Rectangle{i.pos - sl * 0.5, clientRect.y, i.size + sl, clientRect.height}
            if rect.contains(pos)
                return cast(u32) idx
        }

        return Swag.U32.Max
    }

    mtd hitTestPopup(surfacePos: Math.Point)->u32
    {
        pos := surfaceToLocal(surfacePos)
        metrics := getThemeMetrics()
        clientRect := getClientRect()
        sl := metrics.menuPopup_SpaceLines
        visit i, idx: items
        {
            rect := Math.Rectangle{clientRect.x, i.pos - sl * 0.5, clientRect.width, i.size + sl}
            if rect.contains(pos)
                return cast(u32) idx
        }

        return Swag.U32.Max
    }

    mtd hitTest(surfacePos: Math.Point)->u32
    {
        return bar ? hitTestBar(surfacePos) : hitTestPopup(surfacePos)
    }

    mtd computeLayoutBar()
    {
        theme   := getTheme()
        metrics := getThemeMetrics()

        clientRect := getClientRectPadding()

        x := clientRect.x

        var fake: Pixel.Painter{fake: true}
        var rsf:  Pixel.RichStringFormat
        rsf.font = surface.app.theme.res.fontDefault

        visit i, idx: items
        {
            if onComputeItem
                onComputeItem(self, i)
            i.pos = x + metrics.menuBar_SpaceBetween * 0.5
            fake.drawRichString(@{0, 0, 512, 0}, &i.name, rsf)
            i.size = i.name.boundRect.width
            x = i.pos + i.size + metrics.menuBar_SpaceBetween * 0.5
        }
    }

    public mtd computeLayoutPopup()
    {
        theme   := getTheme()
        metrics := getThemeMetrics()

        clientRect := getClientRect()
        if !paintByFrame
            clientRect.inflate(-metrics.menuPopup_ShadowSize)
        clientRect.applyPadding(padding)

        y := clientRect.y

        position.width = 0
        position.height = clientRect.y

        var fake: Pixel.Painter{fake: true}
        var rsf:  Pixel.RichStringFormat
        rsf.font = theme.res.fontDefault

        visit i, idx: items
        {
            if onComputeItem
                onComputeItem(self, i)
            if idx
                position.height += metrics.menuPopup_SpaceLines
            i.pos = position.height

            if i.separator
            {
                i.size = metrics.menuPopup_SeparatorHeight
                position.height += i.size
                continue
            }

            i.size = rsf.font.regular.height

            fake.drawRichString(@{0, 0, 512, 0}, &i.name, rsf)
            w := i.name.boundRect.width

            if !(menuCtrlFlags & .NoKeyShortcuts) and !i.rightName.isEmpty()
            {
                fake.drawRichString(@{0, 0, 512, 0}, &i.rightName, rsf)
                w += i.rightName.boundRect.width + rsf.font.regular.height
            }

            position.width = Math.max(position.width, w)
            position.height += i.size
        }

        // Add shadow size
        if !paintByFrame
            position.width += 2 * metrics.menuPopup_ShadowSize

        position.width += (2 * rsf.font.regular.height) + (1 * metrics.menuPopup_IconTextMargin)

        if !paintByFrame
            position.height += metrics.menuPopup_ShadowSize

        // Add padding
        position.width  += padding.x + padding.z
        position.height += padding.w
    }
}

public impl MenuCtrl
{
    #[Swag.Discardable]
    func createPopup(parent: *Wnd, id: WndId = null, owner: *Wnd = null)->*MenuCtrl
    {
        with res := Wnd.create'MenuCtrl(parent.getTopView(), null, @{}, id)
        {
            .owner = owner orelse #self.parent
            .setAllPaddings(.getThemeMetrics().menuPopup_Padding)
            .wndFlags |= .Hidden
        }

        return res
    }

    #[Swag.Discardable]
    func createBar(parent: *Wnd, pos: Math.Rectangle = @{}, id: WndId = null, owner: *Wnd = null)->*MenuCtrl
    {
        with res := Wnd.create'MenuCtrl(parent, null, pos, id)
        {
            .owner = owner
            metrics := .getThemeMetrics()
            if .position.height == 0
                .position.height = metrics.menuBar_Height
            .setAllPaddings(metrics.menuPopup_Padding)
            .bar = true
        }

        return res
    }

    // Add a new item
    mtd addItem(id: WndId)
    {
        self.addItem(null, #self.id)
    }

    // Add a new item
    mtd addItem(name: string, id: WndId, icon: Icon = @{}, rightName: string = null, disabled = false, checked = false)
    {
        with mitem := items.newPtr()
        {
            .name      = #self.name
            .icon      = #self.icon
            .id        = #self.id
            .rightName = rightName
            .disabled  = disabled
            .checked   = checked
        }

        items.add(mitem)
        dirtyLayout = true
    }

    // Add a new item
    mtd addPopup(name: string, popup: *MenuCtrl, icon: Icon = @{})
    {
        with mitem := items.newPtr()
        {
            .name  = #self.name
            .icon  = #self.icon
            .popup = #self.popup
        }

        popup.ownerMenu = self
        items.add(mitem)
        dirtyLayout = true
    }

    // Add a separator
    mtd addSeparator()
    {
        item := items.newPtr()
        item.separator = true
        items.add(item)
        dirtyLayout = true
    }

    // Make the popup menu modal
    // Will return the selected id
    mtd doModal(surfacePos: Math.Point, pos = PopupPos.TopLeft, autoDestroy: bool = false)->WndId
    {
        Debug.assert(!bar)

        updateState()

        switch pos
        {
        case AnchorTopCenter:
            paintByFrame = true
            padding.y += 4
        case AnchorBottomCenter:
            paintByFrame = true
            padding.w += 4
        default:
            paintByFrame = false
        }

        computeLayoutPopup()

        // Be sure popup menu is in the client area of the top view
        pt := parent.surfaceToLocal(surfacePos)

        switch pos
        {
        case TopLeft:
            pt -= getThemeMetrics().menuPopup_ShadowSize
            setPosition(@{pt.x, pt.y, position.width, position.height})

        case AnchorTopCenter:
            pt.y += getThemeMetrics().menuPopup_ShadowSize
            setPosition(@{pt.x - position.width * 0.5, pt.y, position.width, position.height})
            anchor = .Top
            anchorPos = position.width * 0.5
            setFrameFlags(.Borders | .SmallShadow)
            setFrameForm(.Round)
            padding.y += 14

        case AnchorBottomCenter:
            pt.y -= getThemeMetrics().menuPopup_ShadowSize
            setPosition(@{pt.x - position.width * 0.5, pt.y - position.height, position.width, position.height})
            anchor = .Bottom
            anchorPos = position.width * 0.5
            setFrameFlags(.Borders | .SmallShadow)
            setFrameForm(.Round)
        }

        fitPosInParent(simX: true, simY: true)

        bringToTop()
        show()
        captureMouse()

        endModal = false
        endModalResult = null
        while !endModal
            surface.app.runFrame()

        hideSubVisible()
        hide()

        if endModalResult
            postCommandEvent(endModalResult)

        if autoDestroy
            destroy()

        return endModalResult
    }
}