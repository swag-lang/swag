#global marked
using Core

impl Image
{
    mtd const doRGB8(dstImage: *Image)
    {
        #[Swag.Complete]
        switch me.pf
        {
        case RGB8:
            break
        case RGBA8:
            me.visitPixels(dstImage)
            {
                let dstImage = cast(*Image) userData
                let pixDst   = dstImage.pixels.buffer + x * dstImage.bpp8 + y * dstImage.width8
                pixDst[0] = pix[0]
                pixDst[1] = pix[1]
                pixDst[2] = pix[2]
            }
        case BGR8, BGRA8:
            me.visitPixels(dstImage)
            {
                let dstImage = cast(*Image) userData
                let pixDst   = dstImage.pixels.buffer + x * dstImage.bpp8 + y * dstImage.width8
                pixDst[0] = pix[2]
                pixDst[1] = pix[1]
                pixDst[2] = pix[0]
            }
        }
    }

    mtd const doRGBA8(dstImage: *Image)
    {
        #[Swag.Complete]
        switch me.pf
        {
        case RGBA8:
            break
        case BGRA8:
            me.visitPixels(dstImage)
            {
                let dstImage = cast(*Image) userData
                let pixDst   = dstImage.pixels.buffer + x * dstImage.bpp8 + y * dstImage.width8
                pixDst[0] = pix[2]
                pixDst[1] = pix[1]
                pixDst[2] = pix[0]
                pixDst[3] = pix[3]
            }
        case RGB8:
            me.visitPixels(dstImage)
            {
                let dstImage = cast(*Image) userData
                let pixDst   = dstImage.pixels.buffer + x * dstImage.bpp8 + y * dstImage.width8
                pixDst[0] = pix[0]
                pixDst[1] = pix[1]
                pixDst[2] = pix[2]
                pixDst[3] = 255
            }
        case BGR8:
            me.visitPixels(dstImage)
            {
                let dstImage = cast(*Image) userData
                let pixDst   = dstImage.pixels.buffer + x * dstImage.bpp8 + y * dstImage.width8
                pixDst[0] = pix[2]
                pixDst[1] = pix[1]
                pixDst[2] = pix[0]
                pixDst[3] = 255
            }
        }
    }

    mtd const doBGR8(dstImage: *Image)
    {
        #[Swag.Complete]
        switch me.pf
        {
        case BGR8:
            break
        case BGRA8:
            me.visitPixels(dstImage)
            {
                let dstImage = cast(*Image) userData
                let pixDst   = dstImage.pixels.buffer + x * dstImage.bpp8 + y * dstImage.width8
                pixDst[0] = pix[0]
                pixDst[1] = pix[1]
                pixDst[2] = pix[2]
            }
        case RGB8, RGBA8:
            me.visitPixels(dstImage)
            {
                let dstImage = cast(*Image) userData
                let pixDst   = dstImage.pixels.buffer + x * dstImage.bpp8 + y * dstImage.width8
                pixDst[0] = pix[2]
                pixDst[1] = pix[1]
                pixDst[2] = pix[0]
            }
        }
    }

    mtd const doBGRA8(dstImage: *Image)
    {
        #[Swag.Complete]
        switch me.pf
        {
        case BGRA8:
            break
        case BGR8:
            me.visitPixels(dstImage)
            {
                let dstImage = cast(*Image) userData
                let pixDst   = dstImage.pixels.buffer + x * dstImage.bpp8 + y * dstImage.width8
                pixDst[0] = pix[0]
                pixDst[1] = pix[1]
                pixDst[2] = pix[2]
                pixDst[3] = 255
            }
        case RGB8:
            me.visitPixels(dstImage)
            {
                let dstImage = cast(*Image) userData
                let pixDst   = dstImage.pixels.buffer + x * dstImage.bpp8 + y * dstImage.width8
                pixDst[0] = pix[2]
                pixDst[1] = pix[1]
                pixDst[2] = pix[0]
                pixDst[3] = 255
            }
        case RGBA8:
            me.visitPixels(dstImage)
            {
                let dstImage = cast(*Image) userData
                let pixDst   = dstImage.pixels.buffer + x * dstImage.bpp8 + y * dstImage.width8
                pixDst[0] = pix[2]
                pixDst[1] = pix[1]
                pixDst[2] = pix[0]
                pixDst[3] = pix[3]
            }
        }
    }

    mtd const doChangePf(dstImage: *Image)
    {
        #[Swag.Complete]
        switch dstImage.pf
        {
        case RGB8:
            me.doRGB8(dstImage)
        case RGBA8:
            me.doRGBA8(dstImage)
        case BGR8:
            me.doBGR8(dstImage)
        case BGRA8:
            me.doBGRA8(dstImage)
        }
    }

    // Change image pixel format
    public mtd setPixelFormat(newPf: PixelFormat)
    {
        Debug.assert(me.pixels.buffer != null)

        if newPf == me.pf:
            return

        me.allocWorkingBuffer(me.width, me.height, newPf)
        me.doChangePf(me.workingBuffer)
        me.applyWorkingBuffer()
    }

    // Change image pixel format
    public mtd const toSetPixelFormat(newPf: PixelFormat)->Image
    {
        Debug.assert(me.pixels.buffer != null)

        if newPf == me.pf:
            return dref me

        var result: retval = create(me.width, me.height, newPf)
        me.doChangePf(&result)
        return result
    }
}
