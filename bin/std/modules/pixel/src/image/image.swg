#global marked
#global public
using Swag, Core, Core.Serialization

// An image buffer, in various pixel formats.
struct Image
{
    pixels:        Array'u8                // All the pixels
    size:          u64                     // Size in bytes
    width:         s32                     // The width of the image
    height:        s32                     // The height of the image
    width8:        s32                     // The width, in bytes
    pf:            PixelFormat             // Format of one pixel
    bpp:           u8                      // Bits per pixel
    bpp8:          u8                      // Bytes per pixel
    metaDatas:     Array'ImageMetaData

    #[Core.Serialization.NoSerialize]
    workingBuffer: *Image // Temporary buffer for filters and transformations
}

impl Image
{
    // Returns true if the image is valid
    #[Swag.Inline]
    mtd const isValid() => me.pixels.buffer != null

    // Creates a new image
    func create(width, height: s32, pf: PixelFormat, buffer: const [..] u8 = null)->Image
    {
        Debug.assert(width > 0 and height > 0, "invalid dimensions")

        var result: retval
        result.init(width, height, pf)
        result.allocPixels()
        if buffer:
            Memory.copy(result.pixels.buffer, @dataof(buffer), @countof(buffer))
        return result
    }

    mtd opDrop()
    {
        Memory.delete'Image(me.workingBuffer)
    }

    mtd opPostCopy()
    {
        me.workingBuffer = null
    }

    #[Swag.Macro]
    func(ptr: bool, back: bool) opVisit(me, stmt: #code void)
    {
        var scan = pixels.buffer
        for width * height
        {
            #macro
            {
                var #alias0 = #up scan
                var #alias1 = @index
                #inject(#up stmt)
            }

            scan += bpp8
        }
    }

    // Initialize image informations
    // 'pixels' is set to null, and must be initialized after a call to that function
    // This gives the opportunity to set the pixels with an external buffer
    mtd init(width, height: s32, pf: PixelFormat)
    {
        me.pixels.clear()
        me.width  = width
        me.height = height
        me.pf     = pf

        me.bpp    = me.pf.bpp()
        me.bpp8   = cast(u8) (me.bpp >> 3)
        me.width8 = me.width * me.bpp8
        me.size   = cast(u64) (me.width * me.height * me.bpp8)
    }

    // Allocate pixels.
    // Pixels will not be initialized.
    mtd allocPixels()
    {
        Debug.assert(me.size != 0)

        // Do not use pixels.resize to avoid initializing all the pixels
        // Pixels are not defined after a call to 'allocPixels', as design
        me.pixels.grow(me.size)
        me.pixels.count = me.size
    }

    // Allocate a computing buffer with current image size
    #[Swag.Overload]
    mtd allocWorkingBuffer()
    {
        me.allocWorkingBuffer(me.width, me.height, me.pf)
    }

    // Allocate a computing buffer with new sizes
    #[Swag.Overload]
    mtd allocWorkingBuffer(newWidth, newHeight: s32, newPf: PixelFormat)
    {
        if me.workingBuffer and
           newWidth == me.workingBuffer.width and
           newHeight == me.workingBuffer.height and
           newPf == me.workingBuffer.pf
        {
            return
        }

        me.freeWorkingBuffer()
        me.workingBuffer      = Memory.new'Image()
        dref me.workingBuffer = Image.create(newWidth, newHeight, newPf)
    }

    // Free the working buffer if allocated
    mtd freeWorkingBuffer()
    {
        Memory.delete(me.workingBuffer)
        me.workingBuffer = null
    }

    // Replace the current image content with the working buffer
    mtd applyWorkingBuffer()
    {
        Debug.assert(me.workingBuffer != null)
        swap(&me.pf, &me.workingBuffer.pf)
        swap(&me.pixels, &me.workingBuffer.pixels)
        swap(&me.width, &me.workingBuffer.width)
        swap(&me.height, &me.workingBuffer.height)
        swap(&me.bpp, &me.workingBuffer.bpp)
        swap(&me.bpp8, &me.workingBuffer.bpp8)
        swap(&me.size, &me.workingBuffer.size)
        swap(&me.width8, &me.workingBuffer.width8)
    }

    // Macro to foreach all pixels of the image in parallel chunks.
    // Exported variables:
    // | pix       | address of the pixel
    // | image     | the processed image
    // | index     | the pixel index
    // | x         | the pixel x coordinates
    // | y         | the pixel y coordinates
    // | userData  | as passed to the macro
    #[Swag.Macro]
    mtd const visitPixels(userData: *void = null, stride: s32 = 1, stmt: #code void)
    {
        Debug.assert(stride > 0)

        var p = {me, userData}
        Jobs.parallelVisit(|buffer, data| me.pixels.toSlice(), cast(u32) (me.bpp8 * stride), &p)
        {
            if !data:
                return
            let p = cast(*#decltype(p)) data
            #macro
            {
                let image    = #up p.me
                let userData = #up p.userData
                let pix      = #up buffer

                let index = cast(u64) (pix - image.pixels.buffer) / image.bpp8
                let x     = cast(s32) index % image.width
                let y     = cast(s32) index / image.width

                #inject(#up stmt)
            }
        }
    }

    // Release the content of the image
    mtd release()
    {
        @drop(me, 1)
        @init(me, 1)
    }

    // Clear the content of the image
    mtd clear()
    {
        Debug.assert(me.pixels.buffer != null)
        Memory.clear(me.pixels.buffer, me.size)
    }

    // Copy one pixel, depending on bpp
    #[Swag.Inline]
    func(BPP: u8) copyPixelDirect(pixDst, pixSrc: ^u8)
    {
        #if BPP == 24
        {
            dref cast(*u16) pixDst = dref cast(*u16) pixSrc
            pixDst[2]              = pixSrc[2]
        }
        #elif BPP == 32
        {
            dref cast(*u32) pixDst = dref cast(*u32) pixSrc
        }
        #else
        {
            #assert("invalid pixelCopy BPP")
        }
    }

    // Set pixel values at 'pixDst' depending on pixel format
    // Destination is supped to be in RGBA8 format
    func(PF: PixelFormat) convertToRGBA8(pixDst: ^u8, r, g, b, a: u8)
    {
        #if PF == .BGR8
        {
            pixDst[0] = b
            pixDst[1] = g
            pixDst[2] = r
        }
        #if PF == .BGRA8
        {
            pixDst[0] = b
            pixDst[1] = g
            pixDst[2] = r
            pixDst[3] = a
        }
        #if PF == .RGB8
        {
            pixDst[0] = r
            pixDst[1] = g
            pixDst[2] = b
        }
        #if PF == .RGBA8
        {
            pixDst[0] = r
            pixDst[1] = g
            pixDst[2] = b
            pixDst[3] = a
        }
    }

    // Set pixel values depending on pixel format
    #[Swag.Overload, Swag.Inline]
    mtd(PF: PixelFormat) const getPixelColorDirect(pixX, pixY: s32)->Color
    {
        var result: retval
        let x       = Math.clamp(pixX, 0, me.width - 1)
        var y       = Math.clamp(pixY, 0, me.height - 1)
        y = me.height - y - 1

        #if PF == .RGBA8
        {
            let pix = me.pixels.buffer + (x * 4) + (y * me.width * 4)
            result.r = pix[0]
            result.g = pix[1]
            result.b = pix[2]
            result.a = pix[3]
        }
        #elif PF == .RGB8
        {
            let pix = me.pixels.buffer + (x * 3) + (y * me.width * 3)
            result.r = pix[0]
            result.g = pix[1]
            result.b = pix[2]
            result.a = 255
        }
        #elif PF == .BGRA8
        {
            let pix = me.pixels.buffer + (x * 4) + (y * me.width * 4)
            result.b = pix[0]
            result.g = pix[1]
            result.r = pix[2]
            result.a = pix[3]
        }
        #elif PF == .BGR8
        {
            let pix = me.pixels.buffer + (x * 3) + (y * me.width * 3)
            result.b = pix[0]
            result.g = pix[1]
            result.r = pix[2]
            result.a = 255
        }

        return result
    }

    // Returns the color at the given coordinate
    #[Swag.Overload]
    mtd const getPixelColor(pixX, pixY: s32)->Color
    {
        #[Swag.Complete]
        switch me.pf
        {
        case RGBA8:
            return me.getPixelColorDirect'RGBA8(pixX, pixY)
        case RGB8:
            return me.getPixelColorDirect'RGB8(pixX, pixY)
        case BGRA8:
            return me.getPixelColorDirect'BGRA8(pixX, pixY)
        case BGR8:
            return me.getPixelColorDirect'BGR8(pixX, pixY)
        }

        return {}
    }
}
