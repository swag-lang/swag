using Core.Utf8

const invalidSequenceTests: [] string = [
    "\xed\xa0\x80\x80",
    // surrogate min
    "\xed\xbf\xbf\x80",
    // surrogate max

    // xx
    "\x91\x80\x80\x80",

    // s1
    "\xC2\x7F\x80\x80",
    "\xC2\xC0\x80\x80",
    "\xDF\x7F\x80\x80",
    "\xDF\xC0\x80\x80",

    // s2
    "\xE0\x9F\xBF\x80",
    "\xE0\xA0\x7F\x80",
    "\xE0\xBF\xC0\x80",
    "\xE0\xC0\x80\x80",

    // s3
    "\xE1\x7F\xBF\x80",
    "\xE1\x80\x7F\x80",
    "\xE1\xBF\xC0\x80",
    "\xE1\xC0\x80\x80",

    // s4
    "\xED\x7F\xBF\x80",
    "\xED\x80\x7F\x80",
    "\xED\x9F\xC0\x80",
    "\xED\xA0\x80\x80",

    // s5
    "\xF0\x8F\xBF\xBF",
    "\xF0\x90\x7F\xBF",
    "\xF0\x90\x80\x7F",
    "\xF0\xBF\xBF\xC0",
    "\xF0\xBF\xC0\x80",
    "\xF0\xC0\x80\x80",

    // s6
    "\xF1\x7F\xBF\xBF",
    "\xF1\x80\x7F\xBF",
    "\xF1\x80\x80\x7F",
    "\xF1\xBF\xBF\xC0",
    "\xF1\xBF\xC0\x80",
    "\xF1\xC0\x80\x80",

    // s7
    "\xF4\x7F\xBF\xBF",
    "\xF4\x80\x7F\xBF",
    "\xF4\x80\x80\x7F",
    "\xF4\x8F\xBF\xC0",
    "\xF4\x8F\xC0\x80",
    "\xF4\x90\x80\x80"]

#test
{
    visit it: invalidSequenceTests
    {
        var res = decodeRune(it)
        @assert(res.c == RuneError)
    }
}
