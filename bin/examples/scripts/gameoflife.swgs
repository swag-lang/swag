#dependencies
{
    #import "gui" location="swag@std"
}

using Core, Gui, Pixel

const GridSize = 28
const CellSize = 32.0

var g_Grid: [GridSize, GridSize] bool

func onEvent(wnd: *Wnd, evt: *Event)->bool
{
    switch evt.kind
    {
    case Create:
        var rng: Random.DefaultRng
        visit &c: g_Grid
        {
            dref c = rng.nextU32(0, 2) == 0 ? true : false
        }

    case Paint:
        paintEvt := cast(*PaintEvent) evt
        painter := paintEvt.bc.painter
        painter.clear(Argb.White)

        loop i: 1..GridSize-2
        {
            loop j: 1..GridSize-2
            {
                cpt := 0
                loop x: -1..1
                {
                    loop y: -1..1
                    {
                        if x == 0 and y == 0
                            continue
                        cpt += g_Grid[i+x,j+y] ? 1 : 0
                    }
                }
            }
        }

        loop i: 1..GridSize-1
        {
            loop j: 1..GridSize-1
            {
                x := i * CellSize
                y := j * CellSize
                if g_Grid[i, j]
                    painter.fillRect(x + 1, y + 1, CellSize-2, CellSize-2, Argb.Black)
            }
        }

        evt.target.invalidate()
        return true
    }

    return false
}

#run
{
    var app: Application
    surface := try app.createSurface(0, 0, 1024, 1024, hook: &onEvent)
    surface.show()
    app.run()
}