#dependencies
{
    #import "gui" location="swag@std"
}

using Core, Gui, Pixel

const FirstRune     = 33
const LastRune      = 600
const FontSize      = 15'u32
const MinTrailSize  = 10
const MaxTrailSize  = 50
const MaxColumns    = 80

struct C
{
    y:      f32
    length: s32
    speed:  f32
    c:      [MaxTrailSize] rune
    lastYI: s32
}

var g_RD:   [MaxColumns] C
var g_Font: *Font
var g_Rng:  Random.DefaultRng

func onEvent(wnd: *Wnd, evt: *Event)->bool
{
    switch evt.kind
    {
    case Create:
        g_Font = wnd.getTheme().createDefaultFont(200)

    case Paint:
        paintEvt := cast(*PaintEvent) evt
        painter  := paintEvt.bc.painter
        rect     := wnd.getClientRect()

        painter.fillRect(rect, Argb.Black)

        var pl: LinePathList
        assume wnd.getTheme().res.defaultTypeFaceR.getStringOutline(&pl, "train", 200)
        painter.translateTransform(140, 280)
        painter.drawPathList(&pl, Pen.createSolid(Argb.Red, 2))

        visit path: pl.paths
        {
            path.flatten()
            path.polygon.normalizeDist(10)
            visit &el: path.polygon.points
            {
                painter.fillCircle(el.x, el.y, 2, Argb.White)
            }
        }

        wnd.invalidate()
    }

    return false
}

#run
{
    Application.runSurface(100, 100, 800, 512, title: "Train", hook: &onEvent)
}