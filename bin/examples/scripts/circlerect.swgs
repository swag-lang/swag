// https://youtu.be/olM7o_oYML0

#dependencies
{
    #import "core" location="swag@std"
}

using Core

struct Circle
{
    radius: f64
}

struct Rectangle
{
    width, height: f64
}

interface IShape
{
    area:       func(self)->f64
    perimeter:  func(self)->f64
}

impl IShape for Circle
{
    mtd area()      => Math.ConstF64.Pi * Math.pow(radius, 2)
    mtd perimeter() => Math.ConstF64.Pi * radius * 2
}

impl IShape for Rectangle
{
    mtd area()      => width * height
    mtd perimeter() => 2 * (width + height)
}

func area_per_perimeter(shape: IShape)->f64
{
    Console.print(@kindof(shape), "\n")
    Console.print(@kindof(shape).sizeof, "\n")
    Console.print(@sizeof(shape), "\n")
    return shape.area() / shape.perimeter()
}

#run
{
    c1 := Circle{radius: 1}
    c2 := Circle{radius: 2.5}
    r1 := Rectangle{width: 3, height: 3}
    r2 := Rectangle{width: 4, height: 6}

    Console.printf("%: % %\n", c1, c1.IShape.area(), c1.IShape.perimeter())
    Console.printf("%\n", c1.area_per_perimeter())
    Console.printf("%\n", r1.area_per_perimeter())
    Console.print("-- vec --\n")

    var circles: Array'Circle = @[c1, c2]
    var shapes:  Array'IShape = @[c1, c2, r1, r2]

    a := shapes[0]
    visit shape: shapes
        Console.printf("%\n", shape.area_per_perimeter())
}