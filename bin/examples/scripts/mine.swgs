#dependencies
{
    #import "gui" location="swag@std"
}

using Core, Gui, Pixel
const GridSize = 24
const CellSize = 30'f32
const FillRate = 1

struct Cell
{
    mine:   bool
    show:   bool
    mark:   bool
    score:  s32
}

var g_Grid:     [GridSize, GridSize] Cell
var g_FontCell: *Font
var g_Lost:     bool
var g_Win:      bool
var g_NumMines: s32
var g_NumMarks: s32

func fillGrid()
{
    var rng: Random.DefaultRng
    rng.seedNow()

    // Put a mine at random
    visit &g: g_Grid
    {
        @init(g)
        if rng.nextU32(0, 100) < FillRate
        {
            g_NumMines += 1
            g[0].mine = true
        }
    }

    // Count neighbours for each cell
    loop i: GridSize
    {
        loop j: GridSize
        {
            loop ii: -1..1
            {
                loop jj: -1..1
                {
                    ti := i + ii
                    tj := j + jj
                    if ti < 0 or ti >= GridSize or tj < 0 or tj >= GridSize
                        continue
                    if g_Grid[ti, tj].mine
                        g_Grid[i, j].score += 1
                }
            }
        }
    }
}

func floodFill(x, y: s32)
{
    var arr: Array'{x: s32, y: s32}
    arr.add(@{x, y})

    while arr.count
    {
        pt  := arr.popBack()
        idx := pt.x + (pt.y * GridSize)

        g_Grid[pt.x, pt.y].show = true
        if g_Grid[pt.x, pt.y].score
            continue

        loop ii: -1..1
        {
            loop jj: -1..1
            {
                ti := pt.x + ii
                tj := pt.y + jj
                if ti < 0 or ti >= GridSize or tj < 0 or tj >= GridSize
                    continue
                if ii and jj
                    continue
                if g_Grid[ti, tj].show
                    continue
                idx = ti + (tj * GridSize)
                arr.add(@{ti, tj})
            }
        }
    }
}

func setup()
{
    g_Lost, g_Win = false
    g_NumMines, g_NumMarks = 0
    fillGrid()
}

func onEvent(wnd: *Wnd, evt: *Event)->bool
{
    switch evt.kind
    {
    case Create:
        fillGrid()
        g_FontCell = wnd.getTheme().createDefaultFont(20)
        btn := PushButton.create(wnd, "Again!", @{20, 10 + (GridSize + 2) * CellSize})
        btn.sigPressed += @|wnd|(btn) { setup(); wnd.invalidate(); }

    case MousePressed:
        mouseEvt := cast(*MouseEvent) evt
        pos := wnd.surfaceToLocal(mouseEvt.surfacePos)
        x := cast(s32) (pos.x / CellSize)
        y := cast(s32) (pos.y / CellSize)
        x, y -= 1
        if x < 0 or x >= GridSize or y < 0 or y >= GridSize
            break
        if g_Win or g_Lost or g_Grid[x, y].show
            break

        if mouseEvt.button == .Left
        {
            if g_Grid[x, y].mine
                g_Lost = true
            else
                floodFill(x, y)
        }
        elif mouseEvt.button == .Right
        {
            g_Grid[x, y].mark = !g_Grid[x, y].mark
            g_NumMarks += g_Grid[x, y].mark ? 1 : -1
            g_Win = g_NumMarks == g_NumMines
        }

        wnd.invalidate()
        return true

    case Paint:
        paintEvt := cast(*PaintEvent) evt
        painter  := paintEvt.bc.painter

        bk := Math.Rectangle{0, 0, (GridSize + 2) * CellSize, (GridSize + 2) * CellSize}
        painter.fillRect(bk, Argb.White)

        // Paint grid
        loop i: GridSize
        {
            x := CellSize + (i * CellSize)
            w := CellSize * GridSize
            painter.drawRect(CellSize, x, w, CellSize, Argb.Black)
            painter.drawRect(x, CellSize, CellSize, w, Argb.Black)
        }

        // Paint content
        painter.setParams(.Antialiased)
        font := wnd.getTheme().res.fontDefault.regular
        loop i: GridSize
        {
            loop j: GridSize
            {
                x    := CellSize + (i * CellSize)
                y    := CellSize + (j * CellSize)
                rect := Math.Rectangle{x, y, CellSize, CellSize}

                if !g_Grid[i, j].show and !g_Lost and !g_Win
                {
                    rect.inflate(-2)
                    painter.fillRect(rect, g_Grid[i, j].mark ? Argb.DarkBlue : Argb.DarkGray)
                }
                elif g_Grid[i, j].mine
                {
                    color := g_Win ? Argb.Green : Argb.Red
                    painter.fillCircle(x + CellSize * 0.5, y + CellSize * 0.5, CellSize * 0.4, color)
                }
                elif g_Grid[i, j].score
                {
                    str  := Format.toString("%", g_Grid[i, j].score)

                    var rs:  RichString
                    var rsf: RichStringFormat
                    rs.set(str)
                    rsf.font.regular = g_FontCell
                    rsf.horzAlignment = .Center
                    rsf.vertAlignment = .Center
                    rsf.palette[0] = Argb.Black
                    painter.drawRichString(rect, &rs, rsf)
                }
            }
        }
    }

    return false
}

#run
{
    var app: Application
    try app.runSurface(100, 100, 1024, 1024, title: "Minesweeper", hook: &onEvent)
}
