// Swag script file
#dependencies
{
    // Here you can add your external dependencies
    #import "gui" location="swag@std"
}

using Core, Gui, Pixel

const CARD_WIDTH         = 428
const CARD_HEIGHT        = 594
const CARD_ROUND         = cast(u32) (CARD_WIDTH / 54)
const BORDER_SIZE        = cast(f32) (CARD_WIDTH / 18)
const BADGE_OFFSET       = BORDER_SIZE * 0.5
const BADGE_SIZE         = cast(f32) (CARD_WIDTH / 5)
const BADGE_BORDER       = BORDER_SIZE / 4
const PEPPER_SIZE        = BADGE_SIZE / 2
const TEXT_MARGIN        = BORDER_SIZE * 0.5
const TEXT_PADDING       = BORDER_SIZE * 0.5
const TEXT_FONT_SIZE     = cast(u32) (CARD_WIDTH / 18)
const TEXT_FONT2_SIZE    = cast(u32) (TEXT_FONT_SIZE * 0.9)
const TEXT_HEIGHT        = cast(u32) (CARD_HEIGHT / 2.5)
const TITLE_FONT_SIZE    = cast(u32) (CARD_WIDTH / 13)
const TITLE_HEIGHT       = cast(u32) (CARD_HEIGHT / 6)
const TITLE_OFFSET_Y     = cast(f32) (TITLE_HEIGHT / 5)
const SUBTITLE_HEIGHT    = cast(u32) (TITLE_HEIGHT / 5)
const SUBTITLE_FONT_SIZE = SUBTITLE_HEIGHT - 4
const FONT_SIZE_ID       = cast(u32) (CARD_WIDTH / 16)
const MARGIN_BOTTOM      = cast(f32) (CARD_WIDTH / 17)
const LOGO_WIDTH         = cast(f32) (CARD_WIDTH / 4)
const LOGO_HEIGHT        = MARGIN_BOTTOM

var g_InitDone = false
var g_IconM, g_IconF, g_Pepper: Texture
var g_BackText:  Texture
var g_BackTitle: [5] Texture
var g_Logo:      Texture
var g_TextSep:   Texture

var g_Files: Array'ImageInfo
var g_File:  ImageInfo
var g_Id:    u32 = 1

var g_TTRegular: *TypeFace
var g_TTBold:    *TypeFace
var g_TTItalic:  *TypeFace

var g_TitleFont:    *Font
var g_SubTitleFont: *Font
var g_TextFont:     FontFamily
var g_TextFont2:    FontFamily

struct ImageInfo
{
    image:         String
    badge:         String
    title:         String
    subTitles:     Array'string
    text:          String
    text2:         String
    rank:          s32
}

func loadRes(app: *Application)
{
    var dataPath: String = Path.getDirectoryName(#location.fileName)
    dataPath = Path.combine(dataPath, "datas", "cards", "res")

    var img = assume Image.load(Path.combine(dataPath, "m.png"))
    img.resize(cast() BADGE_SIZE, cast() BADGE_SIZE, .Bicubic)
    g_IconM = app.renderer.addImage(img)

    img = assume Image.load(Path.combine(dataPath, "f.png"))
    img.resize(cast() BADGE_SIZE, cast() BADGE_SIZE, .Bicubic)
    g_IconF = app.renderer.addImage(img)

    img = assume Image.load(Path.combine(dataPath, "pepper.png"))
    img.resize(cast() PEPPER_SIZE, cast() PEPPER_SIZE, .Bicubic)
    g_Pepper = app.renderer.addImage(img)

    g_BackText = app.renderer.addImage(assume Image.load(Path.combine(dataPath, "back1.png")))

    img = assume Image.load(Path.combine(dataPath, "logo.png"))
    img.resize(cast() LOGO_WIDTH, cast() LOGO_HEIGHT, .Bicubic)
    g_Logo = app.renderer.addImage(img)

    img = assume Image.load(Path.combine(dataPath, "sep.png"))
    img.resize(cast() CARD_WIDTH, cast(s32) TEXT_FONT_SIZE, .Bicubic)
    g_TextSep = app.renderer.addImage(img)

    g_TTRegular = assume TypeFace.load(Path.combine(dataPath, "regular.ttf"))
    g_TTBold    = assume TypeFace.load(Path.combine(dataPath, "bold.ttf"))
    g_TTItalic  = assume TypeFace.load(Path.combine(dataPath, "italic.ttf"))

    g_TitleFont = Font.create(g_TTBold, TITLE_FONT_SIZE)

    g_TextFont.regular    = Font.create(g_TTRegular, TEXT_FONT_SIZE)
    g_TextFont.bold       = Font.create(g_TTBold, TEXT_FONT_SIZE)
    g_TextFont.italic     = Font.create(g_TTItalic, TEXT_FONT_SIZE)
    g_TextFont.boldItalic = Font.create(g_TTItalic, TEXT_FONT_SIZE, forceBold: true)

    g_TextFont2.regular    = Font.create(g_TTRegular, TEXT_FONT2_SIZE)
    g_TextFont2.bold       = Font.create(g_TTBold, TEXT_FONT2_SIZE)
    g_TextFont2.italic     = Font.create(g_TTItalic, TEXT_FONT2_SIZE)
    g_TextFont2.boldItalic = Font.create(g_TTItalic, TEXT_FONT2_SIZE, forceBold: true)

    g_SubTitleFont = Font.create(g_TTItalic, SUBTITLE_FONT_SIZE)

    img = assume Image.load(Path.combine(dataPath, "backA.png"))
    img.resize(cast() CARD_WIDTH, cast() TITLE_HEIGHT, .Bicubic)
    g_BackTitle[0] = app.renderer.addImage(img)
    img            = assume Image.load(Path.combine(dataPath, "backB.png"))
    img.resize(cast() CARD_WIDTH, cast() TITLE_HEIGHT, .Bicubic)
    g_BackTitle[1] = app.renderer.addImage(img)
    img            = assume Image.load(Path.combine(dataPath, "backC.png"))
    img.resize(cast() CARD_WIDTH, cast() TITLE_HEIGHT, .Bicubic)
    g_BackTitle[2] = app.renderer.addImage(img)
    img            = assume Image.load(Path.combine(dataPath, "backD.png"))
    img.resize(cast() CARD_WIDTH, cast() TITLE_HEIGHT, .Bicubic)
    g_BackTitle[3] = app.renderer.addImage(img)
    img            = assume Image.load(Path.combine(dataPath, "backE.png"))
    img.resize(cast() CARD_WIDTH, cast() TITLE_HEIGHT, .Bicubic)
    g_BackTitle[4] = app.renderer.addImage(img)
}

func paintBadge(dc: *Painter, x, y: f32, m: bool)
{
    var texture: Texture
    var color:   Color

    if m
    {
        texture = g_IconM
        color   = Argb.CornflowerBlue
    }
    else
    {
        texture = g_IconF
        color   = Argb.Pink
    }

    var rectSolo = Math.Rectangle{x, y, BADGE_SIZE, BADGE_SIZE}

    dc.fillCircle(rectSolo.horzCenter(), rectSolo.vertCenter(), BADGE_SIZE * 0.5, color)
    var rectIcon = rectSolo
    rectIcon.inflate(-10)
    dc.drawTexture(rectIcon, texture)
    dc.drawCircle(rectSolo.horzCenter(), rectSolo.vertCenter(), BADGE_SIZE * 0.5, Argb.Black, BADGE_BORDER)
}

func paintOne(app: *Application, dc: *Painter, x, y: u32, fi: ImageInfo)
{
    if !g_InitDone
    {
        loadRes(app)
        g_InitDone = true
    }

    var rect = Math.Rectangle{x, y, CARD_WIDTH, CARD_HEIGHT}

    {
        var rectBorder = rect
        dc.fillRoundRect(rectBorder, CARD_ROUND * 2.0, CARD_ROUND * 2.0, Argb.Black)
    }

    {
        var rectOutside = rect
        dc.drawRoundRect(rectOutside, CARD_ROUND * 2.5, CARD_ROUND * 2.5, Argb.White, 3)
    }

    // Image
    /////////////////////////////////

    {
        var img = assume Image.load(fi.image)

        var rectImage = rect
        rectImage.inflate(-BORDER_SIZE)
        rectImage.setBottom(rect.bottom() - TEXT_HEIGHT - MARGIN_BOTTOM)

        if img.width > img.height
        {
            let ratio     = img.width / cast(f32) img.height
            let newHeight = rectImage.height
            img.resize(cast(s32) (newHeight * ratio), cast(s32) newHeight)
        }
        else
        {
            let ratio    = img.height / cast(f32) img.width
            let newWidth = rectImage.width
            img.resize(cast(s32) newWidth, cast(s32) (newWidth * ratio))
        }

        var cropRect: Math.Rectangle
        cropRect.x      = (img.width / 2) - rectImage.width / 2
        cropRect.y      = (img.height / 2) - rectImage.height
        cropRect.width  = rectImage.width
        cropRect.height = rectImage.height
        img.crop(cropRect)

        var texture = app.renderer.addImage(img)
        dc.drawTexture(rectImage, texture)
    }

    // Badge
    /////////////////////////////////

    {
        if @countof(fi.badge) >= 1:
            paintBadge(dc, rect.x + BADGE_OFFSET, rect.y + BADGE_OFFSET, fi.badge[0] == `h`)
        if @countof(fi.badge) >= 2:
            paintBadge(dc, rect.x + BADGE_OFFSET + BADGE_SIZE + BADGE_BORDER * 2, rect.y + BADGE_OFFSET, fi.badge[1] == `h`)
    }

    // Text
    /////////////////////////////////

    {
        var rectText = rect
        rectText.inflate(-BORDER_SIZE)
        rectText.y      = rectText.bottom() - TEXT_HEIGHT
        rectText.height = TEXT_HEIGHT - MARGIN_BOTTOM
        dc.drawTexture(rectText, g_BackText)

        rectText.moveTop(TITLE_HEIGHT * 0.5)
        rectText.moveLeft(TEXT_PADDING)
        rectText.moveRight(-TEXT_PADDING)

        var rs:  RichString
        var rsf: RichStringFormat
        rsf.font          = g_TextFont
        rsf.horzAlignment = .Left
        rsf.vertAlignment = .Center
        rsf.flags |= .WordWrap
        rsf.palette[0] = Argb.Black
        rs.set(fi.text)
        if !fi.text2.isEmpty():
            rectText.height *= 0.5
        dc.drawRichString(rectText, &rs, rsf)

        if !fi.text2.isEmpty()
        {
            rsf.font = g_TextFont2
            rectText.y += rectText.height
            rs.set(fi.text2)
            dc.drawRichString(rectText, &rs, rsf)

            var rectSep = rectText
            rectSep.y -= (TEXT_FONT_SIZE * 0.5)
            rectSep.height = TEXT_FONT_SIZE
            dc.drawTexture(rectSep, g_TextSep)
        }
    }

    // Title
    /////////////////////////////////

    {
        var rect1 = rect
        rect1.inflate(-BORDER_SIZE)
        rect1.y      = rect1.bottom() - TEXT_HEIGHT - (TITLE_HEIGHT / 2)
        rect1.height = TITLE_HEIGHT
        dc.drawTexture(rect1, g_BackTitle[fi.rank])

        var rectSub = rect1
        rectSub.y      = rectSub.bottom() - SUBTITLE_HEIGHT
        rectSub.height = SUBTITLE_HEIGHT
        dc.fillRect(rectSub, Color.fromArgb(100, 0, 0, 0))

        var rs: RichString
        rs.set(fi.title)

        var rsf: RichStringFormat
        rsf.font.regular  = g_TitleFont
        rsf.horzAlignment = .Left
        rsf.vertAlignment = .Center
        rsf.palette[0]    = Argb.White
        rect1.x += TEXT_PADDING
        rect1.height -= SUBTITLE_HEIGHT
        rect1.moveTop(TITLE_OFFSET_Y)

        dc.drawRichString(rect1, &rs, rsf)

        // Sub title
        var str: String
        foreach c in fi.subTitles
        {
            if #index:
                str += " \u2022 "
            str += c
        }

        rsf.font.regular  = g_SubTitleFont
        rsf.horzAlignment = .Center
        rsf.vertAlignment = .Center
        rs.set(str)
        dc.drawRichString(rectSub, &rs, rsf)
    }

    {
        var rectPepper = rect
        rectPepper.x = rect.right() - PEPPER_SIZE - (BORDER_SIZE * 1.5)
        rectPepper.y = rect.bottom() - TEXT_HEIGHT - (TITLE_HEIGHT / 2)
        rectPepper.width, rectPepper.height = PEPPER_SIZE

        for i in fi.rank
        {
            dc.drawTexture(rectPepper, g_Pepper)
            rectPepper.x -= PEPPER_SIZE * 0.5
        }
    }

    // Margin bottom
    /////////////////////////////////

    {
        var rect1 = rect
        rect1.y      = rect1.bottom() - MARGIN_BOTTOM - BORDER_SIZE
        rect1.height = MARGIN_BOTTOM + BORDER_SIZE
        rect1.width -= BORDER_SIZE

        var rs: RichString
        var num = Format.toString("%", g_Id)
        rs.set(num)

        var rsf: RichStringFormat
        rsf.font.regular  = app.theme.createDefaultFont(FONT_SIZE_ID)
        rsf.horzAlignment = .Right
        rsf.vertAlignment = .Center
        rsf.palette[0]    = Argb.White
        dc.drawRichString(rect1, &rs, rsf)
    }

    {
        var rect1 = rect
        rect1.y      = rect1.bottom() - MARGIN_BOTTOM - BORDER_SIZE
        rect1.height = MARGIN_BOTTOM + BORDER_SIZE
        rect1.y      = rect1.vertCenter() - (LOGO_HEIGHT / 2)

        rect1.x      = BORDER_SIZE
        rect1.width  = LOGO_WIDTH
        rect1.height = LOGO_HEIGHT

        dc.drawTexture(rect1, g_Logo)
    }
}

#main
{
    var dataPath: String = Path.getDirectoryName(#location.fileName)
    dataPath = Path.combine(dataPath, "datas", "cards")

    var pathImg = Path.combine(dataPath, "img")
    var lines   = assume File.readAllLines(Path.combine(dataPath, "cards.txt"))
    foreach l in lines
    {
        var tokens  = Tokenize.split(l, `;`'rune, removeEmpty: false)
        var fi:     ImageInfo
        var folders = Tokenize.split(tokens[0], `/`'rune)

        fi.title = folders.back()
        fi.image = Path.combine(pathImg, tokens[1])
        fi.badge = tokens[2]
        fi.rank  = assume StrConv.toS32(tokens[3])
        fi.text  = tokens[4]
        fi.text2 = tokens[5]
        folders.removeBack()
        fi.subTitles = folders
        g_Files.add(fi)
    }

    var page = Image.create(CARD_WIDTH * 3, CARD_HEIGHT * 3, .BGRA8)
    page.fill(Argb.White)
    var x, y = 0
    var pageNum = 1

    #[Swag.Mixin]
    func flushPage()
    {
        var fileN = Format.toString("%.jpg", pageNum)
        let pOut  = Path.combine(dataPath, "out")
        if !Directory.exists(pOut):
            assume Directory.create(pOut)
        assume page.save(Path.combine(dataPath, "out", cast(string) fileN))
    }

    var pt: PaintImage
    pt.init(CARD_WIDTH, CARD_HEIGHT)

    foreach f in g_Files
    {
        g_File = f

        var img = pt.draw(func(app, dc)
        {
            dc.setColorMaskFull()
            dc.clear(Argb.White)
            paintOne(app, dc, 0, 0, g_File)
        })

        page.mix(img, x, y)

        x += CARD_WIDTH
        if x == page.width
        {
            x = 0
            y += CARD_HEIGHT
            if y == page.height
            {
                flushPage()
                y = 0
                pageNum += 1
                page.fill(Argb.White)
            }
        }

        g_Id += 1

        if Env.hasArg("swag.test") and g_Id >= 1:
            break
    }

    if x or y:
        flushPage()
}
