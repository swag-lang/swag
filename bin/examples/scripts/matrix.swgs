#dependencies
{
    #import "gui" location="swag@std"
}

using Core, Gui, Pixel

const FirstRune    = 33
const LastRune     = 600
const FontSize     = 15'u32
const MinTrailSize = 10
const MaxTrailSize = 50
const MaxColumns   = 80

struct C
{
    y:          f32
    length:     s32
    speed:      f32
    c:          [MaxTrailSize] rune
    lastYI:     s32
}

var g_RD:   [MaxColumns] C
var g_Font: *Font
var g_Rng:  Random.Rng

func initC(i: s32)
{
    g_RD[i].length = g_Rng.nextS32(MinTrailSize, MaxTrailSize - 1)
    for j in g_RD[i].length:
        g_RD[i].c[j] = cast(rune) g_Rng.nextS32(FirstRune, LastRune)
    g_RD[i].speed = g_Rng.nextF32(400, 800)
    g_RD[i].y     = 0
}

func onEvent(wnd: *Wnd, evt: IEvent)->bool
{
    switch evt
    {
    case CreateEvent:
        g_Font = wnd.getTheme().createDefaultFont(FontSize)
        for i in MaxColumns:
            initC(i)

    case let paintEvt as PaintEvent:
        let painter = paintEvt.bc.painter
        var rect    = wnd.getClientRect()

        painter.fillRect(rect, Argb.Black)

        var str: String
        for i in MaxColumns
        {
            let x = cast(f32) i * FontSize
            for j in g_RD[i].length
            {
                // Once in a while, change the rune in the trail
                if g_Rng.nextU32(0, 300) < 2:
                    g_RD[i].c[j] = cast(rune) g_Rng.nextS32(FirstRune, LastRune)
                let c = g_RD[i].c[j]

                var y = g_RD[i].y
                y -= j * FontSize

                // No need to paint if rune is outside window
                if y > rect.bottom():
                    continue
                if y < rect.y - FontSize:
                    break

                // If the move is equivalent to one fontsize, then insert a new rune
                // at the start of the trail
                y /= FontSize
                let yi = cast(s32) y
                if j == 0 and yi != g_RD[i].lastYI
                {
                    g_RD[i].lastYI = yi
                    Memory.copyOver(&g_RD[i].c[1], &g_RD[i].c[0], (cast(u64) g_RD[i].length - 1) * #sizeof(rune))
                    g_RD[i].c[0] = cast(rune) g_Rng.nextS32(FirstRune, LastRune)
                }

                // First rune is white, the rest blends to black
                var color: Color = undefined
                if j == 0:
                    color = Color.getBlend(Argb.Green, Argb.White, 0.5)
                else:
                    color = Color.getBlend(Argb.Green, Argb.Black, j / cast(f32) g_RD[i].length)

                y = yi * FontSize

                str.clear()
                str += c
                painter.drawString(x, y, str, g_Font, color)
            }

            g_RD[i].y += g_RD[i].speed * wnd.getApp().getDt()

            // If the full trail is outside the window, randomize a new one
            if g_RD[i].y - (g_RD[i].length * FontSize) > rect.bottom() + FontSize:
                initC(i)
        }

        wnd.invalidate()
    }

    return false
}

#main
{
    func test(app: *Application) = if Env.hasArg("swag.test"):
        app.maxRunFrame = 100
    Application.runSurface(100, 100, 1024, 800, title: "Matrix", hook: &onEvent, init: &test)
}
