// https://youtu.be/4hA7G3gup-4

#dependencies
{
    #import "gui" location="swag@std"
}

using Core, Gui, Pixel, Math

#[Swag.Mixin, Swag.Discardable]
func createBtn(str: string, x, y: s32)->*PushButton
{
    {
        btn := PushButton.create(layout, str)
        btn.sigPressed += func(btn) {
            @print("pressed")
        }
        layout.setColRowChild(btn, x, y)
        return btn
    }
}

func onEvent(wnd: *Wnd, evt: *Event)->bool
{
    switch evt.kind
    {
    case Create:
        with layout := GridLayoutCtrl.create(wnd, 4, 5)
        {
            .dockStyle = .Center
            .margin = 10

            .setColRowChild(EditBox.create(layout, ""), 0, 0, 4)

            createBtn("7", 0, 1)
            createBtn("8", 1, 1)
            createBtn("9", 2, 1)
            createBtn("4", 0, 2)
            createBtn("5", 1, 2)
            createBtn("6", 2, 2)
            createBtn("1", 0, 3)
            createBtn("2", 1, 3)
            createBtn("3", 2, 3)
            createBtn("0", 1, 4)

            createBtn("*", 3, 1)
            createBtn("-", 3, 2)
            createBtn("+", 3, 3)
            createBtn("=", 3, 4)

            .computeLayout()
        }
    }

    return false
}

#run
{
    func test(app: *Application) = if Env.hasArg("swag.test") app.maxRunFrame = 100
    Application.runSurface(100, 100, 800, 600, title: "Calc", hook: &onEvent, init: &test)
}