// This Swag script has been done thanks to "The Coding Train" youtube channel.
// https://www.youtube.com/watch?v=uWzPe_S-RVE&list=PLRqwX-V7Uu6ZiZxtDDRCi6uhfTH4FilpH

#dependencies
{
    #import "gui" location="swag@std"
}

using Core, Gui, Pixel, Core.Math

var r1   = 125.0
var r2   = 125.0
var m1   = 10.0
var m2   = 10.0
var a1   = 0.0
var a2   = 0.0
var a1_v = 0.0
var a2_v = 0.0
var g    = 0.98
var cx, cy: f32
var friction  = 1.0
var linePath: Array'Vector2

func onEvent(wnd: *Wnd, evt: IEvent)->bool
{
    func start()
    {
        a1, a2 = ConstF32.Pi / 2
        linePath.clear()
    }

    switch evt
    {
    case CreateEvent:
        var rect = wnd.getClientRect()
        cx = rect.width / 3
        cy = 50
        start()

        let panel = StackLayoutCtrl.create(wnd, .Top, {0, 0, 360})
        panel.padding   = 10
        panel.spacing   = 5
        panel.dockStyle = .Right

        {
            let slider = SliderCtrl.create(panel, "r1")
            slider.setMinMaxU64(50, 200)
            slider.setValue(r1)
            slider.slider.sigChanged += func(slider)
            {
                r1 = slider.getValue()
            }
        }
        {
            let slider = SliderCtrl.create(panel, "r2")
            slider.setMinMaxU64(50, 200)
            slider.setValue(r2)
            slider.slider.sigChanged += func(slider)
            {
                r2 = slider.getValue()
            }
        }
        {
            let slider = SliderCtrl.create(panel, "friction")
            slider.setMinMaxU64(0, 100)
            slider.setValue(0)
            slider.slider.sigChanged += func(slider)
            {
                friction = 1 - (slider.getValue() * 0.0001)
            }
        }
        {
            let btn = PushButton.create(panel, "restart")
            btn.maxSize = 100
            btn.sigPressed += func(btn)
            {
                start()
            }
        }

    case let paintEvt as PaintEvent:
        let painter  = paintEvt.bc.painter

        var num1 = -g * (2 * m1 + m2) * sin(a1)
        var num2 = -m2 * g * sin(a1 - 2 * a2)
        var num3 = -2 * sin(a1 - a2) * m2
        var num4 = a2_v * a2_v * r2 + a1_v * a1_v * r1 * cos(a1 - a2)
        var den  = r1 * (2 * m1 + m2 - m2 * cos(2 * a1 - 2 * a2))
        let a1_a = (num1 + num2 + num3 * num4) / den

        num1 = 2 * sin(a1 - a2)
        num2 = a1_v * a1_v * r1 * (m1 + m2)
        num3 = g * (m1 + m2) * cos(a1)
        num4 = a2_v * a2_v * r2 * m2 * cos(a1 - a2)
        den  = r2 * (2 * m1 + m2 - m2 * cos(2 * a1 - 2 * a2))
        let a2_a = (num1 * (num2 + num3 + num4)) / den

        let x1 = r1 * sin(a1)
        let y1 = r1 * cos(a1)
        let x2 = x1 + r2 * sin(a2)
        let y2 = y1 + r2 * cos(a2)

        let dt = wnd.getApp().getDt() * 50

        a1_v += a1_a * dt
        a2_v += a2_a * dt
        a1 += a1_v * dt
        a2 += a2_v * dt

        a1_v *= friction
        a2_v *= friction

        painter.setParams(.Antialiased)
        painter.clear(Argb.Black)
        painter.translateTransform(cx, cy)

        // Generate trail
        linePath.add({x2, y2})
        if linePath.count > 500:
            linePath.removeAtOrdered(0)

        // Draw trail
        if linePath.count > 1
        {
            var lp: LinePath
            lp.start(linePath[0].x, linePath[0].y)
            foreach v in linePath:
                lp.curveTo(v.x, v.y)
            painter.drawPath(&lp, Argb.Red, 2)
        }

        // Pendulum
        painter.drawLine(0, 0, x1, y1, Argb.White, 2)
        painter.fillCircle(x1, y1, m1, Argb.White)
        painter.drawLine(x1, y1, x2, y2, Argb.White, 2)
        painter.fillCircle(x2, y2, m2, Argb.White)

        wnd.invalidate()
    }

    return false
}

#main
{
    func test(app: *Application) = if Env.hasArg("swag.test"):
        app.maxRunFrame = 100
    Application.runSurface(100, 100, 1024, 600, title: "Pendulum", borders: false, hook: &onEvent, init: &test)
}
