#dependencies
{
    #import("gui", location: "swag@std")
}

using Gui, Core, Pixel, Core.Math

const ElemSize  = 40
const SnakeTime = 150

var g_Snake:      Array'Vector2
var g_ApplePos:   Vector2
var g_SnakeSpeed: Vector2
var g_Rect:       Rectangle
var g_Time:       u64

func paintSnake(painter: *Painter)
{
    var scale = 0.52
    foreach p in g_Snake
    {
        let x = p.x * ElemSize
        let y = p.y * ElemSize

        painter.fillCircle(x, y, ElemSize * scale, Argb.Black)
        if @index == 0:
            painter.fillCircle(x, y, ElemSize * 0.45, Argb.Green)
        scale -= 0.025
        scale = Math.max(scale, 0.4)
    }
}

func paintApple(painter: *Painter)
{
    let x = g_ApplePos.x * ElemSize
    let y = g_ApplePos.y * ElemSize
    painter.fillCircle(x, y, ElemSize * 0.45, Argb.Red)
}

func updateCollisions()->bool
{
    var head = g_Snake.front()
    head += g_SnakeSpeed

    // Outside
    if head.x < 1 or
       head.y < 1 or
       head.x > cast(s32) (g_Rect.width / ElemSize) or
       head.y > cast(s32) (g_Rect.height / ElemSize)
    {
        startGame()
        return true
    }

    // Collision with head
    if head.x == g_ApplePos.x and head.y == g_ApplePos.y
    {
        g_Snake.insertAt(0, head)
        generateApplePos()
        return true
    }

    // Collision with tail
    foreach p in g_Snake
    {
        if head.x == p.x and p.y == head.y
        {
            startGame()
            return true
        }
    }

    return false
}

func updateSnakePosition()
{
    let curTime = Time.nowMilliseconds()
    if curTime - g_Time < SnakeTime:
        return

    g_Time = curTime

    if updateCollisions():
        return

    var newHeadPos = g_Snake[0]
    newHeadPos += g_SnakeSpeed
    g_Snake.insertAt(0, newHeadPos)
    g_Snake.removeBack()
}

func updateSpeed(wnd: *Wnd)
{
    let kb = wnd.getApp().getKeyboard()

    if kb.isKeyJustPressed(.Up)
    {
        g_SnakeSpeed.x = 0
        g_SnakeSpeed.y = -1
    }

    if kb.isKeyJustPressed(.Down)
    {
        g_SnakeSpeed.x = 0
        g_SnakeSpeed.y = 1
    }

    if kb.isKeyJustPressed(.Left)
    {
        g_SnakeSpeed.x = -1
        g_SnakeSpeed.y = 0
    }

    if kb.isKeyJustPressed(.Right)
    {
        g_SnakeSpeed.x = 1
        g_SnakeSpeed.y = 0
    }
}

func generateApplePos()
{
    // Generate an apple position that is not behind the snake tail
    var error = true
    while error
    {
        error        = false
        g_ApplePos.x = Random.shared().nextS32(1, cast(s32) (g_Rect.width / ElemSize))
        g_ApplePos.y = Random.shared().nextS32(1, cast(s32) (g_Rect.height / ElemSize))
        foreach p in g_Snake
        {
            if p.x == g_ApplePos.x and p.y == g_ApplePos.y
            {
                error = true
                break
            }
        }
    }
}

func startGame()
{
    var initPos: Vector2{g_Rect.width / (2 * ElemSize), g_Rect.height / (2 * ElemSize)}
    initPos.round()
    g_Snake.clear()
    g_Snake.add(initPos)

    g_SnakeSpeed = {0, 1}
    generateApplePos()
}

func onEvent(wnd: *Wnd, evt: IEvent)->bool
{
    switch evt
    {
    case CreateEvent:
        g_Rect = wnd.getClientRect()
        startGame()

    case PaintEvent as paintEvt:
        let painter = paintEvt.bc.painter
        g_Rect = wnd.getClientRect()

        updateSnakePosition()
        updateSpeed(wnd)

        painter.fillRect(g_Rect, Argb.White)
        paintApple(painter)
        paintSnake(painter)

        wnd.invalidate()
    }

    return false
}

#main
{
    func test(app: *Application) => if Env.hasArg("swag.test"):
        app.maxRunFrame = 100
    Application.runSurface(100, 100, 800, 512, title: "Snake", hook: &onEvent, init: &test)
}
