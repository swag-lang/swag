#dependencies
{
    #import "gui" location="swag@std"
}

using Core, Gui, Pixel

var g_Image:        Image
var g_Texture:      Texture
var g_SliderMin:    *Slider
var g_SliderMax:    *Slider

const ColorTable = @[
    0xf7df, 0xff5a, 0x07ff, 0x7ffa, 0xf7ff, 0xf7bb, 0xff38, 0xff59, 0x001f, 0x895c,
    0xa145, 0xddd0, 0x5cf4, 0x7fe0, 0xd343, 0xfbea, 0x64bd, 0xffdb, 0xd8a7, 0x07ff,
    0x0011, 0x0451, 0xbc21, 0xad55, 0x0320, 0xbdad, 0x8811, 0x5345, 0xfc60, 0x9999,
    0x8800, 0xecaf, 0x8df1, 0x49f1, 0x2a69, 0x067a, 0x901a, 0xf8b2, 0x05ff, 0x6b4d,
    0x1c9f, 0xd48e, 0xb104, 0xffde, 0x2444, 0xf81f, 0xdefb, 0xffdf, 0xfea0, 0xdd24,
    0x8410, 0x0400, 0xafe5, 0xf7fe, 0xfb56, 0xcaeb, 0x4810, 0xfffe, 0xf731, 0xe73f,
    0xff9e, 0x7fe0, 0xffd9, 0xaedc, 0xf410, 0xe7ff, 0xffda, 0xd69a, 0x9772, 0xfdb8,
    0xfd0f, 0x2595, 0x867f, 0x839f, 0x7453, 0xb63b, 0xfffc, 0x07e0, 0x3666, 0xff9c,
    0xf81f, 0x8000, 0x6675, 0x0019, 0xbaba, 0x939b, 0x3d8e, 0x7b5d, 0x07d3, 0x4e99,
    0xc0b0, 0x18ce, 0xf7ff, 0xff3c, 0xff36, 0xfef5, 0x0010, 0xffbc, 0x8400, 0x6c64,
    0xfd20, 0xfa20, 0xdb9a, 0xef55, 0x9fd3, 0xaf7d, 0xdb92, 0xff7a, 0xfed7, 0xcc27,
    0xfe19, 0xdd1b, 0xb71c, 0x8010, 0xf800, 0xbc71, 0x435c, 0x8a22, 0xfc0e, 0xf52c,
    0x2c4a, 0xffbd, 0xa285, 0xc618, 0x867d, 0x6ad9, 0x7412, 0xffdf, 0x07ef, 0x4416,
    0xd5b1, 0x0410, 0xddfb, 0xfb08, 0x471a, 0xec1d, 0xd112, 0xf6f6, 0xffff, 0xf7be,
    0xffe0, 0x9e66, 0x0000
]

func compute()
{
    using Math
    g_Image.visitPixels()
    {
        minS := g_SliderMin.getValue()
        maxS := g_SliderMax.getValue()

        a := map(cast(f32) x, 0, cast(f32) g_Image.width, minS, maxS)
        b := map(cast(f32) y, 0, cast(f32) g_Image.height, minS, maxS)

        ca := a
        cb := b

        n := 0
        const MaxIterations = 142
        while n < MaxIterations
        {
            aa := a
            bb := b

            a = aa * aa - bb * bb
            b = 2 * aa * bb
            a += ca
            b += cb
            n += 1
            if a * a + b * b > 4
                break
        }

        color := ColorTable[n]
        re := (color & 0x1F) << 3
        gr := ((color >>,safe 5) & 0x3F) <<,safe 2
        bl := ((color >>,safe 11) & 0x1F) <<,safe 3

        pix[0] = acast re
        pix[1] = acast gr
        pix[2] = acast bl
    }
}

func onEvent(wnd: *Wnd, evt: *Event)->bool
{
    w := cast(s32) wnd.position.width
    h := cast(s32) wnd.position.height

    switch evt.kind
    {
    case Create:
        g_SliderMin = Slider.create(wnd, @{0, 0, 200})
        g_SliderMin.setMinMax(-2.5, 0, 0.01)
        g_SliderMin.setValue(-2.5)
        g_SliderMin.sigChanged += @|wnd|(s)
        {
            compute()
            wnd.invalidate()
        }

        g_SliderMax = Slider.create(wnd, @{0, 20, 200})
        g_SliderMax.setMinMax(0, 2.5, 0.01)
        g_SliderMax.setValue(2.5)
        g_SliderMax.sigChanged += @|wnd|(s)
        {
            compute()
            wnd.invalidate()
        }

        g_Image   = Image.create(256, 256, .BGR8)
        g_Texture = wnd.getApp().renderer.addImage(g_Image)
        compute()

    case Paint:
        paintEvt := cast(*PaintEvent) evt
        painter  := paintEvt.bc.painter
        renderer := paintEvt.bc.renderer
        renderer.updateTexture(g_Texture, g_Image.pixels)
        painter.drawTexture(0, 0, cast(f32) w, cast(f32) h, g_Texture)
    }

    return false
}

#run
{
    var app: Application
    try Jobs.setNumWorkers()
    try app.runSurface(100, 100, 512, 512, title: "Mandelbrot", hook: &onEvent)
}