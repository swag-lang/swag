// https://youtu.be/6z7GQewK-Ks?list=PLRqwX-V7Uu6ZiZxtDDRCi6uhfTH4FilpH

#dependencies
{
    #import "gui" location="swag@std"
}

using Core, Gui, Pixel

var g_Image:    Image
var g_Texture:  Texture
var g_Slider:   *Slider

func compute()
{
    using Math

    data := {minS = g_Slider.getValueLeft(), maxS = g_Slider.getValueRight()}
    g_Image.visitPixels(&data)
    {
        params := cast(*@decltype(data)) userData
        minS := params.minS
        maxS := params.maxS

        a := map(cast(f32) x, 0, cast(f32) g_Image.width, minS, maxS)
        b := map(cast(f32) y, 0, cast(f32) g_Image.height, minS, maxS)

        ca := a
        cb := b

        n := 0
        const MaxIterations = 100
        while n < MaxIterations
        {
            aa := a
            bb := b

            a = aa * aa - bb * bb
            b = 2 * aa * bb
            a += ca
            b += cb
            n += 1
            if a * a + b * b > 4
                break
        }

        light := cast(u8) Math.map(cast(f32) n, 0, cast(f32) MaxIterations, 0, 255)
        pix[0] = light
        pix[1] = light
        pix[2] = light
    }
}

func onEvent(wnd: *Wnd, evt: *Event)->bool
{
    w := cast(s32) wnd.position.width
    h := cast(s32) wnd.position.height

    switch evt.kind
    {
    case Create:
        g_Slider = Slider.create(wnd, {0, 0, 200}, range = true)
        g_Slider.setMinMax(-2.5, 2.5)
        g_Slider.setRangeValues(-2.5, 2.5)
        g_Slider.sigChanged += closure|wnd|(s)
        {
            compute()
            wnd.invalidate()
        }

        g_Image   = Image.create(200, 200, .BGR8)
        g_Texture = wnd.getApp().renderer.addImage(g_Image)

        compute()
        return true

    case Paint:
        paintEvt := cast(*PaintEvent) evt
        painter  := paintEvt.bc.painter
        renderer := paintEvt.bc.renderer
        renderer.updateTexture(g_Texture, g_Image.pixels.buffer)
        painter.drawTexture(0, 0, cast(f32) w, cast(f32) h, g_Texture)
        return true
    }

    return false
}

#run
{
    try Jobs.setNumWorkers()
    func test(app: *Application) = if Env.hasArg("swag.test") app.maxRunFrame = 100
    Application.runSurface(100, 100, 512, 512, title = "Mandelbrot", hook = &onEvent, init = &test)
}