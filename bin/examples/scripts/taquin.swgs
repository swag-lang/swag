#dependencies
{
    #import "gui" location="swag@std"
}

using Core, Pixel, Gui

const NumElems  = 3
const SpeedMove = 5

var g_Image:   Image
var g_Texture: Texture
var g_HotX, g_HotY: s32
var g_Moving: bool

struct Elem
{
    x, y:       f32
    empty:      bool
    moveX:      s32
    moveY:      s32
    moveDt:     f32
    angle:      f32 = 1
}

var g_Matrix: [NumElems, NumElems] Elem
var g_Rect:   Math.Rectangle

func tilePos(i, j: s32)->Math.Rectangle
{
    let displayW = g_Rect.width / NumElems
    let displayH = g_Rect.height / NumElems
    let xd       = i * displayW
    let yd       = j * displayH
    return Math.Rectangle{xd, yd, displayW, displayH}
}

func onEvent(wnd: *Wnd, evt: *Event)->bool
{
    switch evt.kind
    {
    case Resize:
        g_Rect = wnd.getClientRect()

    case Create:
        var dataPath: String = Path.getDirectoryName(#location.fileName)
        dataPath = Path.combine(dataPath, "datas")
        dataPath = Path.combine(dataPath, "taquin")

        g_Image   = assume Image.load(Path.combine(dataPath, "joconde.jpg"))
        g_Texture = wnd.getApp().getRenderer().addImage(g_Image)
        g_Rect    = wnd.getClientRect()

        // List of tiles to pick from
        var toAdd: Array'Elem
        for i in NumElems
        {
            for j in NumElems
            {
                toAdd.add({i, j})
            }
        }

        // Fill with random tiles
        for i in NumElems
        {
            for j in NumElems
            {
                if toAdd.count == 1:
                    break
                let idx = Random.shared().nextU64(0, toAdd.count)
                g_Matrix[i, j]       = toAdd[idx]
                g_Matrix[i, j].angle = Random.shared().nextF32(-0.01, 0.01)
                toAdd.removeAt(idx)
            }
        }

        // Set an empty tile
        let i = Random.shared().nextU64(0, cast(u64) NumElems - 1)
        let j = Random.shared().nextU64(0, cast(u64) NumElems - 1)
        g_Matrix[i, j].empty = true

    case MouseMove:
        let mouseEvt = cast(*MouseEvent) evt
        let pt       = wnd.surfaceToLocal(mouseEvt.surfacePos)

        g_HotX, g_HotY = -1
        #scope Big
        for i in NumElems
        {
            for j in NumElems
            {
                let cur = &g_Matrix[i, j]
                if cur.empty:
                    continue
                let rect = tilePos(i, j)
                if rect.contains(pt)
                {
                    g_HotX = i
                    g_HotY = j
                    break in Big
                }
            }
        }

    case MousePressed:
        if g_Moving:
            break
        if g_HotX == -1:
            break

        let i = g_HotX
        let j = g_HotY

        let cur = &g_Matrix[i, j]
        if i and g_Matrix[i - 1, j].empty:
            cur.moveX = -1
        if j and g_Matrix[i, j - 1].empty:
            cur.moveY = -1

        if i != NumElems - 1 and g_Matrix[i + 1, j].empty:
            cur.moveX = 1
        if j != NumElems - 1 and g_Matrix[i, j + 1].empty:
            cur.moveY = 1

        if cur.moveX or cur.moveY
        {
            g_Moving   = true
            cur.moveDt = 0
        }

    case Paint:
        let paintEvt = cast(*PaintEvent) evt
        let painter  = paintEvt.bc.painter
        let dt       = wnd.getApp().getDt()

        painter.setAntialiased(true)
        wnd.invalidate()

        for i in NumElems
        {
            for j in NumElems
            {
                let cur = &g_Matrix[i, j]
                if cur.empty:
                    continue

                // Dest position
                var rd = tilePos(i, j)

                // Move tile left <=> right
                if cur.moveX
                {
                    let rdd = tilePos(i + cur.moveX, j)
                    rd.x = Math.lerp(rd.x, rdd.x, cur.moveDt)
                    cur.moveDt += SpeedMove * dt
                    cur.moveDt = Math.min(cur.moveDt, 1.0)
                    if Math.isEqualEpsilon(rd.x, rdd.x)
                    {
                        g_Matrix[i + cur.moveX, j]       = dref cur
                        g_Matrix[i + cur.moveX, j].moveX = 0
                        cur.empty                        = true
                        g_Moving                         = false
                    }
                }

                // Move tile up <=> down
                if cur.moveY
                {
                    let rdd = tilePos(i, j + cur.moveY)
                    rd.y = Math.lerp(rd.y, rdd.y, cur.moveDt)
                    cur.moveDt += SpeedMove * dt
                    cur.moveDt = Math.min(cur.moveDt, 1.0)
                    if Math.isEqualEpsilon(rd.y, rdd.y)
                    {
                        g_Matrix[i, j + cur.moveY]       = dref cur
                        g_Matrix[i, j + cur.moveY].moveY = 0
                        cur.empty                        = true
                        g_Moving                         = false
                    }
                }

                // Sub position in the image
                let elemW = g_Image.width / NumElems
                let elemH = g_Image.height / NumElems
                let xs    = cur.x * elemW
                let ys    = cur.y * elemH
                let rs    = Math.Rectangle{xs, ys, elemW, elemH}

                painter.pushState()
                painter.startClippingRegion()
                painter.translateTransform(rd.horzCenter(), rd.vertCenter())
                painter.rotateTransform(cur.angle)

                let destRect = Math.Rectangle{-rd.width * 0.5, -rd.height * 0.5, rd.width, rd.height}
                painter.fillRoundRect(destRect, 15, 15, Argb.White)
                painter.endClippingRegion()

                painter.drawTexture(destRect, rs, g_Texture)
                painter.drawRoundRect(destRect, 15, 15, Pen.createSolid(Argb.Black, 4))

                painter.resetClippingRegion()
                painter.popState()
            }
        }
    }

    return false
}

#main
{
    func test(app: *Application) = if Env.hasArg("swag.test"):
        app.maxRunFrame = 100
    Application.runSurface(100, 100, 600, 800, "Taquin", hook: &onEvent, init: &test)
}
