// This Swag script has been done thanks to "The Coding Train" youtube channel.
// https://www.youtube.com/watch?v=4hA7G3gup-4

#dependencies
{
    #import "gui" location="swag@std"
}

using Core, Gui, Pixel, Core.Math

const BallRadius   = 10'f32
const PaddleWidth  = 8'f32
const PaddleHeight = 50'f32

struct Ball
{
    pos:       Vector2
    speed:     Vector2
}

struct Paddle
{
    pos: Vector2
}

var g_Rng:  Random.Rng
var g_Rect: Math.Rectangle
var g_Font: *Font

var g_ScoreLeft:  s32
var g_ScoreRight: s32

var g_Ball:        Ball
var g_PaddleLeft:  Paddle
var g_PaddleRight: Paddle

func resetBall()
{
    g_Ball.pos.x = g_Rect.horzCenter()
    g_Ball.pos.y = g_Rect.vertCenter()

    let angle = g_Rng.nextF32(-ConstF32.PiBy4, ConstF32.PiBy4)
    g_Ball.speed.x = 300 * cos(angle)
    g_Ball.speed.y = 300 * sin(angle)
    if g_Rng.nextBool():
        g_Ball.speed = -g_Ball.speed
}

func updatePaddles(wnd: *Wnd)
{
    let dt = wnd.getApp().getDt()
    let kb = wnd.getApp().getKeyboard()

    if kb.isKeyPressed(.A):
        g_PaddleLeft.pos.y -= 400 * dt
    elif kb.isKeyPressed(.Q):
        g_PaddleLeft.pos.y += 400 * dt
    if kb.isKeyPressed(.P):
        g_PaddleRight.pos.y -= 400 * dt
    elif kb.isKeyPressed(.M):
        g_PaddleRight.pos.y += 400 * dt

    g_PaddleLeft.pos.y  = clamp(g_PaddleLeft.pos.y, g_Rect.y + PaddleHeight, g_Rect.bottom() - PaddleHeight)
    g_PaddleRight.pos.y = clamp(g_PaddleRight.pos.y, g_Rect.y + PaddleHeight, g_Rect.bottom() - PaddleHeight)
}

func updateBall(wnd: *Wnd)
{
    let dt = wnd.getApp().getDt()

    var rect = g_Rect
    rect.inflate(-BallRadius)

    if g_Ball.pos.y > rect.bottom() or g_Ball.pos.y < rect.y
    {
        g_Ball.speed.y *= -1
    }

    if g_Ball.pos.x > rect.right()
    {
        g_ScoreLeft += 1
        resetBall()
    }
    elif g_Ball.pos.x < rect.x
    {
        g_ScoreRight += 1
        resetBall()
    }

    if g_Ball.pos.y - BallRadius < g_PaddleLeft.pos.y + PaddleHeight and
       g_Ball.pos.y + BallRadius > g_PaddleLeft.pos.y - PaddleHeight and
       g_Ball.pos.x - BallRadius < g_PaddleLeft.pos.x + PaddleWidth and
       g_Ball.pos.x > g_PaddleLeft.pos.x
    {
        let n     = g_Ball.speed.length()
        let diff  = g_Ball.pos.y - (g_PaddleLeft.pos.y - PaddleHeight)
        let angle = map(diff, 0, PaddleHeight * 2, -toRadians(45'f32), toRadians(45'f32))
        g_Ball.speed.x = n * cos(angle)
        g_Ball.speed.y = n * sin(angle)
        g_Ball.pos.x   = g_PaddleLeft.pos.x + PaddleWidth + BallRadius
    }
    elif g_Ball.pos.y - BallRadius < g_PaddleRight.pos.y + PaddleHeight and
         g_Ball.pos.y + BallRadius > g_PaddleRight.pos.y - PaddleHeight and
         g_Ball.pos.x + BallRadius > g_PaddleRight.pos.x - PaddleWidth and
         g_Ball.pos.x < g_PaddleRight.pos.x
    {
        let n     = g_Ball.speed.length()
        let diff  = g_Ball.pos.y - (g_PaddleRight.pos.y - PaddleHeight)
        let angle = map(diff, 0, PaddleHeight * 2, toRadians(225'f32), toRadians(135'f32))
        g_Ball.speed.x = n * cos(angle)
        g_Ball.speed.y = n * sin(angle)
        g_Ball.pos.x   = g_PaddleRight.pos.x - PaddleWidth - BallRadius
    }

    g_Ball.pos += g_Ball.speed * dt
}

func onEvent(wnd: *Wnd, evt: IEvent)->bool
{
    switch evt
    {
    case CreateEvent:
        g_Rect = wnd.getClientRect()
        g_Font = wnd.getTheme().createDefaultFont(30)
        resetBall()

        g_PaddleLeft.pos.y  = g_Rect.vertCenter() - PaddleHeight * 0.5
        g_PaddleRight.pos.y = g_Rect.vertCenter() - PaddleHeight * 0.5

    case ResizeEvent:
        g_Rect              = wnd.getClientRect()
        g_PaddleLeft.pos.x  = BallRadius + PaddleWidth
        g_PaddleRight.pos.x = g_Rect.right() - BallRadius - PaddleWidth

    case PaintEvent as paintEvt:
        let painter = paintEvt.bc.painter

        updatePaddles(wnd)
        updateBall(wnd)

        painter.fillRect(g_Rect, Argb.Black)

        painter.setParams(.Antialiased)
        painter.drawLine(g_Rect.horzCenter(), 0, g_Rect.horzCenter(), g_Rect.bottom(), Pen.createDash(.Dot, Argb.DarkGray, 10))
        painter.fillCircle(g_Ball.pos.x, g_Ball.pos.y, BallRadius, Argb.White)
        painter.fillRect(g_PaddleLeft.pos.x - PaddleWidth, g_PaddleLeft.pos.y - PaddleHeight, 2 * PaddleWidth, 2 * PaddleHeight, Argb.White)
        painter.fillRect(g_PaddleRight.pos.x - PaddleWidth, g_PaddleRight.pos.y - PaddleHeight, 2 * PaddleWidth, 2 * PaddleHeight, Argb.White)

        var sp: StringPainter
        sp.font(g_Font)
        sp.color(Argb.White)
        sp.horzAlign(.Center)
        sp.vertAlign(.Center)
        sp.draw(painter, {0, 0, 200, 40}, Format.toString("%", g_ScoreLeft))
        sp.draw(painter, {g_Rect.right() - 200, 0, 200, 40}, Format.toString("%", g_ScoreRight))

        wnd.invalidate()
    }

    return false
}

#main
{
    func test(app: *Application) = if Env.hasArg("swag.test"):
        app.maxRunFrame = 100
    Application.runSurface(100, 100, 800, 512, title: "Pong (left: A Q right: P M)", hook: &onEvent, init: &test)
}
