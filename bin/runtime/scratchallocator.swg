#global namespace Swag

impl ScratchAllocator
{
    struct LeakHeader
    {
        prev:   *LeakHeader
        next:   *LeakHeader
        size:   uint
    }

    func align(value: uint, alignement: u32)->uint
    {
        toAlign := alignement orelse @sizeof(*void)
        result := value & ~(toAlign - 1)
        if result < value result += toAlign
        return result
    }

    mtd free(addr: *void, size: uint)
    {
        var req: AllocatorRequest
        req.mode = .Free
        req.address = addr
        req.size = size
        allocator.req(&req)
    }

    mtd alloc(size: uint, alignement: u32 = 0)->*void
    {
        var req: AllocatorRequest
        req.mode = .Alloc
        req.size = size
        req.alignement = alignement
        allocator.req(&req)
        return req.address
    }

    // Release the allocated block
    mtd release()
    {
        freeAll()

        if block
        {
            free(block, capacity)
            block = null
        }
    }

    // Restore all memory
    mtd freeAll()
    {
        used = 0
        while firstLeak
        {
            p := cast(*LeakHeader) firstLeak
            n := p.next
            free(p, p.size)
            firstLeak = n
        }
    }

    // First initialize the allocator, by allocating the main block
    // Will call 'setCapacity'
    mtd setCapacity(allocator: IAllocator)
    {
        c := @gettag("Swag.TempAllocatorSize", uint, 4 * 1024 * 1024)
        setCapacity(c, #self.allocator)
    }

    // This will call 'release' prior to changing the capacity, so this must
    // be called at an early stage
    mtd setCapacity(newCapacity: uint, allocator: IAllocator)
    {
        @assert(#self.allocator != null)
        release()
        self.allocator = #self.allocator
        capacity = newCapacity

        var req: AllocatorRequest
        req.mode = AllocatorMode.Alloc
        req.size = capacity
        self.allocator.req(&req)
        block = req.address
    }
}

impl IAllocator for ScratchAllocator
{
    mtd free(request: *AllocatorRequest)
    {
        if !request.address
            return

        // If this is the last allocated block in the buffer, we can free it
        // by changing the allocated used size
        ptr := (block + used) - request.size
        if ptr == request.address
        {
            request.address = null
            used -= request.size
            return
        }

        // If the pointer is in the buffer, then we are done. We cannot free.
        if request.address >= block and request.address < block + capacity
        {
            request.address = null
            return
        }

        // Otherwise we assume it's a leak. We unlink it, and free it with
        // the allocator
        leak := cast(^LeakHeader) request.address
        leak -= 1
        if !leak.prev
            firstLeak = leak.next
        else
            leak.prev.next = leak.next
        if leak.next
            leak.next.prev = leak.prev
        totalLeak -= leak.size - @sizeof(LeakHeader)
        free(leak, leak.size)
        request.address = null
    }

    mtd req(request: *AllocatorRequest)
    {
        @assert(block != null)
        switch request.mode
        {
        case Free:
            free(request)

        case FreeAll:
            freeAll()

        case Alloc:
            request.address = null
            fallthrough

        case Realloc:
            // Special case
            if request.size == 0
            {
                if request.mode == .Realloc
                    free(request)
                request.address = null
                return
            }

            // Allocate in the buffer if there is enough room
            usedAlign := align(used, request.alignement)
            if usedAlign + request.size <= capacity
            {
                oldAddress := request.address
                request.address = block + usedAlign
                used = usedAlign + request.size
                maxUsed = @max(maxUsed, used)
                if oldAddress
                    @memcpy(request.address, oldAddress, request.oldSize)
                break
            }

            // Otherwise this is a leak
            // We prepend a LeakHeader to the user block, and linked it in
            // the chained list of leak allocations (at the first position)
            totalSize := request.size + @sizeof(LeakHeader)
            ptr  := cast(^LeakHeader) alloc(totalSize, request.alignement)
            leak := cast(^LeakHeader) firstLeak
            if leak leak.prev = ptr
            ptr.prev = null
            ptr.next = firstLeak
            firstLeak = ptr
            ptr.size = totalSize
            request.address = ptr + 1 // user block is after the header
            totalLeak += request.size
            maxLeak = @max(maxLeak, totalLeak)
        }
    }
}