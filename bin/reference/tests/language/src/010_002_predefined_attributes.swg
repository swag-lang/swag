/**
This is the list of predefined attributes.
All are located in the reserved `Swag` namespace.
*/

#global skip

// Can be executed at compile time
#[AttrUsage(AttributeUsage.Function | AttributeUsage.Struct)]
attr ConstExpr()

// On a function or a struct, this will print the associated generated bytecode (right after generation, without bytecode optimizations)
#[AttrUsage(AttributeUsage.Function | AttributeUsage.Struct | AttributeUsage.File)]
attr PrintGenBc()

// On a function or a struct, this will print the associated generated bytecode (after bytecode optimizations)
#[AttrUsage(AttributeUsage.Function | AttributeUsage.Struct | AttributeUsage.File)]
attr PrintBc()

// The following function or variable is only defined at compile time
#[AttrUsage(AttributeUsage.Function | AttributeUsage.GlobalVariable | AttributeUsage.Constant)]
attr Compiler()

// Force a function to be inlined
#[AttrUsage(AttributeUsage.Function)]
attr Inline()

// Never inline the following function.
// This is a hint for the 'llvm' backend.
#[AttrUsage(AttributeUsage.Function)]
attr NoInline()

// The following function is a 'macro'
#[AttrUsage(AttributeUsage.Function)]
attr Macro()

// The following function is a 'mixin'
#[AttrUsage(AttributeUsage.Function)]
attr Mixin()

// Can force an 'opCast' special function to work as implicit
#[AttrUsage(AttributeUsage.Function)]
attr Implicit()

// The following switch must be complete
#[AttrUsage(AttributeUsage.Function)]
attr Complete()

// The following function can be overloaded
#[AttrUsage(AttributeUsage.Function)]
attr Overload()

// A 'return' in the following inlined function must be done in the callee context
#[AttrUsage(AttributeUsage.Function)]
attr CalleeReturn()

// The following function is foreign (imported)
#[AttrUsage(AttributeUsage.Function)]
attr Foreign(module: string, function: string = "")

// The following function accepts that the called does not use its return value
#[AttrUsage(AttributeUsage.Function | AttributeUsage.Variable)]
attr Discardable()

// The following definition is deprecated and should not be used
#[AttrUsage(AttributeUsage.Function | AttributeUsage.Struct | AttributeUsage.Enum | AttributeUsage.EnumValue)]
attr Deprecated(msg: string = null)

// The following function is forced to not be generic, even if defined inside a generic 'struct'.
#[AttrUsage(AttributeUsage.Function)]
attr NotGeneric()

// Put the following global variable in the 'tls' segment.
// A copy of the variable will be available for each thread.
#[AttrUsage(AttributeUsage.GlobalVariable)]
attr Tls()

// 'struct' packing information
#[AttrUsage(AttributeUsage.Struct)]
attr Pack(value: u8)

// The following struct should never be copied
#[AttrUsage(AttributeUsage.Struct)]
attr NoCopy()

// When exporting the following struct,: not export its content
#[AttrUsage(AttributeUsage.Struct)]
attr Opaque()

// Struct field member relocation.
// The field offset in the struct should be the same as the variable 'name'
#[AttrUsage(AttributeUsage.StructVariable)]
attr Offset(name: string)

// The following enum is a set of flags
#[AttrUsage(AttributeUsage.Enum)]
attr EnumFlags()

// The following enum can be used to index arrays without casting
#[AttrUsage(AttributeUsage.Enum)]
attr EnumIndex()

// The following enum can't have duplicated values
#[AttrUsage(AttributeUsage.Enum)]
attr NoDuplicate()

// The following switch is incomplete
#[AttrUsage(AttributeUsage.Enum)]
attr Incomplete()

#[AttrUsage(AttributeUsage.Struct)]
attr ExportType(what: string)

// Do not generate documentation.
#[AttrUsage(AttributeUsage.All | AttributeUsage.File)]
attr NoDoc()

// Enable/Disable one or more safety checks.
// For example:
// ```swag
// #[Swag.Safety("", false)]                    // Disable all
// #[Swag.Safety("boundcheck|nan", false)]      // Disable 'boundcheck' and 'nan' checks
// ```
// Safety checks are:
// | 'boundcheck'   | Check out of bound access
// | 'overflow'     | Check type conversion lost of bits or precision
// | 'math'         | Various math checks (like a negative '@sqrt')
// | 'switch'       | Check an invalid case in a '#[Swag.Complete]' switch
// | 'unreachable'  | Panic if an '@unreachable' instruction is executed
// | 'any'          | Panic if a cast from a 'any' variable does not match the real underlying type
// | 'bool'         | Panic if a 'bool' does not have a valid value ('true' or 'false')
// | 'nan'          | Panic if a 'nan' is used in a float arithmetic operation
// | 'sanity'       | Do a 'sanity' check (per function)
// | 'null'         | Panic on dereferencing some null pointers
// If 'what' is null or empty, every options are will be affected.
#[AttrUsage(AttributeUsage.All | AttributeUsage.File), AttrMulti]
attr Safety(what: string, value: bool)

// Enable/Disable a given function optimization.
// Options are:
// | 'bytecode'   | Enable/Disable bytecode optimization for the function
// | 'backend'    | Enable/Disable backend machine code optimization for the function (llvm only)
// If 'what' is null or empty, every options will be affected.
#[AttrUsage(AttributeUsage.Function | AttributeUsage.File), AttrMulti]
attr Optim(what: string, value: bool)

#[AttrUsage(AttributeUsage.All | AttributeUsage.File)]
attr Overflow(value: bool)

// Warning behavior for [[Warning]] attribute
enum WarningLevel: u8
{
    Enable      // Enable the given warning
    Disable     // Disable the given warning
    Error       // Force the given warning to be raised as an error
}

// Change the behavior of a given warning or list of warnings.
// For example:
// ```swag
// #[Swag.Warning("Wrn0006", Swag.WarningLevel.Error)
// #[Swag.Warning("Wrn0002|Wrn0006", Swag.WarningLevel.Disable)
// #global #[Swag.Warning("Wrn0005", Swag.WarningLevel.Enable)]
// ```
// You can also change the warning behaviors for the whole module in your [[BuildCfg]]
#[AttrUsage(AttributeUsage.All | AttributeUsage.File), AttrMulti]
attr Warning(what: string, level: WarningLevel)

#[AttrUsage(AttributeUsage.All)]
attr Match(what: string, value: bool)

attr Strict()
attr Global()
attr Align(value: u8)