/**
# Predefined Attributes
This is the list of predefined attributes.
All are located in the reserved 'Swag' namespace.
*/

#global skip

/**
# Compile-time & Code Generation
*/

#[AttrUsage(AttributeUsage.Function | AttributeUsage.Struct)]
attr ConstExpr()            // Executable at compile time

// Print generated bytecode right after generation (no optimizations yet)
#[AttrUsage(AttributeUsage.Function | AttributeUsage.Struct | AttributeUsage.File)]
attr PrintGenBc()

// Print generated bytecode after bytecode optimizations
#[AttrUsage(AttributeUsage.Function | AttributeUsage.Struct | AttributeUsage.File)]
attr PrintBc()

// Function or variable exists only at compile time
#[AttrUsage(AttributeUsage.Function | AttributeUsage.GlobalVariable | AttributeUsage.Constant)]
attr Compiler()

/**
# Inlining & Call Semantics
*/

#[AttrUsage(AttributeUsage.Function)]
attr Inline()               // Force inlining

// Hint for the 'llvm' backend to never inline
#[AttrUsage(AttributeUsage.Function)]
attr NoInline()

#[AttrUsage(AttributeUsage.Function)]
attr CalleeReturn()         // 'return' in inlined function returns from caller

/**
# Metaprogramming
*/

#[AttrUsage(AttributeUsage.Function)]
attr Macro()                // Function is a macro

#[AttrUsage(AttributeUsage.Function)]
attr Mixin()                // Function is a mixin

/**
# Casting & Overloads & Switches
*/

#[AttrUsage(AttributeUsage.Function)]
attr Implicit()             // Allow 'opCast' to be implicit

#[AttrUsage(AttributeUsage.Function)]
attr Complete()             // Following switch must be complete

#[AttrUsage(AttributeUsage.Function)]
attr Overload()             // Function can be overloaded

/**
# Foreign Interop
*/

#[AttrUsage(AttributeUsage.Function)]
attr Foreign(module: string, function: string = '') // Imported function

/**
# Result Usage & Deprecation & Generic Control
*/

#[AttrUsage(AttributeUsage.Function | AttributeUsage.Variable)]
attr Discardable()          // Allow caller to ignore return value

#[AttrUsage(AttributeUsage.Function | AttributeUsage.Struct | AttributeUsage.Enum | AttributeUsage.EnumValue)]
attr Deprecated(msg: string = null) // Mark definition as deprecated

// Force function to not be generic, even inside a generic struct
#[AttrUsage(AttributeUsage.Function)]
attr NotGeneric()

/**
# Memory & Layout (Globals and Structs)
*/

#[AttrUsage(AttributeUsage.GlobalVariable)]
attr Tls()                  // Put global variable in TLS segment

#[AttrUsage(AttributeUsage.Struct)]
attr Pack(value: u8)        // Struct packing information

#[AttrUsage(AttributeUsage.Struct)]
attr NoCopy()               // Struct should never be copied

#[AttrUsage(AttributeUsage.Struct)]
attr Opaque()               // When exporting, do not export struct content

// Field member relocation: field offset matches variable 'name'
#[AttrUsage(AttributeUsage.StructVariable)]
attr Offset(name: string)

/**
# Enum Constraints
*/

#[AttrUsage(AttributeUsage.Enum)]
attr EnumFlags()            // Enum represents a set of flags

#[AttrUsage(AttributeUsage.Enum)]
attr EnumIndex()            // Enum can index arrays without casting

#[AttrUsage(AttributeUsage.Enum)]
attr NoDuplicate()          // Enum values must be unique

#[AttrUsage(AttributeUsage.Enum)]
attr Incomplete()           // Following switch is incomplete

/**
# Module Export & Documentation
*/

#[AttrUsage(AttributeUsage.Struct)]
attr ExportType(what: string)

#[AttrUsage(AttributeUsage.All | AttributeUsage.File)]
attr NoDoc()                // Do not generate documentation

/**
# Safety Controls
Enable or disable safety checks.
Examples:
```
#[Swag.Safety('', false)]                 // Disable all checks
#[Swag.Safety('boundcheck|nan', false)]   // Disable 'boundcheck' and 'nan'
```
Checks:
* 'boundcheck'  -> Out-of-bounds access
* 'overflow'    -> Loss on type conversion
* 'math'        -> Math checks (e.g., negative '@sqrt')
* 'switch'      -> Invalid case in '#[Swag.Complete]' switch
* 'unreachable' -> Panic on '@unreachable'
* 'any'         -> Panic if 'any' cast mismatches runtime type
* 'bool'        -> Panic if 'bool' is not 'true' or 'false'
* 'nan'         -> Panic if 'nan' used in float arithmetic
* 'sanity'      -> Per-function sanity check
* 'null'        -> Panic on dereferencing null pointers
If 'what' is null or empty, every option will be affected.
*/
#[AttrUsage(AttributeUsage.All | AttributeUsage.File), AttrMulti]
attr Safety(what: string, value: bool)

/**
# Optimization Controls
Enable or disable optimizations.
Options:
* 'bytecode' -> Toggle bytecode optimization
* 'backend'  -> Toggle backend machine code optimization ('llvm' only)
If 'what' is null or empty, every option will be affected.
*/
#[AttrUsage(AttributeUsage.Function | AttributeUsage.File), AttrMulti]
attr Optimize(what: string, value: bool)

/**
# Arithmetic Behavior
*/

#[AttrUsage(AttributeUsage.All | AttributeUsage.File)]
attr CanOverflow(value: bool)

/**
# Warning Controls
*/

enum WarningLevel: u8
{
    Enable      // Enable the given warning
    Disable     // Disable the given warning
    Error       // Raise the given warning as an error
}

// Change behavior of one or more warnings.
// Examples:
// ```
// #[Swag.Warning('Wrn0006', Swag.WarningLevel.Error)]
// #[Swag.Warning('Wrn0002|Wrn0006', Swag.WarningLevel.Disable)]
// #global #[Swag.Warning('Wrn0005', Swag.WarningLevel.Enable)]
// ```
// You can also configure module-wide behavior in your 'BuildCfg'.
#[AttrUsage(AttributeUsage.All | AttributeUsage.File), AttrMulti]
attr Warning(what: string, level: WarningLevel)

/**
# Matching & Misc
*/

#[AttrUsage(AttributeUsage.All)]
attr Match(what: string, value: bool)

attr Strict()
attr Global()
attr Align(value: u8)
