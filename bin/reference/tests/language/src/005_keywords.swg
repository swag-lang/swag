/**
This is the list of all keywords in the language.

# Special keywords
Keywords are predefined, reserved identifiers that have special meanings to the compiler. They can't be used as identifiers in your program.
```swag
if
else
elif
switch
case
default
break
continue
fallthrough
unreachable
for
loop
while
visit
return
defer
and
or
orelse
to
until

false
true
null
undefined
retval

const
var
let
ref
moveref
acast
cast
assume
try
catch
throw
closure
func
mtd
attr
enum
struct
union
namespace
impl
public
internal
private
interface
using
typealias
namealias
discard
dref
```
# Reserved keywords
These keywords are reserved by the language, just in case...
```swag
is
in
not
```
# Basic types
These are all the native types of the language. All are reserved keywords too.
```swag
s8
s16
s32
s64
u8
u16
u32
u64
f32
f64
bool
string
rune
any
typeinfo
void
code
cstring
cvarargs
```
# Compiler keywords
Compiler keywords always start with '#'. As user identifiers cannot start the same way, compiler keywords will never collide with user identifiers.
```swag
#arch
#backend
#callerfunction
#callerlocation
#cfg
#code
#file
#line
#location
#module
#os
#self
#swagbuildnum
#swagos
#swagrevision
#swagversion
#up

#assert
#elif
#else
#error
#global
#if
#import
#load
#macro
#mixin
#placeholder
#print
#validifx
#validif
#warning
#scope

#type

#ast
#drop
#init
#main
#message
#premain
#run
```
# Misc intrinsics
Intrisic keywords always start with '@'. As user identifiers cannot start the same way, intrinsics keywords will never collide with user identifiers.
```swag
#index
@err
#alias0
#alias1
#alias2 // and more generally #aliasN
@alignof
@args
@assert
@breakpoint
@compiler
@countof
@dataof
@dbgalloc
@defined
@include
@drop
@compilererror
@compilerwarning
@getcontext
@pinfos
@gettag
@hastag
@init
@isbytecode
@isconstexpr
@itftableof
@kindof
@location
#mixin0
#mixin1
#mixin2 // and more generally @mixinN
@mkany
@mkcallback
@mkinterface
@mkslice
@mkstring
@decltype
@modules
@nameof
@offsetof
@panic
@postcopy
@postmove
@print
@rtflags
@safety
@setcontext
@sizeof
@spread
@stringcmp
@stringof
@sysalloc
@typecmp
@typeof
```
# Intrinsics libc
```swag
@abs
@acos
@alloc
@asin
@atan
@atomadd
@atomand
@atomcmpxchg
@atomor
@atomxchg
@atomxor
@bitcountlz
@bitcountnz
@bitcounttz
@byteswap
@ceil
@cos
@cosh
@cvaarg
@cvaend
@cvastart
@exp
@exp2
@floor
@free
@log
@log10
@log2
@max
@memcmp
@memcpy
@memmove
@memset
@muladd
@min
@pow
@realloc
@round
@sin
@sinh
@sqrt
@strcmp
@strlen
@tan
@tanh
@trunc
```
*/

/**
# Modifiers
Modifiers can be applied to some specific keywords or operators to change their behaviours.
```swag
,up
,over
,nodrop
,move
,moveraw
,bit
,unconst
,back
```
*/